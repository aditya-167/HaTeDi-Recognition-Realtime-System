
MNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00137eb8  08018008  08018008  00028008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0814fec0  0814fec0  00160a9c  2**0
                  CONTENTS
  4 .ARM          00000008  0814fec0  0814fec0  0015fec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0814fec8  0814fec8  00160a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0814fec8  0814fec8  0015fec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0814fecc  0814fecc  0015fecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a9c  20000000  0814fed0  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019540  20000a9c  0815096c  00160a9c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20019fdc  0815096c  00169fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00160a9c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001de4a  00000000  00000000  00160ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00026dbc  00000000  00000000  0017e91a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004fdd  00000000  00000000  001a56d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d58  00000000  00000000  001aa6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f66d8  00000000  00000000  001ac410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ad0  00000000  00000000  002a2ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002c967  00000000  00000000  002a45b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000061a1  00000000  00000000  002d0f1f  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001e7  00000000  00000000  002d70c0  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  002d72a8  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000d9c4  00000000  00000000  002d72cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a9c 	.word	0x20000a9c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017ff0 	.word	0x08017ff0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000aa0 	.word	0x20000aa0
 80001ec:	08017ff0 	.word	0x08017ff0

080001f0 <_ai_platform_get_io_buffers_info>:
 80001f0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001f4:	2500      	movs	r5, #0
 80001f6:	46aa      	mov	sl, r5
 80001f8:	b082      	sub	sp, #8
 80001fa:	4607      	mov	r7, r0
 80001fc:	46ab      	mov	fp, r5
 80001fe:	46d0      	mov	r8, sl
 8000200:	46d1      	mov	r9, sl
 8000202:	e028      	b.n	8000256 <_ai_platform_get_io_buffers_info+0x66>
 8000204:	2000      	movs	r0, #0
 8000206:	e01c      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>
 8000208:	f850 400a 	ldr.w	r4, [r0, sl]
 800020c:	b364      	cbz	r4, 8000268 <_ai_platform_get_io_buffers_info+0x78>
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	6841      	ldr	r1, [r0, #4]
 8000212:	6880      	ldr	r0, [r0, #8]
 8000214:	4440      	add	r0, r8
 8000216:	eb01 0609 	add.w	r6, r1, r9
 800021a:	9000      	str	r0, [sp, #0]
 800021c:	69a1      	ldr	r1, [r4, #24]
 800021e:	6808      	ldr	r0, [r1, #0]
 8000220:	f005 fd58 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000224:	6030      	str	r0, [r6, #0]
 8000226:	2101      	movs	r1, #1
 8000228:	80b1      	strh	r1, [r6, #4]
 800022a:	68e0      	ldr	r0, [r4, #12]
 800022c:	68c1      	ldr	r1, [r0, #12]
 800022e:	80f1      	strh	r1, [r6, #6]
 8000230:	6882      	ldr	r2, [r0, #8]
 8000232:	8132      	strh	r2, [r6, #8]
 8000234:	6840      	ldr	r0, [r0, #4]
 8000236:	60f0      	str	r0, [r6, #12]
 8000238:	69a1      	ldr	r1, [r4, #24]
 800023a:	688a      	ldr	r2, [r1, #8]
 800023c:	6132      	str	r2, [r6, #16]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	b9e0      	cbnz	r0, 800027c <_ai_platform_get_io_buffers_info+0x8c>
 8000242:	6170      	str	r0, [r6, #20]
 8000244:	1c6d      	adds	r5, r5, #1
 8000246:	f10b 0b01 	add.w	fp, fp, #1
 800024a:	f109 0918 	add.w	r9, r9, #24
 800024e:	f108 0808 	add.w	r8, r8, #8
 8000252:	f10a 0a04 	add.w	sl, sl, #4
 8000256:	2f00      	cmp	r7, #0
 8000258:	bf14      	ite	ne
 800025a:	8838      	ldrhne	r0, [r7, #0]
 800025c:	2000      	moveq	r0, #0
 800025e:	4583      	cmp	fp, r0
 8000260:	d202      	bcs.n	8000268 <_ai_platform_get_io_buffers_info+0x78>
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	2800      	cmp	r0, #0
 8000266:	d1cf      	bne.n	8000208 <_ai_platform_get_io_buffers_info+0x18>
 8000268:	b2a8      	uxth	r0, r5
 800026a:	b118      	cbz	r0, 8000274 <_ai_platform_get_io_buffers_info+0x84>
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	6002      	str	r2, [r0, #0]
 8000274:	b2a8      	uxth	r0, r5
 8000276:	b003      	add	sp, #12
 8000278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800027c:	9900      	ldr	r1, [sp, #0]
 800027e:	2000      	movs	r0, #0
 8000280:	6008      	str	r0, [r1, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
 8000284:	6820      	ldr	r0, [r4, #0]
 8000286:	6050      	str	r0, [r2, #4]
 8000288:	2800      	cmp	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	8840      	ldrhne	r0, [r0, #2]
 800028e:	2800      	cmpne	r0, #0
 8000290:	d0b8      	beq.n	8000204 <_ai_platform_get_io_buffers_info+0x14>
 8000292:	9800      	ldr	r0, [sp, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	6001      	str	r1, [r0, #0]
 8000298:	9800      	ldr	r0, [sp, #0]
 800029a:	e7d2      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>

0800029c <_platform_network_state_setup>:
 800029c:	b430      	push	{r4, r5}
 800029e:	68d3      	ldr	r3, [r2, #12]
 80002a0:	6955      	ldr	r5, [r2, #20]
 80002a2:	68dc      	ldr	r4, [r3, #12]
 80002a4:	68eb      	ldr	r3, [r5, #12]
 80002a6:	435c      	muls	r4, r3
 80002a8:	6084      	str	r4, [r0, #8]
 80002aa:	888d      	ldrh	r5, [r1, #4]
 80002ac:	436c      	muls	r4, r5
 80002ae:	60c4      	str	r4, [r0, #12]
 80002b0:	6909      	ldr	r1, [r1, #16]
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	6041      	str	r1, [r0, #4]
 80002b6:	4419      	add	r1, r3
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	6814      	ldr	r4, [r2, #0]
 80002be:	00a1      	lsls	r1, r4, #2
 80002c0:	d407      	bmi.n	80002d2 <_platform_network_state_setup+0x36>
 80002c2:	6894      	ldr	r4, [r2, #8]
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	6843      	ldr	r3, [r0, #4]
 80002c8:	1a64      	subs	r4, r4, r1
 80002ca:	1919      	adds	r1, r3, r4
 80002cc:	6091      	str	r1, [r2, #8]
 80002ce:	6840      	ldr	r0, [r0, #4]
 80002d0:	60d0      	str	r0, [r2, #12]
 80002d2:	bc30      	pop	{r4, r5}
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_runtime_get_revision>:
 80002d6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000aec <.text_18>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000af0 <.text_19>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_runtime_get_revision+0x14>
 80002f0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000af4 <.text_20>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_21>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_runtime_get_revision+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_runtime_get_revision+0x2a>
 8000302:	a0ad      	add	r0, pc, #692	; (adr r0, 80005b8 <.text_13>)
 8000304:	4770      	bx	lr

08000306 <ai_platform_runtime_get_version>:
 8000306:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000aec <.text_18>
 800030a:	6801      	ldr	r1, [r0, #0]
 800030c:	0849      	lsrs	r1, r1, #1
 800030e:	0049      	lsls	r1, r1, #1
 8000310:	6001      	str	r1, [r0, #0]
 8000312:	2001      	movs	r0, #1
 8000314:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000af0 <.text_19>
 8000318:	6088      	str	r0, [r1, #8]
 800031a:	6888      	ldr	r0, [r1, #8]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1fc      	bne.n	800031a <ai_platform_runtime_get_version+0x14>
 8000320:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000af4 <.text_20>
 8000324:	600a      	str	r2, [r1, #0]
 8000326:	6808      	ldr	r0, [r1, #0]
 8000328:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000af8 <.text_21>
 800032c:	4288      	cmp	r0, r1
 800032e:	d000      	beq.n	8000332 <ai_platform_runtime_get_version+0x2c>
 8000330:	e7fe      	b.n	8000330 <ai_platform_runtime_get_version+0x2a>
 8000332:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000336:	6810      	ldr	r0, [r2, #0]
 8000338:	4770      	bx	lr

0800033a <ai_platform_api_get_version>:
 800033a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000aec <.text_18>
 800033e:	6801      	ldr	r1, [r0, #0]
 8000340:	0849      	lsrs	r1, r1, #1
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	6001      	str	r1, [r0, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000af0 <.text_19>
 800034c:	6088      	str	r0, [r1, #8]
 800034e:	6888      	ldr	r0, [r1, #8]
 8000350:	2800      	cmp	r0, #0
 8000352:	d1fc      	bne.n	800034e <ai_platform_api_get_version+0x14>
 8000354:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000af4 <.text_20>
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	6808      	ldr	r0, [r1, #0]
 800035c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000af8 <.text_21>
 8000360:	4288      	cmp	r0, r1
 8000362:	d000      	beq.n	8000366 <ai_platform_api_get_version+0x2c>
 8000364:	e7fe      	b.n	8000364 <ai_platform_api_get_version+0x2a>
 8000366:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800036a:	6810      	ldr	r0, [r2, #0]
 800036c:	4770      	bx	lr

0800036e <ai_platform_interface_api_get_version>:
 800036e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000aec <.text_18>
 8000372:	6801      	ldr	r1, [r0, #0]
 8000374:	0849      	lsrs	r1, r1, #1
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	6001      	str	r1, [r0, #0]
 800037a:	2001      	movs	r0, #1
 800037c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000af0 <.text_19>
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6888      	ldr	r0, [r1, #8]
 8000384:	2800      	cmp	r0, #0
 8000386:	d1fc      	bne.n	8000382 <ai_platform_interface_api_get_version+0x14>
 8000388:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000af4 <.text_20>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6808      	ldr	r0, [r1, #0]
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_21>
 8000394:	4288      	cmp	r0, r1
 8000396:	d000      	beq.n	800039a <ai_platform_interface_api_get_version+0x2c>
 8000398:	e7fe      	b.n	8000398 <ai_platform_interface_api_get_version+0x2a>
 800039a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800039e:	6810      	ldr	r0, [r2, #0]
 80003a0:	4770      	bx	lr

080003a2 <ai_platform_context_acquire>:
 80003a2:	b120      	cbz	r0, 80003ae <ai_platform_context_acquire+0xc>
 80003a4:	6801      	ldr	r1, [r0, #0]
 80003a6:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000afc <.text_22>
 80003aa:	4291      	cmp	r1, r2
 80003ac:	d000      	beq.n	80003b0 <ai_platform_context_acquire+0xe>
 80003ae:	2000      	movs	r0, #0
 80003b0:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000aec <.text_18>
 80003b4:	680a      	ldr	r2, [r1, #0]
 80003b6:	0852      	lsrs	r2, r2, #1
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	600a      	str	r2, [r1, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000af0 <.text_19>
 80003c2:	6091      	str	r1, [r2, #8]
 80003c4:	6891      	ldr	r1, [r2, #8]
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d1fc      	bne.n	80003c4 <ai_platform_context_acquire+0x22>
 80003ca:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000af4 <.text_20>
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000af8 <.text_21>
 80003d6:	4291      	cmp	r1, r2
 80003d8:	d000      	beq.n	80003dc <ai_platform_context_acquire+0x3a>
 80003da:	e7fe      	b.n	80003da <ai_platform_context_acquire+0x38>
 80003dc:	4770      	bx	lr

080003de <ai_platform_context_release>:
 80003de:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000afc <.text_22>
 80003e2:	6001      	str	r1, [r0, #0]
 80003e4:	4770      	bx	lr

080003e6 <ai_platform_network_get_error>:
 80003e6:	b120      	cbz	r0, 80003f2 <ai_platform_network_get_error+0xc>
 80003e8:	6801      	ldr	r1, [r0, #0]
 80003ea:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000afc <.text_22>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d000      	beq.n	80003f4 <ai_platform_network_get_error+0xe>
 80003f2:	2000      	movs	r0, #0
 80003f4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000aec <.text_18>
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	0852      	lsrs	r2, r2, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	600a      	str	r2, [r1, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000af0 <.text_19>
 8000406:	6091      	str	r1, [r2, #8]
 8000408:	6891      	ldr	r1, [r2, #8]
 800040a:	2900      	cmp	r1, #0
 800040c:	d1fc      	bne.n	8000408 <ai_platform_network_get_error+0x22>
 800040e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000af4 <.text_20>
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000af8 <.text_21>
 800041a:	4291      	cmp	r1, r2
 800041c:	d000      	beq.n	8000420 <ai_platform_network_get_error+0x3a>
 800041e:	e7fe      	b.n	800041e <ai_platform_network_get_error+0x38>
 8000420:	2800      	cmp	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	3010      	addne	r0, #16
 8000426:	f000 bb83 	bne.w	8000b30 <core_get_error>
 800042a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800042e:	6800      	ldr	r0, [r0, #0]
 8000430:	4770      	bx	lr

08000432 <ai_platform_network_set_error>:
 8000432:	2800      	cmp	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	3010      	addne	r0, #16
 8000438:	f000 bb7f 	bne.w	8000b3a <core_set_error>
 800043c:	4770      	bx	lr

0800043e <ai_platform_api_get_network_report>:
 800043e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000442:	ea5f 0900 	movs.w	r9, r0
 8000446:	b081      	sub	sp, #4
 8000448:	460c      	mov	r4, r1
 800044a:	d005      	beq.n	8000458 <ai_platform_api_get_network_report+0x1a>
 800044c:	f8d9 0000 	ldr.w	r0, [r9]
 8000450:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000afc <.text_22>
 8000454:	4288      	cmp	r0, r1
 8000456:	d001      	beq.n	800045c <ai_platform_api_get_network_report+0x1e>
 8000458:	f04f 0900 	mov.w	r9, #0
 800045c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000aec <.text_18>
 8000460:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000af0 <.text_19>
 8000464:	6828      	ldr	r0, [r5, #0]
 8000466:	0840      	lsrs	r0, r0, #1
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	6028      	str	r0, [r5, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	60b1      	str	r1, [r6, #8]
 8000470:	68b0      	ldr	r0, [r6, #8]
 8000472:	2800      	cmp	r0, #0
 8000474:	d1fc      	bne.n	8000470 <ai_platform_api_get_network_report+0x32>
 8000476:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000af4 <.text_20>
 800047a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000af8 <.text_21>
 800047e:	6037      	str	r7, [r6, #0]
 8000480:	6830      	ldr	r0, [r6, #0]
 8000482:	4540      	cmp	r0, r8
 8000484:	d000      	beq.n	8000488 <ai_platform_api_get_network_report+0x4a>
 8000486:	e7fe      	b.n	8000486 <ai_platform_api_get_network_report+0x48>
 8000488:	f1b9 0f00 	cmp.w	r9, #0
 800048c:	bf18      	it	ne
 800048e:	2c00      	cmpne	r4, #0
 8000490:	d034      	beq.n	80004fc <ai_platform_api_get_network_report+0xbe>
 8000492:	2000      	movs	r0, #0
 8000494:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000496:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800049a:	b152      	cbz	r2, 80004b2 <ai_platform_api_get_network_report+0x74>
 800049c:	e000      	b.n	80004a0 <ai_platform_api_get_network_report+0x62>
 800049e:	4602      	mov	r2, r0
 80004a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80004a2:	1c49      	adds	r1, r1, #1
 80004a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80004a6:	68d0      	ldr	r0, [r2, #12]
 80004a8:	4282      	cmp	r2, r0
 80004aa:	bf18      	it	ne
 80004ac:	2800      	cmpne	r0, #0
 80004ae:	d1f6      	bne.n	800049e <ai_platform_api_get_network_report+0x60>
 80004b0:	b911      	cbnz	r1, 80004b8 <ai_platform_api_get_network_report+0x7a>
 80004b2:	2218      	movs	r2, #24
 80004b4:	2111      	movs	r1, #17
 80004b6:	e01d      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004b8:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004bc:	b108      	cbz	r0, 80004c2 <ai_platform_api_get_network_report+0x84>
 80004be:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	f7ff fe93 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ca:	8620      	strh	r0, [r4, #48]	; 0x30
 80004cc:	b910      	cbnz	r0, 80004d4 <ai_platform_api_get_network_report+0x96>
 80004ce:	2218      	movs	r2, #24
 80004d0:	2112      	movs	r1, #18
 80004d2:	e00f      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004d4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004d8:	2802      	cmp	r0, #2
 80004da:	bfa6      	itte	ge
 80004dc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004e0:	300c      	addge	r0, #12
 80004e2:	2000      	movlt	r0, #0
 80004e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004e8:	f7ff fe82 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ec:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ee:	b948      	cbnz	r0, 8000504 <ai_platform_api_get_network_report+0xc6>
 80004f0:	2218      	movs	r2, #24
 80004f2:	2113      	movs	r1, #19
 80004f4:	f109 0010 	add.w	r0, r9, #16
 80004f8:	f000 fb1f 	bl	8000b3a <core_set_error>
 80004fc:	2000      	movs	r0, #0
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000504:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000508:	6720      	str	r0, [r4, #112]	; 0x70
 800050a:	f109 0230 	add.w	r2, r9, #48	; 0x30
 800050e:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 8000512:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000516:	f109 0918 	add.w	r9, r9, #24
 800051a:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 800051e:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000522:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000526:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800052a:	6828      	ldr	r0, [r5, #0]
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	0040      	lsls	r0, r0, #1
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	60b3      	str	r3, [r6, #8]
 8000536:	68b0      	ldr	r0, [r6, #8]
 8000538:	2800      	cmp	r0, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_api_get_network_report+0xf8>
 800053c:	6037      	str	r7, [r6, #0]
 800053e:	6831      	ldr	r1, [r6, #0]
 8000540:	4541      	cmp	r1, r8
 8000542:	d000      	beq.n	8000546 <ai_platform_api_get_network_report+0x108>
 8000544:	e7fe      	b.n	8000544 <ai_platform_api_get_network_report+0x106>
 8000546:	a01c      	add	r0, pc, #112	; (adr r0, 80005b8 <.text_13>)
 8000548:	6120      	str	r0, [r4, #16]
 800054a:	6829      	ldr	r1, [r5, #0]
 800054c:	0849      	lsrs	r1, r1, #1
 800054e:	0049      	lsls	r1, r1, #1
 8000550:	6029      	str	r1, [r5, #0]
 8000552:	60b3      	str	r3, [r6, #8]
 8000554:	68b0      	ldr	r0, [r6, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_network_report+0x116>
 800055a:	6037      	str	r7, [r6, #0]
 800055c:	6831      	ldr	r1, [r6, #0]
 800055e:	4541      	cmp	r1, r8
 8000560:	d000      	beq.n	8000564 <ai_platform_api_get_network_report+0x126>
 8000562:	e7fe      	b.n	8000562 <ai_platform_api_get_network_report+0x124>
 8000564:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	6162      	str	r2, [r4, #20]
 800056c:	6829      	ldr	r1, [r5, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6029      	str	r1, [r5, #0]
 8000574:	60b3      	str	r3, [r6, #8]
 8000576:	68b0      	ldr	r0, [r6, #8]
 8000578:	2800      	cmp	r0, #0
 800057a:	d1fc      	bne.n	8000576 <ai_platform_api_get_network_report+0x138>
 800057c:	6037      	str	r7, [r6, #0]
 800057e:	6831      	ldr	r1, [r6, #0]
 8000580:	4541      	cmp	r1, r8
 8000582:	d000      	beq.n	8000586 <ai_platform_api_get_network_report+0x148>
 8000584:	e7fe      	b.n	8000584 <ai_platform_api_get_network_report+0x146>
 8000586:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800058a:	6802      	ldr	r2, [r0, #0]
 800058c:	6262      	str	r2, [r4, #36]	; 0x24
 800058e:	6829      	ldr	r1, [r5, #0]
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	0049      	lsls	r1, r1, #1
 8000594:	6029      	str	r1, [r5, #0]
 8000596:	60b3      	str	r3, [r6, #8]
 8000598:	68b0      	ldr	r0, [r6, #8]
 800059a:	2800      	cmp	r0, #0
 800059c:	d1fc      	bne.n	8000598 <ai_platform_api_get_network_report+0x15a>
 800059e:	6037      	str	r7, [r6, #0]
 80005a0:	6831      	ldr	r1, [r6, #0]
 80005a2:	4541      	cmp	r1, r8
 80005a4:	d000      	beq.n	80005a8 <ai_platform_api_get_network_report+0x16a>
 80005a6:	e7fe      	b.n	80005a6 <ai_platform_api_get_network_report+0x168>
 80005a8:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	2001      	movs	r0, #1
 80005b2:	b001      	add	sp, #4
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005b8 <.text_13>:
 80005b8:	00000000 	.word	0x00000000

080005bc <ai_platform_network_create>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	9d04      	ldr	r5, [sp, #16]
 80005c0:	4604      	mov	r4, r0
 80005c2:	9805      	ldr	r0, [sp, #20]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005d0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005d4:	6806      	ldr	r6, [r0, #0]
 80005d6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000aec <.text_18>
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000af0 <.text_19>
 80005e8:	6088      	str	r0, [r1, #8]
 80005ea:	6888      	ldr	r0, [r1, #8]
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1fc      	bne.n	80005ea <ai_platform_network_create+0x2e>
 80005f0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000af4 <.text_20>
 80005f4:	600b      	str	r3, [r1, #0]
 80005f6:	6808      	ldr	r0, [r1, #0]
 80005f8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000af8 <.text_21>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d000      	beq.n	8000602 <ai_platform_network_create+0x46>
 8000600:	e7fe      	b.n	8000600 <ai_platform_network_create+0x44>
 8000602:	b91c      	cbnz	r4, 800060c <ai_platform_network_create+0x50>
 8000604:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 8000608:	6800      	ldr	r0, [r0, #0]
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000afc <.text_22>
 8000610:	6011      	str	r1, [r2, #0]
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	f000 fa8a 	bl	8000b2c <core_init>
 8000618:	b910      	cbnz	r0, 8000620 <ai_platform_network_create+0x64>
 800061a:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 800061e:	e00d      	b.n	800063c <ai_platform_network_create+0x80>
 8000620:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000b00 <.text_23>
 8000624:	428d      	cmp	r5, r1
 8000626:	bf28      	it	cs
 8000628:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800062c:	d206      	bcs.n	800063c <ai_platform_network_create+0x80>
 800062e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000632:	f000 fa97 	bl	8000b64 <ai_check_custom_types>
 8000636:	b920      	cbnz	r0, 8000642 <ai_platform_network_create+0x86>
 8000638:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800063c:	6806      	ldr	r6, [r0, #0]
 800063e:	2100      	movs	r1, #0
 8000640:	6021      	str	r1, [r4, #0]
 8000642:	4630      	mov	r0, r6
 8000644:	bd70      	pop	{r4, r5, r6, pc}

08000646 <ai_platform_network_destroy>:
 8000646:	b130      	cbz	r0, 8000656 <ai_platform_network_destroy+0x10>
 8000648:	6801      	ldr	r1, [r0, #0]
 800064a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000afc <.text_22>
 800064e:	4291      	cmp	r1, r2
 8000650:	bf08      	it	eq
 8000652:	4602      	moveq	r2, r0
 8000654:	d000      	beq.n	8000658 <ai_platform_network_destroy+0x12>
 8000656:	2200      	movs	r2, #0
 8000658:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000aec <.text_18>
 800065c:	680b      	ldr	r3, [r1, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000af0 <.text_19>
 800066a:	6099      	str	r1, [r3, #8]
 800066c:	6899      	ldr	r1, [r3, #8]
 800066e:	2900      	cmp	r1, #0
 8000670:	d1fc      	bne.n	800066c <ai_platform_network_destroy+0x26>
 8000672:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000af4 <.text_20>
 8000676:	f8c3 c000 	str.w	ip, [r3]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000af8 <.text_21>
 8000680:	4299      	cmp	r1, r3
 8000682:	d000      	beq.n	8000686 <ai_platform_network_destroy+0x40>
 8000684:	e7fe      	b.n	8000684 <ai_platform_network_destroy+0x3e>
 8000686:	b102      	cbz	r2, 800068a <ai_platform_network_destroy+0x44>
 8000688:	2000      	movs	r0, #0
 800068a:	4770      	bx	lr

0800068c <ai_platform_network_init>:
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b081      	sub	sp, #4
 8000692:	460a      	mov	r2, r1
 8000694:	b120      	cbz	r0, 80006a0 <ai_platform_network_init+0x14>
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000afc <.text_22>
 800069c:	4299      	cmp	r1, r3
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_init+0x16>
 80006a0:	2000      	movs	r0, #0
 80006a2:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000aec <.text_18>
 80006a6:	680b      	ldr	r3, [r1, #0]
 80006a8:	085b      	lsrs	r3, r3, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000af0 <.text_19>
 80006b4:	6099      	str	r1, [r3, #8]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d1fc      	bne.n	80006b6 <ai_platform_network_init+0x2a>
 80006bc:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000af4 <.text_20>
 80006c0:	601c      	str	r4, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000af8 <.text_21>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d000      	beq.n	80006ce <ai_platform_network_init+0x42>
 80006cc:	e7fe      	b.n	80006cc <ai_platform_network_init+0x40>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d035      	beq.n	800073e <ai_platform_network_init+0xb2>
 80006d2:	b90a      	cbnz	r2, 80006d8 <ai_platform_network_init+0x4c>
 80006d4:	2211      	movs	r2, #17
 80006d6:	e012      	b.n	80006fe <ai_platform_network_init+0x72>
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006dc:	b939      	cbnz	r1, 80006ee <ai_platform_network_init+0x62>
 80006de:	8c11      	ldrh	r1, [r2, #32]
 80006e0:	8bd5      	ldrh	r5, [r2, #30]
 80006e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006e4:	4369      	muls	r1, r5
 80006e6:	4361      	muls	r1, r4
 80006e8:	bf18      	it	ne
 80006ea:	2213      	movne	r2, #19
 80006ec:	d107      	bne.n	80006fe <ai_platform_network_init+0x72>
 80006ee:	b973      	cbnz	r3, 800070e <ai_platform_network_init+0x82>
 80006f0:	8911      	ldrh	r1, [r2, #8]
 80006f2:	88d4      	ldrh	r4, [r2, #6]
 80006f4:	68d3      	ldr	r3, [r2, #12]
 80006f6:	4361      	muls	r1, r4
 80006f8:	4359      	muls	r1, r3
 80006fa:	d008      	beq.n	800070e <ai_platform_network_init+0x82>
 80006fc:	2212      	movs	r2, #18
 80006fe:	2110      	movs	r1, #16
 8000700:	3010      	adds	r0, #16
 8000702:	f000 fa1a 	bl	8000b3a <core_set_error>
 8000706:	2000      	movs	r0, #0
 8000708:	b001      	add	sp, #4
 800070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070e:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000712:	f100 0118 	add.w	r1, r0, #24
 8000716:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800071a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 800071e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000722:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000726:	2103      	movs	r1, #3
 8000728:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800072a:	60c1      	str	r1, [r0, #12]
 800072c:	b13a      	cbz	r2, 800073e <ai_platform_network_init+0xb2>
 800072e:	e000      	b.n	8000732 <ai_platform_network_init+0xa6>
 8000730:	460a      	mov	r2, r1
 8000732:	68d1      	ldr	r1, [r2, #12]
 8000734:	6090      	str	r0, [r2, #8]
 8000736:	428a      	cmp	r2, r1
 8000738:	bf18      	it	ne
 800073a:	2900      	cmpne	r1, #0
 800073c:	d1f8      	bne.n	8000730 <ai_platform_network_init+0xa4>
 800073e:	b001      	add	sp, #4
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <ai_platform_network_process>:
 8000744:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	460a      	mov	r2, r1
 800074c:	b120      	cbz	r0, 8000758 <ai_platform_network_process+0x14>
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000afc <.text_22>
 8000754:	4299      	cmp	r1, r3
 8000756:	d000      	beq.n	800075a <ai_platform_network_process+0x16>
 8000758:	2000      	movs	r0, #0
 800075a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000aec <.text_18>
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	2101      	movs	r1, #1
 8000768:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000af0 <.text_19>
 800076c:	6099      	str	r1, [r3, #8]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	2900      	cmp	r1, #0
 8000772:	d1fc      	bne.n	800076e <ai_platform_network_process+0x2a>
 8000774:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000af4 <.text_20>
 8000778:	601c      	str	r4, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000af8 <.text_21>
 8000780:	4299      	cmp	r1, r3
 8000782:	d000      	beq.n	8000786 <ai_platform_network_process+0x42>
 8000784:	e7fe      	b.n	8000784 <ai_platform_network_process+0x40>
 8000786:	2800      	cmp	r0, #0
 8000788:	f000 8113 	beq.w	80009b2 <ai_platform_network_process+0x26e>
 800078c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000790:	b101      	cbz	r1, 8000794 <ai_platform_network_process+0x50>
 8000792:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000794:	2300      	movs	r3, #0
 8000796:	82c3      	strh	r3, [r0, #22]
 8000798:	2400      	movs	r4, #0
 800079a:	7b03      	ldrb	r3, [r0, #12]
 800079c:	8284      	strh	r4, [r0, #20]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d002      	beq.n	80007ac <ai_platform_network_process+0x68>
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2111      	movs	r1, #17
 80007aa:	e0ff      	b.n	80009ac <ai_platform_network_process+0x268>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf1e      	ittt	ne
 80007b0:	2900      	cmpne	r1, #0
 80007b2:	880b      	ldrhne	r3, [r1, #0]
 80007b4:	2b00      	cmpne	r3, #0
 80007b6:	f000 80f7 	beq.w	80009a8 <ai_platform_network_process+0x264>
 80007ba:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	46a0      	mov	r8, r4
 80007c2:	46a1      	mov	r9, r4
 80007c4:	2600      	movs	r6, #0
 80007c6:	1d17      	adds	r7, r2, #4
 80007c8:	4682      	mov	sl, r0
 80007ca:	e014      	b.n	80007f6 <ai_platform_network_process+0xb2>
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	f000 80e9 	beq.w	80009a6 <ai_platform_network_process+0x262>
 80007d4:	8838      	ldrh	r0, [r7, #0]
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d052      	beq.n	8000880 <ai_platform_network_process+0x13c>
 80007da:	4558      	cmp	r0, fp
 80007dc:	bf28      	it	cs
 80007de:	4683      	movcs	fp, r0
 80007e0:	4622      	mov	r2, r4
 80007e2:	1f39      	subs	r1, r7, #4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fd59 	bl	800029c <_platform_network_state_setup>
 80007ea:	f108 0801 	add.w	r8, r8, #1
 80007ee:	3718      	adds	r7, #24
 80007f0:	3610      	adds	r6, #16
 80007f2:	f109 0904 	add.w	r9, r9, #4
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	8801      	ldrh	r1, [r0, #0]
 80007fa:	4588      	cmp	r8, r1
 80007fc:	d24a      	bcs.n	8000894 <ai_platform_network_process+0x150>
 80007fe:	6840      	ldr	r0, [r0, #4]
 8000800:	2800      	cmp	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000808:	2c00      	cmpne	r4, #0
 800080a:	d043      	beq.n	8000894 <ai_platform_network_process+0x150>
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	6881      	ldr	r1, [r0, #8]
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	1995      	adds	r5, r2, r6
 8000814:	f000 80c7 	beq.w	80009a6 <ai_platform_network_process+0x262>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	6841      	ldr	r1, [r0, #4]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	88ba      	ldrh	r2, [r7, #4]
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	fb03 fc02 	mul.w	ip, r3, r2
 8000826:	fb00 fc0c 	mul.w	ip, r0, ip
 800082a:	4561      	cmp	r1, ip
 800082c:	d32d      	bcc.n	800088a <ai_platform_network_process+0x146>
 800082e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000832:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000836:	459e      	cmp	lr, r3
 8000838:	bf01      	itttt	eq
 800083a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800083e:	4293      	cmpeq	r3, r2
 8000840:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000844:	4282      	cmpeq	r2, r0
 8000846:	d120      	bne.n	800088a <ai_platform_network_process+0x146>
 8000848:	69a0      	ldr	r0, [r4, #24]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f005 fb1a 	bl	8005e84 <ai_array_get_byte_size>
 8000850:	68e1      	ldr	r1, [r4, #12]
 8000852:	68ca      	ldr	r2, [r1, #12]
 8000854:	6961      	ldr	r1, [r4, #20]
 8000856:	68cb      	ldr	r3, [r1, #12]
 8000858:	435a      	muls	r2, r3
 800085a:	4290      	cmp	r0, r2
 800085c:	d315      	bcc.n	800088a <ai_platform_network_process+0x146>
 800085e:	69a0      	ldr	r0, [r4, #24]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f005 fa37 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000866:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800086a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800086e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000872:	4288      	cmp	r0, r1
 8000874:	d0aa      	beq.n	80007cc <ai_platform_network_process+0x88>
 8000876:	2219      	movs	r2, #25
 8000878:	2112      	movs	r1, #18
 800087a:	f10a 0010 	add.w	r0, sl, #16
 800087e:	e096      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	2112      	movs	r1, #18
 8000884:	f10a 0010 	add.w	r0, sl, #16
 8000888:	e091      	b.n	80009ae <ai_platform_network_process+0x26a>
 800088a:	2218      	movs	r2, #24
 800088c:	2112      	movs	r1, #18
 800088e:	f10a 0010 	add.w	r0, sl, #16
 8000892:	e08c      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	2900      	cmp	r1, #0
 8000898:	4655      	mov	r5, sl
 800089a:	d075      	beq.n	8000988 <ai_platform_network_process+0x244>
 800089c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80008a0:	2802      	cmp	r0, #2
 80008a2:	db7b      	blt.n	800099c <ai_platform_network_process+0x258>
 80008a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80008a6:	300c      	adds	r0, #12
 80008a8:	bf1c      	itt	ne
 80008aa:	8802      	ldrhne	r2, [r0, #0]
 80008ac:	2a00      	cmpne	r2, #0
 80008ae:	d075      	beq.n	800099c <ai_platform_network_process+0x258>
 80008b0:	f04f 0800 	mov.w	r8, #0
 80008b4:	46c1      	mov	r9, r8
 80008b6:	2600      	movs	r6, #0
 80008b8:	1d0f      	adds	r7, r1, #4
 80008ba:	9000      	str	r0, [sp, #0]
 80008bc:	e013      	b.n	80008e6 <ai_platform_network_process+0x1a2>
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d059      	beq.n	8000978 <ai_platform_network_process+0x234>
 80008c4:	8838      	ldrh	r0, [r7, #0]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d051      	beq.n	800096e <ai_platform_network_process+0x22a>
 80008ca:	4558      	cmp	r0, fp
 80008cc:	bf28      	it	cs
 80008ce:	4683      	movcs	fp, r0
 80008d0:	4622      	mov	r2, r4
 80008d2:	1f39      	subs	r1, r7, #4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f7ff fce1 	bl	800029c <_platform_network_state_setup>
 80008da:	f108 0801 	add.w	r8, r8, #1
 80008de:	3718      	adds	r7, #24
 80008e0:	3610      	adds	r6, #16
 80008e2:	f109 0904 	add.w	r9, r9, #4
 80008e6:	9800      	ldr	r0, [sp, #0]
 80008e8:	8801      	ldrh	r1, [r0, #0]
 80008ea:	4588      	cmp	r8, r1
 80008ec:	d249      	bcs.n	8000982 <ai_platform_network_process+0x23e>
 80008ee:	6840      	ldr	r0, [r0, #4]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008f8:	2c00      	cmpne	r4, #0
 80008fa:	d042      	beq.n	8000982 <ai_platform_network_process+0x23e>
 80008fc:	9800      	ldr	r0, [sp, #0]
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	680a      	ldr	r2, [r1, #0]
 8000902:	1995      	adds	r5, r2, r6
 8000904:	d038      	beq.n	8000978 <ai_platform_network_process+0x234>
 8000906:	69a0      	ldr	r0, [r4, #24]
 8000908:	6841      	ldr	r1, [r0, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	fb03 fc02 	mul.w	ip, r3, r2
 8000914:	fb00 fc0c 	mul.w	ip, r0, ip
 8000918:	4561      	cmp	r1, ip
 800091a:	d33e      	bcc.n	800099a <ai_platform_network_process+0x256>
 800091c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000920:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000924:	459e      	cmp	lr, r3
 8000926:	bf01      	itttt	eq
 8000928:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800092c:	4293      	cmpeq	r3, r2
 800092e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000932:	4282      	cmpeq	r2, r0
 8000934:	d131      	bne.n	800099a <ai_platform_network_process+0x256>
 8000936:	69a0      	ldr	r0, [r4, #24]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f005 faa3 	bl	8005e84 <ai_array_get_byte_size>
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	6961      	ldr	r1, [r4, #20]
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	435a      	muls	r2, r3
 8000948:	4290      	cmp	r0, r2
 800094a:	d326      	bcc.n	800099a <ai_platform_network_process+0x256>
 800094c:	69a0      	ldr	r0, [r4, #24]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f005 f9c0 	bl	8005cd4 <ai_array_to_buffer_fmt>
 8000954:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000958:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800095c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000960:	4288      	cmp	r0, r1
 8000962:	d0ac      	beq.n	80008be <ai_platform_network_process+0x17a>
 8000964:	2219      	movs	r2, #25
 8000966:	2113      	movs	r1, #19
 8000968:	f10a 0010 	add.w	r0, sl, #16
 800096c:	e01f      	b.n	80009ae <ai_platform_network_process+0x26a>
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	2113      	movs	r1, #19
 8000972:	f10a 0010 	add.w	r0, sl, #16
 8000976:	e01a      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000978:	2217      	movs	r2, #23
 800097a:	2113      	movs	r1, #19
 800097c:	f10a 0010 	add.w	r0, sl, #16
 8000980:	e015      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000982:	4655      	mov	r5, sl
 8000984:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000988:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800098c:	2800      	cmp	r0, #0
 800098e:	bf14      	ite	ne
 8000990:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000994:	f04f 0a00 	moveq.w	sl, #0
 8000998:	e00f      	b.n	80009ba <ai_platform_network_process+0x276>
 800099a:	4655      	mov	r5, sl
 800099c:	2218      	movs	r2, #24
 800099e:	2113      	movs	r1, #19
 80009a0:	f105 0010 	add.w	r0, r5, #16
 80009a4:	e003      	b.n	80009ae <ai_platform_network_process+0x26a>
 80009a6:	4650      	mov	r0, sl
 80009a8:	2217      	movs	r2, #23
 80009aa:	2112      	movs	r1, #18
 80009ac:	3010      	adds	r0, #16
 80009ae:	f000 f8c4 	bl	8000b3a <core_set_error>
 80009b2:	2000      	movs	r0, #0
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ba:	2802      	cmp	r0, #2
 80009bc:	bfa6      	itte	ge
 80009be:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009c0:	f100 0b0c 	addge.w	fp, r0, #12
 80009c4:	f04f 0b00 	movlt.w	fp, #0
 80009c8:	8ae8      	ldrh	r0, [r5, #22]
 80009ca:	8aa9      	ldrh	r1, [r5, #20]
 80009cc:	ebb0 0f01 	cmp.w	r0, r1
 80009d0:	f080 8087 	bcs.w	8000ae2 <ai_platform_network_process+0x39e>
 80009d4:	f04f 0800 	mov.w	r8, #0
 80009d8:	4654      	mov	r4, sl
 80009da:	46c1      	mov	r9, r8
 80009dc:	46c2      	mov	sl, r8
 80009de:	e018      	b.n	8000a12 <ai_platform_network_process+0x2ce>
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	68c3      	ldr	r3, [r0, #12]
 80009e4:	6871      	ldr	r1, [r6, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4411      	add	r1, r2
 80009ea:	6081      	str	r1, [r0, #8]
 80009ec:	6872      	ldr	r2, [r6, #4]
 80009ee:	60c2      	str	r2, [r0, #12]
 80009f0:	6870      	ldr	r0, [r6, #4]
 80009f2:	68b1      	ldr	r1, [r6, #8]
 80009f4:	4408      	add	r0, r1
 80009f6:	6070      	str	r0, [r6, #4]
 80009f8:	6831      	ldr	r1, [r6, #0]
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d302      	bcc.n	8000a04 <ai_platform_network_process+0x2c0>
 80009fe:	68f0      	ldr	r0, [r6, #12]
 8000a00:	4240      	negs	r0, r0
 8000a02:	4408      	add	r0, r1
 8000a04:	6070      	str	r0, [r6, #4]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	f109 0910 	add.w	r9, r9, #16
 8000a0e:	f108 0804 	add.w	r8, r8, #4
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	bf14      	ite	ne
 8000a16:	8820      	ldrhne	r0, [r4, #0]
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	4582      	cmp	sl, r0
 8000a1c:	d212      	bcs.n	8000a44 <ai_platform_network_process+0x300>
 8000a1e:	6860      	ldr	r0, [r4, #4]
 8000a20:	b180      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a22:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a26:	b168      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a28:	68a1      	ldr	r1, [r4, #8]
 8000a2a:	6980      	ldr	r0, [r0, #24]
 8000a2c:	680a      	ldr	r2, [r1, #0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
 8000a30:	eb02 0609 	add.w	r6, r2, r9
 8000a34:	008a      	lsls	r2, r1, #2
 8000a36:	d5d3      	bpl.n	80009e0 <ai_platform_network_process+0x29c>
 8000a38:	68b2      	ldr	r2, [r6, #8]
 8000a3a:	6871      	ldr	r1, [r6, #4]
 8000a3c:	6880      	ldr	r0, [r0, #8]
 8000a3e:	f00f fdff 	bl	8010640 <__aeabi_memcpy>
 8000a42:	e7d5      	b.n	80009f0 <ai_platform_network_process+0x2ac>
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f936 	bl	8000cb8 <ai_layers_forward_all>
 8000a4c:	f04f 0800 	mov.w	r8, #0
 8000a50:	465c      	mov	r4, fp
 8000a52:	46c1      	mov	r9, r8
 8000a54:	46c3      	mov	fp, r8
 8000a56:	e017      	b.n	8000a88 <ai_platform_network_process+0x344>
 8000a58:	6871      	ldr	r1, [r6, #4]
 8000a5a:	68b2      	ldr	r2, [r6, #8]
 8000a5c:	4411      	add	r1, r2
 8000a5e:	6071      	str	r1, [r6, #4]
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4291      	cmp	r1, r2
 8000a64:	d302      	bcc.n	8000a6c <ai_platform_network_process+0x328>
 8000a66:	68f1      	ldr	r1, [r6, #12]
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4411      	add	r1, r2
 8000a6c:	6071      	str	r1, [r6, #4]
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	68c3      	ldr	r3, [r0, #12]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4411      	add	r1, r2
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	60c2      	str	r2, [r0, #12]
 8000a7c:	f10b 0b01 	add.w	fp, fp, #1
 8000a80:	f109 0910 	add.w	r9, r9, #16
 8000a84:	f108 0804 	add.w	r8, r8, #4
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	8820      	ldrhne	r0, [r4, #0]
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4583      	cmp	fp, r0
 8000a92:	d21d      	bcs.n	8000ad0 <ai_platform_network_process+0x38c>
 8000a94:	6860      	ldr	r0, [r4, #4]
 8000a96:	b1d8      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a98:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a9c:	b1c0      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a9e:	68a1      	ldr	r1, [r4, #8]
 8000aa0:	6980      	ldr	r0, [r0, #24]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	eb02 0609 	add.w	r6, r2, r9
 8000aaa:	008a      	lsls	r2, r1, #2
 8000aac:	d5d4      	bpl.n	8000a58 <ai_platform_network_process+0x314>
 8000aae:	6881      	ldr	r1, [r0, #8]
 8000ab0:	68b2      	ldr	r2, [r6, #8]
 8000ab2:	6870      	ldr	r0, [r6, #4]
 8000ab4:	f00f fdc4 	bl	8010640 <__aeabi_memcpy>
 8000ab8:	6870      	ldr	r0, [r6, #4]
 8000aba:	68b1      	ldr	r1, [r6, #8]
 8000abc:	4408      	add	r0, r1
 8000abe:	6070      	str	r0, [r6, #4]
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	4288      	cmp	r0, r1
 8000ac4:	d302      	bcc.n	8000acc <ai_platform_network_process+0x388>
 8000ac6:	68f0      	ldr	r0, [r6, #12]
 8000ac8:	4240      	negs	r0, r0
 8000aca:	4408      	add	r0, r1
 8000acc:	6070      	str	r0, [r6, #4]
 8000ace:	e7d5      	b.n	8000a7c <ai_platform_network_process+0x338>
 8000ad0:	8ae8      	ldrh	r0, [r5, #22]
 8000ad2:	8aa9      	ldrh	r1, [r5, #20]
 8000ad4:	1c40      	adds	r0, r0, #1
 8000ad6:	82e8      	strh	r0, [r5, #22]
 8000ad8:	46a3      	mov	fp, r4
 8000ada:	b280      	uxth	r0, r0
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f4ff af79 	bcc.w	80009d4 <ai_platform_network_process+0x290>
 8000ae2:	8ae8      	ldrh	r0, [r5, #22]
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000aec <.text_18>:
 8000aec:	e0002000 	.word	0xe0002000

08000af0 <.text_19>:
 8000af0:	40023000 	.word	0x40023000

08000af4 <.text_20>:
 8000af4:	f407a5c2 	.word	0xf407a5c2

08000af8 <.text_21>:
 8000af8:	b5e8b5cd 	.word	0xb5e8b5cd

08000afc <.text_22>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_23>:
 8000b00:	01030001 	.word	0x01030001

08000b04 <.text_24>:
 8000b04:	00000104 	.word	0x00000104

08000b08 <.text_25>:
 8000b08:	00000101 	.word	0x00000101

08000b0c <.text_26>:
 8000b0c:	00000301 	.word	0x00000301

08000b10 <.text_27>:
 8000b10:	00001030 	.word	0x00001030

08000b14 <.text_28>:
 8000b14:	00001001 	.word	0x00001001

08000b18 <_platform_network_sanity_check{5}::signatures>:
 8000b18:	84048403                                ....

08000b1c <.text_30>:
 8000b1c:	00001002 	.word	0x00001002

08000b20 <.text_31>:
 8000b20:	00001010 	.word	0x00001010

08000b24 <.text_32>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_33>:
 8000b28:	00001010 	.word	0x00001010

08000b2c <core_init>:
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <core_get_error>:
 8000b30:	4601      	mov	r1, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	6808      	ldr	r0, [r1, #0]
 8000b36:	600a      	str	r2, [r1, #0]
 8000b38:	4770      	bx	lr

08000b3a <core_set_error>:
 8000b3a:	7803      	ldrb	r3, [r0, #0]
 8000b3c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b40:	d104      	bne.n	8000b4c <core_set_error+0x12>
 8000b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b46:	6001      	str	r1, [r0, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <ai_layers_forward_layer>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	4788      	blx	r1
 8000b58:	68e0      	ldr	r0, [r4, #12]
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	bf08      	it	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
	...

08000b64 <ai_check_custom_types>:
 8000b64:	b500      	push	{lr}
 8000b66:	b081      	sub	sp, #4
 8000b68:	b160      	cbz	r0, 8000b84 <ai_check_custom_types+0x20>
 8000b6a:	7801      	ldrb	r1, [r0, #0]
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d109      	bne.n	8000b84 <ai_check_custom_types+0x20>
 8000b70:	f05f 0204 	movs.w	r2, #4
 8000b74:	a18d      	add	r1, pc, #564	; (adr r1, 8000dac <ai_check_custom_types::ref_signatures>)
 8000b76:	f00f fd8f 	bl	8010698 <memcmp>
 8000b7a:	1e40      	subs	r0, r0, #1
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	0fc0      	lsrs	r0, r0, #31
 8000b80:	b001      	add	sp, #4
 8000b82:	bd00      	pop	{pc}
 8000b84:	2000      	movs	r0, #0
 8000b86:	b001      	add	sp, #4
 8000b88:	bd00      	pop	{pc}
	...

08000b8c <ai_layer_type_name>:
 8000b8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b90:	1a81      	subs	r1, r0, r2
 8000b92:	2901      	cmp	r1, #1
 8000b94:	bf81      	itttt	hi
 8000b96:	1ec9      	subhi	r1, r1, #3
 8000b98:	290d      	cmphi	r1, #13
 8000b9a:	390f      	subhi	r1, #15
 8000b9c:	2909      	cmphi	r1, #9
 8000b9e:	f200 806b 	bhi.w	8000c78 <ai_layer_type_name+0xec>
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	d033      	beq.n	8000c0e <ai_layer_type_name+0x82>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d033      	beq.n	8000c12 <ai_layer_type_name+0x86>
 8000baa:	1e80      	subs	r0, r0, #2
 8000bac:	d033      	beq.n	8000c16 <ai_layer_type_name+0x8a>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0x90>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0x94>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0x98>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0x9c>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xa0>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xa4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xa8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xac>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xb0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xb4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xb8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xbc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xc0>
 8000be2:	1e80      	subs	r0, r0, #2
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xc4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xc8>
 8000bea:	1e40      	subs	r0, r0, #1
 8000bec:	d034      	beq.n	8000c58 <ai_layer_type_name+0xcc>
 8000bee:	1e40      	subs	r0, r0, #1
 8000bf0:	d034      	beq.n	8000c5c <ai_layer_type_name+0xd0>
 8000bf2:	1e40      	subs	r0, r0, #1
 8000bf4:	d034      	beq.n	8000c60 <ai_layer_type_name+0xd4>
 8000bf6:	1e40      	subs	r0, r0, #1
 8000bf8:	d034      	beq.n	8000c64 <ai_layer_type_name+0xd8>
 8000bfa:	1e40      	subs	r0, r0, #1
 8000bfc:	d034      	beq.n	8000c68 <ai_layer_type_name+0xdc>
 8000bfe:	1e40      	subs	r0, r0, #1
 8000c00:	d034      	beq.n	8000c6c <ai_layer_type_name+0xe0>
 8000c02:	1e40      	subs	r0, r0, #1
 8000c04:	d034      	beq.n	8000c70 <ai_layer_type_name+0xe4>
 8000c06:	1e40      	subs	r0, r0, #1
 8000c08:	d034      	beq.n	8000c74 <ai_layer_type_name+0xe8>
 8000c0a:	a01c      	add	r0, pc, #112	; (adr r0, 8000c7c <.text_5>)
 8000c0c:	4770      	bx	lr
 8000c0e:	a01c      	add	r0, pc, #112	; (adr r0, 8000c80 <.text_6>)
 8000c10:	4770      	bx	lr
 8000c12:	a01c      	add	r0, pc, #112	; (adr r0, 8000c84 <.text_7>)
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	a031      	add	r0, pc, #196	; (adr r0, 8000ce0 <.text_15>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a032      	add	r0, pc, #200	; (adr r0, 8000ce8 <.text_16>)
 8000c1e:	4770      	bx	lr
 8000c20:	a019      	add	r0, pc, #100	; (adr r0, 8000c88 <.text_8>)
 8000c22:	4770      	bx	lr
 8000c24:	a019      	add	r0, pc, #100	; (adr r0, 8000c8c <.text_9>)
 8000c26:	4770      	bx	lr
 8000c28:	a031      	add	r0, pc, #196	; (adr r0, 8000cf0 <.text_17>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a018      	add	r0, pc, #96	; (adr r0, 8000c90 <.text_10>)
 8000c2e:	4770      	bx	lr
 8000c30:	a031      	add	r0, pc, #196	; (adr r0, 8000cf8 <.text_18>)
 8000c32:	4770      	bx	lr
 8000c34:	a032      	add	r0, pc, #200	; (adr r0, 8000d00 <.text_19>)
 8000c36:	4770      	bx	lr
 8000c38:	a036      	add	r0, pc, #216	; (adr r0, 8000d14 <.text_20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a038      	add	r0, pc, #224	; (adr r0, 8000d20 <.text_21>)
 8000c3e:	4770      	bx	lr
 8000c40:	a014      	add	r0, pc, #80	; (adr r0, 8000c94 <.text_11>)
 8000c42:	4770      	bx	lr
 8000c44:	a038      	add	r0, pc, #224	; (adr r0, 8000d28 <.text_22>)
 8000c46:	4770      	bx	lr
 8000c48:	a039      	add	r0, pc, #228	; (adr r0, 8000d30 <.text_23>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d3c <.text_24>)
 8000c4e:	4770      	bx	lr
 8000c50:	a03f      	add	r0, pc, #252	; (adr r0, 8000d50 <.text_25>)
 8000c52:	4770      	bx	lr
 8000c54:	a040      	add	r0, pc, #256	; (adr r0, 8000d58 <.text_26>)
 8000c56:	4770      	bx	lr
 8000c58:	a041      	add	r0, pc, #260	; (adr r0, 8000d60 <.text_27>)
 8000c5a:	4770      	bx	lr
 8000c5c:	a043      	add	r0, pc, #268	; (adr r0, 8000d6c <.text_28>)
 8000c5e:	4770      	bx	lr
 8000c60:	a044      	add	r0, pc, #272	; (adr r0, 8000d74 <.text_29>)
 8000c62:	4770      	bx	lr
 8000c64:	a045      	add	r0, pc, #276	; (adr r0, 8000d7c <.text_30>)
 8000c66:	4770      	bx	lr
 8000c68:	a00b      	add	r0, pc, #44	; (adr r0, 8000c98 <.text_12>)
 8000c6a:	4770      	bx	lr
 8000c6c:	a049      	add	r0, pc, #292	; (adr r0, 8000d94 <.text_31>)
 8000c6e:	4770      	bx	lr
 8000c70:	a04a      	add	r0, pc, #296	; (adr r0, 8000d9c <.text_32>)
 8000c72:	4770      	bx	lr
 8000c74:	a04b      	add	r0, pc, #300	; (adr r0, 8000da4 <.text_33>)
 8000c76:	4770      	bx	lr
 8000c78:	a000      	add	r0, pc, #0	; (adr r0, 8000c7c <.text_5>)
 8000c7a:	4770      	bx	lr

08000c7c <.text_5>:
 8000c7c:	00000000 	.word	0x00000000

08000c80 <.text_6>:
 8000c80:	00444441 	.word	0x00444441

08000c84 <.text_7>:
 8000c84:	00004e42 	.word	0x00004e42

08000c88 <.text_8>:
 8000c88:	00555247 	.word	0x00555247

08000c8c <.text_9>:
 8000c8c:	004e524c 	.word	0x004e524c

08000c90 <.text_10>:
 8000c90:	00004c4e 	.word	0x00004c4e

08000c94 <.text_11>:
 8000c94:	00004d53 	.word	0x00004d53

08000c98 <.text_12>:
 8000c98:	00444150 	.word	0x00444150

08000c9c <ai_layer_type_is_valid>:
 8000c9c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ca0:	1a40      	subs	r0, r0, r1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	bf81      	itttt	hi
 8000ca6:	1ec0      	subhi	r0, r0, #3
 8000ca8:	280d      	cmphi	r0, #13
 8000caa:	380f      	subhi	r0, #15
 8000cac:	2809      	cmphi	r0, #9
 8000cae:	d801      	bhi.n	8000cb4 <ai_layer_type_is_valid+0x18>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <ai_layers_forward_all>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b081      	sub	sp, #4
 8000cbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000cc0:	b158      	cbz	r0, 8000cda <ai_layers_forward_all+0x22>
 8000cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000cc6:	6929      	ldr	r1, [r5, #16]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	4788      	blx	r1
 8000ccc:	68e8      	ldr	r0, [r5, #12]
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf08      	it	eq
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	d1f4      	bne.n	8000cc4 <ai_layers_forward_all+0xc>
 8000cda:	b001      	add	sp, #4
 8000cdc:	bd30      	pop	{r4, r5, pc}
	...

08000ce0 <.text_15>:
 8000ce0:	564e4f43 	.word	0x564e4f43
 8000ce4:	00004432 	.word	0x00004432

08000ce8 <.text_16>:
 8000ce8:	534e4544 	.word	0x534e4544
 8000cec:	0045      	.short	0x0045
	...

08000cf0 <.text_17>:
 8000cf0:	4d54534c 	.word	0x4d54534c
 8000cf4:	00          	.byte	0x00
 8000cf5:	00          	.byte	0x00
	...

08000cf8 <.text_18>:
 8000cf8:	4d524f4e 	.word	0x4d524f4e
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_19>:
 8000d00:	4954504f 	.word	0x4954504f
 8000d04:	455a494d 	.word	0x455a494d
 8000d08:	4f435f44 	.word	0x4f435f44
 8000d0c:	4432564e 	.word	0x4432564e
 8000d10:	00          	.byte	0x00
 8000d11:	00          	.byte	0x00
	...

08000d14 <.text_20>:
 8000d14:	4e415254 	.word	0x4e415254
 8000d18:	534f5053 	.word	0x534f5053
 8000d1c:	0045      	.short	0x0045
	...

08000d20 <.text_21>:
 8000d20:	4c4f4f50 	.word	0x4c4f4f50
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_22>:
 8000d28:	494c5053 	.word	0x494c5053
 8000d2c:	0054      	.short	0x0054
	...

08000d30 <.text_23>:
 8000d30:	454d4954 	.word	0x454d4954
 8000d34:	4c45445f 	.word	0x4c45445f
 8000d38:	00005941 	.word	0x00005941

08000d3c <.text_24>:
 8000d3c:	454d4954 	.word	0x454d4954
 8000d40:	5349445f 	.word	0x5349445f
 8000d44:	42495254 	.word	0x42495254
 8000d48:	44455455 	.word	0x44455455
 8000d4c:	00          	.byte	0x00
 8000d4d:	00          	.byte	0x00
	...

08000d50 <.text_25>:
 8000d50:	434e4f43 	.word	0x434e4f43
 8000d54:	00005441 	.word	0x00005441

08000d58 <.text_26>:
 8000d58:	4d4d4547 	.word	0x4d4d4547
 8000d5c:	00          	.byte	0x00
 8000d5d:	00          	.byte	0x00
	...

08000d60 <.text_27>:
 8000d60:	41535055 	.word	0x41535055
 8000d64:	454c504d 	.word	0x454c504d
 8000d68:	00          	.byte	0x00
 8000d69:	00          	.byte	0x00
	...

08000d6c <.text_28>:
 8000d6c:	57544c45 	.word	0x57544c45
 8000d70:	00455349 	.word	0x00455349

08000d74 <.text_29>:
 8000d74:	454e4547 	.word	0x454e4547
 8000d78:	00434952 	.word	0x00434952

08000d7c <.text_30>:
 8000d7c:	54534e49 	.word	0x54534e49
 8000d80:	45434e41 	.word	0x45434e41
 8000d84:	4d524f4e 	.word	0x4d524f4e
 8000d88:	5a494c41 	.word	0x5a494c41
 8000d8c:	4f495441 	.word	0x4f495441
 8000d90:	004e      	.short	0x004e
	...

08000d94 <.text_31>:
 8000d94:	43494c53 	.word	0x43494c53
 8000d98:	0045      	.short	0x0045
	...

08000d9c <.text_32>:
 8000d9c:	454c4954 	.word	0x454c4954
 8000da0:	00          	.byte	0x00
 8000da1:	00          	.byte	0x00
	...

08000da4 <.text_33>:
 8000da4:	55444552 	.word	0x55444552
 8000da8:	00004543 	.word	0x00004543

08000dac <ai_check_custom_types::ref_signatures>:
 8000dac:	84048403                                ....

08000db0 <ai_conv2d_stripe_f32>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b098      	sub	sp, #96	; 0x60
 8000db6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 82cb 	beq.w	8001354 <ai_conv2d_stripe_f32+0x5a4>
 8000dbe:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dc2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000dc6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000dc8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000dca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dcc:	9004      	str	r0, [sp, #16]
 8000dce:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000dd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dd4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000dd8:	f8cd a014 	str.w	sl, [sp, #20]
 8000ddc:	1904      	adds	r4, r0, r4
 8000dde:	1e64      	subs	r4, r4, #1
 8000de0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000de2:	9100      	str	r1, [sp, #0]
 8000de4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000de8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dee:	4346      	muls	r6, r0
 8000df0:	9616      	str	r6, [sp, #88]	; 0x58
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000df8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9415      	str	r4, [sp, #84]	; 0x54
 8000e00:	437e      	muls	r6, r7
 8000e02:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e06:	437c      	muls	r4, r7
 8000e08:	9414      	str	r4, [sp, #80]	; 0x50
 8000e0a:	4346      	muls	r6, r0
 8000e0c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e12:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e14:	1a24      	subs	r4, r4, r0
 8000e16:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e1c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000e1e:	4344      	muls	r4, r0
 8000e20:	9412      	str	r4, [sp, #72]	; 0x48
 8000e22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e24:	4344      	muls	r4, r0
 8000e26:	9411      	str	r4, [sp, #68]	; 0x44
 8000e28:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e2c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e30:	fb14 f000 	smulbb	r0, r4, r0
 8000e34:	900a      	str	r0, [sp, #40]	; 0x28
 8000e36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e38:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e40:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e44:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e4e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e54:	900e      	str	r0, [sp, #56]	; 0x38
 8000e56:	4374      	muls	r4, r6
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
 8000e5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e5c:	1b2d      	subs	r5, r5, r4
 8000e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e60:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e68:	427f      	negs	r7, r7
 8000e6a:	bfd8      	it	le
 8000e6c:	2700      	movle	r7, #0
 8000e6e:	1a09      	subs	r1, r1, r0
 8000e70:	4291      	cmp	r1, r2
 8000e72:	bf3d      	ittte	cc
 8000e74:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e76:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e78:	1b86      	subcc	r6, r0, r6
 8000e7a:	4616      	movcs	r6, r2
 8000e7c:	9a05      	ldr	r2, [sp, #20]
 8000e7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	434a      	muls	r2, r1
 8000e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e8a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e8c:	b900      	cbnz	r0, 8000e90 <ai_conv2d_stripe_f32+0xe0>
 8000e8e:	9800      	ldr	r0, [sp, #0]
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	1bf6      	subs	r6, r6, r7
 8000e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	bf04      	itt	eq
 8000e9c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e9e:	2801      	cmpeq	r0, #1
 8000ea0:	f040 80a9 	bne.w	8000ff6 <ai_conv2d_stripe_f32+0x246>
 8000ea4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000ea6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	434c      	muls	r4, r1
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	4341      	muls	r1, r0
 8000eb2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	fb00 fc03 	mul.w	ip, r0, r3
 8000eba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ebc:	9b06      	ldr	r3, [sp, #24]
 8000ebe:	4407      	add	r7, r0
 8000ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ec2:	4347      	muls	r7, r0
 8000ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ec8:	4370      	muls	r0, r6
 8000eca:	9e01      	ldr	r6, [sp, #4]
 8000ecc:	9b00      	ldr	r3, [sp, #0]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ed2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000ed6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000ed8:	bf0c      	ite	eq
 8000eda:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 8000ede:	eef0 0a40 	vmovne.f32	s1, s0
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f000 8222 	beq.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	462e      	mov	r6, r5
 8000eec:	4613      	mov	r3, r2
 8000eee:	f8cd c008 	str.w	ip, [sp, #8]
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f8dd e000 	ldr.w	lr, [sp]
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	463a      	mov	r2, r7
 8000efc:	4682      	mov	sl, r0
 8000efe:	f8cd 9004 	str.w	r9, [sp, #4]
 8000f02:	46c4      	mov	ip, r8
 8000f04:	f02a 0703 	bic.w	r7, sl, #3
 8000f08:	ed9c 1a00 	vldr	s2, [ip]
 8000f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000f16:	dd61      	ble.n	8000fdc <ai_conv2d_stripe_f32+0x22c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	f04f 0900 	mov.w	r9, #0
 8000f20:	f340 801f 	ble.w	8000f62 <ai_conv2d_stripe_f32+0x1b2>
 8000f24:	edd2 4a00 	vldr	s9, [r2]
 8000f28:	ed98 5a00 	vldr	s10, [r8]
 8000f2c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f30:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f34:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f38:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f3c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f40:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f44:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f48:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	f109 0904 	add.w	r9, r9, #4
 8000f52:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f56:	45b9      	cmp	r9, r7
 8000f58:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f5c:	f108 0810 	add.w	r8, r8, #16
 8000f60:	dbe0      	blt.n	8000f24 <ai_conv2d_stripe_f32+0x174>
 8000f62:	45d1      	cmp	r9, sl
 8000f64:	f280 8034 	bge.w	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f68:	f109 0901 	add.w	r9, r9, #1
 8000f6c:	edd2 2a00 	vldr	s5, [r2]
 8000f70:	edd8 1a00 	vldr	s3, [r8]
 8000f74:	1d12      	adds	r2, r2, #4
 8000f76:	45d1      	cmp	r9, sl
 8000f78:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f7c:	f108 0804 	add.w	r8, r8, #4
 8000f80:	da26      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f82:	f109 0901 	add.w	r9, r9, #1
 8000f86:	ed92 3a00 	vldr	s6, [r2]
 8000f8a:	ed98 2a00 	vldr	s4, [r8]
 8000f8e:	1d12      	adds	r2, r2, #4
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f96:	f108 0804 	add.w	r8, r8, #4
 8000f9a:	da19      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f9c:	f109 0901 	add.w	r9, r9, #1
 8000fa0:	edd2 2a00 	vldr	s5, [r2]
 8000fa4:	edd8 1a00 	vldr	s3, [r8]
 8000fa8:	1d12      	adds	r2, r2, #4
 8000faa:	45d1      	cmp	r9, sl
 8000fac:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000fb0:	f108 0804 	add.w	r8, r8, #4
 8000fb4:	da0c      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000fb6:	f109 0901 	add.w	r9, r9, #1
 8000fba:	ed92 2a00 	vldr	s4, [r2]
 8000fbe:	ed98 3a00 	vldr	s6, [r8]
 8000fc2:	1d12      	adds	r2, r2, #4
 8000fc4:	45d1      	cmp	r9, sl
 8000fc6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fca:	f108 0804 	add.w	r8, r8, #4
 8000fce:	dbcb      	blt.n	8000f68 <ai_conv2d_stripe_f32+0x1b8>
 8000fd0:	1e40      	subs	r0, r0, #1
 8000fd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fda:	d19e      	bne.n	8000f1a <ai_conv2d_stripe_f32+0x16a>
 8000fdc:	9802      	ldr	r0, [sp, #8]
 8000fde:	ed8e 1a00 	vstr	s2, [lr]
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	f10c 0c04 	add.w	ip, ip, #4
 8000ff0:	d18a      	bne.n	8000f08 <ai_conv2d_stripe_f32+0x158>
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e19a      	b.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ff6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	bf04      	itt	eq
 8000ffc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000ffe:	2801      	cmpeq	r0, #1
 8001000:	f040 80cc 	bne.w	800119c <ai_conv2d_stripe_f32+0x3ec>
 8001004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001006:	9b06      	ldr	r3, [sp, #24]
 8001008:	9c00      	ldr	r4, [sp, #0]
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800100e:	1b81      	subs	r1, r0, r6
 8001010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001012:	fb01 fa00 	mul.w	sl, r1, r0
 8001016:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001018:	9926      	ldr	r1, [sp, #152]	; 0x98
 800101a:	eba0 0c06 	sub.w	ip, r0, r6
 800101e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	4341      	muls	r1, r0
 8001024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001026:	183f      	adds	r7, r7, r0
 8001028:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	42a3      	cmp	r3, r4
 8001030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001032:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001036:	bf0c      	ite	eq
 8001038:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 800103c:	eef0 0a40 	vmovne.f32	s1, s0
 8001040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001042:	2400      	movs	r4, #0
 8001044:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001048:	4596      	cmp	lr, r2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	f080 816e 	bcs.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	9a02      	ldr	r2, [sp, #8]
 8001054:	2a00      	cmp	r2, #0
 8001056:	f000 8097 	beq.w	8001188 <ai_conv2d_stripe_f32+0x3d8>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001062:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800106a:	9108      	str	r1, [sp, #32]
 800106c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001070:	4615      	mov	r5, r2
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	ed97 1a00 	vldr	s2, [r7]
 8001078:	9907      	ldr	r1, [sp, #28]
 800107a:	2a00      	cmp	r2, #0
 800107c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001080:	f340 8072 	ble.w	8001168 <ai_conv2d_stripe_f32+0x3b8>
 8001084:	f026 0e03 	bic.w	lr, r6, #3
 8001088:	f1be 0f00 	cmp.w	lr, #0
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f340 8029 	ble.w	80010e6 <ai_conv2d_stripe_f32+0x336>
 8001094:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001098:	edd0 1a00 	vldr	s3, [r0]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	edd0 1a01 	vldr	s3, [r0, #4]
 80010ac:	ed91 2a00 	vldr	s4, [r1]
 80010b0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b8:	edd0 1a02 	vldr	s3, [r0, #8]
 80010bc:	ed91 2a00 	vldr	s4, [r1]
 80010c0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010c8:	f109 0904 	add.w	r9, r9, #4
 80010cc:	edd0 1a03 	vldr	s3, [r0, #12]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	3010      	adds	r0, #16
 80010d6:	45f1      	cmp	r9, lr
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010e0:	dbda      	blt.n	8001098 <ai_conv2d_stripe_f32+0x2e8>
 80010e2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010e6:	45b1      	cmp	r9, r6
 80010e8:	f280 8038 	bge.w	800115c <ai_conv2d_stripe_f32+0x3ac>
 80010ec:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010f0:	f109 0901 	add.w	r9, r9, #1
 80010f4:	edd0 1a00 	vldr	s3, [r0]
 80010f8:	ed91 2a00 	vldr	s4, [r1]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	45b1      	cmp	r9, r6
 8001100:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001104:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001108:	da26      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800110a:	f109 0901 	add.w	r9, r9, #1
 800110e:	ed90 2a00 	vldr	s4, [r0]
 8001112:	edd1 1a00 	vldr	s3, [r1]
 8001116:	1d00      	adds	r0, r0, #4
 8001118:	45b1      	cmp	r9, r6
 800111a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800111e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001122:	da19      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 8001124:	f109 0901 	add.w	r9, r9, #1
 8001128:	edd0 1a00 	vldr	s3, [r0]
 800112c:	ed91 2a00 	vldr	s4, [r1]
 8001130:	1d00      	adds	r0, r0, #4
 8001132:	45b1      	cmp	r9, r6
 8001134:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001138:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800113c:	da0c      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800113e:	f109 0901 	add.w	r9, r9, #1
 8001142:	ed90 2a00 	vldr	s4, [r0]
 8001146:	edd1 1a00 	vldr	s3, [r1]
 800114a:	1d00      	adds	r0, r0, #4
 800114c:	45b1      	cmp	r9, r6
 800114e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001152:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001156:	dbcb      	blt.n	80010f0 <ai_conv2d_stripe_f32+0x340>
 8001158:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001166:	d18d      	bne.n	8001084 <ai_conv2d_stripe_f32+0x2d4>
 8001168:	9908      	ldr	r1, [sp, #32]
 800116a:	ed85 1a00 	vstr	s2, [r5]
 800116e:	1c64      	adds	r4, r4, #1
 8001170:	1d2d      	adds	r5, r5, #4
 8001172:	1d3f      	adds	r7, r7, #4
 8001174:	f1bb 0b01 	subs.w	fp, fp, #1
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	f47f af79 	bne.w	8001072 <ai_conv2d_stripe_f32+0x2c2>
 8001180:	9d00      	ldr	r5, [sp, #0]
 8001182:	9908      	ldr	r1, [sp, #32]
 8001184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	f10e 0e04 	add.w	lr, lr, #4
 800118e:	4596      	cmp	lr, r2
 8001190:	f4bf af2f 	bcs.w	8000ff2 <ai_conv2d_stripe_f32+0x242>
 8001194:	e75d      	b.n	8001052 <ai_conv2d_stripe_f32+0x2a2>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80011a0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80011a4:	4608      	mov	r0, r1
 80011a6:	1bcb      	subs	r3, r1, r7
 80011a8:	fb97 f4f0 	sdiv	r4, r7, r0
 80011ac:	fb00 3004 	mla	r0, r0, r4, r3
 80011b0:	fb90 faf1 	sdiv	sl, r0, r1
 80011b4:	fb01 0a1a 	mls	sl, r1, sl, r0
 80011b8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80011bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80011be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011c4:	fb03 4000 	mla	r0, r3, r0, r4
 80011c8:	1876      	adds	r6, r6, r1
 80011ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ce:	1e76      	subs	r6, r6, #1
 80011d0:	187f      	adds	r7, r7, r1
 80011d2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011d6:	eba6 060a 	sub.w	r6, r6, sl
 80011da:	eba5 050b 	sub.w	r5, r5, fp
 80011de:	1e7f      	subs	r7, r7, #1
 80011e0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011e6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011e8:	195d      	adds	r5, r3, r5
 80011ea:	1e6d      	subs	r5, r5, #1
 80011ec:	fb00 9911 	mls	r9, r0, r1, r9
 80011f0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011f4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011fc:	9509      	str	r5, [sp, #36]	; 0x24
 80011fe:	eba6 060c 	sub.w	r6, r6, ip
 8001202:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001204:	1a2d      	subs	r5, r5, r0
 8001206:	fb05 f803 	mul.w	r8, r5, r3
 800120a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800120c:	435d      	muls	r5, r3
 800120e:	fb06 fe05 	mul.w	lr, r6, r5
 8001212:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001214:	9e06      	ldr	r6, [sp, #24]
 8001216:	194d      	adds	r5, r1, r5
 8001218:	fb04 f909 	mul.w	r9, r4, r9
 800121c:	435d      	muls	r5, r3
 800121e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001220:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001224:	9d01      	ldr	r5, [sp, #4]
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	1ae4      	subs	r4, r4, r3
 800122a:	42b5      	cmp	r5, r6
 800122c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800122e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001230:	445d      	add	r5, fp
 8001232:	fb06 aa05 	mla	sl, r6, r5, sl
 8001236:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001238:	fb0a f505 	mul.w	r5, sl, r5
 800123c:	bf0c      	ite	eq
 800123e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 80014b8 <.text_5>
 8001242:	eef0 0a40 	vmovne.f32	s1, s0
 8001246:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800124a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800124c:	2500      	movs	r5, #0
 800124e:	2a00      	cmp	r2, #0
 8001250:	d06c      	beq.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001256:	2a00      	cmp	r2, #0
 8001258:	d062      	beq.n	8001320 <ai_conv2d_stripe_f32+0x570>
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001260:	9a00      	ldr	r2, [sp, #0]
 8001262:	f8cd c00c 	str.w	ip, [sp, #12]
 8001266:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126c:	f8cd e020 	str.w	lr, [sp, #32]
 8001270:	f8cd 701c 	str.w	r7, [sp, #28]
 8001274:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001278:	ed96 1a00 	vldr	s2, [r6]
 800127c:	9f07      	ldr	r7, [sp, #28]
 800127e:	f1be 0f00 	cmp.w	lr, #0
 8001282:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001286:	dd3b      	ble.n	8001300 <ai_conv2d_stripe_f32+0x550>
 8001288:	2800      	cmp	r0, #0
 800128a:	dd32      	ble.n	80012f2 <ai_conv2d_stripe_f32+0x542>
 800128c:	ea4f 0c00 	mov.w	ip, r0
 8001290:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001294:	455f      	cmp	r7, fp
 8001296:	d227      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d21d      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 3a00 	vldr	s6, [r1]
 80012b0:	ed97 2a00 	vldr	s4, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee03 1a02 	vmla.f32	s2, s6, s4
 80012be:	d213      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012c0:	edd1 2a00 	vldr	s5, [r1]
 80012c4:	edd7 1a00 	vldr	s3, [r7]
 80012c8:	1d09      	adds	r1, r1, #4
 80012ca:	1d3f      	adds	r7, r7, #4
 80012cc:	455f      	cmp	r7, fp
 80012ce:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012d2:	d209      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012d4:	ed91 2a00 	vldr	s4, [r1]
 80012d8:	ed97 3a00 	vldr	s6, [r7]
 80012dc:	1d09      	adds	r1, r1, #4
 80012de:	1d3f      	adds	r7, r7, #4
 80012e0:	455f      	cmp	r7, fp
 80012e2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012e6:	d3d7      	bcc.n	8001298 <ai_conv2d_stripe_f32+0x4e8>
 80012e8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012ec:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012f0:	d1ce      	bne.n	8001290 <ai_conv2d_stripe_f32+0x4e0>
 80012f2:	f1be 0e01 	subs.w	lr, lr, #1
 80012f6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012fa:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012fe:	d1c3      	bne.n	8001288 <ai_conv2d_stripe_f32+0x4d8>
 8001300:	9f08      	ldr	r7, [sp, #32]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	1d36      	adds	r6, r6, #4
 8001306:	ed8a 1a00 	vstr	s2, [sl]
 800130a:	1e52      	subs	r2, r2, #1
 800130c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001310:	f10a 0a04 	add.w	sl, sl, #4
 8001314:	d1ae      	bne.n	8001274 <ai_conv2d_stripe_f32+0x4c4>
 8001316:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800131a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800131e:	9f07      	ldr	r7, [sp, #28]
 8001320:	9a02      	ldr	r2, [sp, #8]
 8001322:	1e52      	subs	r2, r2, #1
 8001324:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	d193      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4a4>
 800132c:	9800      	ldr	r0, [sp, #0]
 800132e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001330:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001334:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001336:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	1841      	adds	r1, r0, r1
 800133e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001340:	9805      	ldr	r0, [sp, #20]
 8001342:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001346:	1841      	adds	r1, r0, r1
 8001348:	9804      	ldr	r0, [sp, #16]
 800134a:	9105      	str	r1, [sp, #20]
 800134c:	1e40      	subs	r0, r0, #1
 800134e:	9004      	str	r0, [sp, #16]
 8001350:	f47f ad86 	bne.w	8000e60 <ai_conv2d_stripe_f32+0xb0>
 8001354:	b018      	add	sp, #96	; 0x60
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800135a <func_dummy>:
 800135a:	4770      	bx	lr

0800135c <ai_dict8_dot_array_f32>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b081      	sub	sp, #4
 8001362:	4682      	mov	sl, r0
 8001364:	ed2d 8b02 	vpush	{d8}
 8001368:	4615      	mov	r5, r2
 800136a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800136c:	08e0      	lsrs	r0, r4, #3
 800136e:	460f      	mov	r7, r1
 8001370:	461a      	mov	r2, r3
 8001372:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80014b8 <.text_5>
 8001376:	d052      	beq.n	800141e <ai_dict8_dot_array_f32+0xc2>
 8001378:	4629      	mov	r1, r5
 800137a:	783b      	ldrb	r3, [r7, #0]
 800137c:	787d      	ldrb	r5, [r7, #1]
 800137e:	78be      	ldrb	r6, [r7, #2]
 8001380:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001384:	ed92 8a00 	vldr	s16, [r2]
 8001388:	ed92 7a01 	vldr	s14, [r2, #4]
 800138c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001390:	ed92 6a02 	vldr	s12, [r2, #8]
 8001394:	ed92 5a03 	vldr	s10, [r2, #12]
 8001398:	f897 e001 	ldrb.w	lr, [r7, #1]
 800139c:	f897 8002 	ldrb.w	r8, [r7, #2]
 80013a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80013a4:	ed92 4a04 	vldr	s8, [r2, #16]
 80013a8:	ed92 3a05 	vldr	s6, [r2, #20]
 80013ac:	ed92 2a06 	vldr	s4, [r2, #24]
 80013b0:	ed92 1a07 	vldr	s2, [r2, #28]
 80013b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80013b8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80013bc:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	edd5 6a00 	vldr	s13, [r5]
 80013c8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013cc:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013d0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013d4:	edd6 5a00 	vldr	s11, [r6]
 80013d8:	eddb 4a00 	vldr	s9, [fp]
 80013dc:	eddc 3a00 	vldr	s7, [ip]
 80013e0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013e8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013ec:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013f0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013f4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013f8:	edde 2a00 	vldr	s5, [lr]
 80013fc:	edd8 1a00 	vldr	s3, [r8]
 8001400:	edd9 0a00 	vldr	s1, [r9]
 8001404:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001408:	1d3f      	adds	r7, r7, #4
 800140a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800140e:	3220      	adds	r2, #32
 8001410:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001414:	1e40      	subs	r0, r0, #1
 8001416:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141a:	d1ae      	bne.n	800137a <ai_dict8_dot_array_f32+0x1e>
 800141c:	460d      	mov	r5, r1
 800141e:	f014 0007 	ands.w	r0, r4, #7
 8001422:	d03e      	beq.n	80014a2 <ai_dict8_dot_array_f32+0x146>
 8001424:	f010 0103 	ands.w	r1, r0, #3
 8001428:	f000 800d 	beq.w	8001446 <ai_dict8_dot_array_f32+0xea>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	ed92 1a00 	vldr	s2, [r2]
 8001434:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001438:	1d12      	adds	r2, r2, #4
 800143a:	edd6 0a00 	vldr	s1, [r6]
 800143e:	1e49      	subs	r1, r1, #1
 8001440:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001444:	d1f2      	bne.n	800142c <ai_dict8_dot_array_f32+0xd0>
 8001446:	0880      	lsrs	r0, r0, #2
 8001448:	f000 802b 	beq.w	80014a2 <ai_dict8_dot_array_f32+0x146>
 800144c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001450:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001454:	ed92 1a00 	vldr	s2, [r2]
 8001458:	edd2 0a01 	vldr	s1, [r2, #4]
 800145c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001464:	ed93 2a00 	vldr	s4, [r3]
 8001468:	edd1 1a00 	vldr	s3, [r1]
 800146c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001470:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001474:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800147c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001484:	edd2 0a02 	vldr	s1, [r2, #8]
 8001488:	ed91 2a00 	vldr	s4, [r1]
 800148c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001490:	edd3 1a00 	vldr	s3, [r3]
 8001494:	3210      	adds	r2, #16
 8001496:	ee02 0a20 	vmla.f32	s0, s4, s1
 800149a:	1e40      	subs	r0, r0, #1
 800149c:	ee01 0a81 	vmla.f32	s0, s3, s2
 80014a0:	d1d4      	bne.n	800144c <ai_dict8_dot_array_f32+0xf0>
 80014a2:	edda 0a00 	vldr	s1, [sl]
 80014a6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80014aa:	ed8a 0a00 	vstr	s0, [sl]
 80014ae:	ecbd 8b02 	vpop	{d8}
 80014b2:	b001      	add	sp, #4
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b8 <.text_5>:
 80014b8:	00000000 	.word	0x00000000

080014bc <ai_dict4_dot_array_f32>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	ed2d 8b02 	vpush	{d8}
 80014c4:	4680      	mov	r8, r0
 80014c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014ca:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ce:	461e      	mov	r6, r3
 80014d0:	0040      	lsls	r0, r0, #1
 80014d2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014d6:	460c      	mov	r4, r1
 80014d8:	4615      	mov	r5, r2
 80014da:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014de:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001620 <.text_7>
 80014e2:	d053      	beq.n	800158c <ai_dict4_dot_array_f32+0xd0>
 80014e4:	ed96 8a00 	vldr	s16, [r6]
 80014e8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014ec:	ed96 6a02 	vldr	s12, [r6, #8]
 80014f0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014f4:	7820      	ldrb	r0, [r4, #0]
 80014f6:	7861      	ldrb	r1, [r4, #1]
 80014f8:	78a2      	ldrb	r2, [r4, #2]
 80014fa:	78e7      	ldrb	r7, [r4, #3]
 80014fc:	ed96 4a04 	vldr	s8, [r6, #16]
 8001500:	ed96 3a05 	vldr	s6, [r6, #20]
 8001504:	ed96 2a06 	vldr	s4, [r6, #24]
 8001508:	ed96 1a07 	vldr	s2, [r6, #28]
 800150c:	f007 090f 	and.w	r9, r7, #15
 8001510:	093f      	lsrs	r7, r7, #4
 8001512:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001516:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800151a:	edd7 1a00 	vldr	s3, [r7]
 800151e:	edda 0a00 	vldr	s1, [sl]
 8001522:	f002 070f 	and.w	r7, r2, #15
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800152c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001530:	edd2 3a00 	vldr	s7, [r2]
 8001534:	edd7 2a00 	vldr	s5, [r7]
 8001538:	f001 020f 	and.w	r2, r1, #15
 800153c:	0909      	lsrs	r1, r1, #4
 800153e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001542:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001546:	edd1 5a00 	vldr	s11, [r1]
 800154a:	edd7 4a00 	vldr	s9, [r7]
 800154e:	f000 010f 	and.w	r1, r0, #15
 8001552:	0900      	lsrs	r0, r0, #4
 8001554:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001558:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800155c:	edd0 7a00 	vldr	s15, [r0]
 8001560:	edd2 6a00 	vldr	s13, [r2]
 8001564:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001568:	ee06 0a87 	vmla.f32	s0, s13, s14
 800156c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001570:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001574:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001578:	1d24      	adds	r4, r4, #4
 800157a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800157e:	3620      	adds	r6, #32
 8001580:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001584:	1e5b      	subs	r3, r3, #1
 8001586:	ee00 0a81 	vmla.f32	s0, s1, s2
 800158a:	d1ab      	bne.n	80014e4 <ai_dict4_dot_array_f32+0x28>
 800158c:	4576      	cmp	r6, lr
 800158e:	d22f      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 8001590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001594:	edd6 1a00 	vldr	s3, [r6]
 8001598:	edd6 0a01 	vldr	s1, [r6, #4]
 800159c:	f000 010f 	and.w	r1, r0, #15
 80015a0:	0900      	lsrs	r0, r0, #4
 80015a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015a6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015aa:	ed90 2a00 	vldr	s4, [r0]
 80015ae:	ed92 1a00 	vldr	s2, [r2]
 80015b2:	3608      	adds	r6, #8
 80015b4:	ee02 0a21 	vmla.f32	s0, s4, s3
 80015b8:	4576      	cmp	r6, lr
 80015ba:	ee01 0a20 	vmla.f32	s0, s2, s1
 80015be:	d217      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 80015c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015c4:	ed96 1a00 	vldr	s2, [r6]
 80015c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015cc:	f000 010f 	and.w	r1, r0, #15
 80015d0:	0900      	lsrs	r0, r0, #4
 80015d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015d6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015da:	edd0 1a00 	vldr	s3, [r0]
 80015de:	edd2 0a00 	vldr	s1, [r2]
 80015e2:	3608      	adds	r6, #8
 80015e4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015e8:	4576      	cmp	r6, lr
 80015ea:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ee:	d3cf      	bcc.n	8001590 <ai_dict4_dot_array_f32+0xd4>
 80015f0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015f4:	d509      	bpl.n	800160a <ai_dict4_dot_array_f32+0x14e>
 80015f6:	7821      	ldrb	r1, [r4, #0]
 80015f8:	ed96 1a00 	vldr	s2, [r6]
 80015fc:	0909      	lsrs	r1, r1, #4
 80015fe:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8001602:	edd0 0a00 	vldr	s1, [r0]
 8001606:	ee00 0a81 	vmla.f32	s0, s1, s2
 800160a:	edd8 1a00 	vldr	s3, [r8]
 800160e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001612:	ed88 0a00 	vstr	s0, [r8]
 8001616:	ecbd 8b02 	vpop	{d8}
 800161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001620 <.text_7>:
 8001620:	00000000 	.word	0x00000000

08001624 <ai_dict_decompress_f32>:
 8001624:	b4f0      	push	{r4, r5, r6, r7}
 8001626:	4604      	mov	r4, r0
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	9e04      	ldr	r6, [sp, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001632:	d003      	beq.n	800163c <ai_dict_decompress_f32+0x18>
 8001634:	2b08      	cmp	r3, #8
 8001636:	d03e      	beq.n	80016b6 <ai_dict_decompress_f32+0x92>
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	4770      	bx	lr
 800163c:	42ac      	cmp	r4, r5
 800163e:	d259      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 8001640:	0870      	lsrs	r0, r6, #1
 8001642:	d02e      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001644:	07c3      	lsls	r3, r0, #31
 8001646:	d50c      	bpl.n	8001662 <ai_dict_decompress_f32+0x3e>
 8001648:	780f      	ldrb	r7, [r1, #0]
 800164a:	093f      	lsrs	r7, r7, #4
 800164c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001656:	f007 070f 	and.w	r7, r7, #15
 800165a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	3408      	adds	r4, #8
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	d01d      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001666:	780b      	ldrb	r3, [r1, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800166e:	6027      	str	r7, [r4, #0]
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800167c:	6067      	str	r7, [r4, #4]
 800167e:	f104 0308 	add.w	r3, r4, #8
 8001682:	780c      	ldrb	r4, [r1, #0]
 8001684:	0924      	lsrs	r4, r4, #4
 8001686:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800168a:	601f      	str	r7, [r3, #0]
 800168c:	1e40      	subs	r0, r0, #1
 800168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001692:	f004 040f 	and.w	r4, r4, #15
 8001696:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800169a:	605f      	str	r7, [r3, #4]
 800169c:	f103 0408 	add.w	r4, r3, #8
 80016a0:	d1e1      	bne.n	8001666 <ai_dict_decompress_f32+0x42>
 80016a2:	07f0      	lsls	r0, r6, #31
 80016a4:	d5ca      	bpl.n	800163c <ai_dict_decompress_f32+0x18>
 80016a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	f844 0b04 	str.w	r0, [r4], #4
 80016b4:	e7c2      	b.n	800163c <ai_dict_decompress_f32+0x18>
 80016b6:	42ac      	cmp	r4, r5
 80016b8:	d21c      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016ba:	7808      	ldrb	r0, [r1, #0]
 80016bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016c0:	6020      	str	r0, [r4, #0]
 80016c2:	1d20      	adds	r0, r4, #4
 80016c4:	42a8      	cmp	r0, r5
 80016c6:	bf3f      	itttt	cc
 80016c8:	784c      	ldrbcc	r4, [r1, #1]
 80016ca:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ce:	f840 3b04 	strcc.w	r3, [r0], #4
 80016d2:	42a8      	cmpcc	r0, r5
 80016d4:	d20e      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016d6:	788b      	ldrb	r3, [r1, #2]
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	42a8      	cmp	r0, r5
 80016e2:	d207      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016e4:	78cc      	ldrb	r4, [r1, #3]
 80016e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ea:	1d09      	adds	r1, r1, #4
 80016ec:	1d04      	adds	r4, r0, #4
 80016ee:	42ac      	cmp	r4, r5
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	d3e2      	bcc.n	80016ba <ai_dict_decompress_f32+0x96>
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr

080016f8 <forward_conv2d>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4605      	mov	r5, r0
 80016fe:	b0a9      	sub	sp, #164	; 0xa4
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	8819      	ldrh	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	bf1a      	itte	ne
 8001708:	6858      	ldrne	r0, [r3, #4]
 800170a:	1d00      	addne	r0, r0, #4
 800170c:	2004      	moveq	r0, #4
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	2800      	cmp	r0, #0
 8001712:	bf14      	ite	ne
 8001714:	6802      	ldrne	r2, [r0, #0]
 8001716:	2200      	moveq	r2, #0
 8001718:	2901      	cmp	r1, #1
 800171a:	bfc6      	itte	gt
 800171c:	6858      	ldrgt	r0, [r3, #4]
 800171e:	3010      	addgt	r0, #16
 8001720:	2004      	movle	r0, #4
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	2800      	cmp	r0, #0
 8001726:	bf14      	ite	ne
 8001728:	f8d0 a000 	ldrne.w	sl, [r0]
 800172c:	f04f 0a00 	moveq.w	sl, #0
 8001730:	2902      	cmp	r1, #2
 8001732:	bfc6      	itte	gt
 8001734:	6858      	ldrgt	r0, [r3, #4]
 8001736:	f100 041c 	addgt.w	r4, r0, #28
 800173a:	2404      	movle	r4, #4
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	2800      	cmp	r0, #0
 8001740:	bf14      	ite	ne
 8001742:	6806      	ldrne	r6, [r0, #0]
 8001744:	2600      	moveq	r6, #0
 8001746:	2902      	cmp	r1, #2
 8001748:	dd0a      	ble.n	8001760 <forward_conv2d+0x68>
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f113 0118 	adds.w	r1, r3, #24
 8001750:	d006      	beq.n	8001760 <forward_conv2d+0x68>
 8001752:	8b19      	ldrh	r1, [r3, #24]
 8001754:	2901      	cmp	r1, #1
 8001756:	dd03      	ble.n	8001760 <forward_conv2d+0x68>
 8001758:	69d9      	ldr	r1, [r3, #28]
 800175a:	b109      	cbz	r1, 8001760 <forward_conv2d+0x68>
 800175c:	6849      	ldr	r1, [r1, #4]
 800175e:	e000      	b.n	8001762 <forward_conv2d+0x6a>
 8001760:	2100      	movs	r1, #0
 8001762:	b100      	cbz	r0, 8001766 <forward_conv2d+0x6e>
 8001764:	6880      	ldr	r0, [r0, #8]
 8001766:	68d7      	ldr	r7, [r2, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	931b      	str	r3, [sp, #108]	; 0x6c
 800176c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001770:	685c      	ldr	r4, [r3, #4]
 8001772:	9404      	str	r4, [sp, #16]
 8001774:	68dc      	ldr	r4, [r3, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	9314      	str	r3, [sp, #80]	; 0x50
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	931a      	str	r3, [sp, #104]	; 0x68
 800177e:	68bf      	ldr	r7, [r7, #8]
 8001780:	9720      	str	r7, [sp, #128]	; 0x80
 8001782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001784:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001788:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800178a:	971f      	str	r7, [sp, #124]	; 0x7c
 800178c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800178e:	681f      	ldr	r7, [r3, #0]
 8001790:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	9319      	str	r3, [sp, #100]	; 0x64
 8001798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179a:	9318      	str	r3, [sp, #96]	; 0x60
 800179c:	68f3      	ldr	r3, [r6, #12]
 800179e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	9312      	str	r3, [sp, #72]	; 0x48
 80017aa:	69ab      	ldr	r3, [r5, #24]
 80017ac:	931e      	str	r3, [sp, #120]	; 0x78
 80017ae:	6992      	ldr	r2, [r2, #24]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	931d      	str	r3, [sp, #116]	; 0x74
 80017b4:	69b2      	ldr	r2, [r6, #24]
 80017b6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80017ba:	b119      	cbz	r1, 80017c4 <forward_conv2d+0xcc>
 80017bc:	698a      	ldr	r2, [r1, #24]
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xd0>
 80017c4:	2200      	movs	r2, #0
 80017c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	69e9      	ldr	r1, [r5, #28]
 80017d2:	b118      	cbz	r0, 80017dc <forward_conv2d+0xe4>
 80017d4:	6981      	ldr	r1, [r0, #24]
 80017d6:	688a      	ldr	r2, [r1, #8]
 80017d8:	9215      	str	r2, [sp, #84]	; 0x54
 80017da:	e005      	b.n	80017e8 <forward_conv2d+0xf0>
 80017dc:	b111      	cbz	r1, 80017e4 <forward_conv2d+0xec>
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	9215      	str	r2, [sp, #84]	; 0x54
 80017e2:	e001      	b.n	80017e8 <forward_conv2d+0xf0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	9315      	str	r3, [sp, #84]	; 0x54
 80017e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ea:	9102      	str	r1, [sp, #8]
 80017ec:	b920      	cbnz	r0, 80017f8 <forward_conv2d+0x100>
 80017ee:	2100      	movs	r1, #0
 80017f0:	2201      	movs	r2, #1
 80017f2:	9124      	str	r1, [sp, #144]	; 0x90
 80017f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017f6:	e008      	b.n	800180a <forward_conv2d+0x112>
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	688a      	ldr	r2, [r1, #8]
 80017fc:	9224      	str	r2, [sp, #144]	; 0x90
 80017fe:	6980      	ldr	r0, [r0, #24]
 8001800:	6841      	ldr	r1, [r0, #4]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f004 fb3e 	bl	8005e84 <ai_array_get_byte_size>
 8001808:	9023      	str	r0, [sp, #140]	; 0x8c
 800180a:	aa18      	add	r2, sp, #96	; 0x60
 800180c:	6a28      	ldr	r0, [r5, #32]
 800180e:	2800      	cmp	r0, #0
 8001810:	bf12      	itee	ne
 8001812:	9022      	strne	r0, [sp, #136]	; 0x88
 8001814:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002540 <.text_15>
 8001818:	9122      	streq	r1, [sp, #136]	; 0x88
 800181a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	1e48      	subs	r0, r1, #1
 8001820:	1e5b      	subs	r3, r3, #1
 8001822:	aa19      	add	r2, sp, #100	; 0x64
 8001824:	fb03 1100 	mla	r1, r3, r0, r1
 8001828:	9116      	str	r1, [sp, #88]	; 0x58
 800182a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800182c:	8813      	ldrh	r3, [r2, #0]
 800182e:	1e41      	subs	r1, r0, #1
 8001830:	1e5b      	subs	r3, r3, #1
 8001832:	fb03 0001 	mla	r0, r3, r1, r0
 8001836:	901c      	str	r0, [sp, #112]	; 0x70
 8001838:	2200      	movs	r2, #0
 800183a:	69b6      	ldr	r6, [r6, #24]
 800183c:	6831      	ldr	r1, [r6, #0]
 800183e:	11cb      	asrs	r3, r1, #7
 8001840:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001844:	1449      	asrs	r1, r1, #17
 8001846:	f001 010f 	and.w	r1, r1, #15
 800184a:	2000      	movs	r0, #0
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	f00c 0c03 	and.w	ip, ip, #3
 8001854:	2904      	cmp	r1, #4
 8001856:	4683      	mov	fp, r0
 8001858:	fa23 f30c 	lsr.w	r3, r3, ip
 800185c:	bf14      	ite	ne
 800185e:	2908      	cmpne	r1, #8
 8001860:	68f2      	ldreq	r2, [r6, #12]
 8001862:	b1da      	cbz	r2, 800189c <forward_conv2d+0x1a4>
 8001864:	6969      	ldr	r1, [r5, #20]
 8001866:	880d      	ldrh	r5, [r1, #0]
 8001868:	2d04      	cmp	r5, #4
 800186a:	bfa6      	itte	ge
 800186c:	6849      	ldrge	r1, [r1, #4]
 800186e:	3128      	addge	r1, #40	; 0x28
 8001870:	2104      	movlt	r1, #4
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	2900      	cmp	r1, #0
 8001876:	bf1f      	itttt	ne
 8001878:	6808      	ldrne	r0, [r1, #0]
 800187a:	2800      	cmpne	r0, #0
 800187c:	6981      	ldrne	r1, [r0, #24]
 800187e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001882:	6980      	ldr	r0, [r0, #24]
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001888:	9101      	str	r1, [sp, #4]
 800188a:	9000      	str	r0, [sp, #0]
 800188c:	4658      	mov	r0, fp
 800188e:	68b1      	ldr	r1, [r6, #8]
 8001890:	f7ff fec8 	bl	8001624 <ai_dict_decompress_f32>
 8001894:	f1bb 0f00 	cmp.w	fp, #0
 8001898:	bf18      	it	ne
 800189a:	46d9      	movne	r9, fp
 800189c:	b2bf      	uxth	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d073      	beq.n	800198c <forward_conv2d+0x294>
 80018a4:	4622      	mov	r2, r4
 80018a6:	f1c8 0800 	rsb	r8, r8, #0
 80018aa:	9c04      	ldr	r4, [sp, #16]
 80018ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80018b0:	9e02      	ldr	r6, [sp, #8]
 80018b2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80018b6:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 80018ba:	9711      	str	r7, [sp, #68]	; 0x44
 80018bc:	9221      	str	r2, [sp, #132]	; 0x84
 80018be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018c6:	9025      	str	r0, [sp, #148]	; 0x94
 80018c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018ca:	4240      	negs	r0, r0
 80018cc:	bfd8      	it	le
 80018ce:	2000      	movle	r0, #0
 80018d0:	1a89      	subs	r1, r1, r2
 80018d2:	4299      	cmp	r1, r3
 80018d4:	bf3d      	ittte	cc
 80018d6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018d8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018da:	1a51      	subcc	r1, r2, r1
 80018dc:	4619      	movcs	r1, r3
 80018de:	910a      	str	r1, [sp, #40]	; 0x28
 80018e0:	9009      	str	r0, [sp, #36]	; 0x24
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	b212      	sxth	r2, r2
 80018f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001906:	930e      	str	r3, [sp, #56]	; 0x38
 8001908:	920d      	str	r2, [sp, #52]	; 0x34
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001910:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001914:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	920b      	str	r2, [sp, #44]	; 0x2c
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001922:	4659      	mov	r1, fp
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fa43 	bl	8000db0 <ai_conv2d_stripe_f32>
 800192a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192c:	b310      	cbz	r0, 8001974 <forward_conv2d+0x27c>
 800192e:	f8cd a000 	str.w	sl, [sp]
 8001932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001934:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001936:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800193a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800193e:	4682      	mov	sl, r0
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	6981      	ldr	r1, [r0, #24]
 8001944:	f8c1 b008 	str.w	fp, [r1, #8]
 8001948:	462b      	mov	r3, r5
 800194a:	4622      	mov	r2, r4
 800194c:	4608      	mov	r0, r1
 800194e:	47c8      	blx	r9
 8001950:	443d      	add	r5, r7
 8001952:	1ba8      	subs	r0, r5, r6
 8001954:	4540      	cmp	r0, r8
 8001956:	bfa8      	it	ge
 8001958:	4635      	movge	r5, r6
 800195a:	f1ba 0a01 	subs.w	sl, sl, #1
 800195e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001962:	d1ed      	bne.n	8001940 <forward_conv2d+0x248>
 8001964:	f8dd a000 	ldr.w	sl, [sp]
 8001968:	9515      	str	r5, [sp, #84]	; 0x54
 800196a:	9724      	str	r7, [sp, #144]	; 0x90
 800196c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001970:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001974:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001978:	68c1      	ldr	r1, [r0, #12]
 800197a:	6081      	str	r1, [r0, #8]
 800197c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800197e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001980:	1808      	adds	r0, r1, r0
 8001982:	9011      	str	r0, [sp, #68]	; 0x44
 8001984:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001986:	1e40      	subs	r0, r0, #1
 8001988:	9021      	str	r0, [sp, #132]	; 0x84
 800198a:	d198      	bne.n	80018be <forward_conv2d+0x1c6>
 800198c:	b029      	add	sp, #164	; 0xa4
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001994 <forward_conv2d_nl_pool>:
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	b0b9      	sub	sp, #228	; 0xe4
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	bf1a      	itte	ne
 80019a4:	6858      	ldrne	r0, [r3, #4]
 80019a6:	1d00      	addne	r0, r0, #4
 80019a8:	2004      	moveq	r0, #4
 80019aa:	6800      	ldr	r0, [r0, #0]
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bf14      	ite	ne
 80019b0:	6802      	ldrne	r2, [r0, #0]
 80019b2:	2200      	moveq	r2, #0
 80019b4:	2901      	cmp	r1, #1
 80019b6:	bfc6      	itte	gt
 80019b8:	6858      	ldrgt	r0, [r3, #4]
 80019ba:	3010      	addgt	r0, #16
 80019bc:	2004      	movle	r0, #4
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	bf14      	ite	ne
 80019c4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019c8:	f04f 0900 	moveq.w	r9, #0
 80019cc:	2902      	cmp	r1, #2
 80019ce:	bfc6      	itte	gt
 80019d0:	6858      	ldrgt	r0, [r3, #4]
 80019d2:	f100 071c 	addgt.w	r7, r0, #28
 80019d6:	2704      	movle	r7, #4
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	2800      	cmp	r0, #0
 80019dc:	bf14      	ite	ne
 80019de:	6806      	ldrne	r6, [r0, #0]
 80019e0:	2600      	moveq	r6, #0
 80019e2:	2902      	cmp	r1, #2
 80019e4:	dd0a      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f113 0118 	adds.w	r1, r3, #24
 80019ec:	d006      	beq.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019ee:	8b19      	ldrh	r1, [r3, #24]
 80019f0:	2901      	cmp	r1, #1
 80019f2:	dd03      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019f4:	69d9      	ldr	r1, [r3, #28]
 80019f6:	b109      	cbz	r1, 80019fc <forward_conv2d_nl_pool+0x68>
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	e000      	b.n	80019fe <forward_conv2d_nl_pool+0x6a>
 80019fc:	2100      	movs	r1, #0
 80019fe:	b100      	cbz	r0, 8001a02 <forward_conv2d_nl_pool+0x6e>
 8001a00:	6880      	ldr	r0, [r0, #8]
 8001a02:	68d7      	ldr	r7, [r2, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a08:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	9322      	str	r3, [sp, #136]	; 0x88
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	9321      	str	r3, [sp, #132]	; 0x84
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001a1c:	68bf      	ldr	r7, [r7, #8]
 8001a1e:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a26:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a28:	9720      	str	r7, [sp, #128]	; 0x80
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	881f      	ldrh	r7, [r3, #0]
 8001a2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a32:	689d      	ldr	r5, [r3, #8]
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a40:	68f3      	ldr	r3, [r6, #12]
 8001a42:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a46:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a50:	932b      	str	r3, [sp, #172]	; 0xac
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a54:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
 8001a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a5c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	6992      	ldr	r2, [r2, #24]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	69b2      	ldr	r2, [r6, #24]
 8001a6c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a70:	b119      	cbz	r1, 8001a7a <forward_conv2d_nl_pool+0xe6>
 8001a72:	698a      	ldr	r2, [r1, #24]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	931d      	str	r3, [sp, #116]	; 0x74
 8001a78:	e001      	b.n	8001a7e <forward_conv2d_nl_pool+0xea>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	b118      	cbz	r0, 8001a8a <forward_conv2d_nl_pool+0xf6>
 8001a82:	6981      	ldr	r1, [r0, #24]
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	921c      	str	r2, [sp, #112]	; 0x70
 8001a88:	e005      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a8a:	b111      	cbz	r1, 8001a92 <forward_conv2d_nl_pool+0xfe>
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a90:	e001      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a92:	2300      	movs	r3, #0
 8001a94:	931c      	str	r3, [sp, #112]	; 0x70
 8001a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	b920      	cbnz	r0, 8001aa6 <forward_conv2d_nl_pool+0x112>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8001aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8001aa4:	e008      	b.n	8001ab8 <forward_conv2d_nl_pool+0x124>
 8001aa6:	6941      	ldr	r1, [r0, #20]
 8001aa8:	688a      	ldr	r2, [r1, #8]
 8001aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8001aac:	6980      	ldr	r0, [r0, #24]
 8001aae:	6841      	ldr	r1, [r0, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f004 f9e7 	bl	8005e84 <ai_array_get_byte_size>
 8001ab6:	9015      	str	r0, [sp, #84]	; 0x54
 8001ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bf12      	itee	ne
 8001ac0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ac2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002540 <.text_15>
 8001ac6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001ac8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001acc:	8813      	ldrh	r3, [r2, #0]
 8001ace:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ad0:	1e5b      	subs	r3, r3, #1
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ad6:	fb03 0001 	mla	r0, r3, r1, r0
 8001ada:	9018      	str	r0, [sp, #96]	; 0x60
 8001adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ade:	8813      	ldrh	r3, [r2, #0]
 8001ae0:	1e48      	subs	r0, r1, #1
 8001ae2:	1e5b      	subs	r3, r3, #1
 8001ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001aee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001af0:	9112      	str	r1, [sp, #72]	; 0x48
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001af8:	fa12 f085 	uxtah	r0, r2, r5
 8001afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b00:	1c49      	adds	r1, r1, #1
 8001b02:	9114      	str	r1, [sp, #80]	; 0x50
 8001b04:	2000      	movs	r0, #0
 8001b06:	69b6      	ldr	r6, [r6, #24]
 8001b08:	6831      	ldr	r1, [r6, #0]
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	11cb      	asrs	r3, r1, #7
 8001b10:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001b14:	1449      	asrs	r1, r1, #17
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	f00c 0c03 	and.w	ip, ip, #3
 8001b22:	2904      	cmp	r1, #4
 8001b24:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b28:	bf14      	ite	ne
 8001b2a:	2908      	cmpne	r1, #8
 8001b2c:	68f2      	ldreq	r2, [r6, #12]
 8001b2e:	b1da      	cbz	r2, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b30:	6961      	ldr	r1, [r4, #20]
 8001b32:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b36:	f1bc 0f04 	cmp.w	ip, #4
 8001b3a:	bfa6      	itte	ge
 8001b3c:	6849      	ldrge	r1, [r1, #4]
 8001b3e:	3128      	addge	r1, #40	; 0x28
 8001b40:	2104      	movlt	r1, #4
 8001b42:	6809      	ldr	r1, [r1, #0]
 8001b44:	2900      	cmp	r1, #0
 8001b46:	bf1f      	itttt	ne
 8001b48:	6848      	ldrne	r0, [r1, #4]
 8001b4a:	2800      	cmpne	r0, #0
 8001b4c:	6981      	ldrne	r1, [r0, #24]
 8001b4e:	688d      	ldrne	r5, [r1, #8]
 8001b50:	6980      	ldr	r0, [r0, #24]
 8001b52:	6841      	ldr	r1, [r0, #4]
 8001b54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f7ff fd61 	bl	8001624 <ai_dict_decompress_f32>
 8001b62:	b10d      	cbz	r5, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b64:	4628      	mov	r0, r5
 8001b66:	e000      	b.n	8001b6a <forward_conv2d_nl_pool+0x1d6>
 8001b68:	4658      	mov	r0, fp
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b70:	881c      	ldrh	r4, [r3, #0]
 8001b72:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b76:	2600      	movs	r6, #0
 8001b78:	2c04      	cmp	r4, #4
 8001b7a:	bfa6      	itte	ge
 8001b7c:	685b      	ldrge	r3, [r3, #4]
 8001b7e:	3328      	addge	r3, #40	; 0x28
 8001b80:	2304      	movlt	r3, #4
 8001b82:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	681d      	ldrne	r5, [r3, #0]
 8001b8e:	2500      	moveq	r5, #0
 8001b90:	427f      	negs	r7, r7
 8001b92:	69ac      	ldr	r4, [r5, #24]
 8001b94:	68eb      	ldr	r3, [r5, #12]
 8001b96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b9e:	435c      	muls	r4, r3
 8001ba0:	fb0c f404 	mul.w	r4, ip, r4
 8001ba4:	9437      	str	r4, [sp, #220]	; 0xdc
 8001ba6:	fa0f f28a 	sxth.w	r2, sl
 8001baa:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bae:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001bb2:	9436      	str	r4, [sp, #216]	; 0xd8
 8001bb4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001bb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bba:	fb0c f404 	mul.w	r4, ip, r4
 8001bbe:	9435      	str	r4, [sp, #212]	; 0xd4
 8001bc0:	f1c8 0800 	rsb	r8, r8, #0
 8001bc4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bc8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bce:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bd2:	435c      	muls	r4, r3
 8001bd4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	f000 812e 	beq.w	8001e3a <forward_conv2d_nl_pool+0x4a6>
 8001bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001be2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001be4:	9125      	str	r1, [sp, #148]	; 0x94
 8001be6:	4614      	mov	r4, r2
 8001be8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bea:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bec:	9324      	str	r3, [sp, #144]	; 0x90
 8001bee:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dd6a      	ble.n	8001ccc <forward_conv2d_nl_pool+0x338>
 8001bf6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bf8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bfe:	9031      	str	r0, [sp, #196]	; 0xc4
 8001c00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001c02:	4240      	negs	r0, r0
 8001c04:	bfd8      	it	le
 8001c06:	2000      	movle	r0, #0
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	bf3d      	ittte	cc
 8001c0e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001c10:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001c12:	1a51      	subcc	r1, r2, r1
 8001c14:	4619      	movcs	r1, r3
 8001c16:	9009      	str	r0, [sp, #36]	; 0x24
 8001c18:	910a      	str	r1, [sp, #40]	; 0x28
 8001c1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001c1c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c24:	9008      	str	r0, [sp, #32]
 8001c26:	9107      	str	r1, [sp, #28]
 8001c28:	b212      	sxth	r2, r2
 8001c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c2e:	9006      	str	r0, [sp, #24]
 8001c30:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c32:	9105      	str	r1, [sp, #20]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c3c:	9004      	str	r0, [sp, #16]
 8001c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c40:	920d      	str	r2, [sp, #52]	; 0x34
 8001c42:	9103      	str	r1, [sp, #12]
 8001c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c4a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	4659      	mov	r1, fp
 8001c56:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f8a6 	bl	8000db0 <ai_conv2d_stripe_f32>
 8001c64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c66:	b350      	cbz	r0, 8001cbe <forward_conv2d_nl_pool+0x32a>
 8001c68:	f8cd a008 	str.w	sl, [sp, #8]
 8001c6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c70:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c74:	4682      	mov	sl, r0
 8001c76:	69a9      	ldr	r1, [r5, #24]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	4608      	mov	r0, r1
 8001c82:	47c0      	blx	r8
 8001c84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c86:	9902      	ldr	r1, [sp, #8]
 8001c88:	4407      	add	r7, r0
 8001c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c8c:	1a79      	subs	r1, r7, r1
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	69a8      	ldr	r0, [r5, #24]
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	68c0      	ldr	r0, [r0, #12]
 8001c96:	bfa8      	it	ge
 8001c98:	9f02      	ldrge	r7, [sp, #8]
 8001c9a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c9e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	d302      	bcc.n	8001cac <forward_conv2d_nl_pool+0x318>
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	448b      	add	fp, r1
 8001cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8001cb0:	d1e1      	bne.n	8001c76 <forward_conv2d_nl_pool+0x2e2>
 8001cb2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001cb6:	9610      	str	r6, [sp, #64]	; 0x40
 8001cb8:	971c      	str	r7, [sp, #112]	; 0x70
 8001cba:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001cbe:	69a8      	ldr	r0, [r5, #24]
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6081      	str	r1, [r0, #8]
 8001cc4:	f109 0001 	add.w	r0, r9, #1
 8001cc8:	fa0f f980 	sxth.w	r9, r0
 8001ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cce:	1e40      	subs	r0, r0, #1
 8001cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cd2:	d56b      	bpl.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001cd4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cd6:	fb00 f009 	mul.w	r0, r0, r9
 8001cda:	0080      	lsls	r0, r0, #2
 8001cdc:	4240      	negs	r0, r0
 8001cde:	eb0b 0200 	add.w	r2, fp, r0
 8001ce2:	69a8      	ldr	r0, [r5, #24]
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	bf3c      	itt	cc
 8001cea:	6847      	ldrcc	r7, [r0, #4]
 8001cec:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	d236      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cf8:	45b1      	cmp	r9, r6
 8001cfa:	d033      	beq.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cfc:	6846      	ldr	r6, [r0, #4]
 8001cfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f080 802e 	bcs.w	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d08:	ed92 0a00 	vldr	s0, [r2]
 8001d0c:	ed8b 0a00 	vstr	s0, [fp]
 8001d10:	68c3      	ldr	r3, [r0, #12]
 8001d12:	6846      	ldr	r6, [r0, #4]
 8001d14:	1d12      	adds	r2, r2, #4
 8001d16:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1a:	42ba      	cmp	r2, r7
 8001d1c:	d222      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d1e:	edd2 0a00 	vldr	s1, [r2]
 8001d22:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d26:	68c3      	ldr	r3, [r0, #12]
 8001d28:	6846      	ldr	r6, [r0, #4]
 8001d2a:	1d12      	adds	r2, r2, #4
 8001d2c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d30:	42ba      	cmp	r2, r7
 8001d32:	d217      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d34:	ed92 0a00 	vldr	s0, [r2]
 8001d38:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d3c:	68c3      	ldr	r3, [r0, #12]
 8001d3e:	6846      	ldr	r6, [r0, #4]
 8001d40:	1d12      	adds	r2, r2, #4
 8001d42:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d46:	42ba      	cmp	r2, r7
 8001d48:	d20c      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d4a:	edd2 0a00 	vldr	s1, [r2]
 8001d4e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d52:	68c3      	ldr	r3, [r0, #12]
 8001d54:	6846      	ldr	r6, [r0, #4]
 8001d56:	1d12      	adds	r2, r2, #4
 8001d58:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	f10b 0b10 	add.w	fp, fp, #16
 8001d62:	d3d1      	bcc.n	8001d08 <forward_conv2d_nl_pool+0x374>
 8001d64:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	189a      	adds	r2, r3, r2
 8001d6a:	eba2 0209 	sub.w	r2, r2, r9
 8001d6e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d74:	444a      	add	r2, r9
 8001d76:	fa0f f982 	sxth.w	r9, r2
 8001d7a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d7e:	68c1      	ldr	r1, [r0, #12]
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d86:	459b      	cmp	fp, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	d30f      	bcc.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	008a      	lsls	r2, r1, #2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4493      	add	fp, r2
 8001d94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d98:	458b      	cmp	fp, r1
 8001d9a:	bf24      	itt	cs
 8001d9c:	4493      	addcs	fp, r2
 8001d9e:	458b      	cmpcs	fp, r1
 8001da0:	bf21      	itttt	cs
 8001da2:	4493      	addcs	fp, r2
 8001da4:	458b      	cmpcs	fp, r1
 8001da6:	4493      	addcs	fp, r2
 8001da8:	458b      	cmpcs	fp, r1
 8001daa:	d2ef      	bcs.n	8001d8c <forward_conv2d_nl_pool+0x3f8>
 8001dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dae:	4581      	cmp	r9, r0
 8001db0:	d339      	bcc.n	8001e26 <forward_conv2d_nl_pool+0x492>
 8001db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001db8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001dba:	eba9 0001 	sub.w	r0, r9, r1
 8001dbe:	fa0f f980 	sxth.w	r9, r0
 8001dc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001dc4:	1c40      	adds	r0, r0, #1
 8001dc6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001dc8:	2101      	movs	r1, #1
 8001dca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	9107      	str	r1, [sp, #28]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	b280      	uxth	r0, r0
 8001dda:	9005      	str	r0, [sp, #20]
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001de2:	9104      	str	r1, [sp, #16]
 8001de4:	b280      	uxth	r0, r0
 8001de6:	b2a1      	uxth	r1, r4
 8001de8:	9002      	str	r0, [sp, #8]
 8001dea:	9103      	str	r1, [sp, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001df0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df2:	b280      	uxth	r0, r0
 8001df4:	b289      	uxth	r1, r1
 8001df6:	9000      	str	r0, [sp, #0]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	69a8      	ldr	r0, [r5, #24]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	b289      	uxth	r1, r1
 8001e06:	47b0      	blx	r6
 8001e08:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e0a:	6881      	ldr	r1, [r0, #8]
 8001e0c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001e0e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001e12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e14:	608a      	str	r2, [r1, #8]
 8001e16:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001e18:	1a20      	subs	r0, r4, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	bfc3      	ittte	gt
 8001e1e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e20:	1a24      	subgt	r4, r4, r0
 8001e22:	b224      	sxthgt	r4, r4
 8001e24:	2400      	movle	r4, #0
 8001e26:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e2a:	1808      	adds	r0, r1, r0
 8001e2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e30:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e32:	4288      	cmp	r0, r1
 8001e34:	f4ff aedc 	bcc.w	8001bf0 <forward_conv2d_nl_pool+0x25c>
 8001e38:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e3a:	69a8      	ldr	r0, [r5, #24]
 8001e3c:	68c2      	ldr	r2, [r0, #12]
 8001e3e:	6082      	str	r2, [r0, #8]
 8001e40:	68c8      	ldr	r0, [r1, #12]
 8001e42:	6088      	str	r0, [r1, #8]
 8001e44:	b039      	add	sp, #228	; 0xe4
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e4c <forward_dense>:
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b081      	sub	sp, #4
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b088      	sub	sp, #32
 8001e58:	6944      	ldr	r4, [r0, #20]
 8001e5a:	8820      	ldrh	r0, [r4, #0]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	bf1a      	itte	ne
 8001e60:	6861      	ldrne	r1, [r4, #4]
 8001e62:	1d09      	addne	r1, r1, #4
 8001e64:	2104      	moveq	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680a      	ldrne	r2, [r1, #0]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	bfa6      	itte	ge
 8001e74:	6861      	ldrge	r1, [r4, #4]
 8001e76:	3110      	addge	r1, #16
 8001e78:	2104      	movlt	r1, #4
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	680f      	ldrne	r7, [r1, #0]
 8001e82:	2700      	moveq	r7, #0
 8001e84:	2802      	cmp	r0, #2
 8001e86:	bfc6      	itte	gt
 8001e88:	6861      	ldrgt	r1, [r4, #4]
 8001e8a:	311c      	addgt	r1, #28
 8001e8c:	2104      	movle	r1, #4
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	bf14      	ite	ne
 8001e94:	680b      	ldrne	r3, [r1, #0]
 8001e96:	2300      	moveq	r3, #0
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	dd0b      	ble.n	8001eb4 <forward_dense+0x68>
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	f111 0018 	adds.w	r0, r1, #24
 8001ea2:	d007      	beq.n	8001eb4 <forward_dense+0x68>
 8001ea4:	8b08      	ldrh	r0, [r1, #24]
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	db04      	blt.n	8001eb4 <forward_dense+0x68>
 8001eaa:	69c8      	ldr	r0, [r1, #28]
 8001eac:	b110      	cbz	r0, 8001eb4 <forward_dense+0x68>
 8001eae:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001eb2:	e001      	b.n	8001eb8 <forward_dense+0x6c>
 8001eb4:	f04f 0a00 	mov.w	sl, #0
 8001eb8:	68d0      	ldr	r0, [r2, #12]
 8001eba:	6844      	ldr	r4, [r0, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	6845      	ldr	r5, [r0, #4]
 8001ec0:	6881      	ldr	r1, [r0, #8]
 8001ec2:	68c0      	ldr	r0, [r0, #12]
 8001ec4:	699e      	ldr	r6, [r3, #24]
 8001ec6:	69bf      	ldr	r7, [r7, #24]
 8001ec8:	f8d6 e000 	ldr.w	lr, [r6]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	68bf      	ldr	r7, [r7, #8]
 8001ed0:	4341      	muls	r1, r0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001ed8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001edc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ee0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ee4:	f1be 0f04 	cmp.w	lr, #4
 8001ee8:	bf14      	ite	ne
 8001eea:	f1be 0f08 	cmpne.w	lr, #8
 8001eee:	68f0      	ldreq	r0, [r6, #12]
 8001ef0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ef4:	f008 0803 	and.w	r8, r8, #3
 8001ef8:	695e      	ldr	r6, [r3, #20]
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	fa29 f908 	lsr.w	r9, r9, r8
 8001f00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f04:	2900      	cmp	r1, #0
 8001f06:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001f0a:	f000 80ea 	beq.w	80020e2 <forward_dense+0x296>
 8001f0e:	9307      	str	r3, [sp, #28]
 8001f10:	f8cd a014 	str.w	sl, [sp, #20]
 8001f14:	9506      	str	r5, [sp, #24]
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	9104      	str	r1, [sp, #16]
 8001f1a:	9907      	ldr	r1, [sp, #28]
 8001f1c:	698a      	ldr	r2, [r1, #24]
 8001f1e:	9905      	ldr	r1, [sp, #20]
 8001f20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bf1a      	itte	ne
 8001f2a:	698a      	ldrne	r2, [r1, #24]
 8001f2c:	6892      	ldrne	r2, [r2, #8]
 8001f2e:	2200      	moveq	r2, #0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80ab 	bne.w	800208c <forward_dense+0x240>
 8001f36:	429f      	cmp	r7, r3
 8001f38:	f080 80c7 	bcs.w	80020ca <forward_dense+0x27e>
 8001f3c:	9003      	str	r0, [sp, #12]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf0e      	itee	eq
 8001f42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020f0 <.text_12>
 8001f46:	ed92 0a00 	vldrne	s0, [r2]
 8001f4a:	1d12      	addne	r2, r2, #4
 8001f4c:	2c04      	cmp	r4, #4
 8001f4e:	4620      	mov	r0, r4
 8001f50:	46c6      	mov	lr, r8
 8001f52:	46dc      	mov	ip, fp
 8001f54:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020f0 <.text_12>
 8001f58:	d35d      	bcc.n	8002016 <forward_dense+0x1ca>
 8001f5a:	08a1      	lsrs	r1, r4, #2
 8001f5c:	07cd      	lsls	r5, r1, #31
 8001f5e:	d51c      	bpl.n	8001f9a <forward_dense+0x14e>
 8001f60:	ed9c 4a00 	vldr	s8, [ip]
 8001f64:	edde 4a00 	vldr	s9, [lr]
 8001f68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f74:	edde 2a02 	vldr	s5, [lr, #8]
 8001f78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f90:	f10e 0e10 	add.w	lr, lr, #16
 8001f94:	f10c 0c10 	add.w	ip, ip, #16
 8001f98:	1f00      	subs	r0, r0, #4
 8001f9a:	0849      	lsrs	r1, r1, #1
 8001f9c:	f000 803b 	beq.w	8002016 <forward_dense+0x1ca>
 8001fa0:	edde 4a00 	vldr	s9, [lr]
 8001fa4:	edde 3a01 	vldr	s7, [lr, #4]
 8001fa8:	edde 2a02 	vldr	s5, [lr, #8]
 8001fac:	edde 1a03 	vldr	s3, [lr, #12]
 8001fb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001fb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001fb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001fbc:	ed9c 4a00 	vldr	s8, [ip]
 8001fc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fd0:	f10e 0510 	add.w	r5, lr, #16
 8001fd4:	f10c 0c10 	add.w	ip, ip, #16
 8001fd8:	edd5 8a00 	vldr	s17, [r5]
 8001fdc:	ed9c 8a00 	vldr	s16, [ip]
 8001fe0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fe4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fe8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fec:	edd5 6a02 	vldr	s13, [r5, #8]
 8001ff0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ff4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001ff8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ffc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002000:	3808      	subs	r0, #8
 8002002:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002006:	1e49      	subs	r1, r1, #1
 8002008:	ee45 0a25 	vmla.f32	s1, s10, s11
 800200c:	f105 0e10 	add.w	lr, r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	d1c4      	bne.n	8001fa0 <forward_dense+0x154>
 8002016:	b378      	cbz	r0, 8002078 <forward_dense+0x22c>
 8002018:	f010 0103 	ands.w	r1, r0, #3
 800201c:	f000 800c 	beq.w	8002038 <forward_dense+0x1ec>
 8002020:	ed9c 1a00 	vldr	s2, [ip]
 8002024:	edde 1a00 	vldr	s3, [lr]
 8002028:	1e49      	subs	r1, r1, #1
 800202a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800202e:	f10e 0e04 	add.w	lr, lr, #4
 8002032:	f10c 0c04 	add.w	ip, ip, #4
 8002036:	d1f3      	bne.n	8002020 <forward_dense+0x1d4>
 8002038:	0880      	lsrs	r0, r0, #2
 800203a:	d01d      	beq.n	8002078 <forward_dense+0x22c>
 800203c:	ed9c 2a00 	vldr	s4, [ip]
 8002040:	ed9e 1a00 	vldr	s2, [lr]
 8002044:	eddc 1a01 	vldr	s3, [ip, #4]
 8002048:	edde 2a01 	vldr	s5, [lr, #4]
 800204c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002050:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9e 1a02 	vldr	s2, [lr, #8]
 800205c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002060:	edde 2a03 	vldr	s5, [lr, #12]
 8002064:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800206e:	f10e 0e10 	add.w	lr, lr, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	d1e1      	bne.n	800203c <forward_dense+0x1f0>
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ed87 0a00 	vstr	s0, [r7]
 8002080:	1d3f      	adds	r7, r7, #4
 8002082:	429f      	cmp	r7, r3
 8002084:	44b3      	add	fp, r6
 8002086:	f4ff af5a 	bcc.w	8001f3e <forward_dense+0xf2>
 800208a:	e01d      	b.n	80020c8 <forward_dense+0x27c>
 800208c:	429f      	cmp	r7, r3
 800208e:	d21c      	bcs.n	80020ca <forward_dense+0x27e>
 8002090:	469a      	mov	sl, r3
 8002092:	9003      	str	r0, [sp, #12]
 8002094:	4615      	mov	r5, r2
 8002096:	2d00      	cmp	r5, #0
 8002098:	bf14      	ite	ne
 800209a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800209e:	2000      	moveq	r0, #0
 80020a0:	9002      	str	r0, [sp, #8]
 80020a2:	f1b9 0f04 	cmp.w	r9, #4
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4659      	mov	r1, fp
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	d102      	bne.n	80020b8 <forward_dense+0x26c>
 80020b2:	f7ff fa03 	bl	80014bc <ai_dict4_dot_array_f32>
 80020b6:	e001      	b.n	80020bc <forward_dense+0x270>
 80020b8:	f7ff f950 	bl	800135c <ai_dict8_dot_array_f32>
 80020bc:	9802      	ldr	r0, [sp, #8]
 80020be:	f847 0b04 	str.w	r0, [r7], #4
 80020c2:	4557      	cmp	r7, sl
 80020c4:	44b3      	add	fp, r6
 80020c6:	d3e6      	bcc.n	8002096 <forward_dense+0x24a>
 80020c8:	9803      	ldr	r0, [sp, #12]
 80020ca:	9901      	ldr	r1, [sp, #4]
 80020cc:	9a06      	ldr	r2, [sp, #24]
 80020ce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020d2:	9904      	ldr	r1, [sp, #16]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1e49      	subs	r1, r1, #1
 80020d8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	f47f af1c 	bne.w	8001f1a <forward_dense+0xce>
 80020e2:	b008      	add	sp, #32
 80020e4:	ecbd 8b02 	vpop	{d8}
 80020e8:	b001      	add	sp, #4
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020f0 <.text_12>:
 80020f0:	00000000 	.word	0x00000000

080020f4 <forward_gemm>:
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	6961      	ldr	r1, [r4, #20]
 80020fe:	8808      	ldrh	r0, [r1, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	bf1a      	itte	ne
 8002104:	6848      	ldrne	r0, [r1, #4]
 8002106:	1d02      	addne	r2, r0, #4
 8002108:	2204      	moveq	r2, #4
 800210a:	460b      	mov	r3, r1
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	bf14      	ite	ne
 8002114:	6805      	ldrne	r5, [r0, #0]
 8002116:	2500      	moveq	r5, #0
 8002118:	2900      	cmp	r1, #0
 800211a:	bf1d      	ittte	ne
 800211c:	6858      	ldrne	r0, [r3, #4]
 800211e:	2800      	cmpne	r0, #0
 8002120:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002124:	f04f 0c00 	moveq.w	ip, #0
 8002128:	2902      	cmp	r1, #2
 800212a:	bfa6      	itte	ge
 800212c:	6858      	ldrge	r0, [r3, #4]
 800212e:	3010      	addge	r0, #16
 8002130:	2004      	movlt	r0, #4
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	bf14      	ite	ne
 8002138:	6801      	ldrne	r1, [r0, #0]
 800213a:	2100      	moveq	r1, #0
 800213c:	2600      	movs	r6, #0
 800213e:	f1bc 0f03 	cmp.w	ip, #3
 8002142:	46b2      	mov	sl, r6
 8002144:	d107      	bne.n	8002156 <forward_gemm+0x62>
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d026      	beq.n	800219a <forward_gemm+0xa6>
 800214c:	6846      	ldr	r6, [r0, #4]
 800214e:	d024      	beq.n	800219a <forward_gemm+0xa6>
 8002150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002154:	e021      	b.n	800219a <forward_gemm+0xa6>
 8002156:	f1bc 0f02 	cmp.w	ip, #2
 800215a:	d10d      	bne.n	8002178 <forward_gemm+0x84>
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	b100      	cbz	r0, 8002162 <forward_gemm+0x6e>
 8002160:	6846      	ldr	r6, [r0, #4]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	2a02      	cmp	r2, #2
 8002166:	bfc6      	itte	gt
 8002168:	6858      	ldrgt	r0, [r3, #4]
 800216a:	301c      	addgt	r0, #28
 800216c:	2004      	movle	r0, #4
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	b198      	cbz	r0, 800219a <forward_gemm+0xa6>
 8002172:	f8d0 a000 	ldr.w	sl, [r0]
 8002176:	e010      	b.n	800219a <forward_gemm+0xa6>
 8002178:	f1bc 0f01 	cmp.w	ip, #1
 800217c:	d10d      	bne.n	800219a <forward_gemm+0xa6>
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	2a02      	cmp	r2, #2
 8002182:	bfc6      	itte	gt
 8002184:	6858      	ldrgt	r0, [r3, #4]
 8002186:	f100 021c 	addgt.w	r2, r0, #28
 800218a:	2204      	movle	r2, #4
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d003      	beq.n	800219a <forward_gemm+0xa6>
 8002192:	6806      	ldr	r6, [r0, #0]
 8002194:	bf18      	it	ne
 8002196:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800219a:	68c8      	ldr	r0, [r1, #12]
 800219c:	6989      	ldr	r1, [r1, #24]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f004 f831 	bl	8006210 <arm_mat_init_f32>
 80021ae:	69a9      	ldr	r1, [r5, #24]
 80021b0:	68e8      	ldr	r0, [r5, #12]
 80021b2:	688b      	ldr	r3, [r1, #8]
 80021b4:	6842      	ldr	r2, [r0, #4]
 80021b6:	68c1      	ldr	r1, [r0, #12]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	b289      	uxth	r1, r1
 80021bc:	a804      	add	r0, sp, #16
 80021be:	f004 f827 	bl	8006210 <arm_mat_init_f32>
 80021c2:	69b1      	ldr	r1, [r6, #24]
 80021c4:	68f0      	ldr	r0, [r6, #12]
 80021c6:	688b      	ldr	r3, [r1, #8]
 80021c8:	6842      	ldr	r2, [r0, #4]
 80021ca:	68c1      	ldr	r1, [r0, #12]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	b289      	uxth	r1, r1
 80021d0:	a802      	add	r0, sp, #8
 80021d2:	f004 f81d 	bl	8006210 <arm_mat_init_f32>
 80021d6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021de:	688b      	ldr	r3, [r1, #8]
 80021e0:	6842      	ldr	r2, [r0, #4]
 80021e2:	68c1      	ldr	r1, [r0, #12]
 80021e4:	b292      	uxth	r2, r2
 80021e6:	b289      	uxth	r1, r1
 80021e8:	4668      	mov	r0, sp
 80021ea:	f004 f811 	bl	8006210 <arm_mat_init_f32>
 80021ee:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021f2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021f6:	9905      	ldr	r1, [sp, #20]
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80021fe:	edd4 0a06 	vldr	s1, [r4, #24]
 8002202:	910b      	str	r1, [sp, #44]	; 0x2c
 8002204:	920e      	str	r2, [sp, #56]	; 0x38
 8002206:	920d      	str	r2, [sp, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800220e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8002218:	f8bd c000 	ldrh.w	ip, [sp]
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002226:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800222a:	9108      	str	r1, [sp, #32]
 800222c:	0002      	movs	r2, r0
 800222e:	bf0c      	ite	eq
 8002230:	4672      	moveq	r2, lr
 8002232:	4642      	movne	r2, r8
 8002234:	2f01      	cmp	r7, #1
 8002236:	bf0c      	ite	eq
 8002238:	4699      	moveq	r9, r3
 800223a:	f04f 0904 	movne.w	r9, #4
 800223e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002242:	f1bc 0f01 	cmp.w	ip, #1
 8002246:	d104      	bne.n	8002252 <forward_gemm+0x15e>
 8002248:	2f01      	cmp	r7, #1
 800224a:	d004      	beq.n	8002256 <forward_gemm+0x162>
 800224c:	f1cb 0700 	rsb	r7, fp, #0
 8002250:	e002      	b.n	8002258 <forward_gemm+0x164>
 8002252:	2f01      	cmp	r7, #1
 8002254:	d000      	beq.n	8002258 <forward_gemm+0x164>
 8002256:	2700      	movs	r7, #0
 8002258:	2800      	cmp	r0, #0
 800225a:	bf0c      	ite	eq
 800225c:	46f4      	moveq	ip, lr
 800225e:	46c4      	movne	ip, r8
 8002260:	b23f      	sxth	r7, r7
 8002262:	45b4      	cmp	ip, r6
 8002264:	970c      	str	r7, [sp, #48]	; 0x30
 8002266:	f040 808b 	bne.w	8002380 <forward_gemm+0x28c>
 800226a:	2d00      	cmp	r5, #0
 800226c:	bf0c      	ite	eq
 800226e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002270:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002276:	455f      	cmp	r7, fp
 8002278:	f040 8082 	bne.w	8002380 <forward_gemm+0x28c>
 800227c:	2800      	cmp	r0, #0
 800227e:	bf0c      	ite	eq
 8002280:	46c4      	moveq	ip, r8
 8002282:	46f4      	movne	ip, lr
 8002284:	2d00      	cmp	r5, #0
 8002286:	bf0c      	ite	eq
 8002288:	4657      	moveq	r7, sl
 800228a:	460f      	movne	r7, r1
 800228c:	45bc      	cmp	ip, r7
 800228e:	d177      	bne.n	8002380 <forward_gemm+0x28c>
 8002290:	9e08      	ldr	r6, [sp, #32]
 8002292:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002296:	9410      	str	r4, [sp, #64]	; 0x40
 8002298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800229c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80022a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80022a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80022a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80022aa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80022b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80022ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022ca:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ce:	fa1f fb88 	uxth.w	fp, r8
 80022d2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022d6:	f1bb 0f00 	cmp.w	fp, #0
 80022da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002544 <.text_16>
 80022de:	d019      	beq.n	8002314 <forward_gemm+0x220>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	f04f 0b04 	moveq.w	fp, #4
 80022e8:	46a3      	movne	fp, r4
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f1a8 0801 	sub.w	r8, r8, #1
 80022f0:	edde 1a00 	vldr	s3, [lr]
 80022f4:	ed93 2a00 	vldr	s4, [r3]
 80022f8:	44de      	add	lr, fp
 80022fa:	bf0c      	ite	eq
 80022fc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8002300:	f04f 0b04 	movne.w	fp, #4
 8002304:	445b      	add	r3, fp
 8002306:	fa1f fb88 	uxth.w	fp, r8
 800230a:	f1bb 0f00 	cmp.w	fp, #0
 800230e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002312:	d1e5      	bne.n	80022e0 <forward_gemm+0x1ec>
 8002314:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002318:	edd6 1a00 	vldr	s3, [r6]
 800231c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002320:	ed87 1a00 	vstr	s2, [r7]
 8002324:	1d3f      	adds	r7, r7, #4
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	002b      	movs	r3, r5
 800232c:	bf0e      	itee	eq
 800232e:	1a8b      	subeq	r3, r1, r2
 8002330:	ebaa 0302 	subne.w	r3, sl, r2
 8002334:	434b      	mulne	r3, r1
 8002336:	2a00      	cmp	r2, #0
 8002338:	444e      	add	r6, r9
 800233a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800233e:	d1c0      	bne.n	80022c2 <forward_gemm+0x1ce>
 8002340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002348:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800234c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002350:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002354:	19df      	adds	r7, r3, r7
 8002356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800235a:	b100      	cbz	r0, 800235e <forward_gemm+0x26a>
 800235c:	2404      	movs	r4, #4
 800235e:	eb02 0c04 	add.w	ip, r2, r4
 8002362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002368:	1e67      	subs	r7, r4, #1
 800236a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800236e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002372:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d192      	bne.n	80022a0 <forward_gemm+0x1ac>
 800237a:	b011      	add	sp, #68	; 0x44
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	fb0b f606 	mul.w	r6, fp, r6
 8002384:	2e00      	cmp	r6, #0
 8002386:	ddf8      	ble.n	800237a <forward_gemm+0x286>
 8002388:	f016 0003 	ands.w	r0, r6, #3
 800238c:	d003      	beq.n	8002396 <forward_gemm+0x2a2>
 800238e:	1e40      	subs	r0, r0, #1
 8002390:	f844 3b04 	str.w	r3, [r4], #4
 8002394:	d1fb      	bne.n	800238e <forward_gemm+0x29a>
 8002396:	08b1      	lsrs	r1, r6, #2
 8002398:	d0ef      	beq.n	800237a <forward_gemm+0x286>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	60e3      	str	r3, [r4, #12]
 80023a2:	3410      	adds	r4, #16
 80023a4:	1e49      	subs	r1, r1, #1
 80023a6:	d1f8      	bne.n	800239a <forward_gemm+0x2a6>
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <forward_matmul>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b08b      	sub	sp, #44	; 0x2c
 80023b6:	6944      	ldr	r4, [r0, #20]
 80023b8:	8822      	ldrh	r2, [r4, #0]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	bf1a      	itte	ne
 80023be:	6860      	ldrne	r0, [r4, #4]
 80023c0:	1d03      	addne	r3, r0, #4
 80023c2:	2304      	moveq	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	6808      	ldrne	r0, [r1, #0]
 80023cc:	2000      	moveq	r0, #0
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bf14      	ite	ne
 80023d2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023d6:	f04f 0b00 	moveq.w	fp, #0
 80023da:	2a02      	cmp	r2, #2
 80023dc:	bfa6      	itte	ge
 80023de:	6861      	ldrge	r1, [r4, #4]
 80023e0:	3110      	addge	r1, #16
 80023e2:	2104      	movlt	r1, #4
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	bf14      	ite	ne
 80023ea:	680b      	ldrne	r3, [r1, #0]
 80023ec:	2300      	moveq	r3, #0
 80023ee:	f1bb 0f00 	cmp.w	fp, #0
 80023f2:	d108      	bne.n	8002406 <forward_matmul+0x56>
 80023f4:	2a02      	cmp	r2, #2
 80023f6:	bfc6      	itte	gt
 80023f8:	6861      	ldrgt	r1, [r4, #4]
 80023fa:	311c      	addgt	r1, #28
 80023fc:	2104      	movle	r1, #4
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	b109      	cbz	r1, 8002406 <forward_matmul+0x56>
 8002402:	f8d1 b000 	ldr.w	fp, [r1]
 8002406:	68dd      	ldr	r5, [r3, #12]
 8002408:	68c4      	ldr	r4, [r0, #12]
 800240a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800240e:	686e      	ldr	r6, [r5, #4]
 8002410:	f8d4 e000 	ldr.w	lr, [r4]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f8d5 a000 	ldr.w	sl, [r5]
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002422:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002426:	68ef      	ldr	r7, [r5, #12]
 8002428:	9706      	str	r7, [sp, #24]
 800242a:	fb01 f50e 	mul.w	r5, r1, lr
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	68e7      	ldr	r7, [r4, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	434f      	muls	r7, r1
 8002436:	fb0e f707 	mul.w	r7, lr, r7
 800243a:	970a      	str	r7, [sp, #40]	; 0x28
 800243c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002440:	fb08 f404 	mul.w	r4, r8, r4
 8002444:	4354      	muls	r4, r2
 8002446:	2e00      	cmp	r6, #0
 8002448:	9409      	str	r4, [sp, #36]	; 0x24
 800244a:	fb08 f802 	mul.w	r8, r8, r2
 800244e:	d074      	beq.n	800253a <forward_matmul+0x18a>
 8002450:	2400      	movs	r4, #0
 8002452:	46a1      	mov	r9, r4
 8002454:	9602      	str	r6, [sp, #8]
 8002456:	9e06      	ldr	r6, [sp, #24]
 8002458:	2e00      	cmp	r6, #0
 800245a:	d064      	beq.n	8002526 <forward_matmul+0x176>
 800245c:	9f06      	ldr	r7, [sp, #24]
 800245e:	9701      	str	r7, [sp, #4]
 8002460:	f8cd c00c 	str.w	ip, [sp, #12]
 8002464:	2600      	movs	r6, #0
 8002466:	9505      	str	r5, [sp, #20]
 8002468:	9d03      	ldr	r5, [sp, #12]
 800246a:	2d00      	cmp	r5, #0
 800246c:	d051      	beq.n	8002512 <forward_matmul+0x162>
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f8cd a010 	str.w	sl, [sp, #16]
 8002474:	9207      	str	r2, [sp, #28]
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	9a04      	ldr	r2, [sp, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d03f      	beq.n	8002500 <forward_matmul+0x150>
 8002480:	f04f 0c00 	mov.w	ip, #0
 8002484:	9008      	str	r0, [sp, #32]
 8002486:	9808      	ldr	r0, [sp, #32]
 8002488:	6985      	ldr	r5, [r0, #24]
 800248a:	68a8      	ldr	r0, [r5, #8]
 800248c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002490:	4420      	add	r0, r4
 8002492:	4430      	add	r0, r6
 8002494:	eb00 050c 	add.w	r5, r0, ip
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	4448      	add	r0, r9
 800249c:	4450      	add	r0, sl
 800249e:	eb00 070c 	add.w	r7, r0, ip
 80024a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002544 <.text_16>
 80024a6:	b319      	cbz	r1, 80024f0 <forward_matmul+0x140>
 80024a8:	07c8      	lsls	r0, r1, #31
 80024aa:	d509      	bpl.n	80024c0 <forward_matmul+0x110>
 80024ac:	edd5 0a00 	vldr	s1, [r5]
 80024b0:	ed97 1a00 	vldr	s2, [r7]
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c0:	0848      	lsrs	r0, r1, #1
 80024c2:	d015      	beq.n	80024f0 <forward_matmul+0x140>
 80024c4:	edd5 0a00 	vldr	s1, [r5]
 80024c8:	ed97 1a00 	vldr	s2, [r7]
 80024cc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	edd5 0a00 	vldr	s1, [r5]
 80024dc:	ed97 1a00 	vldr	s2, [r7]
 80024e0:	1e40      	subs	r0, r0, #1
 80024e2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024e6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ee:	d1e9      	bne.n	80024c4 <forward_matmul+0x114>
 80024f0:	ed83 0a00 	vstr	s0, [r3]
 80024f4:	1d1b      	adds	r3, r3, #4
 80024f6:	1e52      	subs	r2, r2, #1
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1c3      	bne.n	8002486 <forward_matmul+0xd6>
 80024fe:	9808      	ldr	r0, [sp, #32]
 8002500:	9d00      	ldr	r5, [sp, #0]
 8002502:	9a07      	ldr	r2, [sp, #28]
 8002504:	1e6d      	subs	r5, r5, #1
 8002506:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	d1b5      	bne.n	800247a <forward_matmul+0xca>
 800250e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002512:	9f01      	ldr	r7, [sp, #4]
 8002514:	9d05      	ldr	r5, [sp, #20]
 8002516:	1e7f      	subs	r7, r7, #1
 8002518:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800251c:	9701      	str	r7, [sp, #4]
 800251e:	d1a3      	bne.n	8002468 <forward_matmul+0xb8>
 8002520:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002524:	9d05      	ldr	r5, [sp, #20]
 8002526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800252a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800252e:	9e02      	ldr	r6, [sp, #8]
 8002530:	1e76      	subs	r6, r6, #1
 8002532:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	d18d      	bne.n	8002456 <forward_matmul+0xa6>
 800253a:	b00b      	add	sp, #44	; 0x2c
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <.text_15>:
 8002540:	0800135b 	.word	0x0800135b

08002544 <.text_16>:
 8002544:	00000000 	.word	0x00000000

08002548 <ai_shape_get_size>:
 8002548:	b470      	push	{r4, r5, r6}
 800254a:	4601      	mov	r1, r0
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	d01e      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002556:	684c      	ldr	r4, [r1, #4]
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	4618      	mov	r0, r3
 800255e:	1f0d      	subs	r5, r1, #4
 8002560:	f010 0103 	ands.w	r1, r0, #3
 8002564:	f000 8006 	beq.w	8002574 <ai_shape_get_size+0x2c>
 8002568:	f855 6904 	ldr.w	r6, [r5], #-4
 800256c:	1e5b      	subs	r3, r3, #1
 800256e:	4372      	muls	r2, r6
 8002570:	1e49      	subs	r1, r1, #1
 8002572:	d1f9      	bne.n	8002568 <ai_shape_get_size+0x20>
 8002574:	0880      	lsrs	r0, r0, #2
 8002576:	d00d      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002578:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800257c:	3910      	subs	r1, #16
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	688c      	ldr	r4, [r1, #8]
 8002582:	684d      	ldr	r5, [r1, #4]
 8002584:	f851 6910 	ldr.w	r6, [r1], #-16
 8002588:	4363      	muls	r3, r4
 800258a:	436b      	muls	r3, r5
 800258c:	4373      	muls	r3, r6
 800258e:	435a      	muls	r2, r3
 8002590:	1e40      	subs	r0, r0, #1
 8002592:	d1f4      	bne.n	800257e <ai_shape_get_size+0x36>
 8002594:	bc70      	pop	{r4, r5, r6}
 8002596:	4610      	mov	r0, r2
 8002598:	4770      	bx	lr
	...

0800259c <nl_func_acos_array_f32>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	688c      	ldr	r4, [r1, #8]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a6:	1f0d      	subs	r5, r1, #4
 80025a8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80025ac:	1f0e      	subs	r6, r1, #4
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	f0c0 800a 	bcc.w	80025c8 <nl_func_acos_array_f32+0x2c>
 80025b4:	ed95 0a00 	vldr	s0, [r5]
 80025b8:	f013 f894 	bl	80156e4 <acosf>
 80025bc:	ed86 0a00 	vstr	s0, [r6]
 80025c0:	1f2d      	subs	r5, r5, #4
 80025c2:	1f36      	subs	r6, r6, #4
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d2f5      	bcs.n	80025b4 <nl_func_acos_array_f32+0x18>
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025cc <forward_acos>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b081      	sub	sp, #4
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	8811      	ldrh	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	bf1a      	itte	ne
 80025d8:	6850      	ldrne	r0, [r2, #4]
 80025da:	1d00      	addne	r0, r0, #4
 80025dc:	2004      	moveq	r0, #4
 80025de:	f04f 0501 	mov.w	r5, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	bf14      	ite	ne
 80025e8:	6803      	ldrne	r3, [r0, #0]
 80025ea:	2300      	moveq	r3, #0
 80025ec:	2902      	cmp	r1, #2
 80025ee:	bfa6      	itte	ge
 80025f0:	6850      	ldrge	r0, [r2, #4]
 80025f2:	3010      	addge	r0, #16
 80025f4:	2004      	movlt	r0, #4
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf19      	ittee	ne
 80025fc:	6800      	ldrne	r0, [r0, #0]
 80025fe:	f100 0418 	addne.w	r4, r0, #24
 8002602:	2100      	moveq	r1, #0
 8002604:	f101 0418 	addeq.w	r4, r1, #24
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	d01e      	beq.n	8002650 <forward_acos+0x84>
 8002612:	684e      	ldr	r6, [r1, #4]
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	4610      	mov	r0, r2
 800261a:	1f0f      	subs	r7, r1, #4
 800261c:	f010 0103 	ands.w	r1, r0, #3
 8002620:	d006      	beq.n	8002630 <forward_acos+0x64>
 8002622:	1e52      	subs	r2, r2, #1
 8002624:	f857 c904 	ldr.w	ip, [r7], #-4
 8002628:	1e49      	subs	r1, r1, #1
 800262a:	fb0c f505 	mul.w	r5, ip, r5
 800262e:	d1f8      	bne.n	8002622 <forward_acos+0x56>
 8002630:	0880      	lsrs	r0, r0, #2
 8002632:	d00d      	beq.n	8002650 <forward_acos+0x84>
 8002634:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002638:	3910      	subs	r1, #16
 800263a:	68ca      	ldr	r2, [r1, #12]
 800263c:	688e      	ldr	r6, [r1, #8]
 800263e:	684f      	ldr	r7, [r1, #4]
 8002640:	4372      	muls	r2, r6
 8002642:	f851 6910 	ldr.w	r6, [r1], #-16
 8002646:	437a      	muls	r2, r7
 8002648:	4372      	muls	r2, r6
 800264a:	4355      	muls	r5, r2
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	d1f4      	bne.n	800263a <forward_acos+0x6e>
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	6886      	ldr	r6, [r0, #8]
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800265a:	1f07      	subs	r7, r0, #4
 800265c:	6888      	ldr	r0, [r1, #8]
 800265e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002662:	1f14      	subs	r4, r2, #4
 8002664:	42b7      	cmp	r7, r6
 8002666:	d309      	bcc.n	800267c <forward_acos+0xb0>
 8002668:	ed97 0a00 	vldr	s0, [r7]
 800266c:	f013 f83a 	bl	80156e4 <acosf>
 8002670:	ed84 0a00 	vstr	s0, [r4]
 8002674:	1f3f      	subs	r7, r7, #4
 8002676:	1f24      	subs	r4, r4, #4
 8002678:	42b7      	cmp	r7, r6
 800267a:	d2f5      	bcs.n	8002668 <forward_acos+0x9c>
 800267c:	b001      	add	sp, #4
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <nl_func_acosh_array_f32>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	688c      	ldr	r4, [r1, #8]
 8002684:	6880      	ldr	r0, [r0, #8]
 8002686:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800268a:	1f0d      	subs	r5, r1, #4
 800268c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002690:	1f0e      	subs	r6, r1, #4
 8002692:	42a5      	cmp	r5, r4
 8002694:	f0c0 800a 	bcc.w	80026ac <nl_func_acosh_array_f32+0x2c>
 8002698:	ed95 0a00 	vldr	s0, [r5]
 800269c:	f013 f87a 	bl	8015794 <acoshf>
 80026a0:	ed86 0a00 	vstr	s0, [r6]
 80026a4:	1f2d      	subs	r5, r5, #4
 80026a6:	1f36      	subs	r6, r6, #4
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d2f5      	bcs.n	8002698 <nl_func_acosh_array_f32+0x18>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <forward_acosh>:
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b081      	sub	sp, #4
 80026b4:	6942      	ldr	r2, [r0, #20]
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	bf1a      	itte	ne
 80026bc:	6850      	ldrne	r0, [r2, #4]
 80026be:	1d00      	addne	r0, r0, #4
 80026c0:	2004      	moveq	r0, #4
 80026c2:	f04f 0501 	mov.w	r5, #1
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf14      	ite	ne
 80026cc:	6803      	ldrne	r3, [r0, #0]
 80026ce:	2300      	moveq	r3, #0
 80026d0:	2902      	cmp	r1, #2
 80026d2:	bfa6      	itte	ge
 80026d4:	6850      	ldrge	r0, [r2, #4]
 80026d6:	3010      	addge	r0, #16
 80026d8:	2004      	movlt	r0, #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	bf19      	ittee	ne
 80026e0:	6800      	ldrne	r0, [r0, #0]
 80026e2:	f100 0418 	addne.w	r4, r0, #24
 80026e6:	2100      	moveq	r1, #0
 80026e8:	f101 0418 	addeq.w	r4, r1, #24
 80026ec:	f103 0108 	add.w	r1, r3, #8
 80026f0:	680a      	ldr	r2, [r1, #0]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	d01e      	beq.n	8002734 <forward_acosh+0x84>
 80026f6:	684e      	ldr	r6, [r1, #4]
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1f0f      	subs	r7, r1, #4
 8002700:	f010 0103 	ands.w	r1, r0, #3
 8002704:	d006      	beq.n	8002714 <forward_acosh+0x64>
 8002706:	1e52      	subs	r2, r2, #1
 8002708:	f857 c904 	ldr.w	ip, [r7], #-4
 800270c:	1e49      	subs	r1, r1, #1
 800270e:	fb0c f505 	mul.w	r5, ip, r5
 8002712:	d1f8      	bne.n	8002706 <forward_acosh+0x56>
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	d00d      	beq.n	8002734 <forward_acosh+0x84>
 8002718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	684f      	ldr	r7, [r1, #4]
 8002724:	4372      	muls	r2, r6
 8002726:	f851 6910 	ldr.w	r6, [r1], #-16
 800272a:	437a      	muls	r2, r7
 800272c:	4372      	muls	r2, r6
 800272e:	4355      	muls	r5, r2
 8002730:	1e40      	subs	r0, r0, #1
 8002732:	d1f4      	bne.n	800271e <forward_acosh+0x6e>
 8002734:	6998      	ldr	r0, [r3, #24]
 8002736:	6886      	ldr	r6, [r0, #8]
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800273e:	1f07      	subs	r7, r0, #4
 8002740:	6888      	ldr	r0, [r1, #8]
 8002742:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002746:	1f14      	subs	r4, r2, #4
 8002748:	42b7      	cmp	r7, r6
 800274a:	d309      	bcc.n	8002760 <forward_acosh+0xb0>
 800274c:	ed97 0a00 	vldr	s0, [r7]
 8002750:	f013 f820 	bl	8015794 <acoshf>
 8002754:	ed84 0a00 	vstr	s0, [r4]
 8002758:	1f3f      	subs	r7, r7, #4
 800275a:	1f24      	subs	r4, r4, #4
 800275c:	42b7      	cmp	r7, r6
 800275e:	d2f5      	bcs.n	800274c <forward_acosh+0x9c>
 8002760:	b001      	add	sp, #4
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <nl_func_asin_array_f32>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	688c      	ldr	r4, [r1, #8]
 8002768:	6880      	ldr	r0, [r0, #8]
 800276a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800276e:	1f0d      	subs	r5, r1, #4
 8002770:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002774:	1f0e      	subs	r6, r1, #4
 8002776:	42a5      	cmp	r5, r4
 8002778:	f0c0 800a 	bcc.w	8002790 <nl_func_asin_array_f32+0x2c>
 800277c:	ed95 0a00 	vldr	s0, [r5]
 8002780:	f013 f858 	bl	8015834 <asinf>
 8002784:	ed86 0a00 	vstr	s0, [r6]
 8002788:	1f2d      	subs	r5, r5, #4
 800278a:	1f36      	subs	r6, r6, #4
 800278c:	42a5      	cmp	r5, r4
 800278e:	d2f5      	bcs.n	800277c <nl_func_asin_array_f32+0x18>
 8002790:	bd70      	pop	{r4, r5, r6, pc}
	...

08002794 <forward_asin>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b081      	sub	sp, #4
 8002798:	6942      	ldr	r2, [r0, #20]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	bf1a      	itte	ne
 80027a0:	6850      	ldrne	r0, [r2, #4]
 80027a2:	1d00      	addne	r0, r0, #4
 80027a4:	2004      	moveq	r0, #4
 80027a6:	f04f 0501 	mov.w	r5, #1
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	2800      	cmp	r0, #0
 80027ae:	bf14      	ite	ne
 80027b0:	6803      	ldrne	r3, [r0, #0]
 80027b2:	2300      	moveq	r3, #0
 80027b4:	2902      	cmp	r1, #2
 80027b6:	bfa6      	itte	ge
 80027b8:	6850      	ldrge	r0, [r2, #4]
 80027ba:	3010      	addge	r0, #16
 80027bc:	2004      	movlt	r0, #4
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bf19      	ittee	ne
 80027c4:	6800      	ldrne	r0, [r0, #0]
 80027c6:	f100 0418 	addne.w	r4, r0, #24
 80027ca:	2100      	moveq	r1, #0
 80027cc:	f101 0418 	addeq.w	r4, r1, #24
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	d01e      	beq.n	8002818 <forward_asin+0x84>
 80027da:	684e      	ldr	r6, [r1, #4]
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	4610      	mov	r0, r2
 80027e2:	1f0f      	subs	r7, r1, #4
 80027e4:	f010 0103 	ands.w	r1, r0, #3
 80027e8:	d006      	beq.n	80027f8 <forward_asin+0x64>
 80027ea:	1e52      	subs	r2, r2, #1
 80027ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80027f0:	1e49      	subs	r1, r1, #1
 80027f2:	fb0c f505 	mul.w	r5, ip, r5
 80027f6:	d1f8      	bne.n	80027ea <forward_asin+0x56>
 80027f8:	0880      	lsrs	r0, r0, #2
 80027fa:	d00d      	beq.n	8002818 <forward_asin+0x84>
 80027fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002800:	3910      	subs	r1, #16
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	684f      	ldr	r7, [r1, #4]
 8002808:	4372      	muls	r2, r6
 800280a:	f851 6910 	ldr.w	r6, [r1], #-16
 800280e:	437a      	muls	r2, r7
 8002810:	4372      	muls	r2, r6
 8002812:	4355      	muls	r5, r2
 8002814:	1e40      	subs	r0, r0, #1
 8002816:	d1f4      	bne.n	8002802 <forward_asin+0x6e>
 8002818:	6998      	ldr	r0, [r3, #24]
 800281a:	6886      	ldr	r6, [r0, #8]
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002822:	1f07      	subs	r7, r0, #4
 8002824:	6888      	ldr	r0, [r1, #8]
 8002826:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800282a:	1f14      	subs	r4, r2, #4
 800282c:	42b7      	cmp	r7, r6
 800282e:	d309      	bcc.n	8002844 <forward_asin+0xb0>
 8002830:	ed97 0a00 	vldr	s0, [r7]
 8002834:	f012 fffe 	bl	8015834 <asinf>
 8002838:	ed84 0a00 	vstr	s0, [r4]
 800283c:	1f3f      	subs	r7, r7, #4
 800283e:	1f24      	subs	r4, r4, #4
 8002840:	42b7      	cmp	r7, r6
 8002842:	d2f5      	bcs.n	8002830 <forward_asin+0x9c>
 8002844:	b001      	add	sp, #4
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002848 <nl_func_asinh_array_f32>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	688c      	ldr	r4, [r1, #8]
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002852:	1f0d      	subs	r5, r1, #4
 8002854:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002858:	1f0e      	subs	r6, r1, #4
 800285a:	42a5      	cmp	r5, r4
 800285c:	f0c0 800a 	bcc.w	8002874 <nl_func_asinh_array_f32+0x2c>
 8002860:	ed95 0a00 	vldr	s0, [r5]
 8002864:	f012 f96e 	bl	8014b44 <asinhf>
 8002868:	ed86 0a00 	vstr	s0, [r6]
 800286c:	1f2d      	subs	r5, r5, #4
 800286e:	1f36      	subs	r6, r6, #4
 8002870:	42a5      	cmp	r5, r4
 8002872:	d2f5      	bcs.n	8002860 <nl_func_asinh_array_f32+0x18>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <forward_asinh>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b081      	sub	sp, #4
 800287c:	6942      	ldr	r2, [r0, #20]
 800287e:	8811      	ldrh	r1, [r2, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	bf1a      	itte	ne
 8002884:	6850      	ldrne	r0, [r2, #4]
 8002886:	1d00      	addne	r0, r0, #4
 8002888:	2004      	moveq	r0, #4
 800288a:	f04f 0501 	mov.w	r5, #1
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	2800      	cmp	r0, #0
 8002892:	bf14      	ite	ne
 8002894:	6803      	ldrne	r3, [r0, #0]
 8002896:	2300      	moveq	r3, #0
 8002898:	2902      	cmp	r1, #2
 800289a:	bfa6      	itte	ge
 800289c:	6850      	ldrge	r0, [r2, #4]
 800289e:	3010      	addge	r0, #16
 80028a0:	2004      	movlt	r0, #4
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bf19      	ittee	ne
 80028a8:	6800      	ldrne	r0, [r0, #0]
 80028aa:	f100 0418 	addne.w	r4, r0, #24
 80028ae:	2100      	moveq	r1, #0
 80028b0:	f101 0418 	addeq.w	r4, r1, #24
 80028b4:	f103 0108 	add.w	r1, r3, #8
 80028b8:	680a      	ldr	r2, [r1, #0]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	d01e      	beq.n	80028fc <forward_asinh+0x84>
 80028be:	684e      	ldr	r6, [r1, #4]
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	4610      	mov	r0, r2
 80028c6:	1f0f      	subs	r7, r1, #4
 80028c8:	f010 0103 	ands.w	r1, r0, #3
 80028cc:	d006      	beq.n	80028dc <forward_asinh+0x64>
 80028ce:	1e52      	subs	r2, r2, #1
 80028d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028d4:	1e49      	subs	r1, r1, #1
 80028d6:	fb0c f505 	mul.w	r5, ip, r5
 80028da:	d1f8      	bne.n	80028ce <forward_asinh+0x56>
 80028dc:	0880      	lsrs	r0, r0, #2
 80028de:	d00d      	beq.n	80028fc <forward_asinh+0x84>
 80028e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028e4:	3910      	subs	r1, #16
 80028e6:	68ca      	ldr	r2, [r1, #12]
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	684f      	ldr	r7, [r1, #4]
 80028ec:	4372      	muls	r2, r6
 80028ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80028f2:	437a      	muls	r2, r7
 80028f4:	4372      	muls	r2, r6
 80028f6:	4355      	muls	r5, r2
 80028f8:	1e40      	subs	r0, r0, #1
 80028fa:	d1f4      	bne.n	80028e6 <forward_asinh+0x6e>
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	6886      	ldr	r6, [r0, #8]
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002906:	1f07      	subs	r7, r0, #4
 8002908:	6888      	ldr	r0, [r1, #8]
 800290a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800290e:	1f14      	subs	r4, r2, #4
 8002910:	42b7      	cmp	r7, r6
 8002912:	d309      	bcc.n	8002928 <forward_asinh+0xb0>
 8002914:	ed97 0a00 	vldr	s0, [r7]
 8002918:	f012 f914 	bl	8014b44 <asinhf>
 800291c:	ed84 0a00 	vstr	s0, [r4]
 8002920:	1f3f      	subs	r7, r7, #4
 8002922:	1f24      	subs	r4, r4, #4
 8002924:	42b7      	cmp	r7, r6
 8002926:	d2f5      	bcs.n	8002914 <forward_asinh+0x9c>
 8002928:	b001      	add	sp, #4
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <nl_func_atan_array_f32>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	688c      	ldr	r4, [r1, #8]
 8002930:	6880      	ldr	r0, [r0, #8]
 8002932:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002936:	1f0d      	subs	r5, r1, #4
 8002938:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800293c:	1f0e      	subs	r6, r1, #4
 800293e:	42a5      	cmp	r5, r4
 8002940:	f0c0 800a 	bcc.w	8002958 <nl_func_atan_array_f32+0x2c>
 8002944:	ed95 0a00 	vldr	s0, [r5]
 8002948:	f012 f964 	bl	8014c14 <atanf>
 800294c:	ed86 0a00 	vstr	s0, [r6]
 8002950:	1f2d      	subs	r5, r5, #4
 8002952:	1f36      	subs	r6, r6, #4
 8002954:	42a5      	cmp	r5, r4
 8002956:	d2f5      	bcs.n	8002944 <nl_func_atan_array_f32+0x18>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800295c <forward_atan>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b081      	sub	sp, #4
 8002960:	6942      	ldr	r2, [r0, #20]
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	bf1a      	itte	ne
 8002968:	6850      	ldrne	r0, [r2, #4]
 800296a:	1d00      	addne	r0, r0, #4
 800296c:	2004      	moveq	r0, #4
 800296e:	f04f 0501 	mov.w	r5, #1
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	bf14      	ite	ne
 8002978:	6803      	ldrne	r3, [r0, #0]
 800297a:	2300      	moveq	r3, #0
 800297c:	2902      	cmp	r1, #2
 800297e:	bfa6      	itte	ge
 8002980:	6850      	ldrge	r0, [r2, #4]
 8002982:	3010      	addge	r0, #16
 8002984:	2004      	movlt	r0, #4
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	2800      	cmp	r0, #0
 800298a:	bf19      	ittee	ne
 800298c:	6800      	ldrne	r0, [r0, #0]
 800298e:	f100 0418 	addne.w	r4, r0, #24
 8002992:	2100      	moveq	r1, #0
 8002994:	f101 0418 	addeq.w	r4, r1, #24
 8002998:	f103 0108 	add.w	r1, r3, #8
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	0a12      	lsrs	r2, r2, #8
 80029a0:	d01e      	beq.n	80029e0 <forward_atan+0x84>
 80029a2:	684e      	ldr	r6, [r1, #4]
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	4610      	mov	r0, r2
 80029aa:	1f0f      	subs	r7, r1, #4
 80029ac:	f010 0103 	ands.w	r1, r0, #3
 80029b0:	d006      	beq.n	80029c0 <forward_atan+0x64>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	f857 c904 	ldr.w	ip, [r7], #-4
 80029b8:	1e49      	subs	r1, r1, #1
 80029ba:	fb0c f505 	mul.w	r5, ip, r5
 80029be:	d1f8      	bne.n	80029b2 <forward_atan+0x56>
 80029c0:	0880      	lsrs	r0, r0, #2
 80029c2:	d00d      	beq.n	80029e0 <forward_atan+0x84>
 80029c4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029c8:	3910      	subs	r1, #16
 80029ca:	68ca      	ldr	r2, [r1, #12]
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	684f      	ldr	r7, [r1, #4]
 80029d0:	4372      	muls	r2, r6
 80029d2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029d6:	437a      	muls	r2, r7
 80029d8:	4372      	muls	r2, r6
 80029da:	4355      	muls	r5, r2
 80029dc:	1e40      	subs	r0, r0, #1
 80029de:	d1f4      	bne.n	80029ca <forward_atan+0x6e>
 80029e0:	6998      	ldr	r0, [r3, #24]
 80029e2:	6886      	ldr	r6, [r0, #8]
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ea:	1f07      	subs	r7, r0, #4
 80029ec:	6888      	ldr	r0, [r1, #8]
 80029ee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029f2:	1f14      	subs	r4, r2, #4
 80029f4:	42b7      	cmp	r7, r6
 80029f6:	d309      	bcc.n	8002a0c <forward_atan+0xb0>
 80029f8:	ed97 0a00 	vldr	s0, [r7]
 80029fc:	f012 f90a 	bl	8014c14 <atanf>
 8002a00:	ed84 0a00 	vstr	s0, [r4]
 8002a04:	1f3f      	subs	r7, r7, #4
 8002a06:	1f24      	subs	r4, r4, #4
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d2f5      	bcs.n	80029f8 <forward_atan+0x9c>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <nl_func_atanh_array_f32>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	688c      	ldr	r4, [r1, #8]
 8002a14:	6880      	ldr	r0, [r0, #8]
 8002a16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a1a:	1f0d      	subs	r5, r1, #4
 8002a1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a20:	1f0e      	subs	r6, r1, #4
 8002a22:	42a5      	cmp	r5, r4
 8002a24:	f0c0 800a 	bcc.w	8002a3c <nl_func_atanh_array_f32+0x2c>
 8002a28:	ed95 0a00 	vldr	s0, [r5]
 8002a2c:	f012 ff5a 	bl	80158e4 <atanhf>
 8002a30:	ed86 0a00 	vstr	s0, [r6]
 8002a34:	1f2d      	subs	r5, r5, #4
 8002a36:	1f36      	subs	r6, r6, #4
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d2f5      	bcs.n	8002a28 <nl_func_atanh_array_f32+0x18>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a40 <forward_atanh>:
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b081      	sub	sp, #4
 8002a44:	6942      	ldr	r2, [r0, #20]
 8002a46:	8811      	ldrh	r1, [r2, #0]
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	bf1a      	itte	ne
 8002a4c:	6850      	ldrne	r0, [r2, #4]
 8002a4e:	1d00      	addne	r0, r0, #4
 8002a50:	2004      	moveq	r0, #4
 8002a52:	f04f 0501 	mov.w	r5, #1
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	6803      	ldrne	r3, [r0, #0]
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	2902      	cmp	r1, #2
 8002a62:	bfa6      	itte	ge
 8002a64:	6850      	ldrge	r0, [r2, #4]
 8002a66:	3010      	addge	r0, #16
 8002a68:	2004      	movlt	r0, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bf19      	ittee	ne
 8002a70:	6800      	ldrne	r0, [r0, #0]
 8002a72:	f100 0418 	addne.w	r4, r0, #24
 8002a76:	2100      	moveq	r1, #0
 8002a78:	f101 0418 	addeq.w	r4, r1, #24
 8002a7c:	f103 0108 	add.w	r1, r3, #8
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	d01e      	beq.n	8002ac4 <forward_atanh+0x84>
 8002a86:	684e      	ldr	r6, [r1, #4]
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	1f0f      	subs	r7, r1, #4
 8002a90:	f010 0103 	ands.w	r1, r0, #3
 8002a94:	d006      	beq.n	8002aa4 <forward_atanh+0x64>
 8002a96:	1e52      	subs	r2, r2, #1
 8002a98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a9c:	1e49      	subs	r1, r1, #1
 8002a9e:	fb0c f505 	mul.w	r5, ip, r5
 8002aa2:	d1f8      	bne.n	8002a96 <forward_atanh+0x56>
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	d00d      	beq.n	8002ac4 <forward_atanh+0x84>
 8002aa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002aac:	3910      	subs	r1, #16
 8002aae:	68ca      	ldr	r2, [r1, #12]
 8002ab0:	688e      	ldr	r6, [r1, #8]
 8002ab2:	684f      	ldr	r7, [r1, #4]
 8002ab4:	4372      	muls	r2, r6
 8002ab6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002aba:	437a      	muls	r2, r7
 8002abc:	4372      	muls	r2, r6
 8002abe:	4355      	muls	r5, r2
 8002ac0:	1e40      	subs	r0, r0, #1
 8002ac2:	d1f4      	bne.n	8002aae <forward_atanh+0x6e>
 8002ac4:	6998      	ldr	r0, [r3, #24]
 8002ac6:	6886      	ldr	r6, [r0, #8]
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ace:	1f07      	subs	r7, r0, #4
 8002ad0:	6888      	ldr	r0, [r1, #8]
 8002ad2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ad6:	1f14      	subs	r4, r2, #4
 8002ad8:	42b7      	cmp	r7, r6
 8002ada:	d309      	bcc.n	8002af0 <forward_atanh+0xb0>
 8002adc:	ed97 0a00 	vldr	s0, [r7]
 8002ae0:	f012 ff00 	bl	80158e4 <atanhf>
 8002ae4:	ed84 0a00 	vstr	s0, [r4]
 8002ae8:	1f3f      	subs	r7, r7, #4
 8002aea:	1f24      	subs	r4, r4, #4
 8002aec:	42b7      	cmp	r7, r6
 8002aee:	d2f5      	bcs.n	8002adc <forward_atanh+0x9c>
 8002af0:	b001      	add	sp, #4
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af4 <nl_func_cos_array_f32>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	6880      	ldr	r0, [r0, #8]
 8002afa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002afe:	1f0d      	subs	r5, r1, #4
 8002b00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002b04:	1f0e      	subs	r6, r1, #4
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	f0c0 800a 	bcc.w	8002b20 <nl_func_cos_array_f32+0x2c>
 8002b0c:	ed95 0a00 	vldr	s0, [r5]
 8002b10:	f012 f994 	bl	8014e3c <cosf>
 8002b14:	ed86 0a00 	vstr	s0, [r6]
 8002b18:	1f2d      	subs	r5, r5, #4
 8002b1a:	1f36      	subs	r6, r6, #4
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d2f5      	bcs.n	8002b0c <nl_func_cos_array_f32+0x18>
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b24 <forward_cos>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b081      	sub	sp, #4
 8002b28:	6942      	ldr	r2, [r0, #20]
 8002b2a:	8811      	ldrh	r1, [r2, #0]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf1a      	itte	ne
 8002b30:	6850      	ldrne	r0, [r2, #4]
 8002b32:	1d00      	addne	r0, r0, #4
 8002b34:	2004      	moveq	r0, #4
 8002b36:	f04f 0501 	mov.w	r5, #1
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	6803      	ldrne	r3, [r0, #0]
 8002b42:	2300      	moveq	r3, #0
 8002b44:	2902      	cmp	r1, #2
 8002b46:	bfa6      	itte	ge
 8002b48:	6850      	ldrge	r0, [r2, #4]
 8002b4a:	3010      	addge	r0, #16
 8002b4c:	2004      	movlt	r0, #4
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bf19      	ittee	ne
 8002b54:	6800      	ldrne	r0, [r0, #0]
 8002b56:	f100 0418 	addne.w	r4, r0, #24
 8002b5a:	2100      	moveq	r1, #0
 8002b5c:	f101 0418 	addeq.w	r4, r1, #24
 8002b60:	f103 0108 	add.w	r1, r3, #8
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	0a12      	lsrs	r2, r2, #8
 8002b68:	d01e      	beq.n	8002ba8 <forward_cos+0x84>
 8002b6a:	684e      	ldr	r6, [r1, #4]
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	4610      	mov	r0, r2
 8002b72:	1f0f      	subs	r7, r1, #4
 8002b74:	f010 0103 	ands.w	r1, r0, #3
 8002b78:	d006      	beq.n	8002b88 <forward_cos+0x64>
 8002b7a:	1e52      	subs	r2, r2, #1
 8002b7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b80:	1e49      	subs	r1, r1, #1
 8002b82:	fb0c f505 	mul.w	r5, ip, r5
 8002b86:	d1f8      	bne.n	8002b7a <forward_cos+0x56>
 8002b88:	0880      	lsrs	r0, r0, #2
 8002b8a:	d00d      	beq.n	8002ba8 <forward_cos+0x84>
 8002b8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b90:	3910      	subs	r1, #16
 8002b92:	68ca      	ldr	r2, [r1, #12]
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	684f      	ldr	r7, [r1, #4]
 8002b98:	4372      	muls	r2, r6
 8002b9a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b9e:	437a      	muls	r2, r7
 8002ba0:	4372      	muls	r2, r6
 8002ba2:	4355      	muls	r5, r2
 8002ba4:	1e40      	subs	r0, r0, #1
 8002ba6:	d1f4      	bne.n	8002b92 <forward_cos+0x6e>
 8002ba8:	6998      	ldr	r0, [r3, #24]
 8002baa:	6886      	ldr	r6, [r0, #8]
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002bb2:	1f07      	subs	r7, r0, #4
 8002bb4:	6888      	ldr	r0, [r1, #8]
 8002bb6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002bba:	1f14      	subs	r4, r2, #4
 8002bbc:	42b7      	cmp	r7, r6
 8002bbe:	d309      	bcc.n	8002bd4 <forward_cos+0xb0>
 8002bc0:	ed97 0a00 	vldr	s0, [r7]
 8002bc4:	f012 f93a 	bl	8014e3c <cosf>
 8002bc8:	ed84 0a00 	vstr	s0, [r4]
 8002bcc:	1f3f      	subs	r7, r7, #4
 8002bce:	1f24      	subs	r4, r4, #4
 8002bd0:	42b7      	cmp	r7, r6
 8002bd2:	d2f5      	bcs.n	8002bc0 <forward_cos+0x9c>
 8002bd4:	b001      	add	sp, #4
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <nl_func_cosh_array_f32>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	688c      	ldr	r4, [r1, #8]
 8002bdc:	6880      	ldr	r0, [r0, #8]
 8002bde:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002be2:	1f0d      	subs	r5, r1, #4
 8002be4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002be8:	1f0e      	subs	r6, r1, #4
 8002bea:	42a5      	cmp	r5, r4
 8002bec:	f0c0 800a 	bcc.w	8002c04 <nl_func_cosh_array_f32+0x2c>
 8002bf0:	ed95 0a00 	vldr	s0, [r5]
 8002bf4:	f012 feea 	bl	80159cc <coshf>
 8002bf8:	ed86 0a00 	vstr	s0, [r6]
 8002bfc:	1f2d      	subs	r5, r5, #4
 8002bfe:	1f36      	subs	r6, r6, #4
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d2f5      	bcs.n	8002bf0 <nl_func_cosh_array_f32+0x18>
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c08 <forward_cosh>:
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b081      	sub	sp, #4
 8002c0c:	6942      	ldr	r2, [r0, #20]
 8002c0e:	8811      	ldrh	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bf1a      	itte	ne
 8002c14:	6850      	ldrne	r0, [r2, #4]
 8002c16:	1d00      	addne	r0, r0, #4
 8002c18:	2004      	moveq	r0, #4
 8002c1a:	f04f 0501 	mov.w	r5, #1
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	2800      	cmp	r0, #0
 8002c22:	bf14      	ite	ne
 8002c24:	6803      	ldrne	r3, [r0, #0]
 8002c26:	2300      	moveq	r3, #0
 8002c28:	2902      	cmp	r1, #2
 8002c2a:	bfa6      	itte	ge
 8002c2c:	6850      	ldrge	r0, [r2, #4]
 8002c2e:	3010      	addge	r0, #16
 8002c30:	2004      	movlt	r0, #4
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bf19      	ittee	ne
 8002c38:	6800      	ldrne	r0, [r0, #0]
 8002c3a:	f100 0418 	addne.w	r4, r0, #24
 8002c3e:	2100      	moveq	r1, #0
 8002c40:	f101 0418 	addeq.w	r4, r1, #24
 8002c44:	f103 0108 	add.w	r1, r3, #8
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	d01e      	beq.n	8002c8c <forward_cosh+0x84>
 8002c4e:	684e      	ldr	r6, [r1, #4]
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	4610      	mov	r0, r2
 8002c56:	1f0f      	subs	r7, r1, #4
 8002c58:	f010 0103 	ands.w	r1, r0, #3
 8002c5c:	d006      	beq.n	8002c6c <forward_cosh+0x64>
 8002c5e:	1e52      	subs	r2, r2, #1
 8002c60:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c64:	1e49      	subs	r1, r1, #1
 8002c66:	fb0c f505 	mul.w	r5, ip, r5
 8002c6a:	d1f8      	bne.n	8002c5e <forward_cosh+0x56>
 8002c6c:	0880      	lsrs	r0, r0, #2
 8002c6e:	d00d      	beq.n	8002c8c <forward_cosh+0x84>
 8002c70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c74:	3910      	subs	r1, #16
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	684f      	ldr	r7, [r1, #4]
 8002c7c:	4372      	muls	r2, r6
 8002c7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c82:	437a      	muls	r2, r7
 8002c84:	4372      	muls	r2, r6
 8002c86:	4355      	muls	r5, r2
 8002c88:	1e40      	subs	r0, r0, #1
 8002c8a:	d1f4      	bne.n	8002c76 <forward_cosh+0x6e>
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	6886      	ldr	r6, [r0, #8]
 8002c90:	6821      	ldr	r1, [r4, #0]
 8002c92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c96:	1f07      	subs	r7, r0, #4
 8002c98:	6888      	ldr	r0, [r1, #8]
 8002c9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c9e:	1f14      	subs	r4, r2, #4
 8002ca0:	42b7      	cmp	r7, r6
 8002ca2:	d309      	bcc.n	8002cb8 <forward_cosh+0xb0>
 8002ca4:	ed97 0a00 	vldr	s0, [r7]
 8002ca8:	f012 fe90 	bl	80159cc <coshf>
 8002cac:	ed84 0a00 	vstr	s0, [r4]
 8002cb0:	1f3f      	subs	r7, r7, #4
 8002cb2:	1f24      	subs	r4, r4, #4
 8002cb4:	42b7      	cmp	r7, r6
 8002cb6:	d2f5      	bcs.n	8002ca4 <forward_cosh+0x9c>
 8002cb8:	b001      	add	sp, #4
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <nl_func_erf_array_f32>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002cc6:	1f0d      	subs	r5, r1, #4
 8002cc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ccc:	1f0e      	subs	r6, r1, #4
 8002cce:	42a5      	cmp	r5, r4
 8002cd0:	f0c0 800a 	bcc.w	8002ce8 <nl_func_erf_array_f32+0x2c>
 8002cd4:	ed95 0a00 	vldr	s0, [r5]
 8002cd8:	f012 f8f0 	bl	8014ebc <erff>
 8002cdc:	ed86 0a00 	vstr	s0, [r6]
 8002ce0:	1f2d      	subs	r5, r5, #4
 8002ce2:	1f36      	subs	r6, r6, #4
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d2f5      	bcs.n	8002cd4 <nl_func_erf_array_f32+0x18>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cec <forward_erf>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b081      	sub	sp, #4
 8002cf0:	6942      	ldr	r2, [r0, #20]
 8002cf2:	8811      	ldrh	r1, [r2, #0]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	bf1a      	itte	ne
 8002cf8:	6850      	ldrne	r0, [r2, #4]
 8002cfa:	1d00      	addne	r0, r0, #4
 8002cfc:	2004      	moveq	r0, #4
 8002cfe:	f04f 0501 	mov.w	r5, #1
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	bf14      	ite	ne
 8002d08:	6803      	ldrne	r3, [r0, #0]
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	2902      	cmp	r1, #2
 8002d0e:	bfa6      	itte	ge
 8002d10:	6850      	ldrge	r0, [r2, #4]
 8002d12:	3010      	addge	r0, #16
 8002d14:	2004      	movlt	r0, #4
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf19      	ittee	ne
 8002d1c:	6800      	ldrne	r0, [r0, #0]
 8002d1e:	f100 0418 	addne.w	r4, r0, #24
 8002d22:	2100      	moveq	r1, #0
 8002d24:	f101 0418 	addeq.w	r4, r1, #24
 8002d28:	f103 0108 	add.w	r1, r3, #8
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	0a12      	lsrs	r2, r2, #8
 8002d30:	d01e      	beq.n	8002d70 <forward_erf+0x84>
 8002d32:	684e      	ldr	r6, [r1, #4]
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	4610      	mov	r0, r2
 8002d3a:	1f0f      	subs	r7, r1, #4
 8002d3c:	f010 0103 	ands.w	r1, r0, #3
 8002d40:	d006      	beq.n	8002d50 <forward_erf+0x64>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d48:	1e49      	subs	r1, r1, #1
 8002d4a:	fb0c f505 	mul.w	r5, ip, r5
 8002d4e:	d1f8      	bne.n	8002d42 <forward_erf+0x56>
 8002d50:	0880      	lsrs	r0, r0, #2
 8002d52:	d00d      	beq.n	8002d70 <forward_erf+0x84>
 8002d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d58:	3910      	subs	r1, #16
 8002d5a:	68ca      	ldr	r2, [r1, #12]
 8002d5c:	688e      	ldr	r6, [r1, #8]
 8002d5e:	684f      	ldr	r7, [r1, #4]
 8002d60:	4372      	muls	r2, r6
 8002d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d66:	437a      	muls	r2, r7
 8002d68:	4372      	muls	r2, r6
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	1e40      	subs	r0, r0, #1
 8002d6e:	d1f4      	bne.n	8002d5a <forward_erf+0x6e>
 8002d70:	6998      	ldr	r0, [r3, #24]
 8002d72:	6886      	ldr	r6, [r0, #8]
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d7a:	1f07      	subs	r7, r0, #4
 8002d7c:	6888      	ldr	r0, [r1, #8]
 8002d7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d82:	1f14      	subs	r4, r2, #4
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d309      	bcc.n	8002d9c <forward_erf+0xb0>
 8002d88:	ed97 0a00 	vldr	s0, [r7]
 8002d8c:	f012 f896 	bl	8014ebc <erff>
 8002d90:	ed84 0a00 	vstr	s0, [r4]
 8002d94:	1f3f      	subs	r7, r7, #4
 8002d96:	1f24      	subs	r4, r4, #4
 8002d98:	42b7      	cmp	r7, r6
 8002d9a:	d2f5      	bcs.n	8002d88 <forward_erf+0x9c>
 8002d9c:	b001      	add	sp, #4
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <nl_func_log_array_f32>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	688c      	ldr	r4, [r1, #8]
 8002da4:	6880      	ldr	r0, [r0, #8]
 8002da6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002daa:	1f0d      	subs	r5, r1, #4
 8002dac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002db0:	1f0e      	subs	r6, r1, #4
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	f0c0 800a 	bcc.w	8002dcc <nl_func_log_array_f32+0x2c>
 8002db8:	ed95 0a00 	vldr	s0, [r5]
 8002dbc:	f012 ff3c 	bl	8015c38 <logf>
 8002dc0:	ed86 0a00 	vstr	s0, [r6]
 8002dc4:	1f2d      	subs	r5, r5, #4
 8002dc6:	1f36      	subs	r6, r6, #4
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d2f5      	bcs.n	8002db8 <nl_func_log_array_f32+0x18>
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd0 <forward_log>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b081      	sub	sp, #4
 8002dd4:	6942      	ldr	r2, [r0, #20]
 8002dd6:	8811      	ldrh	r1, [r2, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	bf1a      	itte	ne
 8002ddc:	6850      	ldrne	r0, [r2, #4]
 8002dde:	1d00      	addne	r0, r0, #4
 8002de0:	2004      	moveq	r0, #4
 8002de2:	f04f 0501 	mov.w	r5, #1
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	bf14      	ite	ne
 8002dec:	6803      	ldrne	r3, [r0, #0]
 8002dee:	2300      	moveq	r3, #0
 8002df0:	2902      	cmp	r1, #2
 8002df2:	bfa6      	itte	ge
 8002df4:	6850      	ldrge	r0, [r2, #4]
 8002df6:	3010      	addge	r0, #16
 8002df8:	2004      	movlt	r0, #4
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bf19      	ittee	ne
 8002e00:	6800      	ldrne	r0, [r0, #0]
 8002e02:	f100 0418 	addne.w	r4, r0, #24
 8002e06:	2100      	moveq	r1, #0
 8002e08:	f101 0418 	addeq.w	r4, r1, #24
 8002e0c:	f103 0108 	add.w	r1, r3, #8
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	d01e      	beq.n	8002e54 <forward_log+0x84>
 8002e16:	684e      	ldr	r6, [r1, #4]
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	1f0f      	subs	r7, r1, #4
 8002e20:	f010 0103 	ands.w	r1, r0, #3
 8002e24:	d006      	beq.n	8002e34 <forward_log+0x64>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e2c:	1e49      	subs	r1, r1, #1
 8002e2e:	fb0c f505 	mul.w	r5, ip, r5
 8002e32:	d1f8      	bne.n	8002e26 <forward_log+0x56>
 8002e34:	0880      	lsrs	r0, r0, #2
 8002e36:	d00d      	beq.n	8002e54 <forward_log+0x84>
 8002e38:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e3c:	3910      	subs	r1, #16
 8002e3e:	68ca      	ldr	r2, [r1, #12]
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	684f      	ldr	r7, [r1, #4]
 8002e44:	4372      	muls	r2, r6
 8002e46:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e4a:	437a      	muls	r2, r7
 8002e4c:	4372      	muls	r2, r6
 8002e4e:	4355      	muls	r5, r2
 8002e50:	1e40      	subs	r0, r0, #1
 8002e52:	d1f4      	bne.n	8002e3e <forward_log+0x6e>
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	6886      	ldr	r6, [r0, #8]
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e5e:	1f07      	subs	r7, r0, #4
 8002e60:	6888      	ldr	r0, [r1, #8]
 8002e62:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e66:	1f14      	subs	r4, r2, #4
 8002e68:	42b7      	cmp	r7, r6
 8002e6a:	d309      	bcc.n	8002e80 <forward_log+0xb0>
 8002e6c:	ed97 0a00 	vldr	s0, [r7]
 8002e70:	f012 fee2 	bl	8015c38 <logf>
 8002e74:	ed84 0a00 	vstr	s0, [r4]
 8002e78:	1f3f      	subs	r7, r7, #4
 8002e7a:	1f24      	subs	r4, r4, #4
 8002e7c:	42b7      	cmp	r7, r6
 8002e7e:	d2f5      	bcs.n	8002e6c <forward_log+0x9c>
 8002e80:	b001      	add	sp, #4
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <nl_func_rsqrt_array_f32>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	6880      	ldr	r0, [r0, #8]
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e94:	1f1d      	subs	r5, r3, #4
 8002e96:	1f16      	subs	r6, r2, #4
 8002e98:	428d      	cmp	r5, r1
 8002e9a:	d30e      	bcc.n	8002eba <nl_func_rsqrt_array_f32+0x36>
 8002e9c:	ed95 0a00 	vldr	s0, [r5]
 8002ea0:	f003 f930 	bl	8006104 <ai_math_sqrt>
 8002ea4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ea8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002eac:	edc6 0a00 	vstr	s1, [r6]
 8002eb0:	1f2d      	subs	r5, r5, #4
 8002eb2:	68a0      	ldr	r0, [r4, #8]
 8002eb4:	1f36      	subs	r6, r6, #4
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d2f0      	bcs.n	8002e9c <nl_func_rsqrt_array_f32+0x18>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <forward_rsqrt>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b081      	sub	sp, #4
 8002ec0:	6942      	ldr	r2, [r0, #20]
 8002ec2:	8811      	ldrh	r1, [r2, #0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	bf1a      	itte	ne
 8002ec8:	6850      	ldrne	r0, [r2, #4]
 8002eca:	1d00      	addne	r0, r0, #4
 8002ecc:	2004      	moveq	r0, #4
 8002ece:	f04f 0501 	mov.w	r5, #1
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	6803      	ldrne	r3, [r0, #0]
 8002eda:	2300      	moveq	r3, #0
 8002edc:	2902      	cmp	r1, #2
 8002ede:	bfa6      	itte	ge
 8002ee0:	6850      	ldrge	r0, [r2, #4]
 8002ee2:	3010      	addge	r0, #16
 8002ee4:	2004      	movlt	r0, #4
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bf19      	ittee	ne
 8002eec:	6800      	ldrne	r0, [r0, #0]
 8002eee:	f100 0418 	addne.w	r4, r0, #24
 8002ef2:	2100      	moveq	r1, #0
 8002ef4:	f101 0418 	addeq.w	r4, r1, #24
 8002ef8:	f103 0108 	add.w	r1, r3, #8
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	d01e      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f02:	684e      	ldr	r6, [r1, #4]
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	1f0f      	subs	r7, r1, #4
 8002f0c:	f010 0103 	ands.w	r1, r0, #3
 8002f10:	d006      	beq.n	8002f20 <forward_rsqrt+0x64>
 8002f12:	1e52      	subs	r2, r2, #1
 8002f14:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f18:	1e49      	subs	r1, r1, #1
 8002f1a:	fb0c f505 	mul.w	r5, ip, r5
 8002f1e:	d1f8      	bne.n	8002f12 <forward_rsqrt+0x56>
 8002f20:	0880      	lsrs	r0, r0, #2
 8002f22:	d00d      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f28:	3910      	subs	r1, #16
 8002f2a:	68ca      	ldr	r2, [r1, #12]
 8002f2c:	688e      	ldr	r6, [r1, #8]
 8002f2e:	684f      	ldr	r7, [r1, #4]
 8002f30:	4372      	muls	r2, r6
 8002f32:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f36:	437a      	muls	r2, r7
 8002f38:	4372      	muls	r2, r6
 8002f3a:	4355      	muls	r5, r2
 8002f3c:	1e40      	subs	r0, r0, #1
 8002f3e:	d1f4      	bne.n	8002f2a <forward_rsqrt+0x6e>
 8002f40:	699e      	ldr	r6, [r3, #24]
 8002f42:	68b0      	ldr	r0, [r6, #8]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f4a:	1f0f      	subs	r7, r1, #4
 8002f4c:	6891      	ldr	r1, [r2, #8]
 8002f4e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	4287      	cmp	r7, r0
 8002f56:	d30e      	bcc.n	8002f76 <forward_rsqrt+0xba>
 8002f58:	ed97 0a00 	vldr	s0, [r7]
 8002f5c:	f003 f8d2 	bl	8006104 <ai_math_sqrt>
 8002f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f64:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f68:	edc4 0a00 	vstr	s1, [r4]
 8002f6c:	1f3f      	subs	r7, r7, #4
 8002f6e:	68b0      	ldr	r0, [r6, #8]
 8002f70:	1f24      	subs	r4, r4, #4
 8002f72:	4287      	cmp	r7, r0
 8002f74:	d2f0      	bcs.n	8002f58 <forward_rsqrt+0x9c>
 8002f76:	b001      	add	sp, #4
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <nl_func_sin_array_f32>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	688c      	ldr	r4, [r1, #8]
 8002f80:	6880      	ldr	r0, [r0, #8]
 8002f82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f86:	1f0d      	subs	r5, r1, #4
 8002f88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f8c:	1f0e      	subs	r6, r1, #4
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f0c0 800a 	bcc.w	8002fa8 <nl_func_sin_array_f32+0x2c>
 8002f94:	ed95 0a00 	vldr	s0, [r5]
 8002f98:	f012 fae8 	bl	801556c <sinf>
 8002f9c:	ed86 0a00 	vstr	s0, [r6]
 8002fa0:	1f2d      	subs	r5, r5, #4
 8002fa2:	1f36      	subs	r6, r6, #4
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d2f5      	bcs.n	8002f94 <nl_func_sin_array_f32+0x18>
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <forward_sin>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b081      	sub	sp, #4
 8002fb0:	6942      	ldr	r2, [r0, #20]
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	bf1a      	itte	ne
 8002fb8:	6850      	ldrne	r0, [r2, #4]
 8002fba:	1d00      	addne	r0, r0, #4
 8002fbc:	2004      	moveq	r0, #4
 8002fbe:	f04f 0501 	mov.w	r5, #1
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	6803      	ldrne	r3, [r0, #0]
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	2902      	cmp	r1, #2
 8002fce:	bfa6      	itte	ge
 8002fd0:	6850      	ldrge	r0, [r2, #4]
 8002fd2:	3010      	addge	r0, #16
 8002fd4:	2004      	movlt	r0, #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	bf19      	ittee	ne
 8002fdc:	6800      	ldrne	r0, [r0, #0]
 8002fde:	f100 0418 	addne.w	r4, r0, #24
 8002fe2:	2100      	moveq	r1, #0
 8002fe4:	f101 0418 	addeq.w	r4, r1, #24
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	d01e      	beq.n	8003030 <forward_sin+0x84>
 8002ff2:	684e      	ldr	r6, [r1, #4]
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	1f0f      	subs	r7, r1, #4
 8002ffc:	f010 0103 	ands.w	r1, r0, #3
 8003000:	d006      	beq.n	8003010 <forward_sin+0x64>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	f857 c904 	ldr.w	ip, [r7], #-4
 8003008:	1e49      	subs	r1, r1, #1
 800300a:	fb0c f505 	mul.w	r5, ip, r5
 800300e:	d1f8      	bne.n	8003002 <forward_sin+0x56>
 8003010:	0880      	lsrs	r0, r0, #2
 8003012:	d00d      	beq.n	8003030 <forward_sin+0x84>
 8003014:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003018:	3910      	subs	r1, #16
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	688e      	ldr	r6, [r1, #8]
 800301e:	684f      	ldr	r7, [r1, #4]
 8003020:	4372      	muls	r2, r6
 8003022:	f851 6910 	ldr.w	r6, [r1], #-16
 8003026:	437a      	muls	r2, r7
 8003028:	4372      	muls	r2, r6
 800302a:	4355      	muls	r5, r2
 800302c:	1e40      	subs	r0, r0, #1
 800302e:	d1f4      	bne.n	800301a <forward_sin+0x6e>
 8003030:	6998      	ldr	r0, [r3, #24]
 8003032:	6886      	ldr	r6, [r0, #8]
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800303a:	1f07      	subs	r7, r0, #4
 800303c:	6888      	ldr	r0, [r1, #8]
 800303e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003042:	1f14      	subs	r4, r2, #4
 8003044:	42b7      	cmp	r7, r6
 8003046:	d309      	bcc.n	800305c <forward_sin+0xb0>
 8003048:	ed97 0a00 	vldr	s0, [r7]
 800304c:	f012 fa8e 	bl	801556c <sinf>
 8003050:	ed84 0a00 	vstr	s0, [r4]
 8003054:	1f3f      	subs	r7, r7, #4
 8003056:	1f24      	subs	r4, r4, #4
 8003058:	42b7      	cmp	r7, r6
 800305a:	d2f5      	bcs.n	8003048 <forward_sin+0x9c>
 800305c:	b001      	add	sp, #4
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <nl_func_sinh_array_f32>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	6880      	ldr	r0, [r0, #8]
 8003066:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800306a:	1f0d      	subs	r5, r1, #4
 800306c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003070:	1f0e      	subs	r6, r1, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_sinh_array_f32+0x2c>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f012 ffb6 	bl	8015fec <sinhf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_sinh_array_f32+0x18>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_sinh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6942      	ldr	r2, [r0, #20]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0501 	mov.w	r5, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0418 	addne.w	r4, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0418 	addeq.w	r4, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_sinh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_sinh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f505 	mul.w	r5, ip, r5
 80030f2:	d1f8      	bne.n	80030e6 <forward_sinh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_sinh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4355      	muls	r5, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_sinh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6886      	ldr	r6, [r0, #8]
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800311e:	1f07      	subs	r7, r0, #4
 8003120:	6888      	ldr	r0, [r1, #8]
 8003122:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003126:	1f14      	subs	r4, r2, #4
 8003128:	42b7      	cmp	r7, r6
 800312a:	d309      	bcc.n	8003140 <forward_sinh+0xb0>
 800312c:	ed97 0a00 	vldr	s0, [r7]
 8003130:	f012 ff5c 	bl	8015fec <sinhf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f3f      	subs	r7, r7, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42b7      	cmp	r7, r6
 800313e:	d2f5      	bcs.n	800312c <forward_sinh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_tan_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	6880      	ldr	r0, [r0, #8]
 800314a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800314e:	1f0d      	subs	r5, r1, #4
 8003150:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003154:	1f0e      	subs	r6, r1, #4
 8003156:	42a5      	cmp	r5, r4
 8003158:	f0c0 800a 	bcc.w	8003170 <nl_func_tan_array_f32+0x2c>
 800315c:	ed95 0a00 	vldr	s0, [r5]
 8003160:	f012 fa46 	bl	80155f0 <tanf>
 8003164:	ed86 0a00 	vstr	s0, [r6]
 8003168:	1f2d      	subs	r5, r5, #4
 800316a:	1f36      	subs	r6, r6, #4
 800316c:	42a5      	cmp	r5, r4
 800316e:	d2f5      	bcs.n	800315c <nl_func_tan_array_f32+0x18>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <forward_tan>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b081      	sub	sp, #4
 8003178:	6942      	ldr	r2, [r0, #20]
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	bf1a      	itte	ne
 8003180:	6850      	ldrne	r0, [r2, #4]
 8003182:	1d00      	addne	r0, r0, #4
 8003184:	2004      	moveq	r0, #4
 8003186:	f04f 0501 	mov.w	r5, #1
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	2800      	cmp	r0, #0
 800318e:	bf14      	ite	ne
 8003190:	6803      	ldrne	r3, [r0, #0]
 8003192:	2300      	moveq	r3, #0
 8003194:	2902      	cmp	r1, #2
 8003196:	bfa6      	itte	ge
 8003198:	6850      	ldrge	r0, [r2, #4]
 800319a:	3010      	addge	r0, #16
 800319c:	2004      	movlt	r0, #4
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	bf19      	ittee	ne
 80031a4:	6800      	ldrne	r0, [r0, #0]
 80031a6:	f100 0418 	addne.w	r4, r0, #24
 80031aa:	2100      	moveq	r1, #0
 80031ac:	f101 0418 	addeq.w	r4, r1, #24
 80031b0:	f103 0108 	add.w	r1, r3, #8
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	d01e      	beq.n	80031f8 <forward_tan+0x84>
 80031ba:	684e      	ldr	r6, [r1, #4]
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	4610      	mov	r0, r2
 80031c2:	1f0f      	subs	r7, r1, #4
 80031c4:	f010 0103 	ands.w	r1, r0, #3
 80031c8:	d006      	beq.n	80031d8 <forward_tan+0x64>
 80031ca:	1e52      	subs	r2, r2, #1
 80031cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d0:	1e49      	subs	r1, r1, #1
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	d1f8      	bne.n	80031ca <forward_tan+0x56>
 80031d8:	0880      	lsrs	r0, r0, #2
 80031da:	d00d      	beq.n	80031f8 <forward_tan+0x84>
 80031dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e0:	3910      	subs	r1, #16
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	684f      	ldr	r7, [r1, #4]
 80031e8:	4372      	muls	r2, r6
 80031ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ee:	437a      	muls	r2, r7
 80031f0:	4372      	muls	r2, r6
 80031f2:	4355      	muls	r5, r2
 80031f4:	1e40      	subs	r0, r0, #1
 80031f6:	d1f4      	bne.n	80031e2 <forward_tan+0x6e>
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	6886      	ldr	r6, [r0, #8]
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003202:	1f07      	subs	r7, r0, #4
 8003204:	6888      	ldr	r0, [r1, #8]
 8003206:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800320a:	1f14      	subs	r4, r2, #4
 800320c:	42b7      	cmp	r7, r6
 800320e:	d309      	bcc.n	8003224 <forward_tan+0xb0>
 8003210:	ed97 0a00 	vldr	s0, [r7]
 8003214:	f012 f9ec 	bl	80155f0 <tanf>
 8003218:	ed84 0a00 	vstr	s0, [r4]
 800321c:	1f3f      	subs	r7, r7, #4
 800321e:	1f24      	subs	r4, r4, #4
 8003220:	42b7      	cmp	r7, r6
 8003222:	d2f5      	bcs.n	8003210 <forward_tan+0x9c>
 8003224:	b001      	add	sp, #4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <nl_func_abs_array_f32>:
 8003228:	6889      	ldr	r1, [r1, #8]
 800322a:	6880      	ldr	r0, [r0, #8]
 800322c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003234:	1f1b      	subs	r3, r3, #4
 8003236:	1f10      	subs	r0, r2, #4
 8003238:	428b      	cmp	r3, r1
 800323a:	d307      	bcc.n	800324c <nl_func_abs_array_f32+0x24>
 800323c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003240:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003244:	428b      	cmp	r3, r1
 8003246:	f840 2904 	str.w	r2, [r0], #-4
 800324a:	d2f7      	bcs.n	800323c <nl_func_abs_array_f32+0x14>
 800324c:	4770      	bx	lr
	...

08003250 <forward_abs>:
 8003250:	b4f0      	push	{r4, r5, r6, r7}
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	2900      	cmp	r1, #0
 8003258:	bf1a      	itte	ne
 800325a:	6850      	ldrne	r0, [r2, #4]
 800325c:	1d00      	addne	r0, r0, #4
 800325e:	2004      	moveq	r0, #4
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	bf14      	ite	ne
 800326a:	6803      	ldrne	r3, [r0, #0]
 800326c:	2300      	moveq	r3, #0
 800326e:	2902      	cmp	r1, #2
 8003270:	bfa6      	itte	ge
 8003272:	6850      	ldrge	r0, [r2, #4]
 8003274:	3010      	addge	r0, #16
 8003276:	2004      	movlt	r0, #4
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	2800      	cmp	r0, #0
 800327c:	bf19      	ittee	ne
 800327e:	6800      	ldrne	r0, [r0, #0]
 8003280:	f100 0418 	addne.w	r4, r0, #24
 8003284:	2100      	moveq	r1, #0
 8003286:	f101 0418 	addeq.w	r4, r1, #24
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	0a12      	lsrs	r2, r2, #8
 8003292:	d01e      	beq.n	80032d2 <forward_abs+0x82>
 8003294:	684e      	ldr	r6, [r1, #4]
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	4610      	mov	r0, r2
 800329c:	1f0f      	subs	r7, r1, #4
 800329e:	f010 0103 	ands.w	r1, r0, #3
 80032a2:	d006      	beq.n	80032b2 <forward_abs+0x62>
 80032a4:	1e52      	subs	r2, r2, #1
 80032a6:	f857 c904 	ldr.w	ip, [r7], #-4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	fb0c f505 	mul.w	r5, ip, r5
 80032b0:	d1f8      	bne.n	80032a4 <forward_abs+0x54>
 80032b2:	0880      	lsrs	r0, r0, #2
 80032b4:	d00d      	beq.n	80032d2 <forward_abs+0x82>
 80032b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ba:	3910      	subs	r1, #16
 80032bc:	68ca      	ldr	r2, [r1, #12]
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	684f      	ldr	r7, [r1, #4]
 80032c2:	4372      	muls	r2, r6
 80032c4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032c8:	437a      	muls	r2, r7
 80032ca:	4372      	muls	r2, r6
 80032cc:	4355      	muls	r5, r2
 80032ce:	1e40      	subs	r0, r0, #1
 80032d0:	d1f4      	bne.n	80032bc <forward_abs+0x6c>
 80032d2:	6998      	ldr	r0, [r3, #24]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6880      	ldr	r0, [r0, #8]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032de:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032e2:	1f09      	subs	r1, r1, #4
 80032e4:	1f22      	subs	r2, r4, #4
 80032e6:	4281      	cmp	r1, r0
 80032e8:	f0c0 8008 	bcc.w	80032fc <forward_abs+0xac>
 80032ec:	f851 3904 	ldr.w	r3, [r1], #-4
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	4281      	cmp	r1, r0
 80032f6:	f842 3904 	str.w	r3, [r2], #-4
 80032fa:	d2f7      	bcs.n	80032ec <forward_abs+0x9c>
 80032fc:	bcf0      	pop	{r4, r5, r6, r7}
 80032fe:	4770      	bx	lr

08003300 <nl_func_ceil_array_f32>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	688c      	ldr	r4, [r1, #8]
 8003304:	6880      	ldr	r0, [r0, #8]
 8003306:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800330a:	1f0d      	subs	r5, r1, #4
 800330c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003310:	1f0e      	subs	r6, r1, #4
 8003312:	42a5      	cmp	r5, r4
 8003314:	f0c0 800a 	bcc.w	800332c <nl_func_ceil_array_f32+0x2c>
 8003318:	ed95 0a00 	vldr	s0, [r5]
 800331c:	f011 fd4e 	bl	8014dbc <ceilf>
 8003320:	ed86 0a00 	vstr	s0, [r6]
 8003324:	1f2d      	subs	r5, r5, #4
 8003326:	1f36      	subs	r6, r6, #4
 8003328:	42a5      	cmp	r5, r4
 800332a:	d2f5      	bcs.n	8003318 <nl_func_ceil_array_f32+0x18>
 800332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003330 <forward_ceil>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b081      	sub	sp, #4
 8003334:	6942      	ldr	r2, [r0, #20]
 8003336:	8811      	ldrh	r1, [r2, #0]
 8003338:	2900      	cmp	r1, #0
 800333a:	bf1a      	itte	ne
 800333c:	6850      	ldrne	r0, [r2, #4]
 800333e:	1d00      	addne	r0, r0, #4
 8003340:	2004      	moveq	r0, #4
 8003342:	f04f 0501 	mov.w	r5, #1
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	bf14      	ite	ne
 800334c:	6803      	ldrne	r3, [r0, #0]
 800334e:	2300      	moveq	r3, #0
 8003350:	2902      	cmp	r1, #2
 8003352:	bfa6      	itte	ge
 8003354:	6850      	ldrge	r0, [r2, #4]
 8003356:	3010      	addge	r0, #16
 8003358:	2004      	movlt	r0, #4
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	2800      	cmp	r0, #0
 800335e:	bf19      	ittee	ne
 8003360:	6800      	ldrne	r0, [r0, #0]
 8003362:	f100 0418 	addne.w	r4, r0, #24
 8003366:	2100      	moveq	r1, #0
 8003368:	f101 0418 	addeq.w	r4, r1, #24
 800336c:	f103 0108 	add.w	r1, r3, #8
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	d01e      	beq.n	80033b4 <forward_ceil+0x84>
 8003376:	684e      	ldr	r6, [r1, #4]
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	4610      	mov	r0, r2
 800337e:	1f0f      	subs	r7, r1, #4
 8003380:	f010 0103 	ands.w	r1, r0, #3
 8003384:	d006      	beq.n	8003394 <forward_ceil+0x64>
 8003386:	1e52      	subs	r2, r2, #1
 8003388:	f857 c904 	ldr.w	ip, [r7], #-4
 800338c:	1e49      	subs	r1, r1, #1
 800338e:	fb0c f505 	mul.w	r5, ip, r5
 8003392:	d1f8      	bne.n	8003386 <forward_ceil+0x56>
 8003394:	0880      	lsrs	r0, r0, #2
 8003396:	d00d      	beq.n	80033b4 <forward_ceil+0x84>
 8003398:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800339c:	3910      	subs	r1, #16
 800339e:	68ca      	ldr	r2, [r1, #12]
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	684f      	ldr	r7, [r1, #4]
 80033a4:	4372      	muls	r2, r6
 80033a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80033aa:	437a      	muls	r2, r7
 80033ac:	4372      	muls	r2, r6
 80033ae:	4355      	muls	r5, r2
 80033b0:	1e40      	subs	r0, r0, #1
 80033b2:	d1f4      	bne.n	800339e <forward_ceil+0x6e>
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	6886      	ldr	r6, [r0, #8]
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80033be:	1f07      	subs	r7, r0, #4
 80033c0:	6888      	ldr	r0, [r1, #8]
 80033c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033c6:	1f14      	subs	r4, r2, #4
 80033c8:	42b7      	cmp	r7, r6
 80033ca:	d309      	bcc.n	80033e0 <forward_ceil+0xb0>
 80033cc:	ed97 0a00 	vldr	s0, [r7]
 80033d0:	f011 fcf4 	bl	8014dbc <ceilf>
 80033d4:	ed84 0a00 	vstr	s0, [r4]
 80033d8:	1f3f      	subs	r7, r7, #4
 80033da:	1f24      	subs	r4, r4, #4
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d2f5      	bcs.n	80033cc <forward_ceil+0x9c>
 80033e0:	b001      	add	sp, #4
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <nl_func_floor_array_f32>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	6880      	ldr	r0, [r0, #8]
 80033ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ee:	1f0d      	subs	r5, r1, #4
 80033f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033f4:	1f0e      	subs	r6, r1, #4
 80033f6:	42a5      	cmp	r5, r4
 80033f8:	f0c0 800a 	bcc.w	8003410 <nl_func_floor_array_f32+0x2c>
 80033fc:	ed95 0a00 	vldr	s0, [r5]
 8003400:	f011 ff44 	bl	801528c <floorf>
 8003404:	ed86 0a00 	vstr	s0, [r6]
 8003408:	1f2d      	subs	r5, r5, #4
 800340a:	1f36      	subs	r6, r6, #4
 800340c:	42a5      	cmp	r5, r4
 800340e:	d2f5      	bcs.n	80033fc <nl_func_floor_array_f32+0x18>
 8003410:	bd70      	pop	{r4, r5, r6, pc}
	...

08003414 <forward_floor>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b081      	sub	sp, #4
 8003418:	6942      	ldr	r2, [r0, #20]
 800341a:	8811      	ldrh	r1, [r2, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	bf1a      	itte	ne
 8003420:	6850      	ldrne	r0, [r2, #4]
 8003422:	1d00      	addne	r0, r0, #4
 8003424:	2004      	moveq	r0, #4
 8003426:	f04f 0501 	mov.w	r5, #1
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	2800      	cmp	r0, #0
 800342e:	bf14      	ite	ne
 8003430:	6803      	ldrne	r3, [r0, #0]
 8003432:	2300      	moveq	r3, #0
 8003434:	2902      	cmp	r1, #2
 8003436:	bfa6      	itte	ge
 8003438:	6850      	ldrge	r0, [r2, #4]
 800343a:	3010      	addge	r0, #16
 800343c:	2004      	movlt	r0, #4
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	2800      	cmp	r0, #0
 8003442:	bf19      	ittee	ne
 8003444:	6800      	ldrne	r0, [r0, #0]
 8003446:	f100 0418 	addne.w	r4, r0, #24
 800344a:	2100      	moveq	r1, #0
 800344c:	f101 0418 	addeq.w	r4, r1, #24
 8003450:	f103 0108 	add.w	r1, r3, #8
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	d01e      	beq.n	8003498 <forward_floor+0x84>
 800345a:	684e      	ldr	r6, [r1, #4]
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	4610      	mov	r0, r2
 8003462:	1f0f      	subs	r7, r1, #4
 8003464:	f010 0103 	ands.w	r1, r0, #3
 8003468:	d006      	beq.n	8003478 <forward_floor+0x64>
 800346a:	1e52      	subs	r2, r2, #1
 800346c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003470:	1e49      	subs	r1, r1, #1
 8003472:	fb0c f505 	mul.w	r5, ip, r5
 8003476:	d1f8      	bne.n	800346a <forward_floor+0x56>
 8003478:	0880      	lsrs	r0, r0, #2
 800347a:	d00d      	beq.n	8003498 <forward_floor+0x84>
 800347c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003480:	3910      	subs	r1, #16
 8003482:	68ca      	ldr	r2, [r1, #12]
 8003484:	688e      	ldr	r6, [r1, #8]
 8003486:	684f      	ldr	r7, [r1, #4]
 8003488:	4372      	muls	r2, r6
 800348a:	f851 6910 	ldr.w	r6, [r1], #-16
 800348e:	437a      	muls	r2, r7
 8003490:	4372      	muls	r2, r6
 8003492:	4355      	muls	r5, r2
 8003494:	1e40      	subs	r0, r0, #1
 8003496:	d1f4      	bne.n	8003482 <forward_floor+0x6e>
 8003498:	6998      	ldr	r0, [r3, #24]
 800349a:	6886      	ldr	r6, [r0, #8]
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80034a2:	1f07      	subs	r7, r0, #4
 80034a4:	6888      	ldr	r0, [r1, #8]
 80034a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80034aa:	1f14      	subs	r4, r2, #4
 80034ac:	42b7      	cmp	r7, r6
 80034ae:	d309      	bcc.n	80034c4 <forward_floor+0xb0>
 80034b0:	ed97 0a00 	vldr	s0, [r7]
 80034b4:	f011 feea 	bl	801528c <floorf>
 80034b8:	ed84 0a00 	vstr	s0, [r4]
 80034bc:	1f3f      	subs	r7, r7, #4
 80034be:	1f24      	subs	r4, r4, #4
 80034c0:	42b7      	cmp	r7, r6
 80034c2:	d2f5      	bcs.n	80034b0 <forward_floor+0x9c>
 80034c4:	b001      	add	sp, #4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <nl_func_round_array_f32>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	688c      	ldr	r4, [r1, #8]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034d2:	1f0d      	subs	r5, r1, #4
 80034d4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034d8:	1f0e      	subs	r6, r1, #4
 80034da:	42a5      	cmp	r5, r4
 80034dc:	f0c0 800a 	bcc.w	80034f4 <nl_func_round_array_f32+0x2c>
 80034e0:	ed95 0a00 	vldr	s0, [r5]
 80034e4:	f012 f81c 	bl	8015520 <roundf>
 80034e8:	ed86 0a00 	vstr	s0, [r6]
 80034ec:	1f2d      	subs	r5, r5, #4
 80034ee:	1f36      	subs	r6, r6, #4
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d2f5      	bcs.n	80034e0 <nl_func_round_array_f32+0x18>
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <forward_round>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b081      	sub	sp, #4
 80034fc:	6942      	ldr	r2, [r0, #20]
 80034fe:	8811      	ldrh	r1, [r2, #0]
 8003500:	2900      	cmp	r1, #0
 8003502:	bf1a      	itte	ne
 8003504:	6850      	ldrne	r0, [r2, #4]
 8003506:	1d00      	addne	r0, r0, #4
 8003508:	2004      	moveq	r0, #4
 800350a:	f04f 0501 	mov.w	r5, #1
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	bf14      	ite	ne
 8003514:	6803      	ldrne	r3, [r0, #0]
 8003516:	2300      	moveq	r3, #0
 8003518:	2902      	cmp	r1, #2
 800351a:	bfa6      	itte	ge
 800351c:	6850      	ldrge	r0, [r2, #4]
 800351e:	3010      	addge	r0, #16
 8003520:	2004      	movlt	r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	bf19      	ittee	ne
 8003528:	6800      	ldrne	r0, [r0, #0]
 800352a:	f100 0418 	addne.w	r4, r0, #24
 800352e:	2100      	moveq	r1, #0
 8003530:	f101 0418 	addeq.w	r4, r1, #24
 8003534:	f103 0108 	add.w	r1, r3, #8
 8003538:	680a      	ldr	r2, [r1, #0]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	d01e      	beq.n	800357c <forward_round+0x84>
 800353e:	684e      	ldr	r6, [r1, #4]
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	4610      	mov	r0, r2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	f010 0103 	ands.w	r1, r0, #3
 800354c:	d006      	beq.n	800355c <forward_round+0x64>
 800354e:	1e52      	subs	r2, r2, #1
 8003550:	f857 c904 	ldr.w	ip, [r7], #-4
 8003554:	1e49      	subs	r1, r1, #1
 8003556:	fb0c f505 	mul.w	r5, ip, r5
 800355a:	d1f8      	bne.n	800354e <forward_round+0x56>
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	d00d      	beq.n	800357c <forward_round+0x84>
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	3910      	subs	r1, #16
 8003566:	68ca      	ldr	r2, [r1, #12]
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	684f      	ldr	r7, [r1, #4]
 800356c:	4372      	muls	r2, r6
 800356e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003572:	437a      	muls	r2, r7
 8003574:	4372      	muls	r2, r6
 8003576:	4355      	muls	r5, r2
 8003578:	1e40      	subs	r0, r0, #1
 800357a:	d1f4      	bne.n	8003566 <forward_round+0x6e>
 800357c:	6998      	ldr	r0, [r3, #24]
 800357e:	6886      	ldr	r6, [r0, #8]
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003586:	1f07      	subs	r7, r0, #4
 8003588:	6888      	ldr	r0, [r1, #8]
 800358a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800358e:	1f14      	subs	r4, r2, #4
 8003590:	42b7      	cmp	r7, r6
 8003592:	d309      	bcc.n	80035a8 <forward_round+0xb0>
 8003594:	ed97 0a00 	vldr	s0, [r7]
 8003598:	f011 ffc2 	bl	8015520 <roundf>
 800359c:	ed84 0a00 	vstr	s0, [r4]
 80035a0:	1f3f      	subs	r7, r7, #4
 80035a2:	1f24      	subs	r4, r4, #4
 80035a4:	42b7      	cmp	r7, r6
 80035a6:	d2f5      	bcs.n	8003594 <forward_round+0x9c>
 80035a8:	b001      	add	sp, #4
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <nl_func_neg_array_f32>:
 80035ac:	6889      	ldr	r1, [r1, #8]
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035b8:	1f1b      	subs	r3, r3, #4
 80035ba:	1f12      	subs	r2, r2, #4
 80035bc:	428b      	cmp	r3, r1
 80035be:	d32b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035c4:	edd3 0a00 	vldr	s1, [r3]
 80035c8:	1f18      	subs	r0, r3, #4
 80035ca:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ce:	4288      	cmp	r0, r1
 80035d0:	edc2 0a00 	vstr	s1, [r2]
 80035d4:	d320      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035d6:	ed90 1a00 	vldr	s2, [r0]
 80035da:	1f13      	subs	r3, r2, #4
 80035dc:	1f00      	subs	r0, r0, #4
 80035de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035e2:	4288      	cmp	r0, r1
 80035e4:	ed83 1a00 	vstr	s2, [r3]
 80035e8:	d316      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035ea:	edd0 0a00 	vldr	s1, [r0]
 80035ee:	f1a2 0308 	sub.w	r3, r2, #8
 80035f2:	1f00      	subs	r0, r0, #4
 80035f4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035f8:	4288      	cmp	r0, r1
 80035fa:	edc3 0a00 	vstr	s1, [r3]
 80035fe:	d30b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 8003600:	ed90 1a00 	vldr	s2, [r0]
 8003604:	f1a2 030c 	sub.w	r3, r2, #12
 8003608:	ee61 0a00 	vmul.f32	s1, s2, s0
 800360c:	edc3 0a00 	vstr	s1, [r3]
 8003610:	1f03      	subs	r3, r0, #4
 8003612:	3a10      	subs	r2, #16
 8003614:	428b      	cmp	r3, r1
 8003616:	d2d5      	bcs.n	80035c4 <nl_func_neg_array_f32+0x18>
 8003618:	4770      	bx	lr
	...

0800361c <forward_neg>:
 800361c:	b4f0      	push	{r4, r5, r6, r7}
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	8811      	ldrh	r1, [r2, #0]
 8003622:	2900      	cmp	r1, #0
 8003624:	bf1a      	itte	ne
 8003626:	6850      	ldrne	r0, [r2, #4]
 8003628:	1d00      	addne	r0, r0, #4
 800362a:	2004      	moveq	r0, #4
 800362c:	f04f 0501 	mov.w	r5, #1
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	2800      	cmp	r0, #0
 8003634:	bf14      	ite	ne
 8003636:	6803      	ldrne	r3, [r0, #0]
 8003638:	2300      	moveq	r3, #0
 800363a:	2902      	cmp	r1, #2
 800363c:	bfa6      	itte	ge
 800363e:	6850      	ldrge	r0, [r2, #4]
 8003640:	3010      	addge	r0, #16
 8003642:	2004      	movlt	r0, #4
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	2800      	cmp	r0, #0
 8003648:	bf19      	ittee	ne
 800364a:	6800      	ldrne	r0, [r0, #0]
 800364c:	f100 0418 	addne.w	r4, r0, #24
 8003650:	2100      	moveq	r1, #0
 8003652:	f101 0418 	addeq.w	r4, r1, #24
 8003656:	f103 0108 	add.w	r1, r3, #8
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	0a12      	lsrs	r2, r2, #8
 800365e:	d01e      	beq.n	800369e <forward_neg+0x82>
 8003660:	684e      	ldr	r6, [r1, #4]
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	4610      	mov	r0, r2
 8003668:	1f0f      	subs	r7, r1, #4
 800366a:	f010 0103 	ands.w	r1, r0, #3
 800366e:	d006      	beq.n	800367e <forward_neg+0x62>
 8003670:	1e52      	subs	r2, r2, #1
 8003672:	f857 c904 	ldr.w	ip, [r7], #-4
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	fb0c f505 	mul.w	r5, ip, r5
 800367c:	d1f8      	bne.n	8003670 <forward_neg+0x54>
 800367e:	0880      	lsrs	r0, r0, #2
 8003680:	d00d      	beq.n	800369e <forward_neg+0x82>
 8003682:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003686:	3910      	subs	r1, #16
 8003688:	68ca      	ldr	r2, [r1, #12]
 800368a:	688e      	ldr	r6, [r1, #8]
 800368c:	684f      	ldr	r7, [r1, #4]
 800368e:	4372      	muls	r2, r6
 8003690:	f851 6910 	ldr.w	r6, [r1], #-16
 8003694:	437a      	muls	r2, r7
 8003696:	4372      	muls	r2, r6
 8003698:	4355      	muls	r5, r2
 800369a:	1e40      	subs	r0, r0, #1
 800369c:	d1f4      	bne.n	8003688 <forward_neg+0x6c>
 800369e:	6998      	ldr	r0, [r3, #24]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6880      	ldr	r0, [r0, #8]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80036aa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80036ae:	1f09      	subs	r1, r1, #4
 80036b0:	1f22      	subs	r2, r4, #4
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f0c0 802c 	bcc.w	8003710 <forward_neg+0xf4>
 80036b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80036bc:	edd1 0a00 	vldr	s1, [r1]
 80036c0:	1f09      	subs	r1, r1, #4
 80036c2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c6:	4281      	cmp	r1, r0
 80036c8:	edc2 0a00 	vstr	s1, [r2]
 80036cc:	d320      	bcc.n	8003710 <forward_neg+0xf4>
 80036ce:	ed91 1a00 	vldr	s2, [r1]
 80036d2:	1f13      	subs	r3, r2, #4
 80036d4:	1f09      	subs	r1, r1, #4
 80036d6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036da:	4281      	cmp	r1, r0
 80036dc:	ed83 1a00 	vstr	s2, [r3]
 80036e0:	d316      	bcc.n	8003710 <forward_neg+0xf4>
 80036e2:	edd1 0a00 	vldr	s1, [r1]
 80036e6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ea:	1f09      	subs	r1, r1, #4
 80036ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036f0:	4281      	cmp	r1, r0
 80036f2:	edc3 0a00 	vstr	s1, [r3]
 80036f6:	d30b      	bcc.n	8003710 <forward_neg+0xf4>
 80036f8:	ed91 1a00 	vldr	s2, [r1]
 80036fc:	f1a2 030c 	sub.w	r3, r2, #12
 8003700:	1f09      	subs	r1, r1, #4
 8003702:	3a10      	subs	r2, #16
 8003704:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003708:	4281      	cmp	r1, r0
 800370a:	edc3 0a00 	vstr	s1, [r3]
 800370e:	d2d5      	bcs.n	80036bc <forward_neg+0xa0>
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <nl_func_reciprocal_array_f32>:
 8003714:	6889      	ldr	r1, [r1, #8]
 8003716:	6880      	ldr	r0, [r0, #8]
 8003718:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800371c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003720:	1f1b      	subs	r3, r3, #4
 8003722:	1f12      	subs	r2, r2, #4
 8003724:	428b      	cmp	r3, r1
 8003726:	d331      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003728:	ed93 0a00 	vldr	s0, [r3]
 800372c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003730:	1f18      	subs	r0, r3, #4
 8003732:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003736:	4288      	cmp	r0, r1
 8003738:	ed82 0a00 	vstr	s0, [r2]
 800373c:	d326      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 800373e:	edd0 0a00 	vldr	s1, [r0]
 8003742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003746:	1f13      	subs	r3, r2, #4
 8003748:	1f00      	subs	r0, r0, #4
 800374a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800374e:	4288      	cmp	r0, r1
 8003750:	ed83 0a00 	vstr	s0, [r3]
 8003754:	d31a      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003756:	ed90 0a00 	vldr	s0, [r0]
 800375a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375e:	f1a2 0308 	sub.w	r3, r2, #8
 8003762:	1f00      	subs	r0, r0, #4
 8003764:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003768:	4288      	cmp	r0, r1
 800376a:	ed83 0a00 	vstr	s0, [r3]
 800376e:	d30d      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003770:	edd0 0a00 	vldr	s1, [r0]
 8003774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003778:	f1a2 030c 	sub.w	r3, r2, #12
 800377c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003780:	ed83 0a00 	vstr	s0, [r3]
 8003784:	1f03      	subs	r3, r0, #4
 8003786:	3a10      	subs	r2, #16
 8003788:	428b      	cmp	r3, r1
 800378a:	d2cd      	bcs.n	8003728 <nl_func_reciprocal_array_f32+0x14>
 800378c:	4770      	bx	lr
	...

08003790 <forward_reciprocal>:
 8003790:	b4f0      	push	{r4, r5, r6, r7}
 8003792:	6942      	ldr	r2, [r0, #20]
 8003794:	8811      	ldrh	r1, [r2, #0]
 8003796:	2900      	cmp	r1, #0
 8003798:	bf1a      	itte	ne
 800379a:	6850      	ldrne	r0, [r2, #4]
 800379c:	1d00      	addne	r0, r0, #4
 800379e:	2004      	moveq	r0, #4
 80037a0:	f04f 0501 	mov.w	r5, #1
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	bf14      	ite	ne
 80037aa:	6803      	ldrne	r3, [r0, #0]
 80037ac:	2300      	moveq	r3, #0
 80037ae:	2902      	cmp	r1, #2
 80037b0:	bfa6      	itte	ge
 80037b2:	6850      	ldrge	r0, [r2, #4]
 80037b4:	3010      	addge	r0, #16
 80037b6:	2004      	movlt	r0, #4
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bf19      	ittee	ne
 80037be:	6800      	ldrne	r0, [r0, #0]
 80037c0:	f100 0418 	addne.w	r4, r0, #24
 80037c4:	2100      	moveq	r1, #0
 80037c6:	f101 0418 	addeq.w	r4, r1, #24
 80037ca:	f103 0108 	add.w	r1, r3, #8
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	d01e      	beq.n	8003812 <forward_reciprocal+0x82>
 80037d4:	684e      	ldr	r6, [r1, #4]
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	4610      	mov	r0, r2
 80037dc:	1f0f      	subs	r7, r1, #4
 80037de:	f010 0103 	ands.w	r1, r0, #3
 80037e2:	d006      	beq.n	80037f2 <forward_reciprocal+0x62>
 80037e4:	1e52      	subs	r2, r2, #1
 80037e6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ea:	1e49      	subs	r1, r1, #1
 80037ec:	fb0c f505 	mul.w	r5, ip, r5
 80037f0:	d1f8      	bne.n	80037e4 <forward_reciprocal+0x54>
 80037f2:	0880      	lsrs	r0, r0, #2
 80037f4:	d00d      	beq.n	8003812 <forward_reciprocal+0x82>
 80037f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037fa:	3910      	subs	r1, #16
 80037fc:	68ca      	ldr	r2, [r1, #12]
 80037fe:	688e      	ldr	r6, [r1, #8]
 8003800:	684f      	ldr	r7, [r1, #4]
 8003802:	4372      	muls	r2, r6
 8003804:	f851 6910 	ldr.w	r6, [r1], #-16
 8003808:	437a      	muls	r2, r7
 800380a:	4372      	muls	r2, r6
 800380c:	4355      	muls	r5, r2
 800380e:	1e40      	subs	r0, r0, #1
 8003810:	d1f4      	bne.n	80037fc <forward_reciprocal+0x6c>
 8003812:	6998      	ldr	r0, [r3, #24]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6880      	ldr	r0, [r0, #8]
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800381e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003822:	1f09      	subs	r1, r1, #4
 8003824:	1f22      	subs	r2, r4, #4
 8003826:	4281      	cmp	r1, r0
 8003828:	f0c0 8032 	bcc.w	8003890 <forward_reciprocal+0x100>
 800382c:	ed91 0a00 	vldr	s0, [r1]
 8003830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003834:	1f09      	subs	r1, r1, #4
 8003836:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800383a:	4281      	cmp	r1, r0
 800383c:	ed82 0a00 	vstr	s0, [r2]
 8003840:	d326      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003842:	edd1 0a00 	vldr	s1, [r1]
 8003846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800384a:	1f13      	subs	r3, r2, #4
 800384c:	1f09      	subs	r1, r1, #4
 800384e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003852:	4281      	cmp	r1, r0
 8003854:	ed83 0a00 	vstr	s0, [r3]
 8003858:	d31a      	bcc.n	8003890 <forward_reciprocal+0x100>
 800385a:	ed91 0a00 	vldr	s0, [r1]
 800385e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003862:	f1a2 0308 	sub.w	r3, r2, #8
 8003866:	1f09      	subs	r1, r1, #4
 8003868:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800386c:	4281      	cmp	r1, r0
 800386e:	ed83 0a00 	vstr	s0, [r3]
 8003872:	d30d      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003874:	edd1 0a00 	vldr	s1, [r1]
 8003878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800387c:	f1a2 030c 	sub.w	r3, r2, #12
 8003880:	1f09      	subs	r1, r1, #4
 8003882:	3a10      	subs	r2, #16
 8003884:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003888:	4281      	cmp	r1, r0
 800388a:	ed83 0a00 	vstr	s0, [r3]
 800388e:	d2cd      	bcs.n	800382c <forward_reciprocal+0x9c>
 8003890:	bcf0      	pop	{r4, r5, r6, r7}
 8003892:	4770      	bx	lr

08003894 <nl_func_exp_array_f32>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	688c      	ldr	r4, [r1, #8]
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800389e:	1f0d      	subs	r5, r1, #4
 80038a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038a4:	1f0e      	subs	r6, r1, #4
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	f0c0 800a 	bcc.w	80038c0 <nl_func_exp_array_f32+0x2c>
 80038ac:	ed95 0a00 	vldr	s0, [r5]
 80038b0:	f012 f8ec 	bl	8015a8c <expf>
 80038b4:	ed86 0a00 	vstr	s0, [r6]
 80038b8:	1f2d      	subs	r5, r5, #4
 80038ba:	1f36      	subs	r6, r6, #4
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d2f5      	bcs.n	80038ac <nl_func_exp_array_f32+0x18>
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c4 <forward_exp>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b081      	sub	sp, #4
 80038c8:	6942      	ldr	r2, [r0, #20]
 80038ca:	8811      	ldrh	r1, [r2, #0]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	bf1a      	itte	ne
 80038d0:	6850      	ldrne	r0, [r2, #4]
 80038d2:	1d00      	addne	r0, r0, #4
 80038d4:	2004      	moveq	r0, #4
 80038d6:	f04f 0501 	mov.w	r5, #1
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	bf14      	ite	ne
 80038e0:	6803      	ldrne	r3, [r0, #0]
 80038e2:	2300      	moveq	r3, #0
 80038e4:	2902      	cmp	r1, #2
 80038e6:	bfa6      	itte	ge
 80038e8:	6850      	ldrge	r0, [r2, #4]
 80038ea:	3010      	addge	r0, #16
 80038ec:	2004      	movlt	r0, #4
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bf19      	ittee	ne
 80038f4:	6800      	ldrne	r0, [r0, #0]
 80038f6:	f100 0418 	addne.w	r4, r0, #24
 80038fa:	2100      	moveq	r1, #0
 80038fc:	f101 0418 	addeq.w	r4, r1, #24
 8003900:	f103 0108 	add.w	r1, r3, #8
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	d01e      	beq.n	8003948 <forward_exp+0x84>
 800390a:	684e      	ldr	r6, [r1, #4]
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	4610      	mov	r0, r2
 8003912:	1f0f      	subs	r7, r1, #4
 8003914:	f010 0103 	ands.w	r1, r0, #3
 8003918:	d006      	beq.n	8003928 <forward_exp+0x64>
 800391a:	1e52      	subs	r2, r2, #1
 800391c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003920:	1e49      	subs	r1, r1, #1
 8003922:	fb0c f505 	mul.w	r5, ip, r5
 8003926:	d1f8      	bne.n	800391a <forward_exp+0x56>
 8003928:	0880      	lsrs	r0, r0, #2
 800392a:	d00d      	beq.n	8003948 <forward_exp+0x84>
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	3910      	subs	r1, #16
 8003932:	68ca      	ldr	r2, [r1, #12]
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	684f      	ldr	r7, [r1, #4]
 8003938:	4372      	muls	r2, r6
 800393a:	f851 6910 	ldr.w	r6, [r1], #-16
 800393e:	437a      	muls	r2, r7
 8003940:	4372      	muls	r2, r6
 8003942:	4355      	muls	r5, r2
 8003944:	1e40      	subs	r0, r0, #1
 8003946:	d1f4      	bne.n	8003932 <forward_exp+0x6e>
 8003948:	6998      	ldr	r0, [r3, #24]
 800394a:	6886      	ldr	r6, [r0, #8]
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003952:	1f07      	subs	r7, r0, #4
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800395a:	1f14      	subs	r4, r2, #4
 800395c:	42b7      	cmp	r7, r6
 800395e:	d309      	bcc.n	8003974 <forward_exp+0xb0>
 8003960:	ed97 0a00 	vldr	s0, [r7]
 8003964:	f012 f892 	bl	8015a8c <expf>
 8003968:	ed84 0a00 	vstr	s0, [r4]
 800396c:	1f3f      	subs	r7, r7, #4
 800396e:	1f24      	subs	r4, r4, #4
 8003970:	42b7      	cmp	r7, r6
 8003972:	d2f5      	bcs.n	8003960 <forward_exp+0x9c>
 8003974:	b001      	add	sp, #4
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003978 <nl_func_sigmoid_array_f32>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	688c      	ldr	r4, [r1, #8]
 800397c:	6880      	ldr	r0, [r0, #8]
 800397e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003982:	1f0d      	subs	r5, r1, #4
 8003984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003988:	1f0e      	subs	r6, r1, #4
 800398a:	42a5      	cmp	r5, r4
 800398c:	f0c0 8014 	bcc.w	80039b8 <nl_func_sigmoid_array_f32+0x40>
 8003990:	ed95 0a00 	vldr	s0, [r5]
 8003994:	eeb1 0a40 	vneg.f32	s0, s0
 8003998:	f012 f878 	bl	8015a8c <expf>
 800399c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80039a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80039ac:	ed86 0a00 	vstr	s0, [r6]
 80039b0:	1f2d      	subs	r5, r5, #4
 80039b2:	1f36      	subs	r6, r6, #4
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d2eb      	bcs.n	8003990 <nl_func_sigmoid_array_f32+0x18>
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039bc <forward_sigmoid>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b081      	sub	sp, #4
 80039c0:	6942      	ldr	r2, [r0, #20]
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	bf1a      	itte	ne
 80039c8:	6850      	ldrne	r0, [r2, #4]
 80039ca:	1d00      	addne	r0, r0, #4
 80039cc:	2004      	moveq	r0, #4
 80039ce:	f04f 0501 	mov.w	r5, #1
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bf14      	ite	ne
 80039d8:	6803      	ldrne	r3, [r0, #0]
 80039da:	2300      	moveq	r3, #0
 80039dc:	2902      	cmp	r1, #2
 80039de:	bfa6      	itte	ge
 80039e0:	6850      	ldrge	r0, [r2, #4]
 80039e2:	3010      	addge	r0, #16
 80039e4:	2004      	movlt	r0, #4
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf19      	ittee	ne
 80039ec:	6800      	ldrne	r0, [r0, #0]
 80039ee:	f100 0418 	addne.w	r4, r0, #24
 80039f2:	2100      	moveq	r1, #0
 80039f4:	f101 0418 	addeq.w	r4, r1, #24
 80039f8:	f103 0108 	add.w	r1, r3, #8
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	d01e      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a02:	684e      	ldr	r6, [r1, #4]
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	4610      	mov	r0, r2
 8003a0a:	1f0f      	subs	r7, r1, #4
 8003a0c:	f010 0103 	ands.w	r1, r0, #3
 8003a10:	d006      	beq.n	8003a20 <forward_sigmoid+0x64>
 8003a12:	1e52      	subs	r2, r2, #1
 8003a14:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a18:	1e49      	subs	r1, r1, #1
 8003a1a:	fb0c f505 	mul.w	r5, ip, r5
 8003a1e:	d1f8      	bne.n	8003a12 <forward_sigmoid+0x56>
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	d00d      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a28:	3910      	subs	r1, #16
 8003a2a:	68ca      	ldr	r2, [r1, #12]
 8003a2c:	688e      	ldr	r6, [r1, #8]
 8003a2e:	684f      	ldr	r7, [r1, #4]
 8003a30:	4372      	muls	r2, r6
 8003a32:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a36:	437a      	muls	r2, r7
 8003a38:	4372      	muls	r2, r6
 8003a3a:	4355      	muls	r5, r2
 8003a3c:	1e40      	subs	r0, r0, #1
 8003a3e:	d1f4      	bne.n	8003a2a <forward_sigmoid+0x6e>
 8003a40:	6998      	ldr	r0, [r3, #24]
 8003a42:	6886      	ldr	r6, [r0, #8]
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a4a:	1f07      	subs	r7, r0, #4
 8003a4c:	6888      	ldr	r0, [r1, #8]
 8003a4e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a52:	1f14      	subs	r4, r2, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d313      	bcc.n	8003a80 <forward_sigmoid+0xc4>
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a60:	f012 f814 	bl	8015a8c <expf>
 8003a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a68:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a70:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a74:	ed84 0a00 	vstr	s0, [r4]
 8003a78:	1f3f      	subs	r7, r7, #4
 8003a7a:	1f24      	subs	r4, r4, #4
 8003a7c:	42b7      	cmp	r7, r6
 8003a7e:	d2eb      	bcs.n	8003a58 <forward_sigmoid+0x9c>
 8003a80:	b001      	add	sp, #4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a84 <nl_func_sign_array_f32>:
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	6880      	ldr	r0, [r0, #8]
 8003a88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a90:	1f1b      	subs	r3, r3, #4
 8003a92:	1f10      	subs	r0, r2, #4
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d314      	bcc.n	8003ac2 <nl_func_sign_array_f32+0x3e>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	ed93 0a00 	vldr	s0, [r3]
 8003aa0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bfcc      	ite	gt
 8003aaa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b90 <.text_49>
 8003aae:	ee00 2a10 	vmovle	s0, r2
 8003ab2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003ab6:	ed80 0a00 	vstr	s0, [r0]
 8003aba:	1f1b      	subs	r3, r3, #4
 8003abc:	1f00      	subs	r0, r0, #4
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d2ec      	bcs.n	8003a9c <nl_func_sign_array_f32+0x18>
 8003ac2:	4770      	bx	lr

08003ac4 <forward_sign>:
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
 8003ac6:	6942      	ldr	r2, [r0, #20]
 8003ac8:	8811      	ldrh	r1, [r2, #0]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	bf1a      	itte	ne
 8003ace:	6850      	ldrne	r0, [r2, #4]
 8003ad0:	1d00      	addne	r0, r0, #4
 8003ad2:	2004      	moveq	r0, #4
 8003ad4:	f04f 0501 	mov.w	r5, #1
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2800      	cmp	r0, #0
 8003adc:	bf14      	ite	ne
 8003ade:	6803      	ldrne	r3, [r0, #0]
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	2901      	cmp	r1, #1
 8003ae4:	bfc6      	itte	gt
 8003ae6:	6850      	ldrgt	r0, [r2, #4]
 8003ae8:	3010      	addgt	r0, #16
 8003aea:	2004      	movle	r0, #4
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	bf19      	ittee	ne
 8003af2:	6800      	ldrne	r0, [r0, #0]
 8003af4:	f100 0418 	addne.w	r4, r0, #24
 8003af8:	2100      	moveq	r1, #0
 8003afa:	f101 0418 	addeq.w	r4, r1, #24
 8003afe:	f103 0108 	add.w	r1, r3, #8
 8003b02:	680a      	ldr	r2, [r1, #0]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	d01e      	beq.n	8003b46 <forward_sign+0x82>
 8003b08:	684e      	ldr	r6, [r1, #4]
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	4610      	mov	r0, r2
 8003b10:	1f0f      	subs	r7, r1, #4
 8003b12:	f010 0103 	ands.w	r1, r0, #3
 8003b16:	d006      	beq.n	8003b26 <forward_sign+0x62>
 8003b18:	1e52      	subs	r2, r2, #1
 8003b1a:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b1e:	1e49      	subs	r1, r1, #1
 8003b20:	fb0c f505 	mul.w	r5, ip, r5
 8003b24:	d1f8      	bne.n	8003b18 <forward_sign+0x54>
 8003b26:	0880      	lsrs	r0, r0, #2
 8003b28:	d00d      	beq.n	8003b46 <forward_sign+0x82>
 8003b2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b2e:	3910      	subs	r1, #16
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	684f      	ldr	r7, [r1, #4]
 8003b36:	4372      	muls	r2, r6
 8003b38:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b3c:	437a      	muls	r2, r7
 8003b3e:	4372      	muls	r2, r6
 8003b40:	4355      	muls	r5, r2
 8003b42:	1e40      	subs	r0, r0, #1
 8003b44:	d1f4      	bne.n	8003b30 <forward_sign+0x6c>
 8003b46:	6998      	ldr	r0, [r3, #24]
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b52:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b56:	1f09      	subs	r1, r1, #4
 8003b58:	1f22      	subs	r2, r4, #4
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	f0c0 8015 	bcc.w	8003b8a <forward_sign+0xc6>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	ed91 0a00 	vldr	s0, [r1]
 8003b68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	bfcc      	ite	gt
 8003b72:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b90 <.text_49>
 8003b76:	ee00 3a10 	vmovle	s0, r3
 8003b7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b7e:	ed82 0a00 	vstr	s0, [r2]
 8003b82:	1f09      	subs	r1, r1, #4
 8003b84:	1f12      	subs	r2, r2, #4
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d2ec      	bcs.n	8003b64 <forward_sign+0xa0>
 8003b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <.text_49>:
 8003b90:	00000001 	.word	0x00000001

08003b94 <nl_func_sqrt_array_f32>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	6880      	ldr	r0, [r0, #8]
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ba4:	1f1d      	subs	r5, r3, #4
 8003ba6:	1f16      	subs	r6, r2, #4
 8003ba8:	428d      	cmp	r5, r1
 8003baa:	d30a      	bcc.n	8003bc2 <nl_func_sqrt_array_f32+0x2e>
 8003bac:	ed95 0a00 	vldr	s0, [r5]
 8003bb0:	f002 faa8 	bl	8006104 <ai_math_sqrt>
 8003bb4:	ed86 0a00 	vstr	s0, [r6]
 8003bb8:	1f2d      	subs	r5, r5, #4
 8003bba:	68a0      	ldr	r0, [r4, #8]
 8003bbc:	1f36      	subs	r6, r6, #4
 8003bbe:	4285      	cmp	r5, r0
 8003bc0:	d2f4      	bcs.n	8003bac <nl_func_sqrt_array_f32+0x18>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}

08003bc4 <forward_sqrt>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b081      	sub	sp, #4
 8003bc8:	6942      	ldr	r2, [r0, #20]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	bf1a      	itte	ne
 8003bd0:	6850      	ldrne	r0, [r2, #4]
 8003bd2:	1d00      	addne	r0, r0, #4
 8003bd4:	2004      	moveq	r0, #4
 8003bd6:	f04f 0501 	mov.w	r5, #1
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bf14      	ite	ne
 8003be0:	6803      	ldrne	r3, [r0, #0]
 8003be2:	2300      	moveq	r3, #0
 8003be4:	2902      	cmp	r1, #2
 8003be6:	bfa6      	itte	ge
 8003be8:	6850      	ldrge	r0, [r2, #4]
 8003bea:	3010      	addge	r0, #16
 8003bec:	2004      	movlt	r0, #4
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bf19      	ittee	ne
 8003bf4:	6800      	ldrne	r0, [r0, #0]
 8003bf6:	f100 0418 	addne.w	r4, r0, #24
 8003bfa:	2100      	moveq	r1, #0
 8003bfc:	f101 0418 	addeq.w	r4, r1, #24
 8003c00:	f103 0108 	add.w	r1, r3, #8
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	0a12      	lsrs	r2, r2, #8
 8003c08:	d01e      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c0a:	684e      	ldr	r6, [r1, #4]
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	4610      	mov	r0, r2
 8003c12:	1f0f      	subs	r7, r1, #4
 8003c14:	f010 0103 	ands.w	r1, r0, #3
 8003c18:	d006      	beq.n	8003c28 <forward_sqrt+0x64>
 8003c1a:	1e52      	subs	r2, r2, #1
 8003c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c20:	1e49      	subs	r1, r1, #1
 8003c22:	fb0c f505 	mul.w	r5, ip, r5
 8003c26:	d1f8      	bne.n	8003c1a <forward_sqrt+0x56>
 8003c28:	0880      	lsrs	r0, r0, #2
 8003c2a:	d00d      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c30:	3910      	subs	r1, #16
 8003c32:	68ca      	ldr	r2, [r1, #12]
 8003c34:	688e      	ldr	r6, [r1, #8]
 8003c36:	684f      	ldr	r7, [r1, #4]
 8003c38:	4372      	muls	r2, r6
 8003c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c3e:	437a      	muls	r2, r7
 8003c40:	4372      	muls	r2, r6
 8003c42:	4355      	muls	r5, r2
 8003c44:	1e40      	subs	r0, r0, #1
 8003c46:	d1f4      	bne.n	8003c32 <forward_sqrt+0x6e>
 8003c48:	699e      	ldr	r6, [r3, #24]
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c5a:	1f1c      	subs	r4, r3, #4
 8003c5c:	4287      	cmp	r7, r0
 8003c5e:	d30a      	bcc.n	8003c76 <forward_sqrt+0xb2>
 8003c60:	ed97 0a00 	vldr	s0, [r7]
 8003c64:	f002 fa4e 	bl	8006104 <ai_math_sqrt>
 8003c68:	ed84 0a00 	vstr	s0, [r4]
 8003c6c:	1f3f      	subs	r7, r7, #4
 8003c6e:	68b0      	ldr	r0, [r6, #8]
 8003c70:	1f24      	subs	r4, r4, #4
 8003c72:	4287      	cmp	r7, r0
 8003c74:	d2f4      	bcs.n	8003c60 <forward_sqrt+0x9c>
 8003c76:	b001      	add	sp, #4
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c7c <nl_func_soft_plus_array_f32>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	688c      	ldr	r4, [r1, #8]
 8003c80:	6880      	ldr	r0, [r0, #8]
 8003c82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c86:	1f0d      	subs	r5, r1, #4
 8003c88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c8c:	1f0e      	subs	r6, r1, #4
 8003c8e:	42a5      	cmp	r5, r4
 8003c90:	f0c0 8010 	bcc.w	8003cb4 <nl_func_soft_plus_array_f32+0x38>
 8003c94:	ed95 0a00 	vldr	s0, [r5]
 8003c98:	f011 fef8 	bl	8015a8c <expf>
 8003c9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ca4:	f011 ffc8 	bl	8015c38 <logf>
 8003ca8:	ed86 0a00 	vstr	s0, [r6]
 8003cac:	1f2d      	subs	r5, r5, #4
 8003cae:	1f36      	subs	r6, r6, #4
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d2ef      	bcs.n	8003c94 <nl_func_soft_plus_array_f32+0x18>
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <forward_soft_plus>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b081      	sub	sp, #4
 8003cbc:	6942      	ldr	r2, [r0, #20]
 8003cbe:	8811      	ldrh	r1, [r2, #0]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	bf1a      	itte	ne
 8003cc4:	6850      	ldrne	r0, [r2, #4]
 8003cc6:	1d00      	addne	r0, r0, #4
 8003cc8:	2004      	moveq	r0, #4
 8003cca:	f04f 0501 	mov.w	r5, #1
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	6803      	ldrne	r3, [r0, #0]
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	2902      	cmp	r1, #2
 8003cda:	bfa6      	itte	ge
 8003cdc:	6850      	ldrge	r0, [r2, #4]
 8003cde:	3010      	addge	r0, #16
 8003ce0:	2004      	movlt	r0, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bf19      	ittee	ne
 8003ce8:	6800      	ldrne	r0, [r0, #0]
 8003cea:	f100 0418 	addne.w	r4, r0, #24
 8003cee:	2100      	moveq	r1, #0
 8003cf0:	f101 0418 	addeq.w	r4, r1, #24
 8003cf4:	f103 0108 	add.w	r1, r3, #8
 8003cf8:	680a      	ldr	r2, [r1, #0]
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	d01e      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003cfe:	684e      	ldr	r6, [r1, #4]
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	4610      	mov	r0, r2
 8003d06:	1f0f      	subs	r7, r1, #4
 8003d08:	f010 0103 	ands.w	r1, r0, #3
 8003d0c:	d006      	beq.n	8003d1c <forward_soft_plus+0x64>
 8003d0e:	1e52      	subs	r2, r2, #1
 8003d10:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d14:	1e49      	subs	r1, r1, #1
 8003d16:	fb0c f505 	mul.w	r5, ip, r5
 8003d1a:	d1f8      	bne.n	8003d0e <forward_soft_plus+0x56>
 8003d1c:	0880      	lsrs	r0, r0, #2
 8003d1e:	d00d      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003d20:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d24:	3910      	subs	r1, #16
 8003d26:	68ca      	ldr	r2, [r1, #12]
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	4372      	muls	r2, r6
 8003d2e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d32:	437a      	muls	r2, r7
 8003d34:	4372      	muls	r2, r6
 8003d36:	4355      	muls	r5, r2
 8003d38:	1e40      	subs	r0, r0, #1
 8003d3a:	d1f4      	bne.n	8003d26 <forward_soft_plus+0x6e>
 8003d3c:	6998      	ldr	r0, [r3, #24]
 8003d3e:	6886      	ldr	r6, [r0, #8]
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d46:	1f07      	subs	r7, r0, #4
 8003d48:	6888      	ldr	r0, [r1, #8]
 8003d4a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d4e:	1f14      	subs	r4, r2, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d30f      	bcc.n	8003d74 <forward_soft_plus+0xbc>
 8003d54:	ed97 0a00 	vldr	s0, [r7]
 8003d58:	f011 fe98 	bl	8015a8c <expf>
 8003d5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d64:	f011 ff68 	bl	8015c38 <logf>
 8003d68:	ed84 0a00 	vstr	s0, [r4]
 8003d6c:	1f3f      	subs	r7, r7, #4
 8003d6e:	1f24      	subs	r4, r4, #4
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d2ef      	bcs.n	8003d54 <forward_soft_plus+0x9c>
 8003d74:	b001      	add	sp, #4
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <nl_func_soft_sign_array_f32>:
 8003d78:	6889      	ldr	r1, [r1, #8]
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f10      	subs	r0, r2, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d30f      	bcc.n	8003dac <nl_func_soft_sign_array_f32+0x34>
 8003d8c:	ed93 0a00 	vldr	s0, [r3]
 8003d90:	eef0 0ac0 	vabs.f32	s1, s0
 8003d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d98:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d9c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003da0:	ed80 0a00 	vstr	s0, [r0]
 8003da4:	1f1b      	subs	r3, r3, #4
 8003da6:	1f00      	subs	r0, r0, #4
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d2ef      	bcs.n	8003d8c <nl_func_soft_sign_array_f32+0x14>
 8003dac:	4770      	bx	lr
	...

08003db0 <forward_soft_sign>:
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
 8003db2:	6942      	ldr	r2, [r0, #20]
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	bf1a      	itte	ne
 8003dba:	6850      	ldrne	r0, [r2, #4]
 8003dbc:	1d00      	addne	r0, r0, #4
 8003dbe:	2004      	moveq	r0, #4
 8003dc0:	f04f 0501 	mov.w	r5, #1
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	6803      	ldrne	r3, [r0, #0]
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	bfa6      	itte	ge
 8003dd2:	6850      	ldrge	r0, [r2, #4]
 8003dd4:	3010      	addge	r0, #16
 8003dd6:	2004      	movlt	r0, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	bf19      	ittee	ne
 8003dde:	6800      	ldrne	r0, [r0, #0]
 8003de0:	f100 0418 	addne.w	r4, r0, #24
 8003de4:	2100      	moveq	r1, #0
 8003de6:	f101 0418 	addeq.w	r4, r1, #24
 8003dea:	f103 0108 	add.w	r1, r3, #8
 8003dee:	680a      	ldr	r2, [r1, #0]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	d01e      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003df4:	684e      	ldr	r6, [r1, #4]
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	1f0f      	subs	r7, r1, #4
 8003dfe:	f010 0103 	ands.w	r1, r0, #3
 8003e02:	d006      	beq.n	8003e12 <forward_soft_sign+0x62>
 8003e04:	1e52      	subs	r2, r2, #1
 8003e06:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e0a:	1e49      	subs	r1, r1, #1
 8003e0c:	fb0c f505 	mul.w	r5, ip, r5
 8003e10:	d1f8      	bne.n	8003e04 <forward_soft_sign+0x54>
 8003e12:	0880      	lsrs	r0, r0, #2
 8003e14:	d00d      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003e16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e1a:	3910      	subs	r1, #16
 8003e1c:	68ca      	ldr	r2, [r1, #12]
 8003e1e:	688e      	ldr	r6, [r1, #8]
 8003e20:	684f      	ldr	r7, [r1, #4]
 8003e22:	4372      	muls	r2, r6
 8003e24:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e28:	437a      	muls	r2, r7
 8003e2a:	4372      	muls	r2, r6
 8003e2c:	4355      	muls	r5, r2
 8003e2e:	1e40      	subs	r0, r0, #1
 8003e30:	d1f4      	bne.n	8003e1c <forward_soft_sign+0x6c>
 8003e32:	6998      	ldr	r0, [r3, #24]
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6880      	ldr	r0, [r0, #8]
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e3e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e42:	1f09      	subs	r1, r1, #4
 8003e44:	1f22      	subs	r2, r4, #4
 8003e46:	4281      	cmp	r1, r0
 8003e48:	f0c0 8010 	bcc.w	8003e6c <forward_soft_sign+0xbc>
 8003e4c:	ed91 0a00 	vldr	s0, [r1]
 8003e50:	eef0 0ac0 	vabs.f32	s1, s0
 8003e54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e58:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e5c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e60:	ed82 0a00 	vstr	s0, [r2]
 8003e64:	1f09      	subs	r1, r1, #4
 8003e66:	1f12      	subs	r2, r2, #4
 8003e68:	4281      	cmp	r1, r0
 8003e6a:	d2ef      	bcs.n	8003e4c <forward_soft_sign+0x9c>
 8003e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e6e:	4770      	bx	lr

08003e70 <nl_func_tanh_array_f32>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	688c      	ldr	r4, [r1, #8]
 8003e74:	6880      	ldr	r0, [r0, #8]
 8003e76:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e7a:	1f0d      	subs	r5, r1, #4
 8003e7c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e80:	1f0e      	subs	r6, r1, #4
 8003e82:	42a5      	cmp	r5, r4
 8003e84:	f0c0 800a 	bcc.w	8003e9c <nl_func_tanh_array_f32+0x2c>
 8003e88:	ed95 0a00 	vldr	s0, [r5]
 8003e8c:	f011 fbd8 	bl	8015640 <tanhf>
 8003e90:	ed86 0a00 	vstr	s0, [r6]
 8003e94:	1f2d      	subs	r5, r5, #4
 8003e96:	1f36      	subs	r6, r6, #4
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d2f5      	bcs.n	8003e88 <nl_func_tanh_array_f32+0x18>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea0 <forward_tanh>:
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b081      	sub	sp, #4
 8003ea4:	6942      	ldr	r2, [r0, #20]
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	bf1a      	itte	ne
 8003eac:	6850      	ldrne	r0, [r2, #4]
 8003eae:	1d00      	addne	r0, r0, #4
 8003eb0:	2004      	moveq	r0, #4
 8003eb2:	f04f 0501 	mov.w	r5, #1
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	6803      	ldrne	r3, [r0, #0]
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	2902      	cmp	r1, #2
 8003ec2:	bfa6      	itte	ge
 8003ec4:	6850      	ldrge	r0, [r2, #4]
 8003ec6:	3010      	addge	r0, #16
 8003ec8:	2004      	movlt	r0, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	bf19      	ittee	ne
 8003ed0:	6800      	ldrne	r0, [r0, #0]
 8003ed2:	f100 0418 	addne.w	r4, r0, #24
 8003ed6:	2100      	moveq	r1, #0
 8003ed8:	f101 0418 	addeq.w	r4, r1, #24
 8003edc:	f103 0108 	add.w	r1, r3, #8
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	d01e      	beq.n	8003f24 <forward_tanh+0x84>
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	1f0f      	subs	r7, r1, #4
 8003ef0:	f010 0103 	ands.w	r1, r0, #3
 8003ef4:	d006      	beq.n	8003f04 <forward_tanh+0x64>
 8003ef6:	1e52      	subs	r2, r2, #1
 8003ef8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003efc:	1e49      	subs	r1, r1, #1
 8003efe:	fb0c f505 	mul.w	r5, ip, r5
 8003f02:	d1f8      	bne.n	8003ef6 <forward_tanh+0x56>
 8003f04:	0880      	lsrs	r0, r0, #2
 8003f06:	d00d      	beq.n	8003f24 <forward_tanh+0x84>
 8003f08:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f0c:	3910      	subs	r1, #16
 8003f0e:	68ca      	ldr	r2, [r1, #12]
 8003f10:	688e      	ldr	r6, [r1, #8]
 8003f12:	684f      	ldr	r7, [r1, #4]
 8003f14:	4372      	muls	r2, r6
 8003f16:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f1a:	437a      	muls	r2, r7
 8003f1c:	4372      	muls	r2, r6
 8003f1e:	4355      	muls	r5, r2
 8003f20:	1e40      	subs	r0, r0, #1
 8003f22:	d1f4      	bne.n	8003f0e <forward_tanh+0x6e>
 8003f24:	6998      	ldr	r0, [r3, #24]
 8003f26:	6886      	ldr	r6, [r0, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f2e:	1f07      	subs	r7, r0, #4
 8003f30:	6888      	ldr	r0, [r1, #8]
 8003f32:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f36:	1f14      	subs	r4, r2, #4
 8003f38:	42b7      	cmp	r7, r6
 8003f3a:	d309      	bcc.n	8003f50 <forward_tanh+0xb0>
 8003f3c:	ed97 0a00 	vldr	s0, [r7]
 8003f40:	f011 fb7e 	bl	8015640 <tanhf>
 8003f44:	ed84 0a00 	vstr	s0, [r4]
 8003f48:	1f3f      	subs	r7, r7, #4
 8003f4a:	1f24      	subs	r4, r4, #4
 8003f4c:	42b7      	cmp	r7, r6
 8003f4e:	d2f5      	bcs.n	8003f3c <forward_tanh+0x9c>
 8003f50:	b001      	add	sp, #4
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <nl_func_relu_array_f32>:
 8003f54:	6889      	ldr	r1, [r1, #8]
 8003f56:	6880      	ldr	r0, [r0, #8]
 8003f58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f60:	1f1b      	subs	r3, r3, #4
 8003f62:	1f10      	subs	r0, r2, #4
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d30e      	bcc.n	8003f86 <nl_func_relu_array_f32+0x32>
 8003f68:	ed93 0a00 	vldr	s0, [r3]
 8003f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	bf48      	it	mi
 8003f76:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004164 <.text_62>
 8003f7a:	ed80 0a00 	vstr	s0, [r0]
 8003f7e:	1f1b      	subs	r3, r3, #4
 8003f80:	1f00      	subs	r0, r0, #4
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d2f0      	bcs.n	8003f68 <nl_func_relu_array_f32+0x14>
 8003f86:	4770      	bx	lr

08003f88 <nl_func_sm_channel_f32>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	688f      	ldr	r7, [r1, #8]
 8003f92:	6886      	ldr	r6, [r0, #8]
 8003f94:	ed97 8a00 	vldr	s16, [r7]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	2c02      	cmp	r4, #2
 8003f9c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004164 <.text_62>
 8003fa0:	d33d      	bcc.n	800401e <nl_func_sm_channel_f32+0x96>
 8003fa2:	1e61      	subs	r1, r4, #1
 8003fa4:	1d3a      	adds	r2, r7, #4
 8003fa6:	f011 0003 	ands.w	r0, r1, #3
 8003faa:	d00c      	beq.n	8003fc6 <nl_func_sm_channel_f32+0x3e>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	1e40      	subs	r0, r0, #1
 8003fc0:	f102 0204 	add.w	r2, r2, #4
 8003fc4:	d1f2      	bne.n	8003fac <nl_func_sm_channel_f32+0x24>
 8003fc6:	0889      	lsrs	r1, r1, #2
 8003fc8:	f000 802b 	beq.w	8004022 <nl_func_sm_channel_f32+0x9a>
 8003fcc:	ed92 0a00 	vldr	s0, [r2]
 8003fd0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf58      	it	pl
 8003fda:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fde:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	bf58      	it	pl
 8003fec:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003ff4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf58      	it	pl
 8003ffe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004002:	ed92 0a03 	vldr	s0, [r2, #12]
 8004006:	eeb4 0a48 	vcmp.f32	s0, s16
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	bf58      	it	pl
 8004010:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004014:	1e49      	subs	r1, r1, #1
 8004016:	f102 0210 	add.w	r2, r2, #16
 800401a:	d1d7      	bne.n	8003fcc <nl_func_sm_channel_f32+0x44>
 800401c:	e001      	b.n	8004022 <nl_func_sm_channel_f32+0x9a>
 800401e:	2c00      	cmp	r4, #0
 8004020:	d040      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 8004022:	46b0      	mov	r8, r6
 8004024:	ea4f 0504 	mov.w	r5, r4
 8004028:	ed97 0a00 	vldr	s0, [r7]
 800402c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004030:	f011 fd2c 	bl	8015a8c <expf>
 8004034:	1d3f      	adds	r7, r7, #4
 8004036:	ed88 0a00 	vstr	s0, [r8]
 800403a:	1e6d      	subs	r5, r5, #1
 800403c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004040:	f108 0804 	add.w	r8, r8, #4
 8004044:	d1f0      	bne.n	8004028 <nl_func_sm_channel_f32+0xa0>
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	f014 0003 	ands.w	r0, r4, #3
 800404e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004052:	d009      	beq.n	8004068 <nl_func_sm_channel_f32+0xe0>
 8004054:	edd6 0a00 	vldr	s1, [r6]
 8004058:	ee60 0a80 	vmul.f32	s1, s1, s0
 800405c:	edc6 0a00 	vstr	s1, [r6]
 8004060:	1e40      	subs	r0, r0, #1
 8004062:	f106 0604 	add.w	r6, r6, #4
 8004066:	d1f5      	bne.n	8004054 <nl_func_sm_channel_f32+0xcc>
 8004068:	08a4      	lsrs	r4, r4, #2
 800406a:	d01b      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 800406c:	edd6 0a00 	vldr	s1, [r6]
 8004070:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004074:	edc6 0a00 	vstr	s1, [r6]
 8004078:	1e64      	subs	r4, r4, #1
 800407a:	ed96 1a01 	vldr	s2, [r6, #4]
 800407e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004082:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004086:	ed86 1a01 	vstr	s2, [r6, #4]
 800408a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800408e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004092:	edc6 0a02 	vstr	s1, [r6, #8]
 8004096:	ee21 1a00 	vmul.f32	s2, s2, s0
 800409a:	ed86 1a03 	vstr	s2, [r6, #12]
 800409e:	f106 0610 	add.w	r6, r6, #16
 80040a2:	d1e3      	bne.n	800406c <nl_func_sm_channel_f32+0xe4>
 80040a4:	ecbd 8b02 	vpop	{d8}
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ac <nl_func_sm_array_f32>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	460d      	mov	r5, r1
 80040b2:	4604      	mov	r4, r0
 80040b4:	9f08      	ldr	r7, [sp, #32]
 80040b6:	68a8      	ldr	r0, [r5, #8]
 80040b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040ba:	00bf      	lsls	r7, r7, #2
 80040bc:	427f      	negs	r7, r7
 80040be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	eb01 0a07 	add.w	sl, r1, r7
 80040c8:	00b6      	lsls	r6, r6, #2
 80040ca:	4276      	negs	r6, r6
 80040cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040d0:	68ea      	ldr	r2, [r5, #12]
 80040d2:	4592      	cmp	sl, r2
 80040d4:	eb01 0906 	add.w	r9, r1, r6
 80040d8:	d30f      	bcc.n	80040fa <nl_func_sm_array_f32+0x4e>
 80040da:	4698      	mov	r8, r3
 80040dc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040e0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4642      	mov	r2, r8
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff4c 	bl	8003f88 <nl_func_sm_channel_f32>
 80040f0:	68e8      	ldr	r0, [r5, #12]
 80040f2:	44ba      	add	sl, r7
 80040f4:	4582      	cmp	sl, r0
 80040f6:	44b1      	add	r9, r6
 80040f8:	d2f0      	bcs.n	80040dc <nl_func_sm_array_f32+0x30>
 80040fa:	68e9      	ldr	r1, [r5, #12]
 80040fc:	60a9      	str	r1, [r5, #8]
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	60a0      	str	r0, [r4, #8]
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004108 <nl_func_hard_sigmoid_array_f32>:
 8004108:	6889      	ldr	r1, [r1, #8]
 800410a:	6880      	ldr	r0, [r0, #8]
 800410c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004110:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004114:	1f1b      	subs	r3, r3, #4
 8004116:	1f10      	subs	r0, r2, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d321      	bcc.n	8004160 <nl_func_hard_sigmoid_array_f32+0x58>
 800411c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004120:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004404 <.text_68>
 8004124:	edd3 1a00 	vldr	s3, [r3]
 8004128:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8004408 <.text_69>
 800412c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004130:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004134:	eeb4 1a60 	vcmp.f32	s2, s1
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	da08      	bge.n	8004150 <nl_func_hard_sigmoid_array_f32+0x48>
 800413e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d505      	bpl.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004148:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004164 <.text_62>
 800414c:	e002      	b.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 800414e:	bf00      	nop
 8004150:	eeb0 1a40 	vmov.f32	s2, s0
 8004154:	ed80 1a00 	vstr	s2, [r0]
 8004158:	1f1b      	subs	r3, r3, #4
 800415a:	1f00      	subs	r0, r0, #4
 800415c:	428b      	cmp	r3, r1
 800415e:	d2e1      	bcs.n	8004124 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004160:	4770      	bx	lr
	...

08004164 <.text_62>:
 8004164:	00000000 	.word	0x00000000

08004168 <nl_func_clip_array_f32>:
 8004168:	6889      	ldr	r1, [r1, #8]
 800416a:	6880      	ldr	r0, [r0, #8]
 800416c:	ed93 0a00 	vldr	s0, [r3]
 8004170:	edd3 0a01 	vldr	s1, [r3, #4]
 8004174:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800417c:	1f1b      	subs	r3, r3, #4
 800417e:	1f10      	subs	r0, r2, #4
 8004180:	428b      	cmp	r3, r1
 8004182:	d315      	bcc.n	80041b0 <nl_func_clip_array_f32+0x48>
 8004184:	ed93 1a00 	vldr	s2, [r3]
 8004188:	eeb4 0a41 	vcmp.f32	s0, s2
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf58      	it	pl
 8004192:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004196:	eeb4 1a60 	vcmp.f32	s2, s1
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf58      	it	pl
 80041a0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80041a4:	ed80 1a00 	vstr	s2, [r0]
 80041a8:	1f1b      	subs	r3, r3, #4
 80041aa:	1f00      	subs	r0, r0, #4
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d2e9      	bcs.n	8004184 <nl_func_clip_array_f32+0x1c>
 80041b0:	4770      	bx	lr
	...

080041b4 <nl_func_hardmax_array_f32>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	6855      	ldr	r5, [r2, #4]
 80041bc:	68d4      	ldr	r4, [r2, #12]
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041c4:	436c      	muls	r4, r5
 80041c6:	00a1      	lsls	r1, r4, #2
 80041c8:	4640      	mov	r0, r8
 80041ca:	f00c fa36 	bl	801063a <__aeabi_memclr>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	4633      	mov	r3, r6
 80041d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041d8:	f000 805b 	beq.w	8004292 <nl_func_hardmax_array_f32+0xde>
 80041dc:	f102 0c01 	add.w	ip, r2, #1
 80041e0:	eb05 0e02 	add.w	lr, r5, r2
 80041e4:	45f4      	cmp	ip, lr
 80041e6:	edd3 0a00 	vldr	s1, [r3]
 80041ea:	d249      	bcs.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 80041ec:	1e69      	subs	r1, r5, #1
 80041ee:	f011 0003 	ands.w	r0, r1, #3
 80041f2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041f6:	d00f      	beq.n	8004218 <nl_func_hardmax_array_f32+0x64>
 80041f8:	ed97 1a00 	vldr	s2, [r7]
 80041fc:	eef4 0a41 	vcmp.f32	s1, s2
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf44      	itt	mi
 8004206:	eef0 0a41 	vmovmi.f32	s1, s2
 800420a:	4662      	movmi	r2, ip
 800420c:	1e40      	subs	r0, r0, #1
 800420e:	f10c 0c01 	add.w	ip, ip, #1
 8004212:	f107 0704 	add.w	r7, r7, #4
 8004216:	d1ef      	bne.n	80041f8 <nl_func_hardmax_array_f32+0x44>
 8004218:	0889      	lsrs	r1, r1, #2
 800421a:	d031      	beq.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 800421c:	ed97 1a00 	vldr	s2, [r7]
 8004220:	eef4 0a41 	vcmp.f32	s1, s2
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	bf44      	itt	mi
 800422a:	eef0 0a41 	vmovmi.f32	s1, s2
 800422e:	4662      	movmi	r2, ip
 8004230:	ed97 1a01 	vldr	s2, [r7, #4]
 8004234:	eef4 0a41 	vcmp.f32	s1, s2
 8004238:	f10c 0001 	add.w	r0, ip, #1
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	bf44      	itt	mi
 8004242:	eef0 0a41 	vmovmi.f32	s1, s2
 8004246:	4602      	movmi	r2, r0
 8004248:	ed97 1a02 	vldr	s2, [r7, #8]
 800424c:	1c40      	adds	r0, r0, #1
 800424e:	eef4 0a41 	vcmp.f32	s1, s2
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	bf44      	itt	mi
 8004258:	eef0 0a41 	vmovmi.f32	s1, s2
 800425c:	4602      	movmi	r2, r0
 800425e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004262:	1c40      	adds	r0, r0, #1
 8004264:	eef4 0a41 	vcmp.f32	s1, s2
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf44      	itt	mi
 800426e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004272:	4602      	movmi	r2, r0
 8004274:	1e49      	subs	r1, r1, #1
 8004276:	f100 0c01 	add.w	ip, r0, #1
 800427a:	f107 0710 	add.w	r7, r7, #16
 800427e:	d1cd      	bne.n	800421c <nl_func_hardmax_array_f32+0x68>
 8004280:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004284:	4672      	mov	r2, lr
 8004286:	42a2      	cmp	r2, r4
 8004288:	ed80 0a00 	vstr	s0, [r0]
 800428c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004290:	d3a4      	bcc.n	80041dc <nl_func_hardmax_array_f32+0x28>
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004298 <nl_func_relu_generic_array_f32>:
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	ed93 0a00 	vldr	s0, [r3]
 800429e:	edd3 0a01 	vldr	s1, [r3, #4]
 80042a2:	ed93 1a02 	vldr	s2, [r3, #8]
 80042a6:	6889      	ldr	r1, [r1, #8]
 80042a8:	1f03      	subs	r3, r0, #4
 80042aa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80042ae:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042b2:	1f0b      	subs	r3, r1, #4
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042bc:	d52a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0x7c>
 80042be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d013      	beq.n	80042f0 <nl_func_relu_generic_array_f32+0x58>
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d310      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042cc:	ed92 1a00 	vldr	s2, [r2]
 80042d0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf44      	itt	mi
 80042da:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042de:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042e2:	ed80 1a00 	vstr	s2, [r0]
 80042e6:	1f12      	subs	r2, r2, #4
 80042e8:	1f00      	subs	r0, r0, #4
 80042ea:	428a      	cmp	r2, r1
 80042ec:	d2ee      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x34>
 80042ee:	4770      	bx	lr
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d3fc      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042f4:	edd2 0a00 	vldr	s1, [r2]
 80042f8:	eef4 0a40 	vcmp.f32	s1, s0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bf48      	it	mi
 8004302:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80045a0 <.text_73>
 8004306:	edc0 0a00 	vstr	s1, [r0]
 800430a:	1f12      	subs	r2, r2, #4
 800430c:	1f00      	subs	r0, r0, #4
 800430e:	428a      	cmp	r2, r1
 8004310:	d2f0      	bcs.n	80042f4 <nl_func_relu_generic_array_f32+0x5c>
 8004312:	4770      	bx	lr
 8004314:	428a      	cmp	r2, r1
 8004316:	d3ea      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 8004318:	edd2 1a00 	vldr	s3, [r2]
 800431c:	eef4 1a41 	vcmp.f32	s3, s2
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d50a      	bpl.n	800433c <nl_func_relu_generic_array_f32+0xa4>
 8004326:	eef4 1a40 	vcmp.f32	s3, s0
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d507      	bpl.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 8004330:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004334:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004338:	e002      	b.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 800433a:	bf00      	nop
 800433c:	eef0 1a41 	vmov.f32	s3, s2
 8004340:	edc0 1a00 	vstr	s3, [r0]
 8004344:	1f12      	subs	r2, r2, #4
 8004346:	1f00      	subs	r0, r0, #4
 8004348:	428a      	cmp	r2, r1
 800434a:	d2e5      	bcs.n	8004318 <nl_func_relu_generic_array_f32+0x80>
 800434c:	4770      	bx	lr
	...

08004350 <nl_func_relu_thresholded_array_f32>:
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	6880      	ldr	r0, [r0, #8]
 8004354:	ed93 0a00 	vldr	s0, [r3]
 8004358:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800435c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004360:	1f1b      	subs	r3, r3, #4
 8004362:	1f10      	subs	r0, r2, #4
 8004364:	428b      	cmp	r3, r1
 8004366:	d30e      	bcc.n	8004386 <nl_func_relu_thresholded_array_f32+0x36>
 8004368:	edd3 0a00 	vldr	s1, [r3]
 800436c:	eef4 0a40 	vcmp.f32	s1, s0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	bf48      	it	mi
 8004376:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80045a0 <.text_73>
 800437a:	edc0 0a00 	vstr	s1, [r0]
 800437e:	1f1b      	subs	r3, r3, #4
 8004380:	1f00      	subs	r0, r0, #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d2f0      	bcs.n	8004368 <nl_func_relu_thresholded_array_f32+0x18>
 8004386:	4770      	bx	lr

08004388 <nl_func_elu_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	ed2d 8b04 	vpush	{d8-d9}
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	ed93 8a00 	vldr	s16, [r3]
 8004396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800439a:	1f0d      	subs	r5, r1, #4
 800439c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80043a0:	1f0e      	subs	r6, r1, #4
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	f0c0 802a 	bcc.w	80043fc <nl_func_elu_array_f32+0x74>
 80043a8:	edd5 8a00 	vldr	s17, [r5]
 80043ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	bf4c      	ite	mi
 80043b6:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80045a0 <.text_73>
 80043ba:	eeb0 9a68 	vmovpl.f32	s18, s17
 80043be:	eeb0 0a68 	vmov.f32	s0, s17
 80043c2:	f011 fb63 	bl	8015a8c <expf>
 80043c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043ca:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	dc09      	bgt.n	80043f0 <nl_func_elu_array_f32+0x68>
 80043dc:	eeb0 0a68 	vmov.f32	s0, s17
 80043e0:	f011 fb54 	bl	8015a8c <expf>
 80043e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ec:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043f0:	ed86 9a00 	vstr	s18, [r6]
 80043f4:	1f2d      	subs	r5, r5, #4
 80043f6:	1f36      	subs	r6, r6, #4
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d2d5      	bcs.n	80043a8 <nl_func_elu_array_f32+0x20>
 80043fc:	ecbd 8b04 	vpop	{d8-d9}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <.text_68>:
 8004404:	3f800001 	.word	0x3f800001

08004408 <.text_69>:
 8004408:	3e4ccccd 	.word	0x3e4ccccd

0800440c <nl_func_selu_array_f32>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	ed2d 8b04 	vpush	{d8-d9}
 8004412:	688c      	ldr	r4, [r1, #8]
 8004414:	6880      	ldr	r0, [r0, #8]
 8004416:	ed93 8a00 	vldr	s16, [r3]
 800441a:	edd3 8a01 	vldr	s17, [r3, #4]
 800441e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004422:	1f0d      	subs	r5, r1, #4
 8004424:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004428:	1f0e      	subs	r6, r1, #4
 800442a:	42a5      	cmp	r5, r4
 800442c:	f0c0 802c 	bcc.w	8004488 <nl_func_selu_array_f32+0x7c>
 8004430:	ed95 9a00 	vldr	s18, [r5]
 8004434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	bf4c      	ite	mi
 800443e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80045a0 <.text_73>
 8004442:	eef0 9a49 	vmovpl.f32	s19, s18
 8004446:	eeb0 0a49 	vmov.f32	s0, s18
 800444a:	f011 fb1f 	bl	8015a8c <expf>
 800444e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004452:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004456:	ee20 0a08 	vmul.f32	s0, s0, s16
 800445a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	dc09      	bgt.n	8004478 <nl_func_selu_array_f32+0x6c>
 8004464:	eeb0 0a49 	vmov.f32	s0, s18
 8004468:	f011 fb10 	bl	8015a8c <expf>
 800446c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004470:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004474:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004478:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800447c:	ed86 0a00 	vstr	s0, [r6]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	1f36      	subs	r6, r6, #4
 8004484:	42a5      	cmp	r5, r4
 8004486:	d2d3      	bcs.n	8004430 <nl_func_selu_array_f32+0x24>
 8004488:	ecbd 8b04 	vpop	{d8-d9}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004490 <nl_func_prelu_array_f32>:
 8004490:	6889      	ldr	r1, [r1, #8]
 8004492:	6880      	ldr	r0, [r0, #8]
 8004494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004498:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800449c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	f1ac 0c04 	sub.w	ip, ip, #4
 80044a6:	1f10      	subs	r0, r2, #4
 80044a8:	458c      	cmp	ip, r1
 80044aa:	d320      	bcc.n	80044ee <nl_func_prelu_array_f32+0x5e>
 80044ac:	ed9c 0a00 	vldr	s0, [ip]
 80044b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80045a0 <.text_73>
 80044be:	eef0 0a40 	vmovpl.f32	s1, s0
 80044c2:	461a      	mov	r2, r3
 80044c4:	eeb1 0a40 	vneg.f32	s0, s0
 80044c8:	1f13      	subs	r3, r2, #4
 80044ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf48      	it	mi
 80044d4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80045a0 <.text_73>
 80044d8:	ed92 1a00 	vldr	s2, [r2]
 80044dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044e0:	edc0 0a00 	vstr	s1, [r0]
 80044e4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044e8:	1f00      	subs	r0, r0, #4
 80044ea:	458c      	cmp	ip, r1
 80044ec:	d2de      	bcs.n	80044ac <nl_func_prelu_array_f32+0x1c>
 80044ee:	4770      	bx	lr

080044f0 <forward_relu>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	8811      	ldrh	r1, [r2, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	bf1a      	itte	ne
 80044fc:	6850      	ldrne	r0, [r2, #4]
 80044fe:	1d00      	addne	r0, r0, #4
 8004500:	2004      	moveq	r0, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	bf14      	ite	ne
 8004508:	6805      	ldrne	r5, [r0, #0]
 800450a:	2500      	moveq	r5, #0
 800450c:	2902      	cmp	r1, #2
 800450e:	bfa6      	itte	ge
 8004510:	6850      	ldrge	r0, [r2, #4]
 8004512:	3010      	addge	r0, #16
 8004514:	2004      	movlt	r0, #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	bf19      	ittee	ne
 800451c:	6800      	ldrne	r0, [r0, #0]
 800451e:	f100 0618 	addne.w	r6, r0, #24
 8004522:	2100      	moveq	r1, #0
 8004524:	f101 0618 	addeq.w	r6, r1, #24
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	b9f8      	cbnz	r0, 800456c <forward_relu+0x7c>
 800452c:	f105 0008 	add.w	r0, r5, #8
 8004530:	f7fe f80a 	bl	8002548 <ai_shape_get_size>
 8004534:	69a9      	ldr	r1, [r5, #24]
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	6889      	ldr	r1, [r1, #8]
 800453a:	689c      	ldr	r4, [r3, #8]
 800453c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004540:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004544:	1f12      	subs	r2, r2, #4
 8004546:	1f00      	subs	r0, r0, #4
 8004548:	428a      	cmp	r2, r1
 800454a:	d328      	bcc.n	800459e <forward_relu+0xae>
 800454c:	ed92 0a00 	vldr	s0, [r2]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf48      	it	mi
 800455a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80045a0 <.text_73>
 800455e:	ed80 0a00 	vstr	s0, [r0]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	1f00      	subs	r0, r0, #4
 8004566:	428a      	cmp	r2, r1
 8004568:	d2f0      	bcs.n	800454c <forward_relu+0x5c>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	2801      	cmp	r0, #1
 8004570:	f105 0008 	add.w	r0, r5, #8
 8004574:	d109      	bne.n	800458a <forward_relu+0x9a>
 8004576:	f7fd ffe7 	bl	8002548 <ai_shape_get_size>
 800457a:	4602      	mov	r2, r0
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6883      	ldr	r3, [r0, #8]
 8004580:	69a9      	ldr	r1, [r5, #24]
 8004582:	6830      	ldr	r0, [r6, #0]
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	e6e2      	b.n	8004350 <nl_func_relu_thresholded_array_f32>
 800458a:	f7fd ffdd 	bl	8002548 <ai_shape_get_size>
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	688b      	ldr	r3, [r1, #8]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	4602      	mov	r2, r0
 8004596:	6830      	ldr	r0, [r6, #0]
 8004598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459c:	e67c      	b.n	8004298 <nl_func_relu_generic_array_f32>
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <.text_73>:
 80045a0:	00000000 	.word	0x00000000

080045a4 <forward_relu_thresholded>:
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	4602      	mov	r2, r0
 80045a8:	f04f 0601 	mov.w	r6, #1
 80045ac:	6953      	ldr	r3, [r2, #20]
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bf1a      	itte	ne
 80045b4:	6858      	ldrne	r0, [r3, #4]
 80045b6:	1d00      	addne	r0, r0, #4
 80045b8:	2004      	moveq	r0, #4
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	bf14      	ite	ne
 80045c0:	6804      	ldrne	r4, [r0, #0]
 80045c2:	2400      	moveq	r4, #0
 80045c4:	2902      	cmp	r1, #2
 80045c6:	bfa6      	itte	ge
 80045c8:	6858      	ldrge	r0, [r3, #4]
 80045ca:	3010      	addge	r0, #16
 80045cc:	2004      	movlt	r0, #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bf19      	ittee	ne
 80045d4:	6800      	ldrne	r0, [r0, #0]
 80045d6:	f100 0518 	addne.w	r5, r0, #24
 80045da:	2100      	moveq	r1, #0
 80045dc:	f101 0518 	addeq.w	r5, r1, #24
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	d01f      	beq.n	800462a <forward_relu_thresholded+0x86>
 80045ea:	684f      	ldr	r7, [r1, #4]
 80045ec:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045f6:	f010 0103 	ands.w	r1, r0, #3
 80045fa:	d006      	beq.n	800460a <forward_relu_thresholded+0x66>
 80045fc:	1e5b      	subs	r3, r3, #1
 80045fe:	f85c e904 	ldr.w	lr, [ip], #-4
 8004602:	1e49      	subs	r1, r1, #1
 8004604:	fb0e f606 	mul.w	r6, lr, r6
 8004608:	d1f8      	bne.n	80045fc <forward_relu_thresholded+0x58>
 800460a:	0880      	lsrs	r0, r0, #2
 800460c:	d00d      	beq.n	800462a <forward_relu_thresholded+0x86>
 800460e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004612:	3910      	subs	r1, #16
 8004614:	68cb      	ldr	r3, [r1, #12]
 8004616:	688f      	ldr	r7, [r1, #8]
 8004618:	437b      	muls	r3, r7
 800461a:	684f      	ldr	r7, [r1, #4]
 800461c:	437b      	muls	r3, r7
 800461e:	f851 7910 	ldr.w	r7, [r1], #-16
 8004622:	437b      	muls	r3, r7
 8004624:	435e      	muls	r6, r3
 8004626:	1e40      	subs	r0, r0, #1
 8004628:	d1f4      	bne.n	8004614 <forward_relu_thresholded+0x70>
 800462a:	6990      	ldr	r0, [r2, #24]
 800462c:	6881      	ldr	r1, [r0, #8]
 800462e:	69a0      	ldr	r0, [r4, #24]
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	6880      	ldr	r0, [r0, #8]
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	ed91 0a00 	vldr	s0, [r1]
 800463a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800463e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f22      	subs	r2, r4, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	f0c0 800f 	bcc.w	800466a <forward_relu_thresholded+0xc6>
 800464c:	edd1 0a00 	vldr	s1, [r1]
 8004650:	eef4 0a40 	vcmp.f32	s1, s0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf48      	it	mi
 800465a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004964 <.text_80>
 800465e:	edc2 0a00 	vstr	s1, [r2]
 8004662:	1f09      	subs	r1, r1, #4
 8004664:	1f12      	subs	r2, r2, #4
 8004666:	4281      	cmp	r1, r0
 8004668:	d2f0      	bcs.n	800464c <forward_relu_thresholded+0xa8>
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <forward_elu>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	6962      	ldr	r2, [r4, #20]
 8004672:	8811      	ldrh	r1, [r2, #0]
 8004674:	2900      	cmp	r1, #0
 8004676:	bf1a      	itte	ne
 8004678:	6850      	ldrne	r0, [r2, #4]
 800467a:	1d00      	addne	r0, r0, #4
 800467c:	2004      	moveq	r0, #4
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	6805      	ldrne	r5, [r0, #0]
 8004686:	2500      	moveq	r5, #0
 8004688:	2902      	cmp	r1, #2
 800468a:	bfa6      	itte	ge
 800468c:	6850      	ldrge	r0, [r2, #4]
 800468e:	3010      	addge	r0, #16
 8004690:	2004      	movlt	r0, #4
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	2800      	cmp	r0, #0
 8004696:	bf19      	ittee	ne
 8004698:	6800      	ldrne	r0, [r0, #0]
 800469a:	f100 0618 	addne.w	r6, r0, #24
 800469e:	2100      	moveq	r1, #0
 80046a0:	f101 0618 	addeq.w	r6, r1, #24
 80046a4:	f105 0008 	add.w	r0, r5, #8
 80046a8:	f7fd ff4e 	bl	8002548 <ai_shape_get_size>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69a0      	ldr	r0, [r4, #24]
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	69a9      	ldr	r1, [r5, #24]
 80046b4:	6830      	ldr	r0, [r6, #0]
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ba:	e665      	b.n	8004388 <nl_func_elu_array_f32>

080046bc <forward_selu>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	6962      	ldr	r2, [r4, #20]
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bf1a      	itte	ne
 80046c8:	6850      	ldrne	r0, [r2, #4]
 80046ca:	1d00      	addne	r0, r0, #4
 80046cc:	2004      	moveq	r0, #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6805      	ldrne	r5, [r0, #0]
 80046d6:	2500      	moveq	r5, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0618 	addne.w	r6, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0618 	addeq.w	r6, r1, #24
 80046f4:	f105 0008 	add.w	r0, r5, #8
 80046f8:	f7fd ff26 	bl	8002548 <ai_shape_get_size>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69a0      	ldr	r0, [r4, #24]
 8004700:	6883      	ldr	r3, [r0, #8]
 8004702:	69a9      	ldr	r1, [r5, #24]
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800470a:	e67f      	b.n	800440c <nl_func_selu_array_f32>

0800470c <forward_prelu>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	b083      	sub	sp, #12
 8004712:	6942      	ldr	r2, [r0, #20]
 8004714:	8810      	ldrh	r0, [r2, #0]
 8004716:	2800      	cmp	r0, #0
 8004718:	bf1a      	itte	ne
 800471a:	6851      	ldrne	r1, [r2, #4]
 800471c:	1d09      	addne	r1, r1, #4
 800471e:	2104      	moveq	r1, #4
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	bf19      	ittee	ne
 8004726:	6809      	ldrne	r1, [r1, #0]
 8004728:	f101 0518 	addne.w	r5, r1, #24
 800472c:	2300      	moveq	r3, #0
 800472e:	f103 0518 	addeq.w	r5, r3, #24
 8004732:	2801      	cmp	r0, #1
 8004734:	bfc6      	itte	gt
 8004736:	6851      	ldrgt	r1, [r2, #4]
 8004738:	3110      	addgt	r1, #16
 800473a:	2104      	movle	r1, #4
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	bf19      	ittee	ne
 8004742:	6809      	ldrne	r1, [r1, #0]
 8004744:	f101 0618 	addne.w	r6, r1, #24
 8004748:	2300      	moveq	r3, #0
 800474a:	f103 0618 	addeq.w	r6, r3, #24
 800474e:	2802      	cmp	r0, #2
 8004750:	bfc6      	itte	gt
 8004752:	6850      	ldrgt	r0, [r2, #4]
 8004754:	301c      	addgt	r0, #28
 8004756:	2004      	movle	r0, #4
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf14      	ite	ne
 800475e:	6804      	ldrne	r4, [r0, #0]
 8004760:	2400      	moveq	r4, #0
 8004762:	69a0      	ldr	r0, [r4, #24]
 8004764:	6887      	ldr	r7, [r0, #8]
 8004766:	b12c      	cbz	r4, 8004774 <forward_prelu+0x68>
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f001 fb8a 	bl	8005e84 <ai_array_get_byte_size>
 8004770:	4680      	mov	r8, r0
 8004772:	e001      	b.n	8004778 <forward_prelu+0x6c>
 8004774:	f04f 0801 	mov.w	r8, #1
 8004778:	6828      	ldr	r0, [r5, #0]
 800477a:	6841      	ldr	r1, [r0, #4]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f001 fb81 	bl	8005e84 <ai_array_get_byte_size>
 8004782:	4601      	mov	r1, r0
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	6880      	ldr	r0, [r0, #8]
 800478a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800478e:	4401      	add	r1, r0
 8004790:	f104 0308 	add.w	r3, r4, #8
 8004794:	4288      	cmp	r0, r1
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	d241      	bcs.n	800481e <forward_prelu+0x112>
 800479a:	9702      	str	r7, [sp, #8]
 800479c:	9101      	str	r1, [sp, #4]
 800479e:	4607      	mov	r7, r0
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	608f      	str	r7, [r1, #8]
 80047a4:	f04f 0201 	mov.w	r2, #1
 80047a8:	6834      	ldr	r4, [r6, #0]
 80047aa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	0a00      	lsrs	r0, r0, #8
 80047b4:	d02a      	beq.n	800480c <forward_prelu+0x100>
 80047b6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80047ba:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80047be:	4684      	mov	ip, r0
 80047c0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047c4:	f01c 0303 	ands.w	r3, ip, #3
 80047c8:	d006      	beq.n	80047d8 <forward_prelu+0xcc>
 80047ca:	1e40      	subs	r0, r0, #1
 80047cc:	f85a b904 	ldr.w	fp, [sl], #-4
 80047d0:	1e5b      	subs	r3, r3, #1
 80047d2:	fb0b f202 	mul.w	r2, fp, r2
 80047d6:	d1f8      	bne.n	80047ca <forward_prelu+0xbe>
 80047d8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047dc:	4663      	mov	r3, ip
 80047de:	d015      	beq.n	800480c <forward_prelu+0x100>
 80047e0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047e4:	f1b0 0010 	subs.w	r0, r0, #16
 80047e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047f4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047f8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8004800:	fb0b fc0c 	mul.w	ip, fp, ip
 8004804:	1e5b      	subs	r3, r3, #1
 8004806:	fb0c f202 	mul.w	r2, ip, r2
 800480a:	d1ed      	bne.n	80047e8 <forward_prelu+0xdc>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fe3e 	bl	8004490 <nl_func_prelu_array_f32>
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	4447      	add	r7, r8
 8004818:	4287      	cmp	r7, r0
 800481a:	44c1      	add	r9, r8
 800481c:	d3c0      	bcc.n	80047a0 <forward_prelu+0x94>
 800481e:	6828      	ldr	r0, [r5, #0]
 8004820:	68c1      	ldr	r1, [r0, #12]
 8004822:	6081      	str	r1, [r0, #8]
 8004824:	6830      	ldr	r0, [r6, #0]
 8004826:	68c1      	ldr	r1, [r0, #12]
 8004828:	6081      	str	r1, [r0, #8]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004830 <forward_clip>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	8811      	ldrh	r1, [r2, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	bf1a      	itte	ne
 800483c:	6850      	ldrne	r0, [r2, #4]
 800483e:	1d00      	addne	r0, r0, #4
 8004840:	2004      	moveq	r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	2800      	cmp	r0, #0
 8004846:	bf14      	ite	ne
 8004848:	6805      	ldrne	r5, [r0, #0]
 800484a:	2500      	moveq	r5, #0
 800484c:	2902      	cmp	r1, #2
 800484e:	bfa6      	itte	ge
 8004850:	6850      	ldrge	r0, [r2, #4]
 8004852:	3010      	addge	r0, #16
 8004854:	2004      	movlt	r0, #4
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	bf19      	ittee	ne
 800485c:	6800      	ldrne	r0, [r0, #0]
 800485e:	f100 0618 	addne.w	r6, r0, #24
 8004862:	2100      	moveq	r1, #0
 8004864:	f101 0618 	addeq.w	r6, r1, #24
 8004868:	f105 0008 	add.w	r0, r5, #8
 800486c:	f7fd fe6c 	bl	8002548 <ai_shape_get_size>
 8004870:	4602      	mov	r2, r0
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	6883      	ldr	r3, [r0, #8]
 8004876:	69a9      	ldr	r1, [r5, #24]
 8004878:	6830      	ldr	r0, [r6, #0]
 800487a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800487e:	e473      	b.n	8004168 <nl_func_clip_array_f32>

08004880 <forward_hard_sigmoid>:
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	6942      	ldr	r2, [r0, #20]
 8004884:	8811      	ldrh	r1, [r2, #0]
 8004886:	2900      	cmp	r1, #0
 8004888:	bf1a      	itte	ne
 800488a:	6850      	ldrne	r0, [r2, #4]
 800488c:	1d00      	addne	r0, r0, #4
 800488e:	2004      	moveq	r0, #4
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	2800      	cmp	r0, #0
 8004898:	bf14      	ite	ne
 800489a:	6803      	ldrne	r3, [r0, #0]
 800489c:	2300      	moveq	r3, #0
 800489e:	2902      	cmp	r1, #2
 80048a0:	bfa6      	itte	ge
 80048a2:	6850      	ldrge	r0, [r2, #4]
 80048a4:	3010      	addge	r0, #16
 80048a6:	2004      	movlt	r0, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	2800      	cmp	r0, #0
 80048ac:	bf19      	ittee	ne
 80048ae:	6800      	ldrne	r0, [r0, #0]
 80048b0:	f100 0418 	addne.w	r4, r0, #24
 80048b4:	2100      	moveq	r1, #0
 80048b6:	f101 0418 	addeq.w	r4, r1, #24
 80048ba:	f103 0108 	add.w	r1, r3, #8
 80048be:	680a      	ldr	r2, [r1, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	d01e      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048c4:	684e      	ldr	r6, [r1, #4]
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	4610      	mov	r0, r2
 80048cc:	1f0f      	subs	r7, r1, #4
 80048ce:	f010 0103 	ands.w	r1, r0, #3
 80048d2:	d006      	beq.n	80048e2 <forward_hard_sigmoid+0x62>
 80048d4:	1e52      	subs	r2, r2, #1
 80048d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048da:	1e49      	subs	r1, r1, #1
 80048dc:	fb0c f505 	mul.w	r5, ip, r5
 80048e0:	d1f8      	bne.n	80048d4 <forward_hard_sigmoid+0x54>
 80048e2:	0880      	lsrs	r0, r0, #2
 80048e4:	d00d      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ea:	3910      	subs	r1, #16
 80048ec:	68ca      	ldr	r2, [r1, #12]
 80048ee:	688e      	ldr	r6, [r1, #8]
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	4372      	muls	r2, r6
 80048f4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048f8:	437a      	muls	r2, r7
 80048fa:	4372      	muls	r2, r6
 80048fc:	4355      	muls	r5, r2
 80048fe:	1e40      	subs	r0, r0, #1
 8004900:	d1f4      	bne.n	80048ec <forward_hard_sigmoid+0x6c>
 8004902:	6998      	ldr	r0, [r3, #24]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	6880      	ldr	r0, [r0, #8]
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800490e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004912:	1f09      	subs	r1, r1, #4
 8004914:	1f22      	subs	r2, r4, #4
 8004916:	4281      	cmp	r1, r0
 8004918:	f0c0 8022 	bcc.w	8004960 <forward_hard_sigmoid+0xe0>
 800491c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004920:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004968 <.text_81>
 8004924:	edd1 1a00 	vldr	s3, [r1]
 8004928:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800496c <.text_82>
 800492c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004930:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004934:	eeb4 1a60 	vcmp.f32	s2, s1
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	da08      	bge.n	8004950 <forward_hard_sigmoid+0xd0>
 800493e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d505      	bpl.n	8004954 <forward_hard_sigmoid+0xd4>
 8004948:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004964 <.text_80>
 800494c:	e002      	b.n	8004954 <forward_hard_sigmoid+0xd4>
 800494e:	bf00      	nop
 8004950:	eeb0 1a40 	vmov.f32	s2, s0
 8004954:	ed82 1a00 	vstr	s2, [r2]
 8004958:	1f09      	subs	r1, r1, #4
 800495a:	1f12      	subs	r2, r2, #4
 800495c:	4281      	cmp	r1, r0
 800495e:	d2e1      	bcs.n	8004924 <forward_hard_sigmoid+0xa4>
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr

08004964 <.text_80>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_81>:
 8004968:	3f800001 	.word	0x3f800001

0800496c <.text_82>:
 800496c:	3e4ccccd 	.word	0x3e4ccccd

08004970 <forward_sm>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	6942      	ldr	r2, [r0, #20]
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	bf1a      	itte	ne
 800497c:	6850      	ldrne	r0, [r2, #4]
 800497e:	1d00      	addne	r0, r0, #4
 8004980:	2004      	moveq	r0, #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2800      	cmp	r0, #0
 8004986:	bf14      	ite	ne
 8004988:	6804      	ldrne	r4, [r0, #0]
 800498a:	2400      	moveq	r4, #0
 800498c:	2902      	cmp	r1, #2
 800498e:	bfa6      	itte	ge
 8004990:	6850      	ldrge	r0, [r2, #4]
 8004992:	3010      	addge	r0, #16
 8004994:	2004      	movlt	r0, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	2800      	cmp	r0, #0
 800499a:	bf14      	ite	ne
 800499c:	6805      	ldrne	r5, [r0, #0]
 800499e:	2500      	moveq	r5, #0
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	68e9      	ldr	r1, [r5, #12]
 80049a4:	6846      	ldr	r6, [r0, #4]
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7fd fdcc 	bl	8002548 <ai_shape_get_size>
 80049b0:	4602      	mov	r2, r0
 80049b2:	9701      	str	r7, [sp, #4]
 80049b4:	9600      	str	r6, [sp, #0]
 80049b6:	69a1      	ldr	r1, [r4, #24]
 80049b8:	69a8      	ldr	r0, [r5, #24]
 80049ba:	4633      	mov	r3, r6
 80049bc:	f7ff fb76 	bl	80040ac <nl_func_sm_array_f32>
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <forward_hardmax>:
 80049c4:	b430      	push	{r4, r5}
 80049c6:	6943      	ldr	r3, [r0, #20]
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	6980      	ldr	r0, [r0, #24]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	bf1a      	itte	ne
 80049d0:	6859      	ldrne	r1, [r3, #4]
 80049d2:	1d09      	addne	r1, r1, #4
 80049d4:	2104      	moveq	r1, #4
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	bf14      	ite	ne
 80049dc:	680c      	ldrne	r4, [r1, #0]
 80049de:	2400      	moveq	r4, #0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	bfa6      	itte	ge
 80049e4:	6859      	ldrge	r1, [r3, #4]
 80049e6:	3110      	addge	r1, #16
 80049e8:	2104      	movlt	r1, #4
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	6883      	ldr	r3, [r0, #8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	bf19      	ittee	ne
 80049f2:	6809      	ldrne	r1, [r1, #0]
 80049f4:	f101 0518 	addne.w	r5, r1, #24
 80049f8:	2200      	moveq	r2, #0
 80049fa:	f102 0518 	addeq.w	r5, r2, #24
 80049fe:	69a1      	ldr	r1, [r4, #24]
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	f104 0208 	add.w	r2, r4, #8
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	f7ff bbd4 	b.w	80041b4 <nl_func_hardmax_array_f32>

08004a0c <pool_func_mp_array_f32>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	4688      	mov	r8, r1
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8004a18:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004a1a:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 8004a1e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004a20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004a22:	1e48      	subs	r0, r1, #1
 8004a24:	fb10 fe0e 	smulbb	lr, r0, lr
 8004a28:	4615      	mov	r5, r2
 8004a2a:	ebae 0e07 	sub.w	lr, lr, r7
 8004a2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a30:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	44a6      	add	lr, r4
 8004a38:	f1ae 0601 	sub.w	r6, lr, #1
 8004a3c:	469c      	mov	ip, r3
 8004a3e:	1b76      	subs	r6, r6, r5
 8004a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004a42:	4338      	orrs	r0, r7
 8004a44:	f040 80dd 	bne.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a48:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8004a4c:	f1a0 0901 	sub.w	r9, r0, #1
 8004a50:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004a54:	fb19 f903 	smulbb	r9, r9, r3
 8004a58:	eba9 0900 	sub.w	r9, r9, r0
 8004a5c:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004a60:	4448      	add	r0, r9
 8004a62:	1e40      	subs	r0, r0, #1
 8004a64:	eba0 0008 	sub.w	r0, r0, r8
 8004a68:	b200      	sxth	r0, r0
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	bf44      	itt	mi
 8004a6e:	b236      	sxthmi	r6, r6
 8004a70:	2e00      	cmpmi	r6, #0
 8004a72:	f140 80c6 	bpl.w	8004c02 <pool_func_mp_array_f32+0x1f6>
 8004a76:	2000      	movs	r0, #0
 8004a78:	000d      	movs	r5, r1
 8004a7a:	9008      	str	r0, [sp, #32]
 8004a7c:	f000 8178 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004a80:	b224      	sxth	r4, r4
 8004a82:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004a86:	9002      	str	r0, [sp, #8]
 8004a88:	9007      	str	r0, [sp, #28]
 8004a8a:	9106      	str	r1, [sp, #24]
 8004a8c:	ea4f 040c 	mov.w	r4, ip
 8004a90:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004d78 <.text_3>
 8004a94:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004a98:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f000 8096 	beq.w	8004bce <pool_func_mp_array_f32+0x1c2>
 8004aa2:	9907      	ldr	r1, [sp, #28]
 8004aa4:	9808      	ldr	r0, [sp, #32]
 8004aa6:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 8004aaa:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004aae:	9103      	str	r1, [sp, #12]
 8004ab0:	f04f 0a00 	mov.w	sl, #0
 8004ab4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8004ab8:	f8ad c002 	strh.w	ip, [sp, #2]
 8004abc:	4348      	muls	r0, r1
 8004abe:	b200      	sxth	r0, r0
 8004ac0:	900a      	str	r0, [sp, #40]	; 0x28
 8004ac2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004ac6:	9204      	str	r2, [sp, #16]
 8004ac8:	f8ad 6000 	strh.w	r6, [sp]
 8004acc:	f8cd 5014 	str.w	r5, [sp, #20]
 8004ad0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004ad4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ad8:	f9bd e000 	ldrsh.w	lr, [sp]
 8004adc:	2100      	movs	r1, #0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d05d      	beq.n	8004b9e <pool_func_mp_array_f32+0x192>
 8004ae2:	9a03      	ldr	r2, [sp, #12]
 8004ae4:	9804      	ldr	r0, [sp, #16]
 8004ae6:	4362      	muls	r2, r4
 8004ae8:	ab02      	add	r3, sp, #8
 8004aea:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8004aee:	5e58      	ldrsh	r0, [r3, r1]
 8004af0:	9009      	str	r0, [sp, #36]	; 0x24
 8004af2:	fa0f f58a 	sxth.w	r5, sl
 8004af6:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004afc:	42b8      	cmp	r0, r7
 8004afe:	eef0 0a40 	vmov.f32	s1, s0
 8004b02:	da45      	bge.n	8004b90 <pool_func_mp_array_f32+0x184>
 8004b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b06:	fb08 f900 	mul.w	r9, r8, r0
 8004b0a:	1aba      	subs	r2, r7, r2
 8004b0c:	4658      	mov	r0, fp
 8004b0e:	4575      	cmp	r5, lr
 8004b10:	462e      	mov	r6, r5
 8004b12:	da39      	bge.n	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b14:	ebae 0305 	sub.w	r3, lr, r5
 8004b18:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8004b1c:	d50f      	bpl.n	8004b3e <pool_func_mp_array_f32+0x132>
 8004b1e:	eb09 0b06 	add.w	fp, r9, r6
 8004b22:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b26:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b2a:	ed9b 1a00 	vldr	s2, [fp]
 8004b2e:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	bf58      	it	pl
 8004b38:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b3c:	1c76      	adds	r6, r6, #1
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f000 8022 	beq.w	8004b88 <pool_func_mp_array_f32+0x17c>
 8004b44:	eb09 0b06 	add.w	fp, r9, r6
 8004b48:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b4c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b50:	ed9b 1a00 	vldr	s2, [fp]
 8004b54:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5c:	bf58      	it	pl
 8004b5e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b62:	1c76      	adds	r6, r6, #1
 8004b64:	eb09 0b06 	add.w	fp, r9, r6
 8004b68:	fb0b 1b04 	mla	fp, fp, r4, r1
 8004b6c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8004b70:	ed9b 1a00 	vldr	s2, [fp]
 8004b74:	eeb4 1a60 	vcmp.f32	s2, s1
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	bf58      	it	pl
 8004b7e:	eef0 0a41 	vmovpl.f32	s1, s2
 8004b82:	1c76      	adds	r6, r6, #1
 8004b84:	1e5b      	subs	r3, r3, #1
 8004b86:	d1dd      	bne.n	8004b44 <pool_func_mp_array_f32+0x138>
 8004b88:	1e52      	subs	r2, r2, #1
 8004b8a:	44c1      	add	r9, r8
 8004b8c:	d1bf      	bne.n	8004b0e <pool_func_mp_array_f32+0x102>
 8004b8e:	4683      	mov	fp, r0
 8004b90:	1c49      	adds	r1, r1, #1
 8004b92:	edcc 0a00 	vstr	s1, [ip]
 8004b96:	42a1      	cmp	r1, r4
 8004b98:	f10c 0c04 	add.w	ip, ip, #4
 8004b9c:	dbad      	blt.n	8004afa <pool_func_mp_array_f32+0xee>
 8004b9e:	9803      	ldr	r0, [sp, #12]
 8004ba0:	f8bd 1000 	ldrh.w	r1, [sp]
 8004ba4:	1c40      	adds	r0, r0, #1
 8004ba6:	9003      	str	r0, [sp, #12]
 8004ba8:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 8004bac:	4482      	add	sl, r0
 8004bae:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8004bb2:	1841      	adds	r1, r0, r1
 8004bb4:	f8ad 1000 	strh.w	r1, [sp]
 8004bb8:	9905      	ldr	r1, [sp, #20]
 8004bba:	1e49      	subs	r1, r1, #1
 8004bbc:	9105      	str	r1, [sp, #20]
 8004bbe:	d189      	bne.n	8004ad4 <pool_func_mp_array_f32+0xc8>
 8004bc0:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004bc4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004bc8:	9a04      	ldr	r2, [sp, #16]
 8004bca:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004bce:	9908      	ldr	r1, [sp, #32]
 8004bd0:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8004bd4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8004bd8:	1c49      	adds	r1, r1, #1
 8004bda:	9108      	str	r1, [sp, #32]
 8004bdc:	9907      	ldr	r1, [sp, #28]
 8004bde:	194d      	adds	r5, r1, r5
 8004be0:	9507      	str	r5, [sp, #28]
 8004be2:	9902      	ldr	r1, [sp, #8]
 8004be4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8004be8:	194d      	adds	r5, r1, r5
 8004bea:	9502      	str	r5, [sp, #8]
 8004bec:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004bf0:	9d06      	ldr	r5, [sp, #24]
 8004bf2:	19cf      	adds	r7, r1, r7
 8004bf4:	1e6d      	subs	r5, r5, #1
 8004bf6:	f8ad 7006 	strh.w	r7, [sp, #6]
 8004bfa:	9506      	str	r5, [sp, #24]
 8004bfc:	f000 80b8 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c00:	e748      	b.n	8004a94 <pool_func_mp_array_f32+0x88>
 8004c02:	0008      	movs	r0, r1
 8004c04:	f000 80b4 	beq.w	8004d70 <pool_func_mp_array_f32+0x364>
 8004c08:	427f      	negs	r7, r7
 8004c0a:	19e4      	adds	r4, r4, r7
 8004c0c:	f8ad 7000 	strh.w	r7, [sp]
 8004c10:	f8ad 400a 	strh.w	r4, [sp, #10]
 8004c14:	2000      	movs	r0, #0
 8004c16:	9008      	str	r0, [sp, #32]
 8004c18:	f8cd 101c 	str.w	r1, [sp, #28]
 8004c1c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004d78 <.text_3>
 8004c20:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8004c24:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f000 8089 	beq.w	8004d40 <pool_func_mp_array_f32+0x334>
 8004c2e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8004c32:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8004c36:	9908      	ldr	r1, [sp, #32]
 8004c38:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004c3c:	9103      	str	r1, [sp, #12]
 8004c3e:	f1ce 0e00 	rsb	lr, lr, #0
 8004c42:	4477      	add	r7, lr
 8004c44:	f8ad c002 	strh.w	ip, [sp, #2]
 8004c48:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8004c4c:	9204      	str	r2, [sp, #16]
 8004c4e:	f8ad e006 	strh.w	lr, [sp, #6]
 8004c52:	f8ad 7008 	strh.w	r7, [sp, #8]
 8004c56:	9406      	str	r4, [sp, #24]
 8004c58:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004c5c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004c60:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8004c64:	2600      	movs	r6, #0
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d04e      	beq.n	8004d08 <pool_func_mp_array_f32+0x2fc>
 8004c6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	9904      	ldr	r1, [sp, #16]
 8004c72:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8004c76:	435a      	muls	r2, r3
 8004c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004c80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004c84:	f8cd 1014 	str.w	r1, [sp, #20]
 8004c88:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004c8c:	4551      	cmp	r1, sl
 8004c8e:	eef0 0a40 	vmov.f32	s1, s0
 8004c92:	da2a      	bge.n	8004cea <pool_func_mp_array_f32+0x2de>
 8004c94:	fb03 f901 	mul.w	r9, r3, r1
 8004c98:	f8ad 5002 	strh.w	r5, [sp, #2]
 8004c9c:	4284      	cmp	r4, r0
 8004c9e:	4625      	mov	r5, r4
 8004ca0:	da1d      	bge.n	8004cde <pool_func_mp_array_f32+0x2d2>
 8004ca2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8004ca6:	46de      	mov	lr, fp
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bf58      	it	pl
 8004cac:	2d00      	cmppl	r5, #0
 8004cae:	d412      	bmi.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb0:	42b9      	cmp	r1, r7
 8004cb2:	bfb8      	it	lt
 8004cb4:	429d      	cmplt	r5, r3
 8004cb6:	da0e      	bge.n	8004cd6 <pool_func_mp_array_f32+0x2ca>
 8004cb8:	eb09 0b05 	add.w	fp, r9, r5
 8004cbc:	fb0b 6b02 	mla	fp, fp, r2, r6
 8004cc0:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8004cc4:	ed9b 1a00 	vldr	s2, [fp]
 8004cc8:	eeb4 1a60 	vcmp.f32	s2, s1
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	bf58      	it	pl
 8004cd2:	eef0 0a41 	vmovpl.f32	s1, s2
 8004cd6:	1c6d      	adds	r5, r5, #1
 8004cd8:	4285      	cmp	r5, r0
 8004cda:	dbe5      	blt.n	8004ca8 <pool_func_mp_array_f32+0x29c>
 8004cdc:	46f3      	mov	fp, lr
 8004cde:	1c49      	adds	r1, r1, #1
 8004ce0:	4551      	cmp	r1, sl
 8004ce2:	4499      	add	r9, r3
 8004ce4:	dbda      	blt.n	8004c9c <pool_func_mp_array_f32+0x290>
 8004ce6:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004cea:	1c76      	adds	r6, r6, #1
 8004cec:	9905      	ldr	r1, [sp, #20]
 8004cee:	edc1 0a00 	vstr	s1, [r1]
 8004cf2:	9905      	ldr	r1, [sp, #20]
 8004cf4:	1d0f      	adds	r7, r1, #4
 8004cf6:	4296      	cmp	r6, r2
 8004cf8:	9705      	str	r7, [sp, #20]
 8004cfa:	dbc5      	blt.n	8004c88 <pool_func_mp_array_f32+0x27c>
 8004cfc:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004d00:	f8ad 4006 	strh.w	r4, [sp, #6]
 8004d04:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004d08:	9803      	ldr	r0, [sp, #12]
 8004d0a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d0e:	1c40      	adds	r0, r0, #1
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004d16:	1808      	adds	r0, r1, r0
 8004d18:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004d1c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8004d20:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8004d24:	1808      	adds	r0, r1, r0
 8004d26:	f8ad 0006 	strh.w	r0, [sp, #6]
 8004d2a:	9806      	ldr	r0, [sp, #24]
 8004d2c:	1e40      	subs	r0, r0, #1
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	d194      	bne.n	8004c5c <pool_func_mp_array_f32+0x250>
 8004d32:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8004d36:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8004d40:	9908      	ldr	r1, [sp, #32]
 8004d42:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8004d46:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8004d4a:	190c      	adds	r4, r1, r4
 8004d4c:	9408      	str	r4, [sp, #32]
 8004d4e:	f8bd 4000 	ldrh.w	r4, [sp]
 8004d52:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d56:	19cf      	adds	r7, r1, r7
 8004d58:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004d5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8004d60:	190c      	adds	r4, r1, r4
 8004d62:	f8ad 4000 	strh.w	r4, [sp]
 8004d66:	9c07      	ldr	r4, [sp, #28]
 8004d68:	1e64      	subs	r4, r4, #1
 8004d6a:	9407      	str	r4, [sp, #28]
 8004d6c:	f47f af58 	bne.w	8004c20 <pool_func_mp_array_f32+0x214>
 8004d70:	b00b      	add	sp, #44	; 0x2c
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d78 <.text_3>:
 8004d78:	cf000000 	.word	0xcf000000

08004d7c <pool_func_ap_array_f32>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	468b      	mov	fp, r1
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	4699      	mov	r9, r3
 8004d86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d88:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8004d8c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004d8e:	4692      	mov	sl, r2
 8004d90:	1e4f      	subs	r7, r1, #1
 8004d92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004d94:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004d96:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004d9a:	6880      	ldr	r0, [r0, #8]
 8004d9c:	68ad      	ldr	r5, [r5, #8]
 8004d9e:	fb17 fc0c 	smulbb	ip, r7, ip
 8004da2:	ebac 0c03 	sub.w	ip, ip, r3
 8004da6:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 8004daa:	4494      	add	ip, r2
 8004dac:	f1ac 0401 	sub.w	r4, ip, #1
 8004db0:	431f      	orrs	r7, r3
 8004db2:	eba4 060a 	sub.w	r6, r4, sl
 8004db6:	f040 80dc 	bne.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004dba:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8004dbe:	1e7c      	subs	r4, r7, #1
 8004dc0:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8004dc4:	fb14 f408 	smulbb	r4, r4, r8
 8004dc8:	1be4      	subs	r4, r4, r7
 8004dca:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8004dce:	193c      	adds	r4, r7, r4
 8004dd0:	1e64      	subs	r4, r4, #1
 8004dd2:	eba4 040b 	sub.w	r4, r4, fp
 8004dd6:	b224      	sxth	r4, r4
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	bf44      	itt	mi
 8004ddc:	b234      	sxthmi	r4, r6
 8004dde:	2c00      	cmpmi	r4, #0
 8004de0:	f140 80c7 	bpl.w	8004f72 <pool_func_ap_array_f32+0x1f6>
 8004de4:	2400      	movs	r4, #0
 8004de6:	000b      	movs	r3, r1
 8004de8:	9409      	str	r4, [sp, #36]	; 0x24
 8004dea:	f000 81af 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004dee:	b212      	sxth	r2, r2
 8004df0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8004df4:	9408      	str	r4, [sp, #32]
 8004df6:	9407      	str	r4, [sp, #28]
 8004df8:	f8cd 1018 	str.w	r1, [sp, #24]
 8004dfc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004e00:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	f000 809a 	beq.w	8004f3e <pool_func_ap_array_f32+0x1c2>
 8004e0a:	9907      	ldr	r1, [sp, #28]
 8004e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004e12:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8004e16:	9102      	str	r1, [sp, #8]
 8004e18:	2700      	movs	r7, #0
 8004e1a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8004e1e:	434a      	muls	r2, r1
 8004e20:	b212      	sxth	r2, r2
 8004e22:	ae08      	add	r6, sp, #32
 8004e24:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e26:	46ca      	mov	sl, r9
 8004e28:	5ff1      	ldrsh	r1, [r6, r7]
 8004e2a:	910a      	str	r1, [sp, #40]	; 0x28
 8004e2c:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004e30:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004e34:	9505      	str	r5, [sp, #20]
 8004e36:	f8ad 4000 	strh.w	r4, [sp]
 8004e3a:	9303      	str	r3, [sp, #12]
 8004e3c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004e40:	f9bd c000 	ldrsh.w	ip, [sp]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d063      	beq.n	8004f12 <pool_func_ap_array_f32+0x196>
 8004e4a:	9d02      	ldr	r5, [sp, #8]
 8004e4c:	9905      	ldr	r1, [sp, #20]
 8004e4e:	f8cd e010 	str.w	lr, [sp, #16]
 8004e52:	fb05 f50a 	mul.w	r5, r5, sl
 8004e56:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8004e5a:	f8ad b006 	strh.w	fp, [sp, #6]
 8004e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e60:	9b04      	ldr	r3, [sp, #16]
 8004e62:	4299      	cmp	r1, r3
 8004e64:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8005154 <.text_5>
 8004e68:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005154 <.text_5>
 8004e6c:	da43      	bge.n	8004ef6 <pool_func_ap_array_f32+0x17a>
 8004e6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e70:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004e74:	eba3 0804 	sub.w	r8, r3, r4
 8004e78:	fb01 f10b 	mul.w	r1, r1, fp
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	ee10 ea90 	vmov	lr, s1
 8004e82:	b23c      	sxth	r4, r7
 8004e84:	4564      	cmp	r4, ip
 8004e86:	46b9      	mov	r9, r7
 8004e88:	da2e      	bge.n	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004e8a:	ebac 0004 	sub.w	r0, ip, r4
 8004e8e:	44e6      	add	lr, ip
 8004e90:	07c6      	lsls	r6, r0, #31
 8004e92:	ebae 0e04 	sub.w	lr, lr, r4
 8004e96:	d50a      	bpl.n	8004eae <pool_func_ap_array_f32+0x132>
 8004e98:	190c      	adds	r4, r1, r4
 8004e9a:	fb04 240a 	mla	r4, r4, sl, r2
 8004e9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	edd4 0a00 	vldr	s1, [r4]
 8004eaa:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004eae:	0840      	lsrs	r0, r0, #1
 8004eb0:	f000 801a 	beq.w	8004ee8 <pool_func_ap_array_f32+0x16c>
 8004eb4:	fa01 f489 	sxtah	r4, r1, r9
 8004eb8:	f109 0901 	add.w	r9, r9, #1
 8004ebc:	fb04 240a 	mla	r4, r4, sl, r2
 8004ec0:	fa01 f689 	sxtah	r6, r1, r9
 8004ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004ec8:	fb06 260a 	mla	r6, r6, sl, r2
 8004ecc:	edd4 0a00 	vldr	s1, [r4]
 8004ed0:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004ed4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ed8:	ed94 1a00 	vldr	s2, [r4]
 8004edc:	1e40      	subs	r0, r0, #1
 8004ede:	ee30 0a01 	vadd.f32	s0, s0, s2
 8004ee2:	f109 0901 	add.w	r9, r9, #1
 8004ee6:	d1e5      	bne.n	8004eb4 <pool_func_ap_array_f32+0x138>
 8004ee8:	f1b8 0801 	subs.w	r8, r8, #1
 8004eec:	4459      	add	r1, fp
 8004eee:	d1c8      	bne.n	8004e82 <pool_func_ap_array_f32+0x106>
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	ee00 ea90 	vmov	s1, lr
 8004ef6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004efa:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8004efe:	ed85 0a00 	vstr	s0, [r5]
 8004f02:	1c52      	adds	r2, r2, #1
 8004f04:	1d2d      	adds	r5, r5, #4
 8004f06:	4552      	cmp	r2, sl
 8004f08:	dba9      	blt.n	8004e5e <pool_func_ap_array_f32+0xe2>
 8004f0a:	f8dd e010 	ldr.w	lr, [sp, #16]
 8004f0e:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8004f12:	9902      	ldr	r1, [sp, #8]
 8004f14:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8004f18:	1c49      	adds	r1, r1, #1
 8004f1a:	9102      	str	r1, [sp, #8]
 8004f1c:	f8bd 1000 	ldrh.w	r1, [sp]
 8004f20:	1851      	adds	r1, r2, r1
 8004f22:	f8ad 1000 	strh.w	r1, [sp]
 8004f26:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8004f2a:	9a03      	ldr	r2, [sp, #12]
 8004f2c:	19cf      	adds	r7, r1, r7
 8004f2e:	1e52      	subs	r2, r2, #1
 8004f30:	9203      	str	r2, [sp, #12]
 8004f32:	d183      	bne.n	8004e3c <pool_func_ap_array_f32+0xc0>
 8004f34:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8004f38:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8004f3c:	9d05      	ldr	r5, [sp, #20]
 8004f3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f40:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8004f44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004f48:	1c49      	adds	r1, r1, #1
 8004f4a:	9109      	str	r1, [sp, #36]	; 0x24
 8004f4c:	9907      	ldr	r1, [sp, #28]
 8004f4e:	188a      	adds	r2, r1, r2
 8004f50:	9207      	str	r2, [sp, #28]
 8004f52:	9908      	ldr	r1, [sp, #32]
 8004f54:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8004f58:	188a      	adds	r2, r1, r2
 8004f5a:	9208      	str	r2, [sp, #32]
 8004f5c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8004f60:	9a06      	ldr	r2, [sp, #24]
 8004f62:	18cb      	adds	r3, r1, r3
 8004f64:	1e52      	subs	r2, r2, #1
 8004f66:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f6a:	9206      	str	r2, [sp, #24]
 8004f6c:	f000 80ee 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f70:	e744      	b.n	8004dfc <pool_func_ap_array_f32+0x80>
 8004f72:	000f      	movs	r7, r1
 8004f74:	f000 80ea 	beq.w	800514c <pool_func_ap_array_f32+0x3d0>
 8004f78:	425b      	negs	r3, r3
 8004f7a:	18d2      	adds	r2, r2, r3
 8004f7c:	2700      	movs	r7, #0
 8004f7e:	f8ad 3000 	strh.w	r3, [sp]
 8004f82:	f8ad 200a 	strh.w	r2, [sp, #10]
 8004f86:	9709      	str	r7, [sp, #36]	; 0x24
 8004f88:	f8cd 1020 	str.w	r1, [sp, #32]
 8004f8c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004f90:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004f94:	2900      	cmp	r1, #0
 8004f96:	f000 80c1 	beq.w	800511c <pool_func_ap_array_f32+0x3a0>
 8004f9a:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8004f9e:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 8004fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8004fa8:	9204      	str	r2, [sp, #16]
 8004faa:	4276      	negs	r6, r6
 8004fac:	19a4      	adds	r4, r4, r6
 8004fae:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004fb2:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8004fb6:	9505      	str	r5, [sp, #20]
 8004fb8:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004fbc:	f8ad 4008 	strh.w	r4, [sp, #8]
 8004fc0:	f8cd 101c 	str.w	r1, [sp, #28]
 8004fc4:	f8ad b006 	strh.w	fp, [sp, #6]
 8004fc8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004fcc:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	f000 8085 	beq.w	80050e2 <pool_func_ap_array_f32+0x366>
 8004fd8:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8004fdc:	9c04      	ldr	r4, [sp, #16]
 8004fde:	9a05      	ldr	r2, [sp, #20]
 8004fe0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8004fe4:	f8ad a00c 	strh.w	sl, [sp, #12]
 8004fe8:	4365      	muls	r5, r4
 8004fea:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8004fee:	9506      	str	r5, [sp, #24]
 8004ff0:	f9bd 5000 	ldrsh.w	r5, [sp]
 8004ff4:	f8bd a002 	ldrh.w	sl, [sp, #2]
 8004ff8:	429d      	cmp	r5, r3
 8004ffa:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005154 <.text_5>
 8004ffe:	eddf 0a55 	vldr	s1, [pc, #340]	; 8005154 <.text_5>
 8005002:	da5d      	bge.n	80050c0 <pool_func_ap_array_f32+0x344>
 8005004:	930a      	str	r3, [sp, #40]	; 0x28
 8005006:	fb09 fe05 	mul.w	lr, r9, r5
 800500a:	462b      	mov	r3, r5
 800500c:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005010:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005014:	ee10 2a90 	vmov	r2, s1
 8005018:	4545      	cmp	r5, r8
 800501a:	462f      	mov	r7, r5
 800501c:	da44      	bge.n	80050a8 <pool_func_ap_array_f32+0x32c>
 800501e:	eba8 0405 	sub.w	r4, r8, r5
 8005022:	07e6      	lsls	r6, r4, #31
 8005024:	d513      	bpl.n	800504e <pool_func_ap_array_f32+0x2d2>
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf58      	it	pl
 800502a:	2f00      	cmppl	r7, #0
 800502c:	d40e      	bmi.n	800504c <pool_func_ap_array_f32+0x2d0>
 800502e:	455b      	cmp	r3, fp
 8005030:	bfb8      	it	lt
 8005032:	454f      	cmplt	r7, r9
 8005034:	da0a      	bge.n	800504c <pool_func_ap_array_f32+0x2d0>
 8005036:	eb0e 0607 	add.w	r6, lr, r7
 800503a:	fb06 160a 	mla	r6, r6, sl, r1
 800503e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005042:	1c52      	adds	r2, r2, #1
 8005044:	edd6 0a00 	vldr	s1, [r6]
 8005048:	ee30 0a20 	vadd.f32	s0, s0, s1
 800504c:	1c7f      	adds	r7, r7, #1
 800504e:	0864      	lsrs	r4, r4, #1
 8005050:	d02a      	beq.n	80050a8 <pool_func_ap_array_f32+0x32c>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d405      	bmi.n	8005062 <pool_func_ap_array_f32+0x2e6>
 8005056:	2f00      	cmp	r7, #0
 8005058:	bf48      	it	mi
 800505a:	1c7e      	addmi	r6, r7, #1
 800505c:	d410      	bmi.n	8005080 <pool_func_ap_array_f32+0x304>
 800505e:	455b      	cmp	r3, fp
 8005060:	db01      	blt.n	8005066 <pool_func_ap_array_f32+0x2ea>
 8005062:	1c7e      	adds	r6, r7, #1
 8005064:	e01d      	b.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005066:	1c7e      	adds	r6, r7, #1
 8005068:	454f      	cmp	r7, r9
 800506a:	da09      	bge.n	8005080 <pool_func_ap_array_f32+0x304>
 800506c:	4477      	add	r7, lr
 800506e:	fb07 170a 	mla	r7, r7, sl, r1
 8005072:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005076:	1c52      	adds	r2, r2, #1
 8005078:	edd7 0a00 	vldr	s1, [r7]
 800507c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005080:	2e00      	cmp	r6, #0
 8005082:	d40e      	bmi.n	80050a2 <pool_func_ap_array_f32+0x326>
 8005084:	455b      	cmp	r3, fp
 8005086:	bfb8      	it	lt
 8005088:	454e      	cmplt	r6, r9
 800508a:	da0a      	bge.n	80050a2 <pool_func_ap_array_f32+0x326>
 800508c:	eb0e 0706 	add.w	r7, lr, r6
 8005090:	fb07 170a 	mla	r7, r7, sl, r1
 8005094:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005098:	1c52      	adds	r2, r2, #1
 800509a:	edd7 0a00 	vldr	s1, [r7]
 800509e:	ee30 0a20 	vadd.f32	s0, s0, s1
 80050a2:	1c77      	adds	r7, r6, #1
 80050a4:	1e64      	subs	r4, r4, #1
 80050a6:	d1d4      	bne.n	8005052 <pool_func_ap_array_f32+0x2d6>
 80050a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80050aa:	1c5b      	adds	r3, r3, #1
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	44ce      	add	lr, r9
 80050b0:	dbb2      	blt.n	8005018 <pool_func_ap_array_f32+0x29c>
 80050b2:	463b      	mov	r3, r7
 80050b4:	ee00 2a90 	vmov	s1, r2
 80050b8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80050bc:	f8ad b00c 	strh.w	fp, [sp, #12]
 80050c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80050c4:	9d06      	ldr	r5, [sp, #24]
 80050c6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80050ca:	ed85 0a00 	vstr	s0, [r5]
 80050ce:	1c49      	adds	r1, r1, #1
 80050d0:	9a06      	ldr	r2, [sp, #24]
 80050d2:	1d15      	adds	r5, r2, #4
 80050d4:	4551      	cmp	r1, sl
 80050d6:	9506      	str	r5, [sp, #24]
 80050d8:	db8a      	blt.n	8004ff0 <pool_func_ap_array_f32+0x274>
 80050da:	f8ad 9006 	strh.w	r9, [sp, #6]
 80050de:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80050e2:	9904      	ldr	r1, [sp, #16]
 80050e4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050e8:	1c49      	adds	r1, r1, #1
 80050ea:	9104      	str	r1, [sp, #16]
 80050ec:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80050f0:	1851      	adds	r1, r2, r1
 80050f2:	f8ad 1008 	strh.w	r1, [sp, #8]
 80050f6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80050fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80050fe:	1851      	adds	r1, r2, r1
 8005100:	f8ad 1004 	strh.w	r1, [sp, #4]
 8005104:	9907      	ldr	r1, [sp, #28]
 8005106:	1e49      	subs	r1, r1, #1
 8005108:	9107      	str	r1, [sp, #28]
 800510a:	f47f af5d 	bne.w	8004fc8 <pool_func_ap_array_f32+0x24c>
 800510e:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005112:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005116:	9d05      	ldr	r5, [sp, #20]
 8005118:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8005122:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005126:	188a      	adds	r2, r1, r2
 8005128:	9209      	str	r2, [sp, #36]	; 0x24
 800512a:	f8bd 2000 	ldrh.w	r2, [sp]
 800512e:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005132:	18cb      	adds	r3, r1, r3
 8005134:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005138:	f8ad 300a 	strh.w	r3, [sp, #10]
 800513c:	188a      	adds	r2, r1, r2
 800513e:	f8ad 2000 	strh.w	r2, [sp]
 8005142:	9a08      	ldr	r2, [sp, #32]
 8005144:	1e52      	subs	r2, r2, #1
 8005146:	9208      	str	r2, [sp, #32]
 8005148:	f47f af20 	bne.w	8004f8c <pool_func_ap_array_f32+0x210>
 800514c:	b00c      	add	sp, #48	; 0x30
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005154 <.text_5>:
 8005154:	00000000 	.word	0x00000000

08005158 <pool_func_mp_kernel_array_f32>:
 8005158:	b470      	push	{r4, r5, r6}
 800515a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800515e:	42a1      	cmp	r1, r4
 8005160:	d257      	bcs.n	8005212 <pool_func_mp_kernel_array_f32+0xba>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d051      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005166:	f013 0203 	ands.w	r2, r3, #3
 800516a:	460d      	mov	r5, r1
 800516c:	4606      	mov	r6, r0
 800516e:	d011      	beq.n	8005194 <pool_func_mp_kernel_array_f32+0x3c>
 8005170:	ed96 0a00 	vldr	s0, [r6]
 8005174:	edd5 0a00 	vldr	s1, [r5]
 8005178:	eef4 0a40 	vcmp.f32	s1, s0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	bf58      	it	pl
 8005182:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005186:	ed86 0a00 	vstr	s0, [r6]
 800518a:	1e52      	subs	r2, r2, #1
 800518c:	1d36      	adds	r6, r6, #4
 800518e:	1d2d      	adds	r5, r5, #4
 8005190:	2a00      	cmp	r2, #0
 8005192:	d1ed      	bne.n	8005170 <pool_func_mp_kernel_array_f32+0x18>
 8005194:	089a      	lsrs	r2, r3, #2
 8005196:	d038      	beq.n	800520a <pool_func_mp_kernel_array_f32+0xb2>
 8005198:	edd5 0a00 	vldr	s1, [r5]
 800519c:	edd6 1a00 	vldr	s3, [r6]
 80051a0:	eef4 0a61 	vcmp.f32	s1, s3
 80051a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a8:	bf48      	it	mi
 80051aa:	eef0 0a61 	vmovmi.f32	s1, s3
 80051ae:	edc6 0a00 	vstr	s1, [r6]
 80051b2:	edd5 0a01 	vldr	s1, [r5, #4]
 80051b6:	edd6 1a01 	vldr	s3, [r6, #4]
 80051ba:	ed96 0a02 	vldr	s0, [r6, #8]
 80051be:	eef4 0a61 	vcmp.f32	s1, s3
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	bf48      	it	mi
 80051c8:	eef0 0a61 	vmovmi.f32	s1, s3
 80051cc:	edc6 0a01 	vstr	s1, [r6, #4]
 80051d0:	ed95 1a02 	vldr	s2, [r5, #8]
 80051d4:	edd6 1a03 	vldr	s3, [r6, #12]
 80051d8:	eeb4 1a40 	vcmp.f32	s2, s0
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	bf48      	it	mi
 80051e2:	eeb0 1a40 	vmovmi.f32	s2, s0
 80051e6:	ed86 1a02 	vstr	s2, [r6, #8]
 80051ea:	edd5 0a03 	vldr	s1, [r5, #12]
 80051ee:	eef4 0a61 	vcmp.f32	s1, s3
 80051f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f6:	bf58      	it	pl
 80051f8:	eef0 1a60 	vmovpl.f32	s3, s1
 80051fc:	edc6 1a03 	vstr	s3, [r6, #12]
 8005200:	1e52      	subs	r2, r2, #1
 8005202:	3610      	adds	r6, #16
 8005204:	3510      	adds	r5, #16
 8005206:	2a00      	cmp	r2, #0
 8005208:	d1c6      	bne.n	8005198 <pool_func_mp_kernel_array_f32+0x40>
 800520a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800520e:	42a1      	cmp	r1, r4
 8005210:	d3a7      	bcc.n	8005162 <pool_func_mp_kernel_array_f32+0xa>
 8005212:	bc70      	pop	{r4, r5, r6}
 8005214:	4770      	bx	lr
	...

08005218 <pool_func_ap_kernel_array_f32>:
 8005218:	b4f0      	push	{r4, r5, r6, r7}
 800521a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800521e:	9c05      	ldr	r4, [sp, #20]
 8005220:	42a9      	cmp	r1, r5
 8005222:	d251      	bcs.n	80052c8 <pool_func_ap_kernel_array_f32+0xb0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d04a      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005228:	f013 0203 	ands.w	r2, r3, #3
 800522c:	460e      	mov	r6, r1
 800522e:	4607      	mov	r7, r0
 8005230:	f000 800f 	beq.w	8005252 <pool_func_ap_kernel_array_f32+0x3a>
 8005234:	ed96 0a00 	vldr	s0, [r6]
 8005238:	2c01      	cmp	r4, #1
 800523a:	bf1c      	itt	ne
 800523c:	edd7 0a00 	vldrne	s1, [r7]
 8005240:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005244:	ed87 0a00 	vstr	s0, [r7]
 8005248:	1e52      	subs	r2, r2, #1
 800524a:	1d3f      	adds	r7, r7, #4
 800524c:	1d36      	adds	r6, r6, #4
 800524e:	2a00      	cmp	r2, #0
 8005250:	d1f0      	bne.n	8005234 <pool_func_ap_kernel_array_f32+0x1c>
 8005252:	089a      	lsrs	r2, r3, #2
 8005254:	d033      	beq.n	80052be <pool_func_ap_kernel_array_f32+0xa6>
 8005256:	2c01      	cmp	r4, #1
 8005258:	edd6 1a00 	vldr	s3, [r6]
 800525c:	d10c      	bne.n	8005278 <pool_func_ap_kernel_array_f32+0x60>
 800525e:	edc7 1a00 	vstr	s3, [r7]
 8005262:	ed96 0a01 	vldr	s0, [r6, #4]
 8005266:	ed87 0a01 	vstr	s0, [r7, #4]
 800526a:	edd6 1a02 	vldr	s3, [r6, #8]
 800526e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005272:	edd6 1a03 	vldr	s3, [r6, #12]
 8005276:	e01b      	b.n	80052b0 <pool_func_ap_kernel_array_f32+0x98>
 8005278:	edd7 0a00 	vldr	s1, [r7]
 800527c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005280:	ed87 0a00 	vstr	s0, [r7]
 8005284:	ed97 1a01 	vldr	s2, [r7, #4]
 8005288:	ed96 0a01 	vldr	s0, [r6, #4]
 800528c:	edd7 1a02 	vldr	s3, [r7, #8]
 8005290:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005294:	ed87 0a01 	vstr	s0, [r7, #4]
 8005298:	edd6 0a02 	vldr	s1, [r6, #8]
 800529c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80052a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80052a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80052a8:	ed96 1a03 	vldr	s2, [r6, #12]
 80052ac:	ee70 1a01 	vadd.f32	s3, s0, s2
 80052b0:	edc7 1a03 	vstr	s3, [r7, #12]
 80052b4:	1e52      	subs	r2, r2, #1
 80052b6:	3710      	adds	r7, #16
 80052b8:	3610      	adds	r6, #16
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	d1cb      	bne.n	8005256 <pool_func_ap_kernel_array_f32+0x3e>
 80052be:	2400      	movs	r4, #0
 80052c0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80052c4:	42a9      	cmp	r1, r5
 80052c6:	d3ad      	bcc.n	8005224 <pool_func_ap_kernel_array_f32+0xc>
 80052c8:	9904      	ldr	r1, [sp, #16]
 80052ca:	b399      	cbz	r1, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052cc:	ee00 1a10 	vmov	s0, r1
 80052d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80052d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80052d8:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80052dc:	b353      	cbz	r3, 8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052de:	f013 0103 	ands.w	r1, r3, #3
 80052e2:	d009      	beq.n	80052f8 <pool_func_ap_kernel_array_f32+0xe0>
 80052e4:	edd0 0a00 	vldr	s1, [r0]
 80052e8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80052ec:	edc0 0a00 	vstr	s1, [r0]
 80052f0:	1e49      	subs	r1, r1, #1
 80052f2:	f100 0004 	add.w	r0, r0, #4
 80052f6:	d1f5      	bne.n	80052e4 <pool_func_ap_kernel_array_f32+0xcc>
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	d01b      	beq.n	8005334 <pool_func_ap_kernel_array_f32+0x11c>
 80052fc:	edd0 0a00 	vldr	s1, [r0]
 8005300:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005304:	edc0 0a00 	vstr	s1, [r0]
 8005308:	1e5b      	subs	r3, r3, #1
 800530a:	ed90 1a01 	vldr	s2, [r0, #4]
 800530e:	edd0 0a02 	vldr	s1, [r0, #8]
 8005312:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005316:	ed80 1a01 	vstr	s2, [r0, #4]
 800531a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800531e:	ed90 1a03 	vldr	s2, [r0, #12]
 8005322:	edc0 0a02 	vstr	s1, [r0, #8]
 8005326:	ee21 1a00 	vmul.f32	s2, s2, s0
 800532a:	ed80 1a03 	vstr	s2, [r0, #12]
 800532e:	f100 0010 	add.w	r0, r0, #16
 8005332:	d1e3      	bne.n	80052fc <pool_func_ap_kernel_array_f32+0xe4>
 8005334:	bcf0      	pop	{r4, r5, r6, r7}
 8005336:	4770      	bx	lr

08005338 <forward_mp>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	b08e      	sub	sp, #56	; 0x38
 8005340:	6962      	ldr	r2, [r4, #20]
 8005342:	8811      	ldrh	r1, [r2, #0]
 8005344:	2900      	cmp	r1, #0
 8005346:	bf1a      	itte	ne
 8005348:	6850      	ldrne	r0, [r2, #4]
 800534a:	1d00      	addne	r0, r0, #4
 800534c:	2004      	moveq	r0, #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	2800      	cmp	r0, #0
 8005352:	bf14      	ite	ne
 8005354:	6805      	ldrne	r5, [r0, #0]
 8005356:	2500      	moveq	r5, #0
 8005358:	2901      	cmp	r1, #1
 800535a:	bfc6      	itte	gt
 800535c:	6850      	ldrgt	r0, [r2, #4]
 800535e:	3010      	addgt	r0, #16
 8005360:	2004      	movle	r0, #4
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	68ea      	ldr	r2, [r5, #12]
 8005366:	2800      	cmp	r0, #0
 8005368:	bf14      	ite	ne
 800536a:	6807      	ldrne	r7, [r0, #0]
 800536c:	2700      	moveq	r7, #0
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	68d0      	ldr	r0, [r2, #12]
 8005372:	68cb      	ldr	r3, [r1, #12]
 8005374:	9009      	str	r0, [sp, #36]	; 0x24
 8005376:	6889      	ldr	r1, [r1, #8]
 8005378:	9108      	str	r1, [sp, #32]
 800537a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800537e:	6851      	ldr	r1, [r2, #4]
 8005380:	69a2      	ldr	r2, [r4, #24]
 8005382:	69e0      	ldr	r0, [r4, #28]
 8005384:	9007      	str	r0, [sp, #28]
 8005386:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005388:	6a20      	ldr	r0, [r4, #32]
 800538a:	960d      	str	r6, [sp, #52]	; 0x34
 800538c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005390:	69ac      	ldr	r4, [r5, #24]
 8005392:	69bd      	ldr	r5, [r7, #24]
 8005394:	f8dc 7000 	ldr.w	r7, [ip]
 8005398:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800539c:	68a4      	ldr	r4, [r4, #8]
 800539e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80053a2:	427f      	negs	r7, r7
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	9700      	str	r7, [sp, #0]
 80053a8:	f000 80d9 	beq.w	800555e <forward_mp+0x226>
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	4276      	negs	r6, r6
 80053b0:	960c      	str	r6, [sp, #48]	; 0x30
 80053b2:	fb01 f508 	mul.w	r5, r1, r8
 80053b6:	950b      	str	r5, [sp, #44]	; 0x2c
 80053b8:	9d00      	ldr	r5, [sp, #0]
 80053ba:	9b00      	ldr	r3, [sp, #0]
 80053bc:	9f00      	ldr	r7, [sp, #0]
 80053be:	426d      	negs	r5, r5
 80053c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053c2:	bfcc      	ite	gt
 80053c4:	2600      	movgt	r6, #0
 80053c6:	9e00      	ldrle	r6, [sp, #0]
 80053c8:	1aeb      	subs	r3, r5, r3
 80053ca:	9d07      	ldr	r5, [sp, #28]
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	bf88      	it	hi
 80053d0:	462b      	movhi	r3, r5
 80053d2:	19df      	adds	r7, r3, r7
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80b7 	beq.w	800554c <forward_mp+0x214>
 80053de:	fb08 fa06 	mul.w	sl, r8, r6
 80053e2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80053e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ea:	9202      	str	r2, [sp, #8]
 80053ec:	9006      	str	r0, [sp, #24]
 80053ee:	9605      	str	r6, [sp, #20]
 80053f0:	9704      	str	r7, [sp, #16]
 80053f2:	4268      	negs	r0, r5
 80053f4:	9f03      	ldr	r7, [sp, #12]
 80053f6:	9a02      	ldr	r2, [sp, #8]
 80053f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80053fc:	bfcc      	ite	gt
 80053fe:	2000      	movgt	r0, #0
 8005400:	4628      	movle	r0, r5
 8005402:	1b7f      	subs	r7, r7, r5
 8005404:	4297      	cmp	r7, r2
 8005406:	bf88      	it	hi
 8005408:	4617      	movhi	r7, r2
 800540a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800540c:	197f      	adds	r7, r7, r5
 800540e:	1a3f      	subs	r7, r7, r0
 8005410:	1880      	adds	r0, r0, r2
 8005412:	4348      	muls	r0, r1
 8005414:	434f      	muls	r7, r1
 8005416:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800541a:	b311      	cbz	r1, 8005462 <forward_mp+0x12a>
 800541c:	f011 0003 	ands.w	r0, r1, #3
 8005420:	4672      	mov	r2, lr
 8005422:	4666      	mov	r6, ip
 8005424:	f000 8006 	beq.w	8005434 <forward_mp+0xfc>
 8005428:	f856 9b04 	ldr.w	r9, [r6], #4
 800542c:	f842 9b04 	str.w	r9, [r2], #4
 8005430:	1e40      	subs	r0, r0, #1
 8005432:	d1f9      	bne.n	8005428 <forward_mp+0xf0>
 8005434:	0888      	lsrs	r0, r1, #2
 8005436:	d014      	beq.n	8005462 <forward_mp+0x12a>
 8005438:	ed96 0a00 	vldr	s0, [r6]
 800543c:	ed82 0a00 	vstr	s0, [r2]
 8005440:	1e40      	subs	r0, r0, #1
 8005442:	edd6 0a01 	vldr	s1, [r6, #4]
 8005446:	edc2 0a01 	vstr	s1, [r2, #4]
 800544a:	ed96 0a02 	vldr	s0, [r6, #8]
 800544e:	ed82 0a02 	vstr	s0, [r2, #8]
 8005452:	edd6 0a03 	vldr	s1, [r6, #12]
 8005456:	edc2 0a03 	vstr	s1, [r2, #12]
 800545a:	3210      	adds	r2, #16
 800545c:	3610      	adds	r6, #16
 800545e:	2800      	cmp	r0, #0
 8005460:	d1ea      	bne.n	8005438 <forward_mp+0x100>
 8005462:	9805      	ldr	r0, [sp, #20]
 8005464:	9a04      	ldr	r2, [sp, #16]
 8005466:	4290      	cmp	r0, r2
 8005468:	da66      	bge.n	8005538 <forward_mp+0x200>
 800546a:	4610      	mov	r0, r2
 800546c:	9a05      	ldr	r2, [sp, #20]
 800546e:	1a82      	subs	r2, r0, r2
 8005470:	46e2      	mov	sl, ip
 8005472:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005476:	45da      	cmp	sl, fp
 8005478:	d25a      	bcs.n	8005530 <forward_mp+0x1f8>
 800547a:	2900      	cmp	r1, #0
 800547c:	d054      	beq.n	8005528 <forward_mp+0x1f0>
 800547e:	f011 0003 	ands.w	r0, r1, #3
 8005482:	4656      	mov	r6, sl
 8005484:	46f1      	mov	r9, lr
 8005486:	d012      	beq.n	80054ae <forward_mp+0x176>
 8005488:	ed99 0a00 	vldr	s0, [r9]
 800548c:	edd6 0a00 	vldr	s1, [r6]
 8005490:	eef4 0a40 	vcmp.f32	s1, s0
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	bf58      	it	pl
 800549a:	eeb0 0a60 	vmovpl.f32	s0, s1
 800549e:	1e40      	subs	r0, r0, #1
 80054a0:	1d36      	adds	r6, r6, #4
 80054a2:	ed89 0a00 	vstr	s0, [r9]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f109 0904 	add.w	r9, r9, #4
 80054ac:	d1ec      	bne.n	8005488 <forward_mp+0x150>
 80054ae:	0888      	lsrs	r0, r1, #2
 80054b0:	f000 803a 	beq.w	8005528 <forward_mp+0x1f0>
 80054b4:	edd6 0a00 	vldr	s1, [r6]
 80054b8:	edd9 1a00 	vldr	s3, [r9]
 80054bc:	eef4 0a61 	vcmp.f32	s1, s3
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	bf48      	it	mi
 80054c6:	eef0 0a61 	vmovmi.f32	s1, s3
 80054ca:	edc9 0a00 	vstr	s1, [r9]
 80054ce:	edd6 0a01 	vldr	s1, [r6, #4]
 80054d2:	edd9 1a01 	vldr	s3, [r9, #4]
 80054d6:	ed99 0a02 	vldr	s0, [r9, #8]
 80054da:	eef4 0a61 	vcmp.f32	s1, s3
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	bf48      	it	mi
 80054e4:	eef0 0a61 	vmovmi.f32	s1, s3
 80054e8:	edc9 0a01 	vstr	s1, [r9, #4]
 80054ec:	ed96 1a02 	vldr	s2, [r6, #8]
 80054f0:	edd9 1a03 	vldr	s3, [r9, #12]
 80054f4:	eeb4 1a40 	vcmp.f32	s2, s0
 80054f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fc:	bf48      	it	mi
 80054fe:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005502:	ed89 1a02 	vstr	s2, [r9, #8]
 8005506:	edd6 0a03 	vldr	s1, [r6, #12]
 800550a:	eef4 0a61 	vcmp.f32	s1, s3
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	bf58      	it	pl
 8005514:	eef0 1a60 	vmovpl.f32	s3, s1
 8005518:	1e40      	subs	r0, r0, #1
 800551a:	3610      	adds	r6, #16
 800551c:	edc9 1a03 	vstr	s3, [r9, #12]
 8005520:	2800      	cmp	r0, #0
 8005522:	f109 0910 	add.w	r9, r9, #16
 8005526:	d1c5      	bne.n	80054b4 <forward_mp+0x17c>
 8005528:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800552c:	45da      	cmp	sl, fp
 800552e:	d3a4      	bcc.n	800547a <forward_mp+0x142>
 8005530:	1e52      	subs	r2, r2, #1
 8005532:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8005536:	d19b      	bne.n	8005470 <forward_mp+0x138>
 8005538:	9806      	ldr	r0, [sp, #24]
 800553a:	1945      	adds	r5, r0, r5
 800553c:	1e5b      	subs	r3, r3, #1
 800553e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005542:	f47f af56 	bne.w	80053f2 <forward_mp+0xba>
 8005546:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800554a:	9a02      	ldr	r2, [sp, #8]
 800554c:	9d00      	ldr	r5, [sp, #0]
 800554e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005550:	195d      	adds	r5, r3, r5
 8005552:	9500      	str	r5, [sp, #0]
 8005554:	9d01      	ldr	r5, [sp, #4]
 8005556:	1e6d      	subs	r5, r5, #1
 8005558:	9501      	str	r5, [sp, #4]
 800555a:	f47f af2d 	bne.w	80053b8 <forward_mp+0x80>
 800555e:	b00e      	add	sp, #56	; 0x38
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005564 <forward_ap>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	4607      	mov	r7, r0
 800556a:	b097      	sub	sp, #92	; 0x5c
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	8811      	ldrh	r1, [r2, #0]
 8005570:	2900      	cmp	r1, #0
 8005572:	bf1a      	itte	ne
 8005574:	6850      	ldrne	r0, [r2, #4]
 8005576:	1d00      	addne	r0, r0, #4
 8005578:	2004      	moveq	r0, #4
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	2800      	cmp	r0, #0
 800557e:	bf14      	ite	ne
 8005580:	6804      	ldrne	r4, [r0, #0]
 8005582:	2400      	moveq	r4, #0
 8005584:	2901      	cmp	r1, #1
 8005586:	bfc6      	itte	gt
 8005588:	6850      	ldrgt	r0, [r2, #4]
 800558a:	3010      	addgt	r0, #16
 800558c:	2004      	movle	r0, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	68dd      	ldr	r5, [r3, #12]
 8005594:	2800      	cmp	r0, #0
 8005596:	bf14      	ite	ne
 8005598:	6806      	ldrne	r6, [r0, #0]
 800559a:	2600      	moveq	r6, #0
 800559c:	68f2      	ldr	r2, [r6, #12]
 800559e:	68d0      	ldr	r0, [r2, #12]
 80055a0:	950d      	str	r5, [sp, #52]	; 0x34
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	920c      	str	r2, [sp, #48]	; 0x30
 80055a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	69fd      	ldr	r5, [r7, #28]
 80055b0:	9505      	str	r5, [sp, #20]
 80055b2:	f8d7 8020 	ldr.w	r8, [r7, #32]
 80055b6:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80055b8:	9516      	str	r5, [sp, #88]	; 0x58
 80055ba:	69a4      	ldr	r4, [r4, #24]
 80055bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055be:	68a5      	ldr	r5, [r4, #8]
 80055c0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80055c4:	69b4      	ldr	r4, [r6, #24]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80055cc:	4252      	negs	r2, r2
 80055ce:	2800      	cmp	r0, #0
 80055d0:	9201      	str	r2, [sp, #4]
 80055d2:	f000 811c 	beq.w	800580e <forward_ap+0x2aa>
 80055d6:	9c05      	ldr	r4, [sp, #20]
 80055d8:	f1c9 0900 	rsb	r9, r9, #0
 80055dc:	435c      	muls	r4, r3
 80055de:	fb01 f20c 	mul.w	r2, r1, ip
 80055e2:	9004      	str	r0, [sp, #16]
 80055e4:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80055e8:	9414      	str	r4, [sp, #80]	; 0x50
 80055ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80055ec:	9a01      	ldr	r2, [sp, #4]
 80055ee:	9801      	ldr	r0, [sp, #4]
 80055f0:	9c01      	ldr	r4, [sp, #4]
 80055f2:	4252      	negs	r2, r2
 80055f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f6:	bfcc      	ite	gt
 80055f8:	2600      	movgt	r6, #0
 80055fa:	9e01      	ldrle	r6, [sp, #4]
 80055fc:	1a10      	subs	r0, r2, r0
 80055fe:	9a05      	ldr	r2, [sp, #20]
 8005600:	4290      	cmp	r0, r2
 8005602:	bf88      	it	hi
 8005604:	4610      	movhi	r0, r2
 8005606:	1904      	adds	r4, r0, r4
 8005608:	9815      	ldr	r0, [sp, #84]	; 0x54
 800560a:	9000      	str	r0, [sp, #0]
 800560c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800560e:	2800      	cmp	r0, #0
 8005610:	f000 80f4 	beq.w	80057fc <forward_ap+0x298>
 8005614:	fb0c f006 	mul.w	r0, ip, r6
 8005618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800561a:	9012      	str	r0, [sp, #72]	; 0x48
 800561c:	9202      	str	r2, [sp, #8]
 800561e:	1b30      	subs	r0, r6, r4
 8005620:	9011      	str	r0, [sp, #68]	; 0x44
 8005622:	970e      	str	r7, [sp, #56]	; 0x38
 8005624:	f8cd c01c 	str.w	ip, [sp, #28]
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800562e:	950a      	str	r5, [sp, #40]	; 0x28
 8005630:	9609      	str	r6, [sp, #36]	; 0x24
 8005632:	9408      	str	r4, [sp, #32]
 8005634:	9800      	ldr	r0, [sp, #0]
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	f8dd a000 	ldr.w	sl, [sp]
 800563c:	4240      	negs	r0, r0
 800563e:	9800      	ldr	r0, [sp, #0]
 8005640:	bfcc      	ite	gt
 8005642:	f04f 0900 	movgt.w	r9, #0
 8005646:	f8dd 9000 	ldrle.w	r9, [sp]
 800564a:	1a10      	subs	r0, r2, r0
 800564c:	9a06      	ldr	r2, [sp, #24]
 800564e:	4290      	cmp	r0, r2
 8005650:	bf88      	it	hi
 8005652:	4610      	movhi	r0, r2
 8005654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005656:	9203      	str	r2, [sp, #12]
 8005658:	4482      	add	sl, r0
 800565a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800565c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800565e:	eba9 030a 	sub.w	r3, r9, sl
 8005662:	4343      	muls	r3, r0
 8005664:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005666:	444a      	add	r2, r9
 8005668:	434a      	muls	r2, r1
 800566a:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 800566e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005670:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005674:	9a08      	ldr	r2, [sp, #32]
 8005676:	ebaa 0409 	sub.w	r4, sl, r9
 800567a:	434c      	muls	r4, r1
 800567c:	2800      	cmp	r0, #0
 800567e:	bf14      	ite	ne
 8005680:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005682:	461e      	moveq	r6, r3
 8005684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005686:	2701      	movs	r7, #1
 8005688:	4290      	cmp	r0, r2
 800568a:	f04f 0800 	mov.w	r8, #0
 800568e:	f280 80a4 	bge.w	80057da <forward_ap+0x276>
 8005692:	1a12      	subs	r2, r2, r0
 8005694:	ebaa 0009 	sub.w	r0, sl, r9
 8005698:	900f      	str	r0, [sp, #60]	; 0x3c
 800569a:	9310      	str	r3, [sp, #64]	; 0x40
 800569c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800569e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056a0:	4480      	add	r8, r0
 80056a2:	4543      	cmp	r3, r8
 80056a4:	46a9      	mov	r9, r5
 80056a6:	bf0c      	ite	eq
 80056a8:	4633      	moveq	r3, r6
 80056aa:	2300      	movne	r3, #0
 80056ac:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 80056b0:	45e1      	cmp	r9, ip
 80056b2:	d254      	bcs.n	800575e <forward_ap+0x1fa>
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d04d      	beq.n	8005754 <forward_ap+0x1f0>
 80056b8:	f011 0003 	ands.w	r0, r1, #3
 80056bc:	46ca      	mov	sl, r9
 80056be:	46f3      	mov	fp, lr
 80056c0:	f000 8010 	beq.w	80056e4 <forward_ap+0x180>
 80056c4:	ed9a 0a00 	vldr	s0, [sl]
 80056c8:	2f01      	cmp	r7, #1
 80056ca:	bf1c      	itt	ne
 80056cc:	eddb 0a00 	vldrne	s1, [fp]
 80056d0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80056d4:	ed8b 0a00 	vstr	s0, [fp]
 80056d8:	1e40      	subs	r0, r0, #1
 80056da:	f10b 0b04 	add.w	fp, fp, #4
 80056de:	f10a 0a04 	add.w	sl, sl, #4
 80056e2:	d1ef      	bne.n	80056c4 <forward_ap+0x160>
 80056e4:	0888      	lsrs	r0, r1, #2
 80056e6:	d035      	beq.n	8005754 <forward_ap+0x1f0>
 80056e8:	2f01      	cmp	r7, #1
 80056ea:	edda 1a00 	vldr	s3, [sl]
 80056ee:	d10d      	bne.n	800570c <forward_ap+0x1a8>
 80056f0:	edcb 1a00 	vstr	s3, [fp]
 80056f4:	ed9a 0a01 	vldr	s0, [sl, #4]
 80056f8:	ed8b 0a01 	vstr	s0, [fp, #4]
 80056fc:	edda 1a02 	vldr	s3, [sl, #8]
 8005700:	edcb 1a02 	vstr	s3, [fp, #8]
 8005704:	edda 1a03 	vldr	s3, [sl, #12]
 8005708:	e01c      	b.n	8005744 <forward_ap+0x1e0>
 800570a:	bf00      	nop
 800570c:	eddb 0a00 	vldr	s1, [fp]
 8005710:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005714:	ed8b 0a00 	vstr	s0, [fp]
 8005718:	ed9b 1a01 	vldr	s2, [fp, #4]
 800571c:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005720:	eddb 1a02 	vldr	s3, [fp, #8]
 8005724:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005728:	ed8b 0a01 	vstr	s0, [fp, #4]
 800572c:	edda 0a02 	vldr	s1, [sl, #8]
 8005730:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005734:	ed8b 0a02 	vstr	s0, [fp, #8]
 8005738:	ed9b 0a03 	vldr	s0, [fp, #12]
 800573c:	ed9a 1a03 	vldr	s2, [sl, #12]
 8005740:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005744:	edcb 1a03 	vstr	s3, [fp, #12]
 8005748:	1e40      	subs	r0, r0, #1
 800574a:	f10b 0b10 	add.w	fp, fp, #16
 800574e:	f10a 0a10 	add.w	sl, sl, #16
 8005752:	d1c9      	bne.n	80056e8 <forward_ap+0x184>
 8005754:	2700      	movs	r7, #0
 8005756:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 800575a:	45e1      	cmp	r9, ip
 800575c:	d3aa      	bcc.n	80056b4 <forward_ap+0x150>
 800575e:	b3ab      	cbz	r3, 80057cc <forward_ap+0x268>
 8005760:	ee00 3a10 	vmov	s0, r3
 8005764:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005768:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800576c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005770:	b361      	cbz	r1, 80057cc <forward_ap+0x268>
 8005772:	f011 0003 	ands.w	r0, r1, #3
 8005776:	4673      	mov	r3, lr
 8005778:	f000 800a 	beq.w	8005790 <forward_ap+0x22c>
 800577c:	edd3 0a00 	vldr	s1, [r3]
 8005780:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005784:	edc3 0a00 	vstr	s1, [r3]
 8005788:	1e40      	subs	r0, r0, #1
 800578a:	f103 0304 	add.w	r3, r3, #4
 800578e:	d1f5      	bne.n	800577c <forward_ap+0x218>
 8005790:	0888      	lsrs	r0, r1, #2
 8005792:	d01b      	beq.n	80057cc <forward_ap+0x268>
 8005794:	edd3 0a00 	vldr	s1, [r3]
 8005798:	ee60 0a80 	vmul.f32	s1, s1, s0
 800579c:	edc3 0a00 	vstr	s1, [r3]
 80057a0:	1e40      	subs	r0, r0, #1
 80057a2:	ed93 1a01 	vldr	s2, [r3, #4]
 80057a6:	edd3 0a02 	vldr	s1, [r3, #8]
 80057aa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057ae:	ed83 1a01 	vstr	s2, [r3, #4]
 80057b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80057b6:	ed93 1a03 	vldr	s2, [r3, #12]
 80057ba:	edc3 0a02 	vstr	s1, [r3, #8]
 80057be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80057c2:	ed83 1a03 	vstr	s2, [r3, #12]
 80057c6:	f103 0310 	add.w	r3, r3, #16
 80057ca:	d1e3      	bne.n	8005794 <forward_ap+0x230>
 80057cc:	9803      	ldr	r0, [sp, #12]
 80057ce:	2700      	movs	r7, #0
 80057d0:	1e52      	subs	r2, r2, #1
 80057d2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80057d6:	f47f af61 	bne.w	800569c <forward_ap+0x138>
 80057da:	9800      	ldr	r0, [sp, #0]
 80057dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057de:	1810      	adds	r0, r2, r0
 80057e0:	9000      	str	r0, [sp, #0]
 80057e2:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80057e6:	9802      	ldr	r0, [sp, #8]
 80057e8:	1e40      	subs	r0, r0, #1
 80057ea:	9002      	str	r0, [sp, #8]
 80057ec:	f47f af22 	bne.w	8005634 <forward_ap+0xd0>
 80057f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80057f6:	9b06      	ldr	r3, [sp, #24]
 80057f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057fa:	4690      	mov	r8, r2
 80057fc:	9c01      	ldr	r4, [sp, #4]
 80057fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005800:	1914      	adds	r4, r2, r4
 8005802:	9401      	str	r4, [sp, #4]
 8005804:	9c04      	ldr	r4, [sp, #16]
 8005806:	1e64      	subs	r4, r4, #1
 8005808:	9404      	str	r4, [sp, #16]
 800580a:	f47f aeef 	bne.w	80055ec <forward_ap+0x88>
 800580e:	b017      	add	sp, #92	; 0x5c
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005814 <ai_array_fmt_name>:
 8005814:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005818:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800581c:	d062      	beq.n	80058e4 <ai_array_fmt_name+0xd0>
 800581e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005822:	1a89      	subs	r1, r1, r2
 8005824:	f000 8094 	beq.w	8005950 <ai_array_fmt_name+0x13c>
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	1a89      	subs	r1, r1, r2
 800582e:	d071      	beq.n	8005914 <ai_array_fmt_name+0x100>
 8005830:	1a89      	subs	r1, r1, r2
 8005832:	d063      	beq.n	80058fc <ai_array_fmt_name+0xe8>
 8005834:	1fc9      	subs	r1, r1, #7
 8005836:	f000 808e 	beq.w	8005956 <ai_array_fmt_name+0x142>
 800583a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800583e:	1a89      	subs	r1, r1, r2
 8005840:	d05f      	beq.n	8005902 <ai_array_fmt_name+0xee>
 8005842:	390f      	subs	r1, #15
 8005844:	f000 808a 	beq.w	800595c <ai_array_fmt_name+0x148>
 8005848:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800584c:	1a89      	subs	r1, r1, r2
 800584e:	d05b      	beq.n	8005908 <ai_array_fmt_name+0xf4>
 8005850:	391f      	subs	r1, #31
 8005852:	f000 8086 	beq.w	8005962 <ai_array_fmt_name+0x14e>
 8005856:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800585a:	1a89      	subs	r1, r1, r2
 800585c:	d057      	beq.n	800590e <ai_array_fmt_name+0xfa>
 800585e:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8005e34 <.text_15>
 8005862:	1a89      	subs	r1, r1, r2
 8005864:	f000 808f 	beq.w	8005986 <ai_array_fmt_name+0x172>
 8005868:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800586c:	1a89      	subs	r1, r1, r2
 800586e:	f000 8087 	beq.w	8005980 <ai_array_fmt_name+0x16c>
 8005872:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005e38 <.text_16>
 8005876:	1a89      	subs	r1, r1, r2
 8005878:	d05e      	beq.n	8005938 <ai_array_fmt_name+0x124>
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	1a89      	subs	r1, r1, r2
 8005880:	d057      	beq.n	8005932 <ai_array_fmt_name+0x11e>
 8005882:	1a89      	subs	r1, r1, r2
 8005884:	d049      	beq.n	800591a <ai_array_fmt_name+0x106>
 8005886:	1fc9      	subs	r1, r1, #7
 8005888:	d059      	beq.n	800593e <ai_array_fmt_name+0x12a>
 800588a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800588e:	1a89      	subs	r1, r1, r2
 8005890:	d046      	beq.n	8005920 <ai_array_fmt_name+0x10c>
 8005892:	390f      	subs	r1, #15
 8005894:	d056      	beq.n	8005944 <ai_array_fmt_name+0x130>
 8005896:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800589a:	1a89      	subs	r1, r1, r2
 800589c:	d043      	beq.n	8005926 <ai_array_fmt_name+0x112>
 800589e:	391f      	subs	r1, #31
 80058a0:	d053      	beq.n	800594a <ai_array_fmt_name+0x136>
 80058a2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80058a6:	1a89      	subs	r1, r1, r2
 80058a8:	d040      	beq.n	800592c <ai_array_fmt_name+0x118>
 80058aa:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8005e34 <.text_15>
 80058ae:	1a89      	subs	r1, r1, r2
 80058b0:	d063      	beq.n	800597a <ai_array_fmt_name+0x166>
 80058b2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058b6:	1a89      	subs	r1, r1, r2
 80058b8:	d05c      	beq.n	8005974 <ai_array_fmt_name+0x160>
 80058ba:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005e3c <.text_17>
 80058be:	1a89      	subs	r1, r1, r2
 80058c0:	d019      	beq.n	80058f6 <ai_array_fmt_name+0xe2>
 80058c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c6:	1a89      	subs	r1, r1, r2
 80058c8:	d00f      	beq.n	80058ea <ai_array_fmt_name+0xd6>
 80058ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ce:	1a89      	subs	r1, r1, r2
 80058d0:	d00e      	beq.n	80058f0 <ai_array_fmt_name+0xdc>
 80058d2:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005e40 <.text_18>
 80058d6:	1a89      	subs	r1, r1, r2
 80058d8:	d049      	beq.n	800596e <ai_array_fmt_name+0x15a>
 80058da:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80058de:	1a89      	subs	r1, r1, r2
 80058e0:	d042      	beq.n	8005968 <ai_array_fmt_name+0x154>
 80058e2:	e053      	b.n	800598c <ai_array_fmt_name+0x178>
 80058e4:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 80058e8:	4770      	bx	lr
 80058ea:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80058ee:	4770      	bx	lr
 80058f0:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80058f4:	4770      	bx	lr
 80058f6:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80058fa:	4770      	bx	lr
 80058fc:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8005900:	4770      	bx	lr
 8005902:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8005906:	4770      	bx	lr
 8005908:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800590c:	4770      	bx	lr
 800590e:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005912:	4770      	bx	lr
 8005914:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8005918:	4770      	bx	lr
 800591a:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800591e:	4770      	bx	lr
 8005920:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8005924:	4770      	bx	lr
 8005926:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800592a:	4770      	bx	lr
 800592c:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8005930:	4770      	bx	lr
 8005932:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8005936:	4770      	bx	lr
 8005938:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 800593c:	4770      	bx	lr
 800593e:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005942:	4770      	bx	lr
 8005944:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8005948:	4770      	bx	lr
 800594a:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800594e:	4770      	bx	lr
 8005950:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8005954:	4770      	bx	lr
 8005956:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800595a:	4770      	bx	lr
 800595c:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8005960:	4770      	bx	lr
 8005962:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8005966:	4770      	bx	lr
 8005968:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 800596c:	4770      	bx	lr
 800596e:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8005972:	4770      	bx	lr
 8005974:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8005978:	4770      	bx	lr
 800597a:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800597e:	4770      	bx	lr
 8005980:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8005984:	4770      	bx	lr
 8005986:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800598a:	4770      	bx	lr
 800598c:	f36f 000d 	bfc	r0, #0, #14
 8005990:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005994:	2840      	cmp	r0, #64	; 0x40
 8005996:	d009      	beq.n	80059ac <ai_array_fmt_name+0x198>
 8005998:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8005e44 <.text_19>
 800599c:	4288      	cmp	r0, r1
 800599e:	d00b      	beq.n	80059b8 <ai_array_fmt_name+0x1a4>
 80059a0:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005e48 <.text_20>
 80059a4:	4288      	cmp	r0, r1
 80059a6:	d004      	beq.n	80059b2 <ai_array_fmt_name+0x19e>
 80059a8:	a07a      	add	r0, pc, #488	; (adr r0, 8005b94 <.text_8>)
 80059aa:	4770      	bx	lr
 80059ac:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 80059b0:	4770      	bx	lr
 80059b2:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 80059b6:	4770      	bx	lr
 80059b8:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80059bc:	4770      	bx	lr

080059be <ai_array_fmt_exported>:
 80059be:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80059c2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80059c6:	d068      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80059cc:	1a89      	subs	r1, r1, r2
 80059ce:	d064      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	1a89      	subs	r1, r1, r2
 80059d6:	d062      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059d8:	1a89      	subs	r1, r1, r2
 80059da:	d05e      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059dc:	1fc9      	subs	r1, r1, #7
 80059de:	d05c      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80059e4:	1a89      	subs	r1, r1, r2
 80059e6:	d058      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059e8:	390f      	subs	r1, #15
 80059ea:	d056      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 80059ec:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80059f0:	1a89      	subs	r1, r1, r2
 80059f2:	d054      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f4:	391f      	subs	r1, #31
 80059f6:	d052      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 80059f8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80059fc:	1a89      	subs	r1, r1, r2
 80059fe:	d04e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a00:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8005e34 <.text_15>
 8005a04:	1a89      	subs	r1, r1, r2
 8005a06:	d04a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a08:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a0c:	1a89      	subs	r1, r1, r2
 8005a0e:	d046      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a10:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005e38 <.text_16>
 8005a14:	1a89      	subs	r1, r1, r2
 8005a16:	d040      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1c:	1a89      	subs	r1, r1, r2
 8005a1e:	d03e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a20:	1a89      	subs	r1, r1, r2
 8005a22:	d03a      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a24:	1fc9      	subs	r1, r1, #7
 8005a26:	d038      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a28:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005a2c:	1a89      	subs	r1, r1, r2
 8005a2e:	d034      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a30:	390f      	subs	r1, #15
 8005a32:	d032      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a34:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005a38:	1a89      	subs	r1, r1, r2
 8005a3a:	d030      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a3c:	391f      	subs	r1, #31
 8005a3e:	d02e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a40:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005a44:	1a89      	subs	r1, r1, r2
 8005a46:	d02a      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a48:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8005e34 <.text_15>
 8005a4c:	1a89      	subs	r1, r1, r2
 8005a4e:	d026      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a50:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a54:	1a89      	subs	r1, r1, r2
 8005a56:	d022      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a58:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005e3c <.text_17>
 8005a5c:	1a89      	subs	r1, r1, r2
 8005a5e:	d01e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a64:	1a89      	subs	r1, r1, r2
 8005a66:	d018      	beq.n	8005a9a <ai_array_fmt_exported+0xdc>
 8005a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a6c:	1a89      	subs	r1, r1, r2
 8005a6e:	d016      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a70:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005e40 <.text_18>
 8005a74:	1a89      	subs	r1, r1, r2
 8005a76:	d012      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a78:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005a7c:	1a89      	subs	r1, r1, r2
 8005a7e:	d00e      	beq.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a80:	f36f 000d 	bfc	r0, #0, #14
 8005a84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005a88:	2840      	cmp	r0, #64	; 0x40
 8005a8a:	bf1f      	itttt	ne
 8005a8c:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e44 <.text_19>
 8005a90:	4298      	cmpne	r0, r3
 8005a92:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005e48 <.text_20>
 8005a96:	4298      	cmpne	r0, r3
 8005a98:	d101      	bne.n	8005a9e <ai_array_fmt_exported+0xe0>
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	4770      	bx	lr
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	4770      	bx	lr

08005aa2 <ai_array_fmt_valid>:
 8005aa2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005aa6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005aaa:	d069      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ab0:	1a89      	subs	r1, r1, r2
 8005ab2:	d065      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab8:	1a89      	subs	r1, r1, r2
 8005aba:	d061      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005abc:	1a89      	subs	r1, r1, r2
 8005abe:	d05f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac0:	1fc9      	subs	r1, r1, #7
 8005ac2:	d05d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ac4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005ac8:	1a89      	subs	r1, r1, r2
 8005aca:	d059      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005acc:	390f      	subs	r1, #15
 8005ace:	d057      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005ad4:	1a89      	subs	r1, r1, r2
 8005ad6:	d053      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ad8:	391f      	subs	r1, #31
 8005ada:	d051      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005adc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005ae0:	1a89      	subs	r1, r1, r2
 8005ae2:	d04d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005ae4:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8005e34 <.text_15>
 8005ae8:	1a89      	subs	r1, r1, r2
 8005aea:	d049      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005aec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005af0:	1a89      	subs	r1, r1, r2
 8005af2:	d045      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005af4:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005e38 <.text_16>
 8005af8:	1a89      	subs	r1, r1, r2
 8005afa:	d041      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	1a89      	subs	r1, r1, r2
 8005b02:	d03d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b04:	1a89      	subs	r1, r1, r2
 8005b06:	d03b      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b08:	1fc9      	subs	r1, r1, #7
 8005b0a:	d039      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b0c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005b10:	1a89      	subs	r1, r1, r2
 8005b12:	d035      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b14:	390f      	subs	r1, #15
 8005b16:	d033      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b18:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005b1c:	1a89      	subs	r1, r1, r2
 8005b1e:	d02f      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b20:	391f      	subs	r1, #31
 8005b22:	d02d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b24:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005b28:	1a89      	subs	r1, r1, r2
 8005b2a:	d029      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b2c:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8005e34 <.text_15>
 8005b30:	1a89      	subs	r1, r1, r2
 8005b32:	d025      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b34:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b38:	1a89      	subs	r1, r1, r2
 8005b3a:	d021      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b3c:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005e3c <.text_17>
 8005b40:	1a89      	subs	r1, r1, r2
 8005b42:	d01d      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b48:	1a89      	subs	r1, r1, r2
 8005b4a:	d019      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b50:	1a89      	subs	r1, r1, r2
 8005b52:	d015      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b54:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005e40 <.text_18>
 8005b58:	1a89      	subs	r1, r1, r2
 8005b5a:	d011      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b5c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005b60:	1a89      	subs	r1, r1, r2
 8005b62:	bf1e      	ittt	ne
 8005b64:	f36f 000d 	bfcne	r0, #0, #14
 8005b68:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005b6c:	2840      	cmpne	r0, #64	; 0x40
 8005b6e:	d007      	beq.n	8005b80 <ai_array_fmt_valid+0xde>
 8005b70:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8005e44 <.text_19>
 8005b74:	4298      	cmp	r0, r3
 8005b76:	bf1c      	itt	ne
 8005b78:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005e48 <.text_20>
 8005b7c:	4298      	cmpne	r0, r3
 8005b7e:	d101      	bne.n	8005b84 <ai_array_fmt_valid+0xe2>
 8005b80:	2001      	movs	r0, #1
 8005b82:	4770      	bx	lr
 8005b84:	2000      	movs	r0, #0
 8005b86:	4770      	bx	lr

08005b88 <ai_array_fmt_get_formats>:
 8005b88:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005e4c <.text_21>
 8005b8c:	6001      	str	r1, [r0, #0]
 8005b8e:	201c      	movs	r0, #28
 8005b90:	4770      	bx	lr
	...

08005b94 <.text_8>:
 8005b94:	00000000 	.word	0x00000000

08005b98 <ai_buffer_fmt_name>:
 8005b98:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005b9c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005ba0:	d022      	beq.n	8005be8 <ai_buffer_fmt_name+0x50>
 8005ba2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005ba6:	1a89      	subs	r1, r1, r2
 8005ba8:	d039      	beq.n	8005c1e <ai_buffer_fmt_name+0x86>
 8005baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bae:	1a89      	subs	r1, r1, r2
 8005bb0:	d020      	beq.n	8005bf4 <ai_buffer_fmt_name+0x5c>
 8005bb2:	1fc9      	subs	r1, r1, #7
 8005bb4:	d036      	beq.n	8005c24 <ai_buffer_fmt_name+0x8c>
 8005bb6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bba:	1a89      	subs	r1, r1, r2
 8005bbc:	d01d      	beq.n	8005bfa <ai_buffer_fmt_name+0x62>
 8005bbe:	390f      	subs	r1, #15
 8005bc0:	d033      	beq.n	8005c2a <ai_buffer_fmt_name+0x92>
 8005bc2:	4aa3      	ldr	r2, [pc, #652]	; (8005e50 <.text_22>)
 8005bc4:	1a89      	subs	r1, r1, r2
 8005bc6:	d021      	beq.n	8005c0c <ai_buffer_fmt_name+0x74>
 8005bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bcc:	1a89      	subs	r1, r1, r2
 8005bce:	d017      	beq.n	8005c00 <ai_buffer_fmt_name+0x68>
 8005bd0:	1fc9      	subs	r1, r1, #7
 8005bd2:	d01e      	beq.n	8005c12 <ai_buffer_fmt_name+0x7a>
 8005bd4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005bd8:	1a89      	subs	r1, r1, r2
 8005bda:	d014      	beq.n	8005c06 <ai_buffer_fmt_name+0x6e>
 8005bdc:	390f      	subs	r1, #15
 8005bde:	d01b      	beq.n	8005c18 <ai_buffer_fmt_name+0x80>
 8005be0:	4a9c      	ldr	r2, [pc, #624]	; (8005e54 <.text_23>)
 8005be2:	1a89      	subs	r1, r1, r2
 8005be4:	d003      	beq.n	8005bee <ai_buffer_fmt_name+0x56>
 8005be6:	e023      	b.n	8005c30 <ai_buffer_fmt_name+0x98>
 8005be8:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8005bec:	4770      	bx	lr
 8005bee:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8005bf2:	4770      	bx	lr
 8005bf4:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8005bf8:	4770      	bx	lr
 8005bfa:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8005bfe:	4770      	bx	lr
 8005c00:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8005c04:	4770      	bx	lr
 8005c06:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8005c0a:	4770      	bx	lr
 8005c0c:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8005c10:	4770      	bx	lr
 8005c12:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c16:	4770      	bx	lr
 8005c18:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8005c1c:	4770      	bx	lr
 8005c1e:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c22:	4770      	bx	lr
 8005c24:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8005c28:	4770      	bx	lr
 8005c2a:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8005c2e:	4770      	bx	lr
 8005c30:	0b80      	lsrs	r0, r0, #14
 8005c32:	0380      	lsls	r0, r0, #14
 8005c34:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005c38:	2840      	cmp	r0, #64	; 0x40
 8005c3a:	d007      	beq.n	8005c4c <ai_buffer_fmt_name+0xb4>
 8005c3c:	4981      	ldr	r1, [pc, #516]	; (8005e44 <.text_19>)
 8005c3e:	4288      	cmp	r0, r1
 8005c40:	d00a      	beq.n	8005c58 <ai_buffer_fmt_name+0xc0>
 8005c42:	4981      	ldr	r1, [pc, #516]	; (8005e48 <.text_20>)
 8005c44:	4288      	cmp	r0, r1
 8005c46:	d004      	beq.n	8005c52 <ai_buffer_fmt_name+0xba>
 8005c48:	a079      	add	r0, pc, #484	; (adr r0, 8005e30 <.text_14>)
 8005c4a:	4770      	bx	lr
 8005c4c:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8005c50:	4770      	bx	lr
 8005c52:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8005c56:	4770      	bx	lr
 8005c58:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8005c5c:	4770      	bx	lr

08005c5e <ai_buffer_fmt_valid>:
 8005c5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005c62:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005c66:	d02d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005c6c:	1a89      	subs	r1, r1, r2
 8005c6e:	d029      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c74:	1a89      	subs	r1, r1, r2
 8005c76:	d025      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c78:	1fc9      	subs	r1, r1, #7
 8005c7a:	d023      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c7c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c80:	1a89      	subs	r1, r1, r2
 8005c82:	d01f      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c84:	390f      	subs	r1, #15
 8005c86:	d01d      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c88:	4a71      	ldr	r2, [pc, #452]	; (8005e50 <.text_22>)
 8005c8a:	1a89      	subs	r1, r1, r2
 8005c8c:	d01a      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c92:	1a89      	subs	r1, r1, r2
 8005c94:	d016      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c96:	1fc9      	subs	r1, r1, #7
 8005c98:	d014      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005c9a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005c9e:	1a89      	subs	r1, r1, r2
 8005ca0:	d010      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca2:	390f      	subs	r1, #15
 8005ca4:	d00e      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005ca6:	4a6b      	ldr	r2, [pc, #428]	; (8005e54 <.text_23>)
 8005ca8:	1a89      	subs	r1, r1, r2
 8005caa:	bf1f      	itttt	ne
 8005cac:	0b80      	lsrne	r0, r0, #14
 8005cae:	0380      	lslne	r0, r0, #14
 8005cb0:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8005cb4:	2840      	cmpne	r0, #64	; 0x40
 8005cb6:	d005      	beq.n	8005cc4 <ai_buffer_fmt_valid+0x66>
 8005cb8:	4b62      	ldr	r3, [pc, #392]	; (8005e44 <.text_19>)
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bf1c      	itt	ne
 8005cbe:	4b62      	ldrne	r3, [pc, #392]	; (8005e48 <.text_20>)
 8005cc0:	4298      	cmpne	r0, r3
 8005cc2:	d101      	bne.n	8005cc8 <ai_buffer_fmt_valid+0x6a>
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	4770      	bx	lr
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr

08005ccc <ai_buffer_fmt_get_formats>:
 8005ccc:	4962      	ldr	r1, [pc, #392]	; (8005e58 <.text_24>)
 8005cce:	6001      	str	r1, [r0, #0]
 8005cd0:	200c      	movs	r0, #12
 8005cd2:	4770      	bx	lr

08005cd4 <ai_array_to_buffer_fmt>:
 8005cd4:	4601      	mov	r1, r0
 8005cd6:	2040      	movs	r0, #64	; 0x40
 8005cd8:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8005cdc:	2a02      	cmp	r2, #2
 8005cde:	d104      	bne.n	8005cea <ai_array_to_buffer_fmt+0x16>
 8005ce0:	485e      	ldr	r0, [pc, #376]	; (8005e5c <.text_25>)
 8005ce2:	4008      	ands	r0, r1
 8005ce4:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8005ce8:	e037      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005cea:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <.text_19>)
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	d02d      	beq.n	8005d50 <ai_array_to_buffer_fmt+0x7c>
 8005cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	d01b      	beq.n	8005d34 <ai_array_to_buffer_fmt+0x60>
 8005cfc:	1fd2      	subs	r2, r2, #7
 8005cfe:	d029      	beq.n	8005d54 <ai_array_to_buffer_fmt+0x80>
 8005d00:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	d017      	beq.n	8005d38 <ai_array_to_buffer_fmt+0x64>
 8005d08:	3a0f      	subs	r2, #15
 8005d0a:	d025      	beq.n	8005d58 <ai_array_to_buffer_fmt+0x84>
 8005d0c:	4b50      	ldr	r3, [pc, #320]	; (8005e50 <.text_22>)
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	d018      	beq.n	8005d44 <ai_array_to_buffer_fmt+0x70>
 8005d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	d010      	beq.n	8005d3c <ai_array_to_buffer_fmt+0x68>
 8005d1a:	1fd2      	subs	r2, r2, #7
 8005d1c:	d014      	beq.n	8005d48 <ai_array_to_buffer_fmt+0x74>
 8005d1e:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	d00c      	beq.n	8005d40 <ai_array_to_buffer_fmt+0x6c>
 8005d26:	3a0f      	subs	r2, #15
 8005d28:	d010      	beq.n	8005d4c <ai_array_to_buffer_fmt+0x78>
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <.text_23>)
 8005d2c:	1ad2      	subs	r2, r2, r3
 8005d2e:	d114      	bne.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d30:	484b      	ldr	r0, [pc, #300]	; (8005e60 <.text_26>)
 8005d32:	e012      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d34:	484b      	ldr	r0, [pc, #300]	; (8005e64 <.text_27>)
 8005d36:	e010      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d38:	484b      	ldr	r0, [pc, #300]	; (8005e68 <.text_28>)
 8005d3a:	e00e      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d3c:	484b      	ldr	r0, [pc, #300]	; (8005e6c <.text_29>)
 8005d3e:	e00c      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d40:	484b      	ldr	r0, [pc, #300]	; (8005e70 <.text_30>)
 8005d42:	e00a      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d44:	4840      	ldr	r0, [pc, #256]	; (8005e48 <.text_20>)
 8005d46:	e008      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d48:	484a      	ldr	r0, [pc, #296]	; (8005e74 <.text_31>)
 8005d4a:	e006      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d4c:	484a      	ldr	r0, [pc, #296]	; (8005e78 <.text_32>)
 8005d4e:	e004      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d50:	4618      	mov	r0, r3
 8005d52:	e002      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d54:	4849      	ldr	r0, [pc, #292]	; (8005e7c <.text_33>)
 8005d56:	e000      	b.n	8005d5a <ai_array_to_buffer_fmt+0x86>
 8005d58:	4849      	ldr	r0, [pc, #292]	; (8005e80 <.text_34>)
 8005d5a:	004a      	lsls	r2, r1, #1
 8005d5c:	bf4c      	ite	mi
 8005d5e:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8005d62:	2200      	movpl	r2, #0
 8005d64:	4310      	orrs	r0, r2
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	bf4c      	ite	mi
 8005d6a:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8005d6e:	2200      	movpl	r2, #0
 8005d70:	4310      	orrs	r0, r2
 8005d72:	0109      	lsls	r1, r1, #4
 8005d74:	bf4c      	ite	mi
 8005d76:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8005d7a:	2100      	movpl	r1, #0
 8005d7c:	4308      	orrs	r0, r1
 8005d7e:	4770      	bx	lr

08005d80 <ai_buffer_to_array_fmt>:
 8005d80:	4602      	mov	r2, r0
 8005d82:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8005d86:	3840      	subs	r0, #64	; 0x40
 8005d88:	d022      	beq.n	8005dd0 <ai_buffer_to_array_fmt+0x50>
 8005d8a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8005d8e:	1a40      	subs	r0, r0, r1
 8005d90:	d030      	beq.n	8005df4 <ai_buffer_to_array_fmt+0x74>
 8005d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d96:	1a40      	subs	r0, r0, r1
 8005d98:	d01e      	beq.n	8005dd8 <ai_buffer_to_array_fmt+0x58>
 8005d9a:	1fc0      	subs	r0, r0, #7
 8005d9c:	d02c      	beq.n	8005df8 <ai_buffer_to_array_fmt+0x78>
 8005d9e:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005da2:	1a40      	subs	r0, r0, r1
 8005da4:	d01a      	beq.n	8005ddc <ai_buffer_to_array_fmt+0x5c>
 8005da6:	380f      	subs	r0, #15
 8005da8:	d028      	beq.n	8005dfc <ai_buffer_to_array_fmt+0x7c>
 8005daa:	4929      	ldr	r1, [pc, #164]	; (8005e50 <.text_22>)
 8005dac:	1a40      	subs	r0, r0, r1
 8005dae:	d01b      	beq.n	8005de8 <ai_buffer_to_array_fmt+0x68>
 8005db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005db4:	1a40      	subs	r0, r0, r1
 8005db6:	d013      	beq.n	8005de0 <ai_buffer_to_array_fmt+0x60>
 8005db8:	1fc0      	subs	r0, r0, #7
 8005dba:	d017      	beq.n	8005dec <ai_buffer_to_array_fmt+0x6c>
 8005dbc:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8005dc0:	1a40      	subs	r0, r0, r1
 8005dc2:	d00f      	beq.n	8005de4 <ai_buffer_to_array_fmt+0x64>
 8005dc4:	380f      	subs	r0, #15
 8005dc6:	d013      	beq.n	8005df0 <ai_buffer_to_array_fmt+0x70>
 8005dc8:	4922      	ldr	r1, [pc, #136]	; (8005e54 <.text_23>)
 8005dca:	1a40      	subs	r0, r0, r1
 8005dcc:	d002      	beq.n	8005dd4 <ai_buffer_to_array_fmt+0x54>
 8005dce:	e017      	b.n	8005e00 <ai_buffer_to_array_fmt+0x80>
 8005dd0:	2040      	movs	r0, #64	; 0x40
 8005dd2:	e01f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd4:	4822      	ldr	r0, [pc, #136]	; (8005e60 <.text_26>)
 8005dd6:	e01d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dd8:	4822      	ldr	r0, [pc, #136]	; (8005e64 <.text_27>)
 8005dda:	e01b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005ddc:	4822      	ldr	r0, [pc, #136]	; (8005e68 <.text_28>)
 8005dde:	e019      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de0:	4822      	ldr	r0, [pc, #136]	; (8005e6c <.text_29>)
 8005de2:	e017      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de4:	4822      	ldr	r0, [pc, #136]	; (8005e70 <.text_30>)
 8005de6:	e015      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005de8:	4817      	ldr	r0, [pc, #92]	; (8005e48 <.text_20>)
 8005dea:	e013      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dec:	4821      	ldr	r0, [pc, #132]	; (8005e74 <.text_31>)
 8005dee:	e011      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df0:	4821      	ldr	r0, [pc, #132]	; (8005e78 <.text_32>)
 8005df2:	e00f      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <.text_19>)
 8005df6:	e00d      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005df8:	4820      	ldr	r0, [pc, #128]	; (8005e7c <.text_33>)
 8005dfa:	e00b      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005dfc:	4820      	ldr	r0, [pc, #128]	; (8005e80 <.text_34>)
 8005dfe:	e009      	b.n	8005e14 <ai_buffer_to_array_fmt+0x94>
 8005e00:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8005e04:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bf14      	ite	ne
 8005e0c:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005e10:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8005e14:	0051      	lsls	r1, r2, #1
 8005e16:	bf48      	it	mi
 8005e18:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005e1c:	0091      	lsls	r1, r2, #2
 8005e1e:	bf48      	it	mi
 8005e20:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8005e24:	0111      	lsls	r1, r2, #4
 8005e26:	bf48      	it	mi
 8005e28:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005e2c:	4770      	bx	lr
	...

08005e30 <.text_14>:
 8005e30:	00000000 	.word	0x00000000

08005e34 <.text_15>:
 8005e34:	002be80f 	.word	0x002be80f

08005e38 <.text_16>:
 8005e38:	003bf7f1 	.word	0x003bf7f1

08005e3c <.text_17>:
 8005e3c:	00b9fff1 	.word	0x00b9fff1

08005e40 <.text_18>:
 8005e40:	004df000 	.word	0x004df000

08005e44 <.text_19>:
 8005e44:	00040040 	.word	0x00040040

08005e48 <.text_20>:
 8005e48:	00840040 	.word	0x00840040

08005e4c <.text_21>:
 8005e4c:	080180b4 	.word	0x080180b4

08005e50 <.text_22>:
 8005e50:	007ff7f1 	.word	0x007ff7f1

08005e54 <.text_23>:
 8005e54:	00fe07f1 	.word	0x00fe07f1

08005e58 <.text_24>:
 8005e58:	08018124 	.word	0x08018124

08005e5c <.text_25>:
 8005e5c:	00803fff 	.word	0x00803fff

08005e60 <.text_26>:
 8005e60:	01821040 	.word	0x01821040

08005e64 <.text_27>:
 8005e64:	00040440 	.word	0x00040440

08005e68 <.text_28>:
 8005e68:	00040840 	.word	0x00040840

08005e6c <.text_29>:
 8005e6c:	00840440 	.word	0x00840440

08005e70 <.text_30>:
 8005e70:	00840840 	.word	0x00840840

08005e74 <.text_31>:
 8005e74:	00840447 	.word	0x00840447

08005e78 <.text_32>:
 8005e78:	0084084f 	.word	0x0084084f

08005e7c <.text_33>:
 8005e7c:	00040447 	.word	0x00040447

08005e80 <.text_34>:
 8005e80:	0004084f 	.word	0x0004084f

08005e84 <ai_array_get_byte_size>:
 8005e84:	b909      	cbnz	r1, 8005e8a <ai_array_get_byte_size+0x6>
 8005e86:	2000      	movs	r0, #0
 8005e88:	4770      	bx	lr
 8005e8a:	11c2      	asrs	r2, r0, #7
 8005e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e90:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	4359      	muls	r1, r3
 8005e98:	1dc9      	adds	r1, r1, #7
 8005e9a:	08c9      	lsrs	r1, r1, #3
 8005e9c:	1543      	asrs	r3, r0, #21
 8005e9e:	00c9      	lsls	r1, r1, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8005ea8:	40d9      	lsrs	r1, r3
 8005eaa:	f00c 0c0f 	and.w	ip, ip, #15
 8005eae:	f1bc 0f04 	cmp.w	ip, #4
 8005eb2:	d00a      	beq.n	8005eca <ai_array_get_byte_size+0x46>
 8005eb4:	f1bc 0f08 	cmp.w	ip, #8
 8005eb8:	bf02      	ittt	eq
 8005eba:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8005ebe:	1882      	addeq	r2, r0, r2
 8005ec0:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8005ec4:	1dc9      	adds	r1, r1, #7
 8005ec6:	08c8      	lsrs	r0, r1, #3
 8005ec8:	4770      	bx	lr
 8005eca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005ece:	1882      	adds	r2, r0, r2
 8005ed0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8005ed4:	1dc9      	adds	r1, r1, #7
 8005ed6:	08c8      	lsrs	r0, r1, #3
 8005ed8:	4770      	bx	lr

08005eda <ai_array_get_data_byte_size>:
 8005eda:	b909      	cbnz	r1, 8005ee0 <ai_array_get_data_byte_size+0x6>
 8005edc:	2000      	movs	r0, #0
 8005ede:	4770      	bx	lr
 8005ee0:	11c2      	asrs	r2, r0, #7
 8005ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ee6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005eea:	189a      	adds	r2, r3, r2
 8005eec:	4351      	muls	r1, r2
 8005eee:	1dc9      	adds	r1, r1, #7
 8005ef0:	08c9      	lsrs	r1, r1, #3
 8005ef2:	1540      	asrs	r0, r0, #21
 8005ef4:	00c9      	lsls	r1, r1, #3
 8005ef6:	f000 0003 	and.w	r0, r0, #3
 8005efa:	40c1      	lsrs	r1, r0
 8005efc:	1dc9      	adds	r1, r1, #7
 8005efe:	08c8      	lsrs	r0, r1, #3
 8005f00:	4770      	bx	lr

08005f02 <ai_array_get_elems_from_size>:
 8005f02:	b909      	cbnz	r1, 8005f08 <ai_array_get_elems_from_size+0x6>
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr
 8005f08:	1442      	asrs	r2, r0, #17
 8005f0a:	00c9      	lsls	r1, r1, #3
 8005f0c:	f002 020f 	and.w	r2, r2, #15
 8005f10:	2a04      	cmp	r2, #4
 8005f12:	d002      	beq.n	8005f1a <ai_array_get_elems_from_size+0x18>
 8005f14:	2a08      	cmp	r2, #8
 8005f16:	d009      	beq.n	8005f2c <ai_array_get_elems_from_size+0x2a>
 8005f18:	e010      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f1a:	11c3      	asrs	r3, r0, #7
 8005f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f20:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005f24:	18d2      	adds	r2, r2, r3
 8005f26:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005f2a:	e007      	b.n	8005f3c <ai_array_get_elems_from_size+0x3a>
 8005f2c:	11c2      	asrs	r2, r0, #7
 8005f2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f32:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8005f36:	189a      	adds	r2, r3, r2
 8005f38:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005f3c:	1542      	asrs	r2, r0, #21
 8005f3e:	f002 0203 	and.w	r2, r2, #3
 8005f42:	4091      	lsls	r1, r2
 8005f44:	1dc9      	adds	r1, r1, #7
 8005f46:	11c2      	asrs	r2, r0, #7
 8005f48:	08c9      	lsrs	r1, r1, #3
 8005f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f4e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8005f52:	00c9      	lsls	r1, r1, #3
 8005f54:	1880      	adds	r0, r0, r2
 8005f56:	fbb1 f0f0 	udiv	r0, r1, r0
 8005f5a:	4770      	bx	lr

08005f5c <.text_38>:
 8005f5c:	5f544d46 	.word	0x5f544d46
 8005f60:	454e4f4e 	.word	0x454e4f4e
 8005f64:	00          	.byte	0x00
 8005f65:	00          	.byte	0x00
	...

08005f68 <.text_39>:
 8005f68:	5f544d46 	.word	0x5f544d46
 8005f6c:	414f4c46 	.word	0x414f4c46
 8005f70:	0054      	.short	0x0054
	...

08005f74 <.text_40>:
 8005f74:	5f544d46 	.word	0x5f544d46
 8005f78:	414f4c46 	.word	0x414f4c46
 8005f7c:	00343654 	.word	0x00343654

08005f80 <.text_41>:
 8005f80:	5f544d46 	.word	0x5f544d46
 8005f84:	414f4c46 	.word	0x414f4c46
 8005f88:	00363154 	.word	0x00363154

08005f8c <.text_42>:
 8005f8c:	5f544d46 	.word	0x5f544d46
 8005f90:	00003855 	.word	0x00003855

08005f94 <.text_43>:
 8005f94:	5f544d46 	.word	0x5f544d46
 8005f98:	00363155 	.word	0x00363155

08005f9c <.text_44>:
 8005f9c:	5f544d46 	.word	0x5f544d46
 8005fa0:	00323355 	.word	0x00323355

08005fa4 <.text_45>:
 8005fa4:	5f544d46 	.word	0x5f544d46
 8005fa8:	00343655 	.word	0x00343655

08005fac <.text_46>:
 8005fac:	5f544d46 	.word	0x5f544d46
 8005fb0:	00003455 	.word	0x00003455

08005fb4 <.text_47>:
 8005fb4:	5f544d46 	.word	0x5f544d46
 8005fb8:	00003853 	.word	0x00003853

08005fbc <.text_48>:
 8005fbc:	5f544d46 	.word	0x5f544d46
 8005fc0:	00363153 	.word	0x00363153

08005fc4 <.text_49>:
 8005fc4:	5f544d46 	.word	0x5f544d46
 8005fc8:	00323353 	.word	0x00323353

08005fcc <.text_50>:
 8005fcc:	5f544d46 	.word	0x5f544d46
 8005fd0:	00343653 	.word	0x00343653

08005fd4 <.text_51>:
 8005fd4:	5f544d46 	.word	0x5f544d46
 8005fd8:	00003453 	.word	0x00003453

08005fdc <.text_52>:
 8005fdc:	5f544d46 	.word	0x5f544d46
 8005fe0:	0051      	.short	0x0051
	...

08005fe4 <.text_53>:
 8005fe4:	5f544d46 	.word	0x5f544d46
 8005fe8:	00003751 	.word	0x00003751

08005fec <.text_54>:
 8005fec:	5f544d46 	.word	0x5f544d46
 8005ff0:	00353151 	.word	0x00353151

08005ff4 <.text_55>:
 8005ff4:	5f544d46 	.word	0x5f544d46
 8005ff8:	00313351 	.word	0x00313351

08005ffc <.text_56>:
 8005ffc:	5f544d46 	.word	0x5f544d46
 8006000:	00005155 	.word	0x00005155

08006004 <.text_57>:
 8006004:	5f544d46 	.word	0x5f544d46
 8006008:	00375155 	.word	0x00375155

0800600c <.text_58>:
 800600c:	5f544d46 	.word	0x5f544d46
 8006010:	35315155 	.word	0x35315155
 8006014:	00          	.byte	0x00
 8006015:	00          	.byte	0x00
	...

08006018 <.text_59>:
 8006018:	5f544d46 	.word	0x5f544d46
 800601c:	31335155 	.word	0x31335155
 8006020:	00          	.byte	0x00
 8006021:	00          	.byte	0x00
	...

08006024 <.text_60>:
 8006024:	5f544d46 	.word	0x5f544d46
 8006028:	3454554c 	.word	0x3454554c
 800602c:	4f4c465f 	.word	0x4f4c465f
 8006030:	00005441 	.word	0x00005441

08006034 <.text_61>:
 8006034:	5f544d46 	.word	0x5f544d46
 8006038:	3854554c 	.word	0x3854554c
 800603c:	4f4c465f 	.word	0x4f4c465f
 8006040:	00005441 	.word	0x00005441

08006044 <.text_62>:
 8006044:	5f544d46 	.word	0x5f544d46
 8006048:	3454554c 	.word	0x3454554c
 800604c:	3531515f 	.word	0x3531515f
 8006050:	00          	.byte	0x00
 8006051:	00          	.byte	0x00
	...

08006054 <.text_63>:
 8006054:	5f544d46 	.word	0x5f544d46
 8006058:	3854554c 	.word	0x3854554c
 800605c:	3531515f 	.word	0x3531515f
 8006060:	00          	.byte	0x00
 8006061:	00          	.byte	0x00
	...

08006064 <.text_64>:
 8006064:	5f544d46 	.word	0x5f544d46
 8006068:	3454554c 	.word	0x3454554c
 800606c:	3151555f 	.word	0x3151555f
 8006070:	0035      	.short	0x0035
	...

08006074 <.text_65>:
 8006074:	5f544d46 	.word	0x5f544d46
 8006078:	3854554c 	.word	0x3854554c
 800607c:	3151555f 	.word	0x3151555f
 8006080:	0035      	.short	0x0035
	...

08006084 <.text_66>:
 8006084:	415f4941 	.word	0x415f4941
 8006088:	59415252 	.word	0x59415252
 800608c:	524f465f 	.word	0x524f465f
 8006090:	5f54414d 	.word	0x5f54414d
 8006094:	454e4f4e 	.word	0x454e4f4e
 8006098:	00          	.byte	0x00
 8006099:	00          	.byte	0x00
	...

0800609c <.text_67>:
 800609c:	415f4941 	.word	0x415f4941
 80060a0:	59415252 	.word	0x59415252
 80060a4:	524f465f 	.word	0x524f465f
 80060a8:	5f54414d 	.word	0x5f54414d
 80060ac:	0051      	.short	0x0051
	...

080060b0 <.text_68>:
 80060b0:	415f4941 	.word	0x415f4941
 80060b4:	59415252 	.word	0x59415252
 80060b8:	524f465f 	.word	0x524f465f
 80060bc:	5f54414d 	.word	0x5f54414d
 80060c0:	00005155 	.word	0x00005155

080060c4 <.text_69>:
 80060c4:	425f4941 	.word	0x425f4941
 80060c8:	45464655 	.word	0x45464655
 80060cc:	4f465f52 	.word	0x4f465f52
 80060d0:	54414d52 	.word	0x54414d52
 80060d4:	4e4f4e5f 	.word	0x4e4f4e5f
 80060d8:	0045      	.short	0x0045
	...

080060dc <.text_70>:
 80060dc:	425f4941 	.word	0x425f4941
 80060e0:	45464655 	.word	0x45464655
 80060e4:	4f465f52 	.word	0x4f465f52
 80060e8:	54414d52 	.word	0x54414d52
 80060ec:	0000515f 	.word	0x0000515f

080060f0 <.text_71>:
 80060f0:	425f4941 	.word	0x425f4941
 80060f4:	45464655 	.word	0x45464655
 80060f8:	4f465f52 	.word	0x4f465f52
 80060fc:	54414d52 	.word	0x54414d52
 8006100:	0051555f 	.word	0x0051555f

08006104 <ai_math_sqrt>:
 8006104:	eef0 0a40 	vmov.f32	s1, s0
 8006108:	eef5 0a40 	vcmp.f32	s1, #0.0
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80061b8 <.text_12>
 8006114:	db01      	blt.n	800611a <ai_math_sqrt+0x16>
 8006116:	eeb1 0ae0 	vsqrt.f32	s0, s1
 800611a:	4770      	bx	lr

0800611c <ai_math_exp>:
 800611c:	f00f bcb6 	b.w	8015a8c <expf>

08006120 <ai_math_pow>:
 8006120:	f00f be00 	b.w	8015d24 <powf>

08006124 <ai_math_tanh>:
 8006124:	f00f ba8c 	b.w	8015640 <tanhf>

08006128 <ai_math_cosh>:
 8006128:	f00f bc50 	b.w	80159cc <coshf>

0800612c <ai_math_relu>:
 800612c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006134:	bf48      	it	mi
 8006136:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80061b8 <.text_12>
 800613a:	4770      	bx	lr

0800613c <ai_math_prelu>:
 800613c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	bf48      	it	mi
 8006146:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 800614a:	4770      	bx	lr

0800614c <ai_math_sigmoid>:
 800614c:	b500      	push	{lr}
 800614e:	b081      	sub	sp, #4
 8006150:	eeb1 0a40 	vneg.f32	s0, s0
 8006154:	f00f fc9a 	bl	8015a8c <expf>
 8006158:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800615c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006160:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006164:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006168:	b001      	add	sp, #4
 800616a:	bd00      	pop	{pc}

0800616c <ai_math_hard_sigmoid>:
 800616c:	eef0 0a40 	vmov.f32	s1, s0
 8006170:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80061bc <.text_13>
 8006174:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006178:	ee00 0a81 	vmla.f32	s0, s1, s2
 800617c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80061c0 <.text_14>
 8006180:	eeb4 0a60 	vcmp.f32	s0, s1
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	da07      	bge.n	800619a <ai_math_hard_sigmoid+0x2e>
 800618a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800618e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006192:	d504      	bpl.n	800619e <ai_math_hard_sigmoid+0x32>
 8006194:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80061b8 <.text_12>
 8006198:	4770      	bx	lr
 800619a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800619e:	4770      	bx	lr

080061a0 <ai_math_sign>:
 80061a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80061a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a8:	bfcc      	ite	gt
 80061aa:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80061c4 <.text_15>
 80061ae:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80061c8 <.text_16>
 80061b2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80061b6:	4770      	bx	lr

080061b8 <.text_12>:
 80061b8:	00000000 	.word	0x00000000

080061bc <.text_13>:
 80061bc:	3e4ccccd 	.word	0x3e4ccccd

080061c0 <.text_14>:
 80061c0:	3f800001 	.word	0x3f800001

080061c4 <.text_15>:
 80061c4:	00000001 	.word	0x00000001

080061c8 <.text_16>:
 80061c8:	ffffffff 	.word	0xffffffff

080061cc <ai_div>:
 80061cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d0:	4770      	bx	lr

080061d2 <ai_floor_div>:
 80061d2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80061d6:	f00f b859 	b.w	801528c <floorf>

080061da <ai_floor_mod>:
 80061da:	f00f bcd1 	b.w	8015b80 <fmodf>

080061de <ai_max>:
 80061de:	eef4 0a40 	vcmp.f32	s1, s0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	bf58      	it	pl
 80061e8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061ec:	4770      	bx	lr

080061ee <ai_min>:
 80061ee:	eeb4 0a60 	vcmp.f32	s0, s1
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	bf58      	it	pl
 80061f8:	eeb0 0a60 	vmovpl.f32	s0, s1
 80061fc:	4770      	bx	lr

080061fe <ai_mul>:
 80061fe:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006202:	4770      	bx	lr

08006204 <ai_sub>:
 8006204:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006208:	4770      	bx	lr

0800620a <ai_sum>:
 800620a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800620e:	4770      	bx	lr

08006210 <arm_mat_init_f32>:
 8006210:	8001      	strh	r1, [r0, #0]
 8006212:	8042      	strh	r2, [r0, #2]
 8006214:	6043      	str	r3, [r0, #4]
 8006216:	4770      	bx	lr

08006218 <__aeabi_memset>:
 8006218:	b470      	push	{r4, r5, r6}
 800621a:	0784      	lsls	r4, r0, #30
 800621c:	d046      	beq.n	80062ac <__aeabi_memset+0x94>
 800621e:	1e4c      	subs	r4, r1, #1
 8006220:	2900      	cmp	r1, #0
 8006222:	d041      	beq.n	80062a8 <__aeabi_memset+0x90>
 8006224:	b2d5      	uxtb	r5, r2
 8006226:	4603      	mov	r3, r0
 8006228:	e002      	b.n	8006230 <__aeabi_memset+0x18>
 800622a:	1e61      	subs	r1, r4, #1
 800622c:	b3e4      	cbz	r4, 80062a8 <__aeabi_memset+0x90>
 800622e:	460c      	mov	r4, r1
 8006230:	f803 5b01 	strb.w	r5, [r3], #1
 8006234:	0799      	lsls	r1, r3, #30
 8006236:	d1f8      	bne.n	800622a <__aeabi_memset+0x12>
 8006238:	2c03      	cmp	r4, #3
 800623a:	d92e      	bls.n	800629a <__aeabi_memset+0x82>
 800623c:	b2d5      	uxtb	r5, r2
 800623e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006242:	2c0f      	cmp	r4, #15
 8006244:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006248:	d919      	bls.n	800627e <__aeabi_memset+0x66>
 800624a:	4626      	mov	r6, r4
 800624c:	f103 0110 	add.w	r1, r3, #16
 8006250:	3e10      	subs	r6, #16
 8006252:	2e0f      	cmp	r6, #15
 8006254:	f841 5c10 	str.w	r5, [r1, #-16]
 8006258:	f841 5c0c 	str.w	r5, [r1, #-12]
 800625c:	f841 5c08 	str.w	r5, [r1, #-8]
 8006260:	f841 5c04 	str.w	r5, [r1, #-4]
 8006264:	f101 0110 	add.w	r1, r1, #16
 8006268:	d8f2      	bhi.n	8006250 <__aeabi_memset+0x38>
 800626a:	f1a4 0110 	sub.w	r1, r4, #16
 800626e:	f021 010f 	bic.w	r1, r1, #15
 8006272:	f004 040f 	and.w	r4, r4, #15
 8006276:	3110      	adds	r1, #16
 8006278:	2c03      	cmp	r4, #3
 800627a:	440b      	add	r3, r1
 800627c:	d90d      	bls.n	800629a <__aeabi_memset+0x82>
 800627e:	461e      	mov	r6, r3
 8006280:	4621      	mov	r1, r4
 8006282:	3904      	subs	r1, #4
 8006284:	2903      	cmp	r1, #3
 8006286:	f846 5b04 	str.w	r5, [r6], #4
 800628a:	d8fa      	bhi.n	8006282 <__aeabi_memset+0x6a>
 800628c:	1f21      	subs	r1, r4, #4
 800628e:	f021 0103 	bic.w	r1, r1, #3
 8006292:	3104      	adds	r1, #4
 8006294:	440b      	add	r3, r1
 8006296:	f004 0403 	and.w	r4, r4, #3
 800629a:	b12c      	cbz	r4, 80062a8 <__aeabi_memset+0x90>
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	441c      	add	r4, r3
 80062a0:	f803 2b01 	strb.w	r2, [r3], #1
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d1fb      	bne.n	80062a0 <__aeabi_memset+0x88>
 80062a8:	bc70      	pop	{r4, r5, r6}
 80062aa:	4770      	bx	lr
 80062ac:	460c      	mov	r4, r1
 80062ae:	4603      	mov	r3, r0
 80062b0:	e7c2      	b.n	8006238 <__aeabi_memset+0x20>

080062b2 <strlen>:
 80062b2:	4603      	mov	r3, r0
 80062b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b8:	2a00      	cmp	r2, #0
 80062ba:	d1fb      	bne.n	80062b4 <strlen+0x2>
 80062bc:	1a18      	subs	r0, r3, r0
 80062be:	3801      	subs	r0, #1
 80062c0:	4770      	bx	lr
	...

080062d0 <memchr>:
 80062d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80062d4:	2a10      	cmp	r2, #16
 80062d6:	db2b      	blt.n	8006330 <memchr+0x60>
 80062d8:	f010 0f07 	tst.w	r0, #7
 80062dc:	d008      	beq.n	80062f0 <memchr+0x20>
 80062de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062e2:	3a01      	subs	r2, #1
 80062e4:	428b      	cmp	r3, r1
 80062e6:	d02d      	beq.n	8006344 <memchr+0x74>
 80062e8:	f010 0f07 	tst.w	r0, #7
 80062ec:	b342      	cbz	r2, 8006340 <memchr+0x70>
 80062ee:	d1f6      	bne.n	80062de <memchr+0xe>
 80062f0:	b4f0      	push	{r4, r5, r6, r7}
 80062f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80062f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80062fa:	f022 0407 	bic.w	r4, r2, #7
 80062fe:	f07f 0700 	mvns.w	r7, #0
 8006302:	2300      	movs	r3, #0
 8006304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006308:	3c08      	subs	r4, #8
 800630a:	ea85 0501 	eor.w	r5, r5, r1
 800630e:	ea86 0601 	eor.w	r6, r6, r1
 8006312:	fa85 f547 	uadd8	r5, r5, r7
 8006316:	faa3 f587 	sel	r5, r3, r7
 800631a:	fa86 f647 	uadd8	r6, r6, r7
 800631e:	faa5 f687 	sel	r6, r5, r7
 8006322:	b98e      	cbnz	r6, 8006348 <memchr+0x78>
 8006324:	d1ee      	bne.n	8006304 <memchr+0x34>
 8006326:	bcf0      	pop	{r4, r5, r6, r7}
 8006328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800632c:	f002 0207 	and.w	r2, r2, #7
 8006330:	b132      	cbz	r2, 8006340 <memchr+0x70>
 8006332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006336:	3a01      	subs	r2, #1
 8006338:	ea83 0301 	eor.w	r3, r3, r1
 800633c:	b113      	cbz	r3, 8006344 <memchr+0x74>
 800633e:	d1f8      	bne.n	8006332 <memchr+0x62>
 8006340:	2000      	movs	r0, #0
 8006342:	4770      	bx	lr
 8006344:	3801      	subs	r0, #1
 8006346:	4770      	bx	lr
 8006348:	2d00      	cmp	r5, #0
 800634a:	bf06      	itte	eq
 800634c:	4635      	moveq	r5, r6
 800634e:	3803      	subeq	r0, #3
 8006350:	3807      	subne	r0, #7
 8006352:	f015 0f01 	tst.w	r5, #1
 8006356:	d107      	bne.n	8006368 <memchr+0x98>
 8006358:	3001      	adds	r0, #1
 800635a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800635e:	bf02      	ittt	eq
 8006360:	3001      	addeq	r0, #1
 8006362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006366:	3001      	addeq	r0, #1
 8006368:	bcf0      	pop	{r4, r5, r6, r7}
 800636a:	3801      	subs	r0, #1
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop

08006370 <__aeabi_drsub>:
 8006370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006374:	e002      	b.n	800637c <__adddf3>
 8006376:	bf00      	nop

08006378 <__aeabi_dsub>:
 8006378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800637c <__adddf3>:
 800637c:	b530      	push	{r4, r5, lr}
 800637e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006386:	ea94 0f05 	teq	r4, r5
 800638a:	bf08      	it	eq
 800638c:	ea90 0f02 	teqeq	r0, r2
 8006390:	bf1f      	itttt	ne
 8006392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800639a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800639e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80063a2:	f000 80e2 	beq.w	800656a <__adddf3+0x1ee>
 80063a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80063aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80063ae:	bfb8      	it	lt
 80063b0:	426d      	neglt	r5, r5
 80063b2:	dd0c      	ble.n	80063ce <__adddf3+0x52>
 80063b4:	442c      	add	r4, r5
 80063b6:	ea80 0202 	eor.w	r2, r0, r2
 80063ba:	ea81 0303 	eor.w	r3, r1, r3
 80063be:	ea82 0000 	eor.w	r0, r2, r0
 80063c2:	ea83 0101 	eor.w	r1, r3, r1
 80063c6:	ea80 0202 	eor.w	r2, r0, r2
 80063ca:	ea81 0303 	eor.w	r3, r1, r3
 80063ce:	2d36      	cmp	r5, #54	; 0x36
 80063d0:	bf88      	it	hi
 80063d2:	bd30      	pophi	{r4, r5, pc}
 80063d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80063d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80063e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80063e4:	d002      	beq.n	80063ec <__adddf3+0x70>
 80063e6:	4240      	negs	r0, r0
 80063e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80063ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80063f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80063f8:	d002      	beq.n	8006400 <__adddf3+0x84>
 80063fa:	4252      	negs	r2, r2
 80063fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006400:	ea94 0f05 	teq	r4, r5
 8006404:	f000 80a7 	beq.w	8006556 <__adddf3+0x1da>
 8006408:	f1a4 0401 	sub.w	r4, r4, #1
 800640c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006410:	db0d      	blt.n	800642e <__adddf3+0xb2>
 8006412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006416:	fa22 f205 	lsr.w	r2, r2, r5
 800641a:	1880      	adds	r0, r0, r2
 800641c:	f141 0100 	adc.w	r1, r1, #0
 8006420:	fa03 f20e 	lsl.w	r2, r3, lr
 8006424:	1880      	adds	r0, r0, r2
 8006426:	fa43 f305 	asr.w	r3, r3, r5
 800642a:	4159      	adcs	r1, r3
 800642c:	e00e      	b.n	800644c <__adddf3+0xd0>
 800642e:	f1a5 0520 	sub.w	r5, r5, #32
 8006432:	f10e 0e20 	add.w	lr, lr, #32
 8006436:	2a01      	cmp	r2, #1
 8006438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800643c:	bf28      	it	cs
 800643e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006442:	fa43 f305 	asr.w	r3, r3, r5
 8006446:	18c0      	adds	r0, r0, r3
 8006448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800644c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006450:	d507      	bpl.n	8006462 <__adddf3+0xe6>
 8006452:	f04f 0e00 	mov.w	lr, #0
 8006456:	f1dc 0c00 	rsbs	ip, ip, #0
 800645a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800645e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006466:	d31b      	bcc.n	80064a0 <__adddf3+0x124>
 8006468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800646c:	d30c      	bcc.n	8006488 <__adddf3+0x10c>
 800646e:	0849      	lsrs	r1, r1, #1
 8006470:	ea5f 0030 	movs.w	r0, r0, rrx
 8006474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006478:	f104 0401 	add.w	r4, r4, #1
 800647c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006484:	f080 809a 	bcs.w	80065bc <__adddf3+0x240>
 8006488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800648c:	bf08      	it	eq
 800648e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006492:	f150 0000 	adcs.w	r0, r0, #0
 8006496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800649a:	ea41 0105 	orr.w	r1, r1, r5
 800649e:	bd30      	pop	{r4, r5, pc}
 80064a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80064a4:	4140      	adcs	r0, r0
 80064a6:	eb41 0101 	adc.w	r1, r1, r1
 80064aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80064ae:	f1a4 0401 	sub.w	r4, r4, #1
 80064b2:	d1e9      	bne.n	8006488 <__adddf3+0x10c>
 80064b4:	f091 0f00 	teq	r1, #0
 80064b8:	bf04      	itt	eq
 80064ba:	4601      	moveq	r1, r0
 80064bc:	2000      	moveq	r0, #0
 80064be:	fab1 f381 	clz	r3, r1
 80064c2:	bf08      	it	eq
 80064c4:	3320      	addeq	r3, #32
 80064c6:	f1a3 030b 	sub.w	r3, r3, #11
 80064ca:	f1b3 0220 	subs.w	r2, r3, #32
 80064ce:	da0c      	bge.n	80064ea <__adddf3+0x16e>
 80064d0:	320c      	adds	r2, #12
 80064d2:	dd08      	ble.n	80064e6 <__adddf3+0x16a>
 80064d4:	f102 0c14 	add.w	ip, r2, #20
 80064d8:	f1c2 020c 	rsb	r2, r2, #12
 80064dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80064e0:	fa21 f102 	lsr.w	r1, r1, r2
 80064e4:	e00c      	b.n	8006500 <__adddf3+0x184>
 80064e6:	f102 0214 	add.w	r2, r2, #20
 80064ea:	bfd8      	it	le
 80064ec:	f1c2 0c20 	rsble	ip, r2, #32
 80064f0:	fa01 f102 	lsl.w	r1, r1, r2
 80064f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80064f8:	bfdc      	itt	le
 80064fa:	ea41 010c 	orrle.w	r1, r1, ip
 80064fe:	4090      	lslle	r0, r2
 8006500:	1ae4      	subs	r4, r4, r3
 8006502:	bfa2      	ittt	ge
 8006504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006508:	4329      	orrge	r1, r5
 800650a:	bd30      	popge	{r4, r5, pc}
 800650c:	ea6f 0404 	mvn.w	r4, r4
 8006510:	3c1f      	subs	r4, #31
 8006512:	da1c      	bge.n	800654e <__adddf3+0x1d2>
 8006514:	340c      	adds	r4, #12
 8006516:	dc0e      	bgt.n	8006536 <__adddf3+0x1ba>
 8006518:	f104 0414 	add.w	r4, r4, #20
 800651c:	f1c4 0220 	rsb	r2, r4, #32
 8006520:	fa20 f004 	lsr.w	r0, r0, r4
 8006524:	fa01 f302 	lsl.w	r3, r1, r2
 8006528:	ea40 0003 	orr.w	r0, r0, r3
 800652c:	fa21 f304 	lsr.w	r3, r1, r4
 8006530:	ea45 0103 	orr.w	r1, r5, r3
 8006534:	bd30      	pop	{r4, r5, pc}
 8006536:	f1c4 040c 	rsb	r4, r4, #12
 800653a:	f1c4 0220 	rsb	r2, r4, #32
 800653e:	fa20 f002 	lsr.w	r0, r0, r2
 8006542:	fa01 f304 	lsl.w	r3, r1, r4
 8006546:	ea40 0003 	orr.w	r0, r0, r3
 800654a:	4629      	mov	r1, r5
 800654c:	bd30      	pop	{r4, r5, pc}
 800654e:	fa21 f004 	lsr.w	r0, r1, r4
 8006552:	4629      	mov	r1, r5
 8006554:	bd30      	pop	{r4, r5, pc}
 8006556:	f094 0f00 	teq	r4, #0
 800655a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800655e:	bf06      	itte	eq
 8006560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006564:	3401      	addeq	r4, #1
 8006566:	3d01      	subne	r5, #1
 8006568:	e74e      	b.n	8006408 <__adddf3+0x8c>
 800656a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800656e:	bf18      	it	ne
 8006570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006574:	d029      	beq.n	80065ca <__adddf3+0x24e>
 8006576:	ea94 0f05 	teq	r4, r5
 800657a:	bf08      	it	eq
 800657c:	ea90 0f02 	teqeq	r0, r2
 8006580:	d005      	beq.n	800658e <__adddf3+0x212>
 8006582:	ea54 0c00 	orrs.w	ip, r4, r0
 8006586:	bf04      	itt	eq
 8006588:	4619      	moveq	r1, r3
 800658a:	4610      	moveq	r0, r2
 800658c:	bd30      	pop	{r4, r5, pc}
 800658e:	ea91 0f03 	teq	r1, r3
 8006592:	bf1e      	ittt	ne
 8006594:	2100      	movne	r1, #0
 8006596:	2000      	movne	r0, #0
 8006598:	bd30      	popne	{r4, r5, pc}
 800659a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800659e:	d105      	bne.n	80065ac <__adddf3+0x230>
 80065a0:	0040      	lsls	r0, r0, #1
 80065a2:	4149      	adcs	r1, r1
 80065a4:	bf28      	it	cs
 80065a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80065aa:	bd30      	pop	{r4, r5, pc}
 80065ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80065b0:	bf3c      	itt	cc
 80065b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80065b6:	bd30      	popcc	{r4, r5, pc}
 80065b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80065bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80065c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	bd30      	pop	{r4, r5, pc}
 80065ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80065ce:	bf1a      	itte	ne
 80065d0:	4619      	movne	r1, r3
 80065d2:	4610      	movne	r0, r2
 80065d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80065d8:	bf1c      	itt	ne
 80065da:	460b      	movne	r3, r1
 80065dc:	4602      	movne	r2, r0
 80065de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80065e2:	bf06      	itte	eq
 80065e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80065e8:	ea91 0f03 	teqeq	r1, r3
 80065ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80065f0:	bd30      	pop	{r4, r5, pc}
 80065f2:	bf00      	nop

080065f4 <__aeabi_ui2d>:
 80065f4:	f090 0f00 	teq	r0, #0
 80065f8:	bf04      	itt	eq
 80065fa:	2100      	moveq	r1, #0
 80065fc:	4770      	bxeq	lr
 80065fe:	b530      	push	{r4, r5, lr}
 8006600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006608:	f04f 0500 	mov.w	r5, #0
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	e750      	b.n	80064b4 <__adddf3+0x138>
 8006612:	bf00      	nop

08006614 <__aeabi_i2d>:
 8006614:	f090 0f00 	teq	r0, #0
 8006618:	bf04      	itt	eq
 800661a:	2100      	moveq	r1, #0
 800661c:	4770      	bxeq	lr
 800661e:	b530      	push	{r4, r5, lr}
 8006620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800662c:	bf48      	it	mi
 800662e:	4240      	negmi	r0, r0
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	e73e      	b.n	80064b4 <__adddf3+0x138>
 8006636:	bf00      	nop

08006638 <__aeabi_f2d>:
 8006638:	0042      	lsls	r2, r0, #1
 800663a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800663e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006646:	bf1f      	itttt	ne
 8006648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800664c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006654:	4770      	bxne	lr
 8006656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800665a:	bf08      	it	eq
 800665c:	4770      	bxeq	lr
 800665e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006662:	bf04      	itt	eq
 8006664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006668:	4770      	bxeq	lr
 800666a:	b530      	push	{r4, r5, lr}
 800666c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006678:	e71c      	b.n	80064b4 <__adddf3+0x138>
 800667a:	bf00      	nop

0800667c <__aeabi_ul2d>:
 800667c:	ea50 0201 	orrs.w	r2, r0, r1
 8006680:	bf08      	it	eq
 8006682:	4770      	bxeq	lr
 8006684:	b530      	push	{r4, r5, lr}
 8006686:	f04f 0500 	mov.w	r5, #0
 800668a:	e00a      	b.n	80066a2 <__aeabi_l2d+0x16>

0800668c <__aeabi_l2d>:
 800668c:	ea50 0201 	orrs.w	r2, r0, r1
 8006690:	bf08      	it	eq
 8006692:	4770      	bxeq	lr
 8006694:	b530      	push	{r4, r5, lr}
 8006696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800669a:	d502      	bpl.n	80066a2 <__aeabi_l2d+0x16>
 800669c:	4240      	negs	r0, r0
 800669e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80066a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80066a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80066aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80066ae:	f43f aed8 	beq.w	8006462 <__adddf3+0xe6>
 80066b2:	f04f 0203 	mov.w	r2, #3
 80066b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066ba:	bf18      	it	ne
 80066bc:	3203      	addne	r2, #3
 80066be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80066c2:	bf18      	it	ne
 80066c4:	3203      	addne	r2, #3
 80066c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80066ca:	f1c2 0320 	rsb	r3, r2, #32
 80066ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80066d2:	fa20 f002 	lsr.w	r0, r0, r2
 80066d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80066da:	ea40 000e 	orr.w	r0, r0, lr
 80066de:	fa21 f102 	lsr.w	r1, r1, r2
 80066e2:	4414      	add	r4, r2
 80066e4:	e6bd      	b.n	8006462 <__adddf3+0xe6>
 80066e6:	bf00      	nop

080066e8 <__aeabi_dmul>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80066f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80066f6:	bf1d      	ittte	ne
 80066f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80066fc:	ea94 0f0c 	teqne	r4, ip
 8006700:	ea95 0f0c 	teqne	r5, ip
 8006704:	f000 f8de 	bleq	80068c4 <__aeabi_dmul+0x1dc>
 8006708:	442c      	add	r4, r5
 800670a:	ea81 0603 	eor.w	r6, r1, r3
 800670e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800671a:	bf18      	it	ne
 800671c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006728:	d038      	beq.n	800679c <__aeabi_dmul+0xb4>
 800672a:	fba0 ce02 	umull	ip, lr, r0, r2
 800672e:	f04f 0500 	mov.w	r5, #0
 8006732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800673a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800673e:	f04f 0600 	mov.w	r6, #0
 8006742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006746:	f09c 0f00 	teq	ip, #0
 800674a:	bf18      	it	ne
 800674c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800675c:	d204      	bcs.n	8006768 <__aeabi_dmul+0x80>
 800675e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006762:	416d      	adcs	r5, r5
 8006764:	eb46 0606 	adc.w	r6, r6, r6
 8006768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800676c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800677c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006780:	bf88      	it	hi
 8006782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006786:	d81e      	bhi.n	80067c6 <__aeabi_dmul+0xde>
 8006788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800678c:	bf08      	it	eq
 800678e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006792:	f150 0000 	adcs.w	r0, r0, #0
 8006796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80067a0:	ea46 0101 	orr.w	r1, r6, r1
 80067a4:	ea40 0002 	orr.w	r0, r0, r2
 80067a8:	ea81 0103 	eor.w	r1, r1, r3
 80067ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80067b0:	bfc2      	ittt	gt
 80067b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80067b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80067ba:	bd70      	popgt	{r4, r5, r6, pc}
 80067bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067c0:	f04f 0e00 	mov.w	lr, #0
 80067c4:	3c01      	subs	r4, #1
 80067c6:	f300 80ab 	bgt.w	8006920 <__aeabi_dmul+0x238>
 80067ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80067ce:	bfde      	ittt	le
 80067d0:	2000      	movle	r0, #0
 80067d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80067d6:	bd70      	pople	{r4, r5, r6, pc}
 80067d8:	f1c4 0400 	rsb	r4, r4, #0
 80067dc:	3c20      	subs	r4, #32
 80067de:	da35      	bge.n	800684c <__aeabi_dmul+0x164>
 80067e0:	340c      	adds	r4, #12
 80067e2:	dc1b      	bgt.n	800681c <__aeabi_dmul+0x134>
 80067e4:	f104 0414 	add.w	r4, r4, #20
 80067e8:	f1c4 0520 	rsb	r5, r4, #32
 80067ec:	fa00 f305 	lsl.w	r3, r0, r5
 80067f0:	fa20 f004 	lsr.w	r0, r0, r4
 80067f4:	fa01 f205 	lsl.w	r2, r1, r5
 80067f8:	ea40 0002 	orr.w	r0, r0, r2
 80067fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006808:	fa21 f604 	lsr.w	r6, r1, r4
 800680c:	eb42 0106 	adc.w	r1, r2, r6
 8006810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006814:	bf08      	it	eq
 8006816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	f1c4 040c 	rsb	r4, r4, #12
 8006820:	f1c4 0520 	rsb	r5, r4, #32
 8006824:	fa00 f304 	lsl.w	r3, r0, r4
 8006828:	fa20 f005 	lsr.w	r0, r0, r5
 800682c:	fa01 f204 	lsl.w	r2, r1, r4
 8006830:	ea40 0002 	orr.w	r0, r0, r2
 8006834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800683c:	f141 0100 	adc.w	r1, r1, #0
 8006840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006844:	bf08      	it	eq
 8006846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800684a:	bd70      	pop	{r4, r5, r6, pc}
 800684c:	f1c4 0520 	rsb	r5, r4, #32
 8006850:	fa00 f205 	lsl.w	r2, r0, r5
 8006854:	ea4e 0e02 	orr.w	lr, lr, r2
 8006858:	fa20 f304 	lsr.w	r3, r0, r4
 800685c:	fa01 f205 	lsl.w	r2, r1, r5
 8006860:	ea43 0302 	orr.w	r3, r3, r2
 8006864:	fa21 f004 	lsr.w	r0, r1, r4
 8006868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800686c:	fa21 f204 	lsr.w	r2, r1, r4
 8006870:	ea20 0002 	bic.w	r0, r0, r2
 8006874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800687c:	bf08      	it	eq
 800687e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	f094 0f00 	teq	r4, #0
 8006888:	d10f      	bne.n	80068aa <__aeabi_dmul+0x1c2>
 800688a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800688e:	0040      	lsls	r0, r0, #1
 8006890:	eb41 0101 	adc.w	r1, r1, r1
 8006894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006898:	bf08      	it	eq
 800689a:	3c01      	subeq	r4, #1
 800689c:	d0f7      	beq.n	800688e <__aeabi_dmul+0x1a6>
 800689e:	ea41 0106 	orr.w	r1, r1, r6
 80068a2:	f095 0f00 	teq	r5, #0
 80068a6:	bf18      	it	ne
 80068a8:	4770      	bxne	lr
 80068aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80068ae:	0052      	lsls	r2, r2, #1
 80068b0:	eb43 0303 	adc.w	r3, r3, r3
 80068b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068b8:	bf08      	it	eq
 80068ba:	3d01      	subeq	r5, #1
 80068bc:	d0f7      	beq.n	80068ae <__aeabi_dmul+0x1c6>
 80068be:	ea43 0306 	orr.w	r3, r3, r6
 80068c2:	4770      	bx	lr
 80068c4:	ea94 0f0c 	teq	r4, ip
 80068c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80068cc:	bf18      	it	ne
 80068ce:	ea95 0f0c 	teqne	r5, ip
 80068d2:	d00c      	beq.n	80068ee <__aeabi_dmul+0x206>
 80068d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068d8:	bf18      	it	ne
 80068da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068de:	d1d1      	bne.n	8006884 <__aeabi_dmul+0x19c>
 80068e0:	ea81 0103 	eor.w	r1, r1, r3
 80068e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80068e8:	f04f 0000 	mov.w	r0, #0
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068f2:	bf06      	itte	eq
 80068f4:	4610      	moveq	r0, r2
 80068f6:	4619      	moveq	r1, r3
 80068f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068fc:	d019      	beq.n	8006932 <__aeabi_dmul+0x24a>
 80068fe:	ea94 0f0c 	teq	r4, ip
 8006902:	d102      	bne.n	800690a <__aeabi_dmul+0x222>
 8006904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006908:	d113      	bne.n	8006932 <__aeabi_dmul+0x24a>
 800690a:	ea95 0f0c 	teq	r5, ip
 800690e:	d105      	bne.n	800691c <__aeabi_dmul+0x234>
 8006910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006914:	bf1c      	itt	ne
 8006916:	4610      	movne	r0, r2
 8006918:	4619      	movne	r1, r3
 800691a:	d10a      	bne.n	8006932 <__aeabi_dmul+0x24a>
 800691c:	ea81 0103 	eor.w	r1, r1, r3
 8006920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800692c:	f04f 0000 	mov.w	r0, #0
 8006930:	bd70      	pop	{r4, r5, r6, pc}
 8006932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800693a:	bd70      	pop	{r4, r5, r6, pc}

0800693c <__aeabi_ddiv>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800694a:	bf1d      	ittte	ne
 800694c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006950:	ea94 0f0c 	teqne	r4, ip
 8006954:	ea95 0f0c 	teqne	r5, ip
 8006958:	f000 f8a7 	bleq	8006aaa <__aeabi_ddiv+0x16e>
 800695c:	eba4 0405 	sub.w	r4, r4, r5
 8006960:	ea81 0e03 	eor.w	lr, r1, r3
 8006964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800696c:	f000 8088 	beq.w	8006a80 <__aeabi_ddiv+0x144>
 8006970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800697c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800698c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006994:	429d      	cmp	r5, r3
 8006996:	bf08      	it	eq
 8006998:	4296      	cmpeq	r6, r2
 800699a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800699e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80069a2:	d202      	bcs.n	80069aa <__aeabi_ddiv+0x6e>
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80069aa:	1ab6      	subs	r6, r6, r2
 80069ac:	eb65 0503 	sbc.w	r5, r5, r3
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80069be:	ebb6 0e02 	subs.w	lr, r6, r2
 80069c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069c6:	bf22      	ittt	cs
 80069c8:	1ab6      	subcs	r6, r6, r2
 80069ca:	4675      	movcs	r5, lr
 80069cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80069d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80069da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069de:	bf22      	ittt	cs
 80069e0:	1ab6      	subcs	r6, r6, r2
 80069e2:	4675      	movcs	r5, lr
 80069e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80069ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80069f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80069f6:	bf22      	ittt	cs
 80069f8:	1ab6      	subcs	r6, r6, r2
 80069fa:	4675      	movcs	r5, lr
 80069fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8006a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8006a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006a0e:	bf22      	ittt	cs
 8006a10:	1ab6      	subcs	r6, r6, r2
 8006a12:	4675      	movcs	r5, lr
 8006a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8006a1c:	d018      	beq.n	8006a50 <__aeabi_ddiv+0x114>
 8006a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006a3a:	d1c0      	bne.n	80069be <__aeabi_ddiv+0x82>
 8006a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a40:	d10b      	bne.n	8006a5a <__aeabi_ddiv+0x11e>
 8006a42:	ea41 0100 	orr.w	r1, r1, r0
 8006a46:	f04f 0000 	mov.w	r0, #0
 8006a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006a4e:	e7b6      	b.n	80069be <__aeabi_ddiv+0x82>
 8006a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a54:	bf04      	itt	eq
 8006a56:	4301      	orreq	r1, r0
 8006a58:	2000      	moveq	r0, #0
 8006a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006a5e:	bf88      	it	hi
 8006a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006a64:	f63f aeaf 	bhi.w	80067c6 <__aeabi_dmul+0xde>
 8006a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8006a6c:	bf04      	itt	eq
 8006a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a76:	f150 0000 	adcs.w	r0, r0, #0
 8006a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006a8c:	bfc2      	ittt	gt
 8006a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006a96:	bd70      	popgt	{r4, r5, r6, pc}
 8006a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006a9c:	f04f 0e00 	mov.w	lr, #0
 8006aa0:	3c01      	subs	r4, #1
 8006aa2:	e690      	b.n	80067c6 <__aeabi_dmul+0xde>
 8006aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8006aa8:	e68d      	b.n	80067c6 <__aeabi_dmul+0xde>
 8006aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006aae:	ea94 0f0c 	teq	r4, ip
 8006ab2:	bf08      	it	eq
 8006ab4:	ea95 0f0c 	teqeq	r5, ip
 8006ab8:	f43f af3b 	beq.w	8006932 <__aeabi_dmul+0x24a>
 8006abc:	ea94 0f0c 	teq	r4, ip
 8006ac0:	d10a      	bne.n	8006ad8 <__aeabi_ddiv+0x19c>
 8006ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006ac6:	f47f af34 	bne.w	8006932 <__aeabi_dmul+0x24a>
 8006aca:	ea95 0f0c 	teq	r5, ip
 8006ace:	f47f af25 	bne.w	800691c <__aeabi_dmul+0x234>
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	e72c      	b.n	8006932 <__aeabi_dmul+0x24a>
 8006ad8:	ea95 0f0c 	teq	r5, ip
 8006adc:	d106      	bne.n	8006aec <__aeabi_ddiv+0x1b0>
 8006ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006ae2:	f43f aefd 	beq.w	80068e0 <__aeabi_dmul+0x1f8>
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4619      	mov	r1, r3
 8006aea:	e722      	b.n	8006932 <__aeabi_dmul+0x24a>
 8006aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006af0:	bf18      	it	ne
 8006af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006af6:	f47f aec5 	bne.w	8006884 <__aeabi_dmul+0x19c>
 8006afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006afe:	f47f af0d 	bne.w	800691c <__aeabi_dmul+0x234>
 8006b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006b06:	f47f aeeb 	bne.w	80068e0 <__aeabi_dmul+0x1f8>
 8006b0a:	e712      	b.n	8006932 <__aeabi_dmul+0x24a>

08006b0c <__gedf2>:
 8006b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8006b10:	e006      	b.n	8006b20 <__cmpdf2+0x4>
 8006b12:	bf00      	nop

08006b14 <__ledf2>:
 8006b14:	f04f 0c01 	mov.w	ip, #1
 8006b18:	e002      	b.n	8006b20 <__cmpdf2+0x4>
 8006b1a:	bf00      	nop

08006b1c <__cmpdf2>:
 8006b1c:	f04f 0c01 	mov.w	ip, #1
 8006b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b30:	bf18      	it	ne
 8006b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006b36:	d01b      	beq.n	8006b70 <__cmpdf2+0x54>
 8006b38:	b001      	add	sp, #4
 8006b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006b3e:	bf0c      	ite	eq
 8006b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006b44:	ea91 0f03 	teqne	r1, r3
 8006b48:	bf02      	ittt	eq
 8006b4a:	ea90 0f02 	teqeq	r0, r2
 8006b4e:	2000      	moveq	r0, #0
 8006b50:	4770      	bxeq	lr
 8006b52:	f110 0f00 	cmn.w	r0, #0
 8006b56:	ea91 0f03 	teq	r1, r3
 8006b5a:	bf58      	it	pl
 8006b5c:	4299      	cmppl	r1, r3
 8006b5e:	bf08      	it	eq
 8006b60:	4290      	cmpeq	r0, r2
 8006b62:	bf2c      	ite	cs
 8006b64:	17d8      	asrcs	r0, r3, #31
 8006b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006b6a:	f040 0001 	orr.w	r0, r0, #1
 8006b6e:	4770      	bx	lr
 8006b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b78:	d102      	bne.n	8006b80 <__cmpdf2+0x64>
 8006b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006b7e:	d107      	bne.n	8006b90 <__cmpdf2+0x74>
 8006b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006b88:	d1d6      	bne.n	8006b38 <__cmpdf2+0x1c>
 8006b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006b8e:	d0d3      	beq.n	8006b38 <__cmpdf2+0x1c>
 8006b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop

08006b98 <__aeabi_cdrcmple>:
 8006b98:	4684      	mov	ip, r0
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4662      	mov	r2, ip
 8006b9e:	468c      	mov	ip, r1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4663      	mov	r3, ip
 8006ba4:	e000      	b.n	8006ba8 <__aeabi_cdcmpeq>
 8006ba6:	bf00      	nop

08006ba8 <__aeabi_cdcmpeq>:
 8006ba8:	b501      	push	{r0, lr}
 8006baa:	f7ff ffb7 	bl	8006b1c <__cmpdf2>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	bf48      	it	mi
 8006bb2:	f110 0f00 	cmnmi.w	r0, #0
 8006bb6:	bd01      	pop	{r0, pc}

08006bb8 <__aeabi_dcmpeq>:
 8006bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bbc:	f7ff fff4 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2001      	moveq	r0, #1
 8006bc4:	2000      	movne	r0, #0
 8006bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bca:	bf00      	nop

08006bcc <__aeabi_dcmplt>:
 8006bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bd0:	f7ff ffea 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006bd4:	bf34      	ite	cc
 8006bd6:	2001      	movcc	r0, #1
 8006bd8:	2000      	movcs	r0, #0
 8006bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bde:	bf00      	nop

08006be0 <__aeabi_dcmple>:
 8006be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006be4:	f7ff ffe0 	bl	8006ba8 <__aeabi_cdcmpeq>
 8006be8:	bf94      	ite	ls
 8006bea:	2001      	movls	r0, #1
 8006bec:	2000      	movhi	r0, #0
 8006bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8006bf2:	bf00      	nop

08006bf4 <__aeabi_dcmpge>:
 8006bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006bf8:	f7ff ffce 	bl	8006b98 <__aeabi_cdrcmple>
 8006bfc:	bf94      	ite	ls
 8006bfe:	2001      	movls	r0, #1
 8006c00:	2000      	movhi	r0, #0
 8006c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c06:	bf00      	nop

08006c08 <__aeabi_dcmpgt>:
 8006c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006c0c:	f7ff ffc4 	bl	8006b98 <__aeabi_cdrcmple>
 8006c10:	bf34      	ite	cc
 8006c12:	2001      	movcc	r0, #1
 8006c14:	2000      	movcs	r0, #0
 8006c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8006c1a:	bf00      	nop

08006c1c <__aeabi_dcmpun>:
 8006c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c24:	d102      	bne.n	8006c2c <__aeabi_dcmpun+0x10>
 8006c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006c2a:	d10a      	bne.n	8006c42 <__aeabi_dcmpun+0x26>
 8006c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006c34:	d102      	bne.n	8006c3c <__aeabi_dcmpun+0x20>
 8006c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006c3a:	d102      	bne.n	8006c42 <__aeabi_dcmpun+0x26>
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	4770      	bx	lr
 8006c42:	f04f 0001 	mov.w	r0, #1
 8006c46:	4770      	bx	lr

08006c48 <__aeabi_d2iz>:
 8006c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006c50:	d215      	bcs.n	8006c7e <__aeabi_d2iz+0x36>
 8006c52:	d511      	bpl.n	8006c78 <__aeabi_d2iz+0x30>
 8006c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006c5c:	d912      	bls.n	8006c84 <__aeabi_d2iz+0x3c>
 8006c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8006c72:	bf18      	it	ne
 8006c74:	4240      	negne	r0, r0
 8006c76:	4770      	bx	lr
 8006c78:	f04f 0000 	mov.w	r0, #0
 8006c7c:	4770      	bx	lr
 8006c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006c82:	d105      	bne.n	8006c90 <__aeabi_d2iz+0x48>
 8006c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006c88:	bf08      	it	eq
 8006c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006c8e:	4770      	bx	lr
 8006c90:	f04f 0000 	mov.w	r0, #0
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop

08006c98 <__aeabi_d2uiz>:
 8006c98:	004a      	lsls	r2, r1, #1
 8006c9a:	d211      	bcs.n	8006cc0 <__aeabi_d2uiz+0x28>
 8006c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006ca0:	d211      	bcs.n	8006cc6 <__aeabi_d2uiz+0x2e>
 8006ca2:	d50d      	bpl.n	8006cc0 <__aeabi_d2uiz+0x28>
 8006ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006cac:	d40e      	bmi.n	8006ccc <__aeabi_d2uiz+0x34>
 8006cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006cba:	fa23 f002 	lsr.w	r0, r3, r2
 8006cbe:	4770      	bx	lr
 8006cc0:	f04f 0000 	mov.w	r0, #0
 8006cc4:	4770      	bx	lr
 8006cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006cca:	d102      	bne.n	8006cd2 <__aeabi_d2uiz+0x3a>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	4770      	bx	lr
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	4770      	bx	lr

08006cd8 <__aeabi_d2f>:
 8006cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8006ce0:	bf24      	itt	cs
 8006ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8006ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8006cea:	d90d      	bls.n	8006d08 <__aeabi_d2f+0x30>
 8006cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8006cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006d00:	bf08      	it	eq
 8006d02:	f020 0001 	biceq.w	r0, r0, #1
 8006d06:	4770      	bx	lr
 8006d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006d0c:	d121      	bne.n	8006d52 <__aeabi_d2f+0x7a>
 8006d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8006d12:	bfbc      	itt	lt
 8006d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8006d18:	4770      	bxlt	lr
 8006d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006d22:	f1c2 0218 	rsb	r2, r2, #24
 8006d26:	f1c2 0c20 	rsb	ip, r2, #32
 8006d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8006d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8006d32:	bf18      	it	ne
 8006d34:	f040 0001 	orrne.w	r0, r0, #1
 8006d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006d44:	ea40 000c 	orr.w	r0, r0, ip
 8006d48:	fa23 f302 	lsr.w	r3, r3, r2
 8006d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d50:	e7cc      	b.n	8006cec <__aeabi_d2f+0x14>
 8006d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006d56:	d107      	bne.n	8006d68 <__aeabi_d2f+0x90>
 8006d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006d5c:	bf1e      	ittt	ne
 8006d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8006d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8006d66:	4770      	bxne	lr
 8006d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8006d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop

08006d78 <__aeabi_uldivmod>:
 8006d78:	b953      	cbnz	r3, 8006d90 <__aeabi_uldivmod+0x18>
 8006d7a:	b94a      	cbnz	r2, 8006d90 <__aeabi_uldivmod+0x18>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	bf08      	it	eq
 8006d80:	2800      	cmpeq	r0, #0
 8006d82:	bf1c      	itt	ne
 8006d84:	f04f 31ff 	movne.w	r1, #4294967295
 8006d88:	f04f 30ff 	movne.w	r0, #4294967295
 8006d8c:	f000 b972 	b.w	8007074 <__aeabi_idiv0>
 8006d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8006d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006d98:	f000 f806 	bl	8006da8 <__udivmoddi4>
 8006d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da4:	b004      	add	sp, #16
 8006da6:	4770      	bx	lr

08006da8 <__udivmoddi4>:
 8006da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dac:	9e08      	ldr	r6, [sp, #32]
 8006dae:	4604      	mov	r4, r0
 8006db0:	4688      	mov	r8, r1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d14b      	bne.n	8006e4e <__udivmoddi4+0xa6>
 8006db6:	428a      	cmp	r2, r1
 8006db8:	4615      	mov	r5, r2
 8006dba:	d967      	bls.n	8006e8c <__udivmoddi4+0xe4>
 8006dbc:	fab2 f282 	clz	r2, r2
 8006dc0:	b14a      	cbz	r2, 8006dd6 <__udivmoddi4+0x2e>
 8006dc2:	f1c2 0720 	rsb	r7, r2, #32
 8006dc6:	fa01 f302 	lsl.w	r3, r1, r2
 8006dca:	fa20 f707 	lsr.w	r7, r0, r7
 8006dce:	4095      	lsls	r5, r2
 8006dd0:	ea47 0803 	orr.w	r8, r7, r3
 8006dd4:	4094      	lsls	r4, r2
 8006dd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006dda:	0c23      	lsrs	r3, r4, #16
 8006ddc:	fbb8 f7fe 	udiv	r7, r8, lr
 8006de0:	fa1f fc85 	uxth.w	ip, r5
 8006de4:	fb0e 8817 	mls	r8, lr, r7, r8
 8006de8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006dec:	fb07 f10c 	mul.w	r1, r7, ip
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d909      	bls.n	8006e08 <__udivmoddi4+0x60>
 8006df4:	18eb      	adds	r3, r5, r3
 8006df6:	f107 30ff 	add.w	r0, r7, #4294967295
 8006dfa:	f080 811b 	bcs.w	8007034 <__udivmoddi4+0x28c>
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	f240 8118 	bls.w	8007034 <__udivmoddi4+0x28c>
 8006e04:	3f02      	subs	r7, #2
 8006e06:	442b      	add	r3, r5
 8006e08:	1a5b      	subs	r3, r3, r1
 8006e0a:	b2a4      	uxth	r4, r4
 8006e0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8006e10:	fb0e 3310 	mls	r3, lr, r0, r3
 8006e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006e18:	fb00 fc0c 	mul.w	ip, r0, ip
 8006e1c:	45a4      	cmp	ip, r4
 8006e1e:	d909      	bls.n	8006e34 <__udivmoddi4+0x8c>
 8006e20:	192c      	adds	r4, r5, r4
 8006e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e26:	f080 8107 	bcs.w	8007038 <__udivmoddi4+0x290>
 8006e2a:	45a4      	cmp	ip, r4
 8006e2c:	f240 8104 	bls.w	8007038 <__udivmoddi4+0x290>
 8006e30:	3802      	subs	r0, #2
 8006e32:	442c      	add	r4, r5
 8006e34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006e38:	eba4 040c 	sub.w	r4, r4, ip
 8006e3c:	2700      	movs	r7, #0
 8006e3e:	b11e      	cbz	r6, 8006e48 <__udivmoddi4+0xa0>
 8006e40:	40d4      	lsrs	r4, r2
 8006e42:	2300      	movs	r3, #0
 8006e44:	e9c6 4300 	strd	r4, r3, [r6]
 8006e48:	4639      	mov	r1, r7
 8006e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4e:	428b      	cmp	r3, r1
 8006e50:	d909      	bls.n	8006e66 <__udivmoddi4+0xbe>
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	f000 80eb 	beq.w	800702e <__udivmoddi4+0x286>
 8006e58:	2700      	movs	r7, #0
 8006e5a:	e9c6 0100 	strd	r0, r1, [r6]
 8006e5e:	4638      	mov	r0, r7
 8006e60:	4639      	mov	r1, r7
 8006e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e66:	fab3 f783 	clz	r7, r3
 8006e6a:	2f00      	cmp	r7, #0
 8006e6c:	d147      	bne.n	8006efe <__udivmoddi4+0x156>
 8006e6e:	428b      	cmp	r3, r1
 8006e70:	d302      	bcc.n	8006e78 <__udivmoddi4+0xd0>
 8006e72:	4282      	cmp	r2, r0
 8006e74:	f200 80fa 	bhi.w	800706c <__udivmoddi4+0x2c4>
 8006e78:	1a84      	subs	r4, r0, r2
 8006e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8006e7e:	2001      	movs	r0, #1
 8006e80:	4698      	mov	r8, r3
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d0e0      	beq.n	8006e48 <__udivmoddi4+0xa0>
 8006e86:	e9c6 4800 	strd	r4, r8, [r6]
 8006e8a:	e7dd      	b.n	8006e48 <__udivmoddi4+0xa0>
 8006e8c:	b902      	cbnz	r2, 8006e90 <__udivmoddi4+0xe8>
 8006e8e:	deff      	udf	#255	; 0xff
 8006e90:	fab2 f282 	clz	r2, r2
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	f040 808f 	bne.w	8006fb8 <__udivmoddi4+0x210>
 8006e9a:	1b49      	subs	r1, r1, r5
 8006e9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006ea0:	fa1f f885 	uxth.w	r8, r5
 8006ea4:	2701      	movs	r7, #1
 8006ea6:	fbb1 fcfe 	udiv	ip, r1, lr
 8006eaa:	0c23      	lsrs	r3, r4, #16
 8006eac:	fb0e 111c 	mls	r1, lr, ip, r1
 8006eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006eb4:	fb08 f10c 	mul.w	r1, r8, ip
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	d907      	bls.n	8006ecc <__udivmoddi4+0x124>
 8006ebc:	18eb      	adds	r3, r5, r3
 8006ebe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8006ec2:	d202      	bcs.n	8006eca <__udivmoddi4+0x122>
 8006ec4:	4299      	cmp	r1, r3
 8006ec6:	f200 80cd 	bhi.w	8007064 <__udivmoddi4+0x2bc>
 8006eca:	4684      	mov	ip, r0
 8006ecc:	1a59      	subs	r1, r3, r1
 8006ece:	b2a3      	uxth	r3, r4
 8006ed0:	fbb1 f0fe 	udiv	r0, r1, lr
 8006ed4:	fb0e 1410 	mls	r4, lr, r0, r1
 8006ed8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006edc:	fb08 f800 	mul.w	r8, r8, r0
 8006ee0:	45a0      	cmp	r8, r4
 8006ee2:	d907      	bls.n	8006ef4 <__udivmoddi4+0x14c>
 8006ee4:	192c      	adds	r4, r5, r4
 8006ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eea:	d202      	bcs.n	8006ef2 <__udivmoddi4+0x14a>
 8006eec:	45a0      	cmp	r8, r4
 8006eee:	f200 80b6 	bhi.w	800705e <__udivmoddi4+0x2b6>
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	eba4 0408 	sub.w	r4, r4, r8
 8006ef8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8006efc:	e79f      	b.n	8006e3e <__udivmoddi4+0x96>
 8006efe:	f1c7 0c20 	rsb	ip, r7, #32
 8006f02:	40bb      	lsls	r3, r7
 8006f04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8006f08:	ea4e 0e03 	orr.w	lr, lr, r3
 8006f0c:	fa01 f407 	lsl.w	r4, r1, r7
 8006f10:	fa20 f50c 	lsr.w	r5, r0, ip
 8006f14:	fa21 f30c 	lsr.w	r3, r1, ip
 8006f18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8006f1c:	4325      	orrs	r5, r4
 8006f1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8006f22:	0c2c      	lsrs	r4, r5, #16
 8006f24:	fb08 3319 	mls	r3, r8, r9, r3
 8006f28:	fa1f fa8e 	uxth.w	sl, lr
 8006f2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8006f30:	fb09 f40a 	mul.w	r4, r9, sl
 8006f34:	429c      	cmp	r4, r3
 8006f36:	fa02 f207 	lsl.w	r2, r2, r7
 8006f3a:	fa00 f107 	lsl.w	r1, r0, r7
 8006f3e:	d90b      	bls.n	8006f58 <__udivmoddi4+0x1b0>
 8006f40:	eb1e 0303 	adds.w	r3, lr, r3
 8006f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8006f48:	f080 8087 	bcs.w	800705a <__udivmoddi4+0x2b2>
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	f240 8084 	bls.w	800705a <__udivmoddi4+0x2b2>
 8006f52:	f1a9 0902 	sub.w	r9, r9, #2
 8006f56:	4473      	add	r3, lr
 8006f58:	1b1b      	subs	r3, r3, r4
 8006f5a:	b2ad      	uxth	r5, r5
 8006f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8006f60:	fb08 3310 	mls	r3, r8, r0, r3
 8006f64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8006f68:	fb00 fa0a 	mul.w	sl, r0, sl
 8006f6c:	45a2      	cmp	sl, r4
 8006f6e:	d908      	bls.n	8006f82 <__udivmoddi4+0x1da>
 8006f70:	eb1e 0404 	adds.w	r4, lr, r4
 8006f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f78:	d26b      	bcs.n	8007052 <__udivmoddi4+0x2aa>
 8006f7a:	45a2      	cmp	sl, r4
 8006f7c:	d969      	bls.n	8007052 <__udivmoddi4+0x2aa>
 8006f7e:	3802      	subs	r0, #2
 8006f80:	4474      	add	r4, lr
 8006f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8006f86:	fba0 8902 	umull	r8, r9, r0, r2
 8006f8a:	eba4 040a 	sub.w	r4, r4, sl
 8006f8e:	454c      	cmp	r4, r9
 8006f90:	46c2      	mov	sl, r8
 8006f92:	464b      	mov	r3, r9
 8006f94:	d354      	bcc.n	8007040 <__udivmoddi4+0x298>
 8006f96:	d051      	beq.n	800703c <__udivmoddi4+0x294>
 8006f98:	2e00      	cmp	r6, #0
 8006f9a:	d069      	beq.n	8007070 <__udivmoddi4+0x2c8>
 8006f9c:	ebb1 050a 	subs.w	r5, r1, sl
 8006fa0:	eb64 0403 	sbc.w	r4, r4, r3
 8006fa4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8006fa8:	40fd      	lsrs	r5, r7
 8006faa:	40fc      	lsrs	r4, r7
 8006fac:	ea4c 0505 	orr.w	r5, ip, r5
 8006fb0:	e9c6 5400 	strd	r5, r4, [r6]
 8006fb4:	2700      	movs	r7, #0
 8006fb6:	e747      	b.n	8006e48 <__udivmoddi4+0xa0>
 8006fb8:	f1c2 0320 	rsb	r3, r2, #32
 8006fbc:	fa20 f703 	lsr.w	r7, r0, r3
 8006fc0:	4095      	lsls	r5, r2
 8006fc2:	fa01 f002 	lsl.w	r0, r1, r2
 8006fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8006fca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8006fce:	4338      	orrs	r0, r7
 8006fd0:	0c01      	lsrs	r1, r0, #16
 8006fd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8006fd6:	fa1f f885 	uxth.w	r8, r5
 8006fda:	fb0e 3317 	mls	r3, lr, r7, r3
 8006fde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006fe2:	fb07 f308 	mul.w	r3, r7, r8
 8006fe6:	428b      	cmp	r3, r1
 8006fe8:	fa04 f402 	lsl.w	r4, r4, r2
 8006fec:	d907      	bls.n	8006ffe <__udivmoddi4+0x256>
 8006fee:	1869      	adds	r1, r5, r1
 8006ff0:	f107 3cff 	add.w	ip, r7, #4294967295
 8006ff4:	d22f      	bcs.n	8007056 <__udivmoddi4+0x2ae>
 8006ff6:	428b      	cmp	r3, r1
 8006ff8:	d92d      	bls.n	8007056 <__udivmoddi4+0x2ae>
 8006ffa:	3f02      	subs	r7, #2
 8006ffc:	4429      	add	r1, r5
 8006ffe:	1acb      	subs	r3, r1, r3
 8007000:	b281      	uxth	r1, r0
 8007002:	fbb3 f0fe 	udiv	r0, r3, lr
 8007006:	fb0e 3310 	mls	r3, lr, r0, r3
 800700a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800700e:	fb00 f308 	mul.w	r3, r0, r8
 8007012:	428b      	cmp	r3, r1
 8007014:	d907      	bls.n	8007026 <__udivmoddi4+0x27e>
 8007016:	1869      	adds	r1, r5, r1
 8007018:	f100 3cff 	add.w	ip, r0, #4294967295
 800701c:	d217      	bcs.n	800704e <__udivmoddi4+0x2a6>
 800701e:	428b      	cmp	r3, r1
 8007020:	d915      	bls.n	800704e <__udivmoddi4+0x2a6>
 8007022:	3802      	subs	r0, #2
 8007024:	4429      	add	r1, r5
 8007026:	1ac9      	subs	r1, r1, r3
 8007028:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800702c:	e73b      	b.n	8006ea6 <__udivmoddi4+0xfe>
 800702e:	4637      	mov	r7, r6
 8007030:	4630      	mov	r0, r6
 8007032:	e709      	b.n	8006e48 <__udivmoddi4+0xa0>
 8007034:	4607      	mov	r7, r0
 8007036:	e6e7      	b.n	8006e08 <__udivmoddi4+0x60>
 8007038:	4618      	mov	r0, r3
 800703a:	e6fb      	b.n	8006e34 <__udivmoddi4+0x8c>
 800703c:	4541      	cmp	r1, r8
 800703e:	d2ab      	bcs.n	8006f98 <__udivmoddi4+0x1f0>
 8007040:	ebb8 0a02 	subs.w	sl, r8, r2
 8007044:	eb69 020e 	sbc.w	r2, r9, lr
 8007048:	3801      	subs	r0, #1
 800704a:	4613      	mov	r3, r2
 800704c:	e7a4      	b.n	8006f98 <__udivmoddi4+0x1f0>
 800704e:	4660      	mov	r0, ip
 8007050:	e7e9      	b.n	8007026 <__udivmoddi4+0x27e>
 8007052:	4618      	mov	r0, r3
 8007054:	e795      	b.n	8006f82 <__udivmoddi4+0x1da>
 8007056:	4667      	mov	r7, ip
 8007058:	e7d1      	b.n	8006ffe <__udivmoddi4+0x256>
 800705a:	4681      	mov	r9, r0
 800705c:	e77c      	b.n	8006f58 <__udivmoddi4+0x1b0>
 800705e:	3802      	subs	r0, #2
 8007060:	442c      	add	r4, r5
 8007062:	e747      	b.n	8006ef4 <__udivmoddi4+0x14c>
 8007064:	f1ac 0c02 	sub.w	ip, ip, #2
 8007068:	442b      	add	r3, r5
 800706a:	e72f      	b.n	8006ecc <__udivmoddi4+0x124>
 800706c:	4638      	mov	r0, r7
 800706e:	e708      	b.n	8006e82 <__udivmoddi4+0xda>
 8007070:	4637      	mov	r7, r6
 8007072:	e6e9      	b.n	8006e48 <__udivmoddi4+0xa0>

08007074 <__aeabi_idiv0>:
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop

08007078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070b0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800707c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800707e:	e003      	b.n	8007088 <LoopCopyDataInit>

08007080 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007082:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007084:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007086:	3104      	adds	r1, #4

08007088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007088:	480b      	ldr	r0, [pc, #44]	; (80070b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800708c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800708e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007090:	d3f6      	bcc.n	8007080 <CopyDataInit>
  ldr  r2, =_sbss
 8007092:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007094:	e002      	b.n	800709c <LoopFillZerobss>

08007096 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007096:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007098:	f842 3b04 	str.w	r3, [r2], #4

0800709c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800709e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80070a0:	d3f9      	bcc.n	8007096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80070a2:	f004 f825 	bl	800b0f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070a6:	f009 fad3 	bl	8010650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070aa:	f000 fdcd 	bl	8007c48 <main>
  bx  lr    
 80070ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80070b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80070b4:	0814fed0 	.word	0x0814fed0
  ldr  r0, =_sdata
 80070b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80070bc:	20000a9c 	.word	0x20000a9c
  ldr  r2, =_sbss
 80070c0:	20000a9c 	.word	0x20000a9c
  ldr  r3, = _ebss
 80070c4:	20019fdc 	.word	0x20019fdc

080070c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070c8:	e7fe      	b.n	80070c8 <ADC_IRQHandler>
	...

080070cc <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b090      	sub	sp, #64	; 0x40
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 80070d4:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <aiInit+0xc4>)
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	2301      	movs	r3, #1
 80070da:	823b      	strh	r3, [r7, #16]
 80070dc:	2301      	movs	r3, #1
 80070de:	827b      	strh	r3, [r7, #18]
 80070e0:	2301      	movs	r3, #1
 80070e2:	82bb      	strh	r3, [r7, #20]
 80070e4:	4b2b      	ldr	r3, [pc, #172]	; (8007194 <aiInit+0xc8>)
 80070e6:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80070e8:	f001 fb32 	bl	8008750 <ai_network_data_weights_get>
 80070ec:	4603      	mov	r3, r0
    const ai_network_params params = {
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	2300      	movs	r3, #0
 80070f2:	623b      	str	r3, [r7, #32]
 80070f4:	4b28      	ldr	r3, [pc, #160]	; (8007198 <aiInit+0xcc>)
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	2301      	movs	r3, #1
 80070fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80070fc:	2301      	movs	r3, #1
 80070fe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007100:	2301      	movs	r3, #1
 8007102:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007104:	4b25      	ldr	r3, [pc, #148]	; (800719c <aiInit+0xd0>)
 8007106:	633b      	str	r3, [r7, #48]	; 0x30
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	2300      	movs	r3, #0
 800710e:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8007110:	2100      	movs	r1, #0
 8007112:	4823      	ldr	r0, [pc, #140]	; (80071a0 <aiInit+0xd4>)
 8007114:	f001 fab6 	bl	8008684 <ai_network_create>
 8007118:	4603      	mov	r3, r0
 800711a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800711c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <aiInit+0x5e>
	    return -1;
 8007124:	f04f 33ff 	mov.w	r3, #4294967295
 8007128:	e02e      	b.n	8007188 <aiInit+0xbc>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800712a:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <aiInit+0xd4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f107 020c 	add.w	r2, r7, #12
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fac7 	bl	80086c8 <ai_network_init>
 800713a:	4603      	mov	r3, r0
 800713c:	f083 0301 	eor.w	r3, r3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01f      	beq.n	8007186 <aiInit+0xba>
        err = ai_network_get_error(network);
 8007146:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <aiInit+0xd4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f001 fa8e 	bl	800866c <ai_network_get_error>
 8007150:	4603      	mov	r3, r0
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
        if(err.type !=AI_ERROR_NONE){
 8007154:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <aiInit+0xa4>
        	printf("ERROR : type=%d code=%d\r\n",err.type,err.code);
 800715c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007160:	4619      	mov	r1, r3
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8007168:	461a      	mov	r2, r3
 800716a:	480e      	ldr	r0, [pc, #56]	; (80071a4 <aiInit+0xd8>)
 800716c:	f00a f8f4 	bl	8011358 <iprintf>
        }
        ai_network_destroy(network);
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <aiInit+0xd4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f001 fa9b 	bl	80086b0 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <aiInit+0xd4>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]
	    return -2;
 8007180:	f06f 0301 	mvn.w	r3, #1
 8007184:	e000      	b.n	8007188 <aiInit+0xbc>
    }

    return 0;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3740      	adds	r7, #64	; 0x40
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40040440 	.word	0x40040440
 8007194:	00134028 	.word	0x00134028
 8007198:	00040440 	.word	0x00040440
 800719c:	00018f00 	.word	0x00018f00
 80071a0:	20000ab8 	.word	0x20000ab8
 80071a4:	08018008 	.word	0x08018008

080071a8 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
    ai_error err;



    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 80071b2:	4b14      	ldr	r3, [pc, #80]	; (8007204 <aiRun+0x5c>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80071b8:	4a12      	ldr	r2, [pc, #72]	; (8007204 <aiRun+0x5c>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <aiRun+0x60>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80071c4:	4a10      	ldr	r2, [pc, #64]	; (8007208 <aiRun+0x60>)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
     ai_network_run(network, &ai_input[0], &ai_output[0]);
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <aiRun+0x64>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <aiRun+0x60>)
 80071d0:	490c      	ldr	r1, [pc, #48]	; (8007204 <aiRun+0x5c>)
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 faab 	bl	800872e <ai_network_run>
     err = ai_network_get_error(network);
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <aiRun+0x64>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fa45 	bl	800866c <ai_network_get_error>
 80071e2:	4603      	mov	r3, r0
 80071e4:	60fb      	str	r3, [r7, #12]
    printf("ERROR : type=%d code=%d",err.type,err.code);
 80071e6:	7b3b      	ldrb	r3, [r7, #12]
 80071e8:	4619      	mov	r1, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80071f0:	461a      	mov	r2, r3
 80071f2:	4807      	ldr	r0, [pc, #28]	; (8007210 <aiRun+0x68>)
 80071f4:	f00a f8b0 	bl	8011358 <iprintf>

}
 80071f8:	bf00      	nop
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000000 	.word	0x20000000
 8007208:	20000018 	.word	0x20000018
 800720c:	20000ab8 	.word	0x20000ab8
 8007210:	08018024 	.word	0x08018024

08007214 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8007218:	4802      	ldr	r0, [pc, #8]	; (8007224 <MX_X_CUBE_AI_Init+0x10>)
 800721a:	f7ff ff57 	bl	80070cc <aiInit>
    /* USER CODE END 0 */
}
 800721e:	bf00      	nop
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000abc 	.word	0x20000abc

08007228 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float * nn_input_data, ai_float *nn_output_data)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
      aiRun(nn_input_data, nn_output_data);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff ffb7 	bl	80071a8 <aiRun>

}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <MX_CRC_Init+0x20>)
 800724a:	4a07      	ldr	r2, [pc, #28]	; (8007268 <MX_CRC_Init+0x24>)
 800724c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800724e:	4805      	ldr	r0, [pc, #20]	; (8007264 <MX_CRC_Init+0x20>)
 8007250:	f004 f8aa 	bl	800b3a8 <HAL_CRC_Init>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800725a:	f001 f8e3 	bl	8008424 <Error_Handler>
  }

}
 800725e:	bf00      	nop
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20019c34 	.word	0x20019c34
 8007268:	40023000 	.word	0x40023000

0800726c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <HAL_CRC_MspInit+0x3c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d10d      	bne.n	800729a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <HAL_CRC_MspInit+0x40>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <HAL_CRC_MspInit+0x40>)
 8007288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800728c:	6313      	str	r3, [r2, #48]	; 0x30
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <HAL_CRC_MspInit+0x40>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40023000 	.word	0x40023000
 80072ac:	40023800 	.word	0x40023800

080072b0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072b6:	4a16      	ldr	r2, [pc, #88]	; (8007310 <MX_DMA2D_Init+0x60>)
 80072b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80072ba:	4b14      	ldr	r3, [pc, #80]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072bc:	2200      	movs	r2, #0
 80072be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80072e4:	4809      	ldr	r0, [pc, #36]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072e6:	f004 fa37 	bl	800b758 <HAL_DMA2D_Init>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80072f0:	f001 f898 	bl	8008424 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80072f4:	2101      	movs	r1, #1
 80072f6:	4805      	ldr	r0, [pc, #20]	; (800730c <MX_DMA2D_Init+0x5c>)
 80072f8:	f004 fb8c 	bl	800ba14 <HAL_DMA2D_ConfigLayer>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8007302:	f001 f88f 	bl	8008424 <Error_Handler>
  }

}
 8007306:	bf00      	nop
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20019c3c 	.word	0x20019c3c
 8007310:	4002b000 	.word	0x4002b000

08007314 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <HAL_DMA2D_MspInit+0x3c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d10d      	bne.n	8007342 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <HAL_DMA2D_MspInit+0x40>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	4a09      	ldr	r2, [pc, #36]	; (8007354 <HAL_DMA2D_MspInit+0x40>)
 8007330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007334:	6313      	str	r3, [r2, #48]	; 0x30
 8007336:	4b07      	ldr	r3, [pc, #28]	; (8007354 <HAL_DMA2D_MspInit+0x40>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	4002b000 	.word	0x4002b000
 8007354:	40023800 	.word	0x40023800

08007358 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	611a      	str	r2, [r3, #16]
 800736c:	615a      	str	r2, [r3, #20]
 800736e:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007370:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <MX_FMC_Init+0x98>)
 8007372:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <MX_FMC_Init+0x9c>)
 8007374:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8007376:	4b1e      	ldr	r3, [pc, #120]	; (80073f0 <MX_FMC_Init+0x98>)
 8007378:	2201      	movs	r2, #1
 800737a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800737c:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <MX_FMC_Init+0x98>)
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007382:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <MX_FMC_Init+0x98>)
 8007384:	2204      	movs	r2, #4
 8007386:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <MX_FMC_Init+0x98>)
 800738a:	2210      	movs	r2, #16
 800738c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <MX_FMC_Init+0x98>)
 8007390:	2240      	movs	r2, #64	; 0x40
 8007392:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8007394:	4b16      	ldr	r3, [pc, #88]	; (80073f0 <MX_FMC_Init+0x98>)
 8007396:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800739a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <MX_FMC_Init+0x98>)
 800739e:	2200      	movs	r2, #0
 80073a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <MX_FMC_Init+0x98>)
 80073a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80073aa:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <MX_FMC_Init+0x98>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <MX_FMC_Init+0x98>)
 80073b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80073b8:	2302      	movs	r3, #2
 80073ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80073bc:	2307      	movs	r3, #7
 80073be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80073c0:	2304      	movs	r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80073c4:	2307      	movs	r3, #7
 80073c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80073c8:	2303      	movs	r3, #3
 80073ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80073cc:	2302      	movs	r3, #2
 80073ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80073d0:	2302      	movs	r3, #2
 80073d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80073d4:	1d3b      	adds	r3, r7, #4
 80073d6:	4619      	mov	r1, r3
 80073d8:	4805      	ldr	r0, [pc, #20]	; (80073f0 <MX_FMC_Init+0x98>)
 80073da:	f007 f937 	bl	800e64c <HAL_SDRAM_Init>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80073e4:	f001 f81e 	bl	8008424 <Error_Handler>
  }

}
 80073e8:	bf00      	nop
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20019c7c 	.word	0x20019c7c
 80073f4:	a0000140 	.word	0xa0000140

080073f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	609a      	str	r2, [r3, #8]
 8007408:	60da      	str	r2, [r3, #12]
 800740a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800740c:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <HAL_FMC_MspInit+0x104>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d16f      	bne.n	80074f4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8007414:	4b39      	ldr	r3, [pc, #228]	; (80074fc <HAL_FMC_MspInit+0x104>)
 8007416:	2201      	movs	r2, #1
 8007418:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	603b      	str	r3, [r7, #0]
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <HAL_FMC_MspInit+0x108>)
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	4a37      	ldr	r2, [pc, #220]	; (8007500 <HAL_FMC_MspInit+0x108>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	6393      	str	r3, [r2, #56]	; 0x38
 800742a:	4b35      	ldr	r3, [pc, #212]	; (8007500 <HAL_FMC_MspInit+0x108>)
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8007436:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800743a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800743c:	2302      	movs	r3, #2
 800743e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007444:	2303      	movs	r3, #3
 8007446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007448:	230c      	movs	r3, #12
 800744a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800744c:	1d3b      	adds	r3, r7, #4
 800744e:	4619      	mov	r1, r3
 8007450:	482c      	ldr	r0, [pc, #176]	; (8007504 <HAL_FMC_MspInit+0x10c>)
 8007452:	f004 fc0d 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8007456:	2301      	movs	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745a:	2302      	movs	r3, #2
 800745c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007462:	2303      	movs	r3, #3
 8007464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007466:	230c      	movs	r3, #12
 8007468:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800746a:	1d3b      	adds	r3, r7, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4826      	ldr	r0, [pc, #152]	; (8007508 <HAL_FMC_MspInit+0x110>)
 8007470:	f004 fbfe 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8007474:	f248 1333 	movw	r3, #33075	; 0x8133
 8007478:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800747a:	2302      	movs	r3, #2
 800747c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007482:	2303      	movs	r3, #3
 8007484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007486:	230c      	movs	r3, #12
 8007488:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	4619      	mov	r1, r3
 800748e:	481f      	ldr	r0, [pc, #124]	; (800750c <HAL_FMC_MspInit+0x114>)
 8007490:	f004 fbee 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8007494:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007498:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800749a:	2302      	movs	r3, #2
 800749c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a2:	2303      	movs	r3, #3
 80074a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80074a6:	230c      	movs	r3, #12
 80074a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074aa:	1d3b      	adds	r3, r7, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	4818      	ldr	r0, [pc, #96]	; (8007510 <HAL_FMC_MspInit+0x118>)
 80074b0:	f004 fbde 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80074b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80074b8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ba:	2302      	movs	r3, #2
 80074bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074c2:	2303      	movs	r3, #3
 80074c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80074c6:	230c      	movs	r3, #12
 80074c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80074ca:	1d3b      	adds	r3, r7, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4811      	ldr	r0, [pc, #68]	; (8007514 <HAL_FMC_MspInit+0x11c>)
 80074d0:	f004 fbce 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80074d4:	2360      	movs	r3, #96	; 0x60
 80074d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d8:	2302      	movs	r3, #2
 80074da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e0:	2303      	movs	r3, #3
 80074e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80074e4:	230c      	movs	r3, #12
 80074e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074e8:	1d3b      	adds	r3, r7, #4
 80074ea:	4619      	mov	r1, r3
 80074ec:	480a      	ldr	r0, [pc, #40]	; (8007518 <HAL_FMC_MspInit+0x120>)
 80074ee:	f004 fbbf 	bl	800bc70 <HAL_GPIO_Init>
 80074f2:	e000      	b.n	80074f6 <HAL_FMC_MspInit+0xfe>
    return;
 80074f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200199bc 	.word	0x200199bc
 8007500:	40023800 	.word	0x40023800
 8007504:	40021400 	.word	0x40021400
 8007508:	40020800 	.word	0x40020800
 800750c:	40021800 	.word	0x40021800
 8007510:	40021000 	.word	0x40021000
 8007514:	40020c00 	.word	0x40020c00
 8007518:	40020400 	.word	0x40020400

0800751c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007524:	f7ff ff68 	bl	80073f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08e      	sub	sp, #56	; 0x38
 8007534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	609a      	str	r2, [r3, #8]
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	4b89      	ldr	r3, [pc, #548]	; (8007770 <MX_GPIO_Init+0x240>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754e:	4a88      	ldr	r2, [pc, #544]	; (8007770 <MX_GPIO_Init+0x240>)
 8007550:	f043 0304 	orr.w	r3, r3, #4
 8007554:	6313      	str	r3, [r2, #48]	; 0x30
 8007556:	4b86      	ldr	r3, [pc, #536]	; (8007770 <MX_GPIO_Init+0x240>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	623b      	str	r3, [r7, #32]
 8007560:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	4b82      	ldr	r3, [pc, #520]	; (8007770 <MX_GPIO_Init+0x240>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a81      	ldr	r2, [pc, #516]	; (8007770 <MX_GPIO_Init+0x240>)
 800756c:	f043 0320 	orr.w	r3, r3, #32
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b7f      	ldr	r3, [pc, #508]	; (8007770 <MX_GPIO_Init+0x240>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	4b7b      	ldr	r3, [pc, #492]	; (8007770 <MX_GPIO_Init+0x240>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a7a      	ldr	r2, [pc, #488]	; (8007770 <MX_GPIO_Init+0x240>)
 8007588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b78      	ldr	r3, [pc, #480]	; (8007770 <MX_GPIO_Init+0x240>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	4b74      	ldr	r3, [pc, #464]	; (8007770 <MX_GPIO_Init+0x240>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	4a73      	ldr	r2, [pc, #460]	; (8007770 <MX_GPIO_Init+0x240>)
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	6313      	str	r3, [r2, #48]	; 0x30
 80075aa:	4b71      	ldr	r3, [pc, #452]	; (8007770 <MX_GPIO_Init+0x240>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	4b6d      	ldr	r3, [pc, #436]	; (8007770 <MX_GPIO_Init+0x240>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4a6c      	ldr	r2, [pc, #432]	; (8007770 <MX_GPIO_Init+0x240>)
 80075c0:	f043 0302 	orr.w	r3, r3, #2
 80075c4:	6313      	str	r3, [r2, #48]	; 0x30
 80075c6:	4b6a      	ldr	r3, [pc, #424]	; (8007770 <MX_GPIO_Init+0x240>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	4b66      	ldr	r3, [pc, #408]	; (8007770 <MX_GPIO_Init+0x240>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	4a65      	ldr	r2, [pc, #404]	; (8007770 <MX_GPIO_Init+0x240>)
 80075dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e0:	6313      	str	r3, [r2, #48]	; 0x30
 80075e2:	4b63      	ldr	r3, [pc, #396]	; (8007770 <MX_GPIO_Init+0x240>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	4b5f      	ldr	r3, [pc, #380]	; (8007770 <MX_GPIO_Init+0x240>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	4a5e      	ldr	r2, [pc, #376]	; (8007770 <MX_GPIO_Init+0x240>)
 80075f8:	f043 0310 	orr.w	r3, r3, #16
 80075fc:	6313      	str	r3, [r2, #48]	; 0x30
 80075fe:	4b5c      	ldr	r3, [pc, #368]	; (8007770 <MX_GPIO_Init+0x240>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	60bb      	str	r3, [r7, #8]
 8007608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800760a:	2300      	movs	r3, #0
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	4b58      	ldr	r3, [pc, #352]	; (8007770 <MX_GPIO_Init+0x240>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	4a57      	ldr	r2, [pc, #348]	; (8007770 <MX_GPIO_Init+0x240>)
 8007614:	f043 0308 	orr.w	r3, r3, #8
 8007618:	6313      	str	r3, [r2, #48]	; 0x30
 800761a:	4b55      	ldr	r3, [pc, #340]	; (8007770 <MX_GPIO_Init+0x240>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	f003 0308 	and.w	r3, r3, #8
 8007622:	607b      	str	r3, [r7, #4]
 8007624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8007626:	2200      	movs	r2, #0
 8007628:	2116      	movs	r1, #22
 800762a:	4852      	ldr	r0, [pc, #328]	; (8007774 <MX_GPIO_Init+0x244>)
 800762c:	f004 fdec 	bl	800c208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8007630:	2200      	movs	r2, #0
 8007632:	2180      	movs	r1, #128	; 0x80
 8007634:	4850      	ldr	r0, [pc, #320]	; (8007778 <MX_GPIO_Init+0x248>)
 8007636:	f004 fde7 	bl	800c208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800763a:	2200      	movs	r2, #0
 800763c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007640:	484e      	ldr	r0, [pc, #312]	; (800777c <MX_GPIO_Init+0x24c>)
 8007642:	f004 fde1 	bl	800c208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8007646:	2200      	movs	r2, #0
 8007648:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800764c:	484c      	ldr	r0, [pc, #304]	; (8007780 <MX_GPIO_Init+0x250>)
 800764e:	f004 fddb 	bl	800c208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8007652:	2316      	movs	r3, #22
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007656:	2301      	movs	r3, #1
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765a:	2300      	movs	r3, #0
 800765c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765e:	2300      	movs	r3, #0
 8007660:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007666:	4619      	mov	r1, r3
 8007668:	4842      	ldr	r0, [pc, #264]	; (8007774 <MX_GPIO_Init+0x244>)
 800766a:	f004 fb01 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800766e:	f248 0307 	movw	r3, #32775	; 0x8007
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007674:	4b43      	ldr	r3, [pc, #268]	; (8007784 <MX_GPIO_Init+0x254>)
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800767c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007680:	4619      	mov	r1, r3
 8007682:	483d      	ldr	r0, [pc, #244]	; (8007778 <MX_GPIO_Init+0x248>)
 8007684:	f004 faf4 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8007688:	2380      	movs	r3, #128	; 0x80
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800768c:	2301      	movs	r3, #1
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007690:	2300      	movs	r3, #0
 8007692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007694:	2300      	movs	r3, #0
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8007698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800769c:	4619      	mov	r1, r3
 800769e:	4836      	ldr	r0, [pc, #216]	; (8007778 <MX_GPIO_Init+0x248>)
 80076a0:	f004 fae6 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80076a4:	2320      	movs	r3, #32
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80076a8:	4b36      	ldr	r3, [pc, #216]	; (8007784 <MX_GPIO_Init+0x254>)
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80076b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b4:	4619      	mov	r1, r3
 80076b6:	482f      	ldr	r0, [pc, #188]	; (8007774 <MX_GPIO_Init+0x244>)
 80076b8:	f004 fada 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80076bc:	2304      	movs	r3, #4
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076c0:	2300      	movs	r3, #0
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80076c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076cc:	4619      	mov	r1, r3
 80076ce:	482e      	ldr	r0, [pc, #184]	; (8007788 <MX_GPIO_Init+0x258>)
 80076d0:	f004 face 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80076d4:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076da:	2302      	movs	r3, #2
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076e2:	2300      	movs	r3, #0
 80076e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80076e6:	230c      	movs	r3, #12
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ee:	4619      	mov	r1, r3
 80076f0:	4825      	ldr	r0, [pc, #148]	; (8007788 <MX_GPIO_Init+0x258>)
 80076f2:	f004 fabd 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80076f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076fc:	2300      	movs	r3, #0
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007700:	2300      	movs	r3, #0
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8007704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007708:	4619      	mov	r1, r3
 800770a:	481f      	ldr	r0, [pc, #124]	; (8007788 <MX_GPIO_Init+0x258>)
 800770c:	f004 fab0 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8007710:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007716:	2300      	movs	r3, #0
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800771a:	2300      	movs	r3, #0
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800771e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007722:	4619      	mov	r1, r3
 8007724:	4815      	ldr	r0, [pc, #84]	; (800777c <MX_GPIO_Init+0x24c>)
 8007726:	f004 faa3 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800772a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007730:	2301      	movs	r3, #1
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007734:	2300      	movs	r3, #0
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007738:	2300      	movs	r3, #0
 800773a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800773c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007740:	4619      	mov	r1, r3
 8007742:	480e      	ldr	r0, [pc, #56]	; (800777c <MX_GPIO_Init+0x24c>)
 8007744:	f004 fa94 	bl	800bc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8007748:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800774e:	2301      	movs	r3, #1
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007752:	2300      	movs	r3, #0
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007756:	2300      	movs	r3, #0
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800775a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800775e:	4619      	mov	r1, r3
 8007760:	4807      	ldr	r0, [pc, #28]	; (8007780 <MX_GPIO_Init+0x250>)
 8007762:	f004 fa85 	bl	800bc70 <HAL_GPIO_Init>

}
 8007766:	bf00      	nop
 8007768:	3738      	adds	r7, #56	; 0x38
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40023800 	.word	0x40023800
 8007774:	40020800 	.word	0x40020800
 8007778:	40020000 	.word	0x40020000
 800777c:	40020c00 	.word	0x40020c00
 8007780:	40021800 	.word	0x40021800
 8007784:	10120000 	.word	0x10120000
 8007788:	40020400 	.word	0x40020400

0800778c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8007790:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <MX_I2C3_Init+0x74>)
 8007792:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <MX_I2C3_Init+0x78>)
 8007794:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <MX_I2C3_Init+0x74>)
 8007798:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <MX_I2C3_Init+0x7c>)
 800779a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800779c:	4b18      	ldr	r3, [pc, #96]	; (8007800 <MX_I2C3_Init+0x74>)
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80077a2:	4b17      	ldr	r3, [pc, #92]	; (8007800 <MX_I2C3_Init+0x74>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <MX_I2C3_Init+0x74>)
 80077aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077b0:	4b13      	ldr	r3, [pc, #76]	; (8007800 <MX_I2C3_Init+0x74>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <MX_I2C3_Init+0x74>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <MX_I2C3_Init+0x74>)
 80077be:	2200      	movs	r2, #0
 80077c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077c2:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <MX_I2C3_Init+0x74>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80077c8:	480d      	ldr	r0, [pc, #52]	; (8007800 <MX_I2C3_Init+0x74>)
 80077ca:	f004 fd37 	bl	800c23c <HAL_I2C_Init>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80077d4:	f000 fe26 	bl	8008424 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077d8:	2100      	movs	r1, #0
 80077da:	4809      	ldr	r0, [pc, #36]	; (8007800 <MX_I2C3_Init+0x74>)
 80077dc:	f005 fd1b 	bl	800d216 <HAL_I2CEx_ConfigAnalogFilter>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80077e6:	f000 fe1d 	bl	8008424 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80077ea:	2100      	movs	r1, #0
 80077ec:	4804      	ldr	r0, [pc, #16]	; (8007800 <MX_I2C3_Init+0x74>)
 80077ee:	f005 fd4e 	bl	800d28e <HAL_I2CEx_ConfigDigitalFilter>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80077f8:	f000 fe14 	bl	8008424 <Error_Handler>
  }

}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20019cb0 	.word	0x20019cb0
 8007804:	40005c00 	.word	0x40005c00
 8007808:	000186a0 	.word	0x000186a0

0800780c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	; 0x28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	609a      	str	r2, [r3, #8]
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a29      	ldr	r2, [pc, #164]	; (80078d0 <HAL_I2C_MspInit+0xc4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d14b      	bne.n	80078c6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	4b28      	ldr	r3, [pc, #160]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 8007838:	f043 0304 	orr.w	r3, r3, #4
 800783c:	6313      	str	r3, [r2, #48]	; 0x30
 800783e:	4b25      	ldr	r3, [pc, #148]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 8007850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007852:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 8007854:	f043 0301 	orr.w	r3, r3, #1
 8007858:	6313      	str	r3, [r2, #48]	; 0x30
 800785a:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8007866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800786c:	2312      	movs	r3, #18
 800786e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007870:	2301      	movs	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007874:	2300      	movs	r3, #0
 8007876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007878:	2304      	movs	r3, #4
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800787c:	f107 0314 	add.w	r3, r7, #20
 8007880:	4619      	mov	r1, r3
 8007882:	4815      	ldr	r0, [pc, #84]	; (80078d8 <HAL_I2C_MspInit+0xcc>)
 8007884:	f004 f9f4 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8007888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800788c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800788e:	2312      	movs	r3, #18
 8007890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007892:	2301      	movs	r3, #1
 8007894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007896:	2300      	movs	r3, #0
 8007898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800789a:	2304      	movs	r3, #4
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800789e:	f107 0314 	add.w	r3, r7, #20
 80078a2:	4619      	mov	r1, r3
 80078a4:	480d      	ldr	r0, [pc, #52]	; (80078dc <HAL_I2C_MspInit+0xd0>)
 80078a6:	f004 f9e3 	bl	800bc70 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80078aa:	2300      	movs	r3, #0
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 80078b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078b8:	6413      	str	r3, [r2, #64]	; 0x40
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_I2C_MspInit+0xc8>)
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80078c6:	bf00      	nop
 80078c8:	3728      	adds	r7, #40	; 0x28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40005c00 	.word	0x40005c00
 80078d4:	40023800 	.word	0x40023800
 80078d8:	40020800 	.word	0x40020800
 80078dc:	40020000 	.word	0x40020000

080078e0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a0b      	ldr	r2, [pc, #44]	; (800791c <HAL_I2C_MspDeInit+0x3c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10f      	bne.n	8007912 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80078f2:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <HAL_I2C_MspDeInit+0x40>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	4a0a      	ldr	r2, [pc, #40]	; (8007920 <HAL_I2C_MspDeInit+0x40>)
 80078f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078fc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 80078fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007902:	4808      	ldr	r0, [pc, #32]	; (8007924 <HAL_I2C_MspDeInit+0x44>)
 8007904:	f004 fb5e 	bl	800bfc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8007908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800790c:	4806      	ldr	r0, [pc, #24]	; (8007928 <HAL_I2C_MspDeInit+0x48>)
 800790e:	f004 fb59 	bl	800bfc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	40005c00 	.word	0x40005c00
 8007920:	40023800 	.word	0x40023800
 8007924:	40020800 	.word	0x40020800
 8007928:	40020000 	.word	0x40020000

0800792c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08e      	sub	sp, #56	; 0x38
 8007930:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007932:	1d3b      	adds	r3, r7, #4
 8007934:	2234      	movs	r2, #52	; 0x34
 8007936:	2100      	movs	r1, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f008 fec7 	bl	80106cc <memset>

  hltdc.Instance = LTDC;
 800793e:	4b39      	ldr	r3, [pc, #228]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007940:	4a39      	ldr	r2, [pc, #228]	; (8007a28 <MX_LTDC_Init+0xfc>)
 8007942:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007944:	4b37      	ldr	r3, [pc, #220]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007946:	2200      	movs	r2, #0
 8007948:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800794a:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <MX_LTDC_Init+0xf8>)
 800794c:	2200      	movs	r2, #0
 800794e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007950:	4b34      	ldr	r3, [pc, #208]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007952:	2200      	movs	r2, #0
 8007954:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007956:	4b33      	ldr	r3, [pc, #204]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007958:	2200      	movs	r2, #0
 800795a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800795c:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <MX_LTDC_Init+0xf8>)
 800795e:	2209      	movs	r2, #9
 8007960:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8007962:	4b30      	ldr	r3, [pc, #192]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007964:	2201      	movs	r2, #1
 8007966:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8007968:	4b2e      	ldr	r3, [pc, #184]	; (8007a24 <MX_LTDC_Init+0xf8>)
 800796a:	221d      	movs	r2, #29
 800796c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800796e:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007970:	2203      	movs	r2, #3
 8007972:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8007974:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007976:	f240 120d 	movw	r2, #269	; 0x10d
 800797a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800797c:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <MX_LTDC_Init+0xf8>)
 800797e:	f240 1243 	movw	r2, #323	; 0x143
 8007982:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007986:	f240 1217 	movw	r2, #279	; 0x117
 800798a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <MX_LTDC_Init+0xf8>)
 800798e:	f240 1247 	movw	r2, #327	; 0x147
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007994:	4b23      	ldr	r3, [pc, #140]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800799c:	4b21      	ldr	r3, [pc, #132]	; (8007a24 <MX_LTDC_Init+0xf8>)
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80079a4:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <MX_LTDC_Init+0xf8>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80079ac:	481d      	ldr	r0, [pc, #116]	; (8007a24 <MX_LTDC_Init+0xf8>)
 80079ae:	f005 fcad 	bl	800d30c <HAL_LTDC_Init>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80079b8:	f000 fd34 	bl	8008424 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80079c0:	23f0      	movs	r3, #240	; 0xf0
 80079c2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80079c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80079cc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80079ce:	2302      	movs	r3, #2
 80079d0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80079d2:	23ff      	movs	r3, #255	; 0xff
 80079d4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80079da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80079de:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80079e0:	2307      	movs	r3, #7
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80079e4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80079e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80079ea:	23f0      	movs	r3, #240	; 0xf0
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80079ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80079f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007a06:	1d3b      	adds	r3, r7, #4
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4805      	ldr	r0, [pc, #20]	; (8007a24 <MX_LTDC_Init+0xf8>)
 8007a0e:	f005 fd4d 	bl	800d4ac <HAL_LTDC_ConfigLayer>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007a18:	f000 fd04 	bl	8008424 <Error_Handler>
  }

}
 8007a1c:	bf00      	nop
 8007a1e:	3738      	adds	r7, #56	; 0x38
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20019d04 	.word	0x20019d04
 8007a28:	40016800 	.word	0x40016800

08007a2c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08e      	sub	sp, #56	; 0x38
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
 8007a3e:	609a      	str	r2, [r3, #8]
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a77      	ldr	r2, [pc, #476]	; (8007c28 <HAL_LTDC_MspInit+0x1fc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	f040 80e8 	bne.w	8007c20 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007a50:	2300      	movs	r3, #0
 8007a52:	623b      	str	r3, [r7, #32]
 8007a54:	4b75      	ldr	r3, [pc, #468]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	4a74      	ldr	r2, [pc, #464]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8007a60:	4b72      	ldr	r3, [pc, #456]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a68:	623b      	str	r3, [r7, #32]
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	4b6e      	ldr	r3, [pc, #440]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	4a6d      	ldr	r2, [pc, #436]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a76:	f043 0320 	orr.w	r3, r3, #32
 8007a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8007a7c:	4b6b      	ldr	r3, [pc, #428]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	4b67      	ldr	r3, [pc, #412]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	4a66      	ldr	r2, [pc, #408]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6313      	str	r3, [r2, #48]	; 0x30
 8007a98:	4b64      	ldr	r3, [pc, #400]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	61bb      	str	r3, [r7, #24]
 8007aa2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	4b60      	ldr	r3, [pc, #384]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	4a5f      	ldr	r2, [pc, #380]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ab4:	4b5d      	ldr	r3, [pc, #372]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	4b59      	ldr	r3, [pc, #356]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	4a58      	ldr	r2, [pc, #352]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ace:	6313      	str	r3, [r2, #48]	; 0x30
 8007ad0:	4b56      	ldr	r3, [pc, #344]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	4b52      	ldr	r3, [pc, #328]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	4a51      	ldr	r2, [pc, #324]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007ae6:	f043 0304 	orr.w	r3, r3, #4
 8007aea:	6313      	str	r3, [r2, #48]	; 0x30
 8007aec:	4b4f      	ldr	r3, [pc, #316]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007af8:	2300      	movs	r3, #0
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	4b4b      	ldr	r3, [pc, #300]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	4a4a      	ldr	r2, [pc, #296]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007b02:	f043 0308 	orr.w	r3, r3, #8
 8007b06:	6313      	str	r3, [r2, #48]	; 0x30
 8007b08:	4b48      	ldr	r3, [pc, #288]	; (8007c2c <HAL_LTDC_MspInit+0x200>)
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8007b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b22:	2300      	movs	r3, #0
 8007b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007b26:	230e      	movs	r3, #14
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b2e:	4619      	mov	r1, r3
 8007b30:	483f      	ldr	r0, [pc, #252]	; (8007c30 <HAL_LTDC_MspInit+0x204>)
 8007b32:	f004 f89d 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8007b36:	f641 0358 	movw	r3, #6232	; 0x1858
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b44:	2300      	movs	r3, #0
 8007b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007b48:	230e      	movs	r3, #14
 8007b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b50:	4619      	mov	r1, r3
 8007b52:	4838      	ldr	r0, [pc, #224]	; (8007c34 <HAL_LTDC_MspInit+0x208>)
 8007b54:	f004 f88c 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b64:	2300      	movs	r3, #0
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007b68:	2309      	movs	r3, #9
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b70:	4619      	mov	r1, r3
 8007b72:	4831      	ldr	r0, [pc, #196]	; (8007c38 <HAL_LTDC_MspInit+0x20c>)
 8007b74:	f004 f87c 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8007b78:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b86:	2300      	movs	r3, #0
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007b8a:	230e      	movs	r3, #14
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b92:	4619      	mov	r1, r3
 8007b94:	4828      	ldr	r0, [pc, #160]	; (8007c38 <HAL_LTDC_MspInit+0x20c>)
 8007b96:	f004 f86b 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8007b9a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007bac:	230e      	movs	r3, #14
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4821      	ldr	r0, [pc, #132]	; (8007c3c <HAL_LTDC_MspInit+0x210>)
 8007bb8:	f004 f85a 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8007bbc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007bce:	230e      	movs	r3, #14
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4819      	ldr	r0, [pc, #100]	; (8007c40 <HAL_LTDC_MspInit+0x214>)
 8007bda:	f004 f849 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8007bde:	2348      	movs	r3, #72	; 0x48
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007be2:	2302      	movs	r3, #2
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bea:	2300      	movs	r3, #0
 8007bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007bee:	230e      	movs	r3, #14
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4812      	ldr	r0, [pc, #72]	; (8007c44 <HAL_LTDC_MspInit+0x218>)
 8007bfa:	f004 f839 	bl	800bc70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8007bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c04:	2302      	movs	r3, #2
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007c10:	2309      	movs	r3, #9
 8007c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4808      	ldr	r0, [pc, #32]	; (8007c3c <HAL_LTDC_MspInit+0x210>)
 8007c1c:	f004 f828 	bl	800bc70 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007c20:	bf00      	nop
 8007c22:	3738      	adds	r7, #56	; 0x38
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40016800 	.word	0x40016800
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	40021400 	.word	0x40021400
 8007c34:	40020000 	.word	0x40020000
 8007c38:	40020400 	.word	0x40020400
 8007c3c:	40021800 	.word	0x40021800
 8007c40:	40020800 	.word	0x40020800
 8007c44:	40020c00 	.word	0x40020c00

08007c48 <main>:

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred);


int main(void)
{
 8007c48:	b5b0      	push	{r4, r5, r7, lr}
 8007c4a:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
 8007c4e:	af00      	add	r7, sp, #0

  HAL_Init();
 8007c50:	f003 fa64 	bl	800b11c <HAL_Init>

  SystemClock_Config();
 8007c54:	f000 fb52 	bl	80082fc <SystemClock_Config>
   freq =  HAL_RCC_GetHCLKFreq();
 8007c58:	f006 fad4 	bl	800e204 <HAL_RCC_GetHCLKFreq>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4bc4      	ldr	r3, [pc, #784]	; (8007f74 <main+0x32c>)
 8007c62:	601a      	str	r2, [r3, #0]

  MX_GPIO_Init();
 8007c64:	f7ff fc64 	bl	8007530 <MX_GPIO_Init>
  MX_CRC_Init();
 8007c68:	f7ff faec 	bl	8007244 <MX_CRC_Init>
  MX_DMA2D_Init();
 8007c6c:	f7ff fb20 	bl	80072b0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007c70:	f7ff fb72 	bl	8007358 <MX_FMC_Init>
  MX_I2C3_Init();
 8007c74:	f7ff fd8a 	bl	800778c <MX_I2C3_Init>
  MX_LTDC_Init();
 8007c78:	f7ff fe58 	bl	800792c <MX_LTDC_Init>
  MX_SPI5_Init();
 8007c7c:	f000 fd72 	bl	8008764 <MX_SPI5_Init>
  MX_TIM1_Init();
 8007c80:	f000 ff3e 	bl	8008b00 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007c84:	f000 ffae 	bl	8008be4 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8007c88:	f7ff fac4 	bl	8007214 <MX_X_CUBE_AI_Init>

  BSP_PB_Init(BUTTON_KEY,0);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f001 fc40 	bl	8009514 <BSP_PB_Init>
  touch_sensor_init();
 8007c94:	f000 fa9e 	bl	80081d4 <touch_sensor_init>


  user_interface_init();
 8007c98:	f000 fab0 	bl	80081fc <user_interface_init>
  user_interface_reset();
 8007c9c:	f000 fae0 	bl	8008260 <user_interface_reset>

  ai_float nn_input_data[NN_INPUT_IMAGE_HEIGHT][NN_INPUT_IMAGE_WIDTH];
  ai_float nn_output_data[NUM_CLASSES];

  pred_probType _1st_pred, _2nd_pred;
  _1st_pred.prob = _2nd_pred.prob =0.0;
 8007ca0:	f107 030c 	add.w	r3, r7, #12
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	f107 030c 	add.w	r3, r7, #12
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	601a      	str	r2, [r3, #0]


    while (1)
    {

     BSP_TS_GetState(&ui_state);
 8007cb6:	48b0      	ldr	r0, [pc, #704]	; (8007f78 <main+0x330>)
 8007cb8:	f003 f968 	bl	800af8c <BSP_TS_GetState>

     if(ui_state.TouchDetected){
 8007cbc:	4bae      	ldr	r3, [pc, #696]	; (8007f78 <main+0x330>)
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 817e 	beq.w	8007fc2 <main+0x37a>

      if((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2) && (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2))
 8007cc6:	4bac      	ldr	r3, [pc, #688]	; (8007f78 <main+0x330>)
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	2b0a      	cmp	r3, #10
 8007ccc:	f240 815c 	bls.w	8007f88 <main+0x340>
 8007cd0:	4ba9      	ldr	r3, [pc, #676]	; (8007f78 <main+0x330>)
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	2be5      	cmp	r3, #229	; 0xe5
 8007cd6:	f200 8157 	bhi.w	8007f88 <main+0x340>
 8007cda:	4ba7      	ldr	r3, [pc, #668]	; (8007f78 <main+0x330>)
 8007cdc:	889b      	ldrh	r3, [r3, #4]
 8007cde:	2b0a      	cmp	r3, #10
 8007ce0:	f240 8152 	bls.w	8007f88 <main+0x340>
 8007ce4:	4ba4      	ldr	r3, [pc, #656]	; (8007f78 <main+0x330>)
 8007ce6:	889b      	ldrh	r3, [r3, #4]
 8007ce8:	2be5      	cmp	r3, #229	; 0xe5
 8007cea:	f200 814d 	bhi.w	8007f88 <main+0x340>
      {
  	   BSP_LCD_FillCircle(ui_state.X,ui_state.Y,5);
 8007cee:	4ba2      	ldr	r3, [pc, #648]	; (8007f78 <main+0x330>)
 8007cf0:	8858      	ldrh	r0, [r3, #2]
 8007cf2:	4ba1      	ldr	r3, [pc, #644]	; (8007f78 <main+0x330>)
 8007cf4:	889b      	ldrh	r3, [r3, #4]
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f002 fca5 	bl	800a648 <BSP_LCD_FillCircle>

  	   int x  = ui_state.Y*((float)28/240);
 8007cfe:	4b9e      	ldr	r3, [pc, #632]	; (8007f78 <main+0x330>)
 8007d00:	889b      	ldrh	r3, [r3, #4]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d0a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8007f7c <main+0x334>
 8007d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d16:	ee17 3a90 	vmov	r3, s15
 8007d1a:	f8c7 3c88 	str.w	r3, [r7, #3208]	; 0xc88
  	   int y  = ui_state.X*((float)28/240);
 8007d1e:	4b96      	ldr	r3, [pc, #600]	; (8007f78 <main+0x330>)
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d2a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8007f7c <main+0x334>
 8007d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d36:	ee17 3a90 	vmov	r3, s15
 8007d3a:	f8c7 3c84 	str.w	r3, [r7, #3204]	; 0xc84

  	   BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1,255);
 8007d3e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	33c9      	adds	r3, #201	; 0xc9
 8007d46:	b298      	uxth	r0, r3
 8007d48:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	33fb      	adds	r3, #251	; 0xfb
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	22ff      	movs	r2, #255	; 0xff
 8007d54:	4619      	mov	r1, r3
 8007d56:	f002 fdfd 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1,255);
 8007d5a:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	33c7      	adds	r3, #199	; 0xc7
 8007d62:	b298      	uxth	r0, r3
 8007d64:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	33f9      	adds	r3, #249	; 0xf9
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	22ff      	movs	r2, #255	; 0xff
 8007d70:	4619      	mov	r1, r3
 8007d72:	f002 fdef 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x,255);
 8007d76:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	33c9      	adds	r3, #201	; 0xc9
 8007d7e:	b298      	uxth	r0, r3
 8007d80:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	33fa      	adds	r3, #250	; 0xfa
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	22ff      	movs	r2, #255	; 0xff
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f002 fde1 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y-1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x,255);
 8007d92:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	33c7      	adds	r3, #199	; 0xc7
 8007d9a:	b298      	uxth	r0, r3
 8007d9c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	33fa      	adds	r3, #250	; 0xfa
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	22ff      	movs	r2, #255	; 0xff
 8007da8:	4619      	mov	r1, r3
 8007daa:	f002 fdd3 	bl	800a954 <BSP_LCD_DrawPixel>

  	   BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x,255);
 8007dae:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	33c8      	adds	r3, #200	; 0xc8
 8007db6:	b298      	uxth	r0, r3
 8007db8:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	33fa      	adds	r3, #250	; 0xfa
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	22ff      	movs	r2, #255	; 0xff
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	f002 fdc5 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1,255);
 8007dca:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	33c8      	adds	r3, #200	; 0xc8
 8007dd2:	b298      	uxth	r0, r3
 8007dd4:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	33fb      	adds	r3, #251	; 0xfb
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	22ff      	movs	r2, #255	; 0xff
 8007de0:	4619      	mov	r1, r3
 8007de2:	f002 fdb7 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1,255);
 8007de6:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	33c8      	adds	r3, #200	; 0xc8
 8007dee:	b298      	uxth	r0, r3
 8007df0:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	33f9      	adds	r3, #249	; 0xf9
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	22ff      	movs	r2, #255	; 0xff
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f002 fda9 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y+1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x-1,255);
 8007e02:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	33c9      	adds	r3, #201	; 0xc9
 8007e0a:	b298      	uxth	r0, r3
 8007e0c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	33f9      	adds	r3, #249	; 0xf9
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	22ff      	movs	r2, #255	; 0xff
 8007e18:	4619      	mov	r1, r3
 8007e1a:	f002 fd9b 	bl	800a954 <BSP_LCD_DrawPixel>
  	   BSP_LCD_DrawPixel(y-1+ IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT+x+1,255);
 8007e1e:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	33c7      	adds	r3, #199	; 0xc7
 8007e26:	b298      	uxth	r0, r3
 8007e28:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	33fb      	adds	r3, #251	; 0xfb
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	22ff      	movs	r2, #255	; 0xff
 8007e34:	4619      	mov	r1, r3
 8007e36:	f002 fd8d 	bl	800a954 <BSP_LCD_DrawPixel>

  	  nn_input_data[x+1][y+1] = PXL_SET;
 8007e3a:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e44:	1c58      	adds	r0, r3, #1
 8007e46:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4403      	add	r3, r0
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	4a49      	ldr	r2, [pc, #292]	; (8007f80 <main+0x338>)
 8007e5a:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x-1][y-1] = PXL_SET;
 8007e5c:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e60:	1e5a      	subs	r2, r3, #1
 8007e62:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007e66:	1e58      	subs	r0, r3, #1
 8007e68:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4403      	add	r3, r0
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	4a41      	ldr	r2, [pc, #260]	; (8007f80 <main+0x338>)
 8007e7c:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x+1][y]   = PXL_SET;
 8007e7e:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007e88:	4613      	mov	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	4a39      	ldr	r2, [pc, #228]	; (8007f80 <main+0x338>)
 8007e9c:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x-1][y]   = PXL_SET;
 8007e9e:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007ea2:	1e5a      	subs	r2, r3, #1
 8007ea4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	4a31      	ldr	r2, [pc, #196]	; (8007f80 <main+0x338>)
 8007ebc:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x][y+1]   = PXL_SET;
 8007ebe:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007ec2:	1c58      	adds	r0, r3, #1
 8007ec4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007ec8:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007ecc:	4613      	mov	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4403      	add	r3, r0
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	4a29      	ldr	r2, [pc, #164]	; (8007f80 <main+0x338>)
 8007edc:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x][y-1]   = PXL_SET;
 8007ede:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007ee2:	1e58      	subs	r0, r3, #1
 8007ee4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007ee8:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007eec:	4613      	mov	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4403      	add	r3, r0
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	440b      	add	r3, r1
 8007efa:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <main+0x338>)
 8007efc:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x+1][y-1] = PXL_SET;
 8007efe:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007f08:	1e58      	subs	r0, r3, #1
 8007f0a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4403      	add	r3, r0
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	4a18      	ldr	r2, [pc, #96]	; (8007f80 <main+0x338>)
 8007f1e:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x-1][y+1] = PXL_SET;
 8007f20:	f8d7 3c88 	ldr.w	r3, [r7, #3208]	; 0xc88
 8007f24:	1e5a      	subs	r2, r3, #1
 8007f26:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8007f2a:	1c58      	adds	r0, r3, #1
 8007f2c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007f30:	4613      	mov	r3, r2
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	1a9b      	subs	r3, r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4403      	add	r3, r0
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	4a10      	ldr	r2, [pc, #64]	; (8007f80 <main+0x338>)
 8007f40:	601a      	str	r2, [r3, #0]
  	  nn_input_data[x][y]     = PXL_SET;
 8007f42:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8007f46:	f8d7 2c88 	ldr.w	r2, [r7, #3208]	; 0xc88
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	f8d7 2c84 	ldr.w	r2, [r7, #3204]	; 0xc84
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <main+0x338>)
 8007f5e:	601a      	str	r2, [r3, #0]

  	 printf("X =%d Y=%d\r\n", ui_state.X,ui_state.Y);
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <main+0x330>)
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	4619      	mov	r1, r3
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <main+0x330>)
 8007f68:	889b      	ldrh	r3, [r3, #4]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4805      	ldr	r0, [pc, #20]	; (8007f84 <main+0x33c>)
 8007f6e:	f009 f9f3 	bl	8011358 <iprintf>
      {
 8007f72:	e026      	b.n	8007fc2 <main+0x37a>
 8007f74:	20019db4 	.word	0x20019db4
 8007f78:	20019dac 	.word	0x20019dac
 8007f7c:	3deeeeef 	.word	0x3deeeeef
 8007f80:	3f7d70a4 	.word	0x3f7d70a4
 8007f84:	0801803c 	.word	0x0801803c


      }

      else if((ui_state.X  > ERASE_BUTTON_X1 && ui_state.X <ERASE_BUTTON_X2)  && (ui_state.Y >ERASE_BUTTON_Y1 && ui_state.Y < ERASE_BUTTON_Y2) )
 8007f88:	4b68      	ldr	r3, [pc, #416]	; (800812c <main+0x4e4>)
 8007f8a:	885b      	ldrh	r3, [r3, #2]
 8007f8c:	2b05      	cmp	r3, #5
 8007f8e:	d918      	bls.n	8007fc2 <main+0x37a>
 8007f90:	4b66      	ldr	r3, [pc, #408]	; (800812c <main+0x4e4>)
 8007f92:	885b      	ldrh	r3, [r3, #2]
 8007f94:	2bea      	cmp	r3, #234	; 0xea
 8007f96:	d814      	bhi.n	8007fc2 <main+0x37a>
 8007f98:	4b64      	ldr	r3, [pc, #400]	; (800812c <main+0x4e4>)
 8007f9a:	889b      	ldrh	r3, [r3, #4]
 8007f9c:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8007fa0:	d30f      	bcc.n	8007fc2 <main+0x37a>
 8007fa2:	4b62      	ldr	r3, [pc, #392]	; (800812c <main+0x4e4>)
 8007fa4:	889b      	ldrh	r3, [r3, #4]
 8007fa6:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007faa:	d80a      	bhi.n	8007fc2 <main+0x37a>
      {
    	  user_interface_reset();
 8007fac:	f000 f958 	bl	8008260 <user_interface_reset>
    	  mnist_game_reset(&nn_input_data, &_1st_pred,&_2nd_pred);
 8007fb0:	f107 020c 	add.w	r2, r7, #12
 8007fb4:	f107 0114 	add.w	r1, r7, #20
 8007fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f8c1 	bl	8008144 <mnist_game_reset>

      }
     }
    HAL_Delay(1);
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	f003 f8ec 	bl	800b1a0 <HAL_Delay>

     if(BSP_PB_GetState(BUTTON_KEY)){
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f001 fafb 	bl	80095c4 <BSP_PB_GetState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f43f ae70 	beq.w	8007cb6 <main+0x6e>


      MX_X_CUBE_AI_Process(nn_input_data,nn_output_data);
 8007fd6:	f107 021c 	add.w	r2, r7, #28
 8007fda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff f921 	bl	8007228 <MX_X_CUBE_AI_Process>

      for(int i =0;i<NUM_CLASSES;i++){
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8007fec:	e053      	b.n	8008096 <main+0x44e>

    	  if(_1st_pred.prob  < nn_output_data[i]){
 8007fee:	f107 0314 	add.w	r3, r7, #20
 8007ff2:	ed93 7a00 	vldr	s14, [r3]
 8007ff6:	f107 021c 	add.w	r2, r7, #28
 8007ffa:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	edd3 7a00 	vldr	s15, [r3]
 8008006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800e:	d51c      	bpl.n	800804a <main+0x402>
    		  _2nd_pred.label = _1st_pred.label;
 8008010:	f107 0314 	add.w	r3, r7, #20
 8008014:	791a      	ldrb	r2, [r3, #4]
 8008016:	f107 030c 	add.w	r3, r7, #12
 800801a:	711a      	strb	r2, [r3, #4]
    		  _2nd_pred.prob  = _1st_pred.prob;
 800801c:	f107 0314 	add.w	r3, r7, #20
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	f107 030c 	add.w	r3, r7, #12
 8008026:	601a      	str	r2, [r3, #0]
    		  _1st_pred.prob  = nn_output_data[i];
 8008028:	f107 021c 	add.w	r2, r7, #28
 800802c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	f107 0314 	add.w	r3, r7, #20
 800803a:	601a      	str	r2, [r3, #0]
    		  _1st_pred.label =i;
 800803c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008040:	b2da      	uxtb	r2, r3
 8008042:	f107 0314 	add.w	r3, r7, #20
 8008046:	711a      	strb	r2, [r3, #4]
 8008048:	e020      	b.n	800808c <main+0x444>

         }
    	  else if(_2nd_pred.prob < nn_output_data[i]){
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	ed93 7a00 	vldr	s14, [r3]
 8008052:	f107 021c 	add.w	r2, r7, #28
 8008056:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	edd3 7a00 	vldr	s15, [r3]
 8008062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806a:	d50f      	bpl.n	800808c <main+0x444>
    		  _2nd_pred.label = i;
 800806c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008070:	b2da      	uxtb	r2, r3
 8008072:	f107 030c 	add.w	r3, r7, #12
 8008076:	711a      	strb	r2, [r3, #4]
    		  _2nd_pred.prob =  nn_output_data[i];
 8008078:	f107 021c 	add.w	r2, r7, #28
 800807c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	f107 030c 	add.w	r3, r7, #12
 800808a:	601a      	str	r2, [r3, #0]
      for(int i =0;i<NUM_CLASSES;i++){
 800808c:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8008090:	3301      	adds	r3, #1
 8008092:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8008096:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 800809a:	2b09      	cmp	r3, #9
 800809c:	dda7      	ble.n	8007fee <main+0x3a6>
    	  }
      }

	  printf("  AI First Guess %d  %f \n\r",_1st_pred.label,_1st_pred.prob);
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	791b      	ldrb	r3, [r3, #4]
 80080a4:	461d      	mov	r5, r3
 80080a6:	f107 0314 	add.w	r3, r7, #20
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe fac3 	bl	8006638 <__aeabi_f2d>
 80080b2:	4603      	mov	r3, r0
 80080b4:	460c      	mov	r4, r1
 80080b6:	461a      	mov	r2, r3
 80080b8:	4623      	mov	r3, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	481c      	ldr	r0, [pc, #112]	; (8008130 <main+0x4e8>)
 80080be:	f009 f94b 	bl	8011358 <iprintf>
	  printf("  AI Second Guess %d  %f \n\r",_2nd_pred.label,_2nd_pred.prob);
 80080c2:	f107 030c 	add.w	r3, r7, #12
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	461d      	mov	r5, r3
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fab1 	bl	8006638 <__aeabi_f2d>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4623      	mov	r3, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	4814      	ldr	r0, [pc, #80]	; (8008134 <main+0x4ec>)
 80080e2:	f009 f939 	bl	8011358 <iprintf>

	  sprintf(_1st_pred_str,"%d",_1st_pred.label);
 80080e6:	f107 0314 	add.w	r3, r7, #20
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	461a      	mov	r2, r3
 80080ee:	463b      	mov	r3, r7
 80080f0:	4911      	ldr	r1, [pc, #68]	; (8008138 <main+0x4f0>)
 80080f2:	4618      	mov	r0, r3
 80080f4:	f009 f9b2 	bl	801145c <siprintf>

	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80080f8:	4810      	ldr	r0, [pc, #64]	; (800813c <main+0x4f4>)
 80080fa:	f001 ff37 	bl	8009f6c <BSP_LCD_SetTextColor>
	  BSP_LCD_SetFont(&Font20);
 80080fe:	4810      	ldr	r0, [pc, #64]	; (8008140 <main+0x4f8>)
 8008100:	f001 ff66 	bl	8009fd0 <BSP_LCD_SetFont>
	  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8008104:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008108:	f001 ff48 	bl	8009f9c <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(130,255,(uint8_t *)_1st_pred_str,LEFT_MODE);
 800810c:	463a      	mov	r2, r7
 800810e:	2303      	movs	r3, #3
 8008110:	21ff      	movs	r1, #255	; 0xff
 8008112:	2082      	movs	r0, #130	; 0x82
 8008114:	f001 ffe2 	bl	800a0dc <BSP_LCD_DisplayStringAt>


	  mnist_game_reset(&nn_input_data, &_1st_pred,&_2nd_pred);
 8008118:	f107 020c 	add.w	r2, r7, #12
 800811c:	f107 0114 	add.w	r1, r7, #20
 8008120:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f80d 	bl	8008144 <mnist_game_reset>
     BSP_TS_GetState(&ui_state);
 800812a:	e5c4      	b.n	8007cb6 <main+0x6e>
 800812c:	20019dac 	.word	0x20019dac
 8008130:	0801804c 	.word	0x0801804c
 8008134:	08018068 	.word	0x08018068
 8008138:	08018084 	.word	0x08018084
 800813c:	ffff0000 	.word	0xffff0000
 8008140:	200008a8 	.word	0x200008a8

08008144 <mnist_game_reset>:


   }
}

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred){
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]

	memset(in_data,0.0,sizeof(in_data[0][0])*NN_INPUT_IMAGE_WIDTH *NN_INPUT_IMAGE_HEIGHT);
 8008150:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f008 fab8 	bl	80106cc <memset>
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob  =0.0;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	711a      	strb	r2, [r3, #4]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	edc3 7a00 	vstr	s15, [r3]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	edd3 7a00 	vldr	s15, [r3]
 8008182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008186:	edc7 7a00 	vstr	s15, [r7]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	b2da      	uxtb	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	711a      	strb	r2, [r3, #4]
}
 8008192:	bf00      	nop
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <_write>:

int _write(int fd, const void *buff, int c){
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]

	 HAL_StatusTypeDef st;

	 st =  HAL_UART_Transmit(&huart1,(uint8_t *)buff,c,HAL_MAX_DELAY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f04f 33ff 	mov.w	r3, #4294967295
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	4807      	ldr	r0, [pc, #28]	; (80081d0 <_write+0x34>)
 80081b4:	f007 fca1 	bl	800fafa <HAL_UART_Transmit>
 80081b8:	4603      	mov	r3, r0
 80081ba:	75fb      	strb	r3, [r7, #23]
	 return (st == HAL_OK ? c :0);
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <_write+0x2a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	e000      	b.n	80081c8 <_write+0x2c>
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20019e94 	.word	0x20019e94

080081d4 <touch_sensor_init>:

void touch_sensor_init(){
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
if(BSP_TS_Init(240,320) == TS_ERROR){
 80081d8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081dc:	20f0      	movs	r0, #240	; 0xf0
 80081de:	f002 fe9b 	bl	800af18 <BSP_TS_Init>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d102      	bne.n	80081ee <touch_sensor_init+0x1a>
	printf("Touch sensor failure\r\n");
 80081e8:	4803      	ldr	r0, [pc, #12]	; (80081f8 <touch_sensor_init+0x24>)
 80081ea:	f009 f929 	bl	8011440 <puts>
 }
  HAL_Delay(100);
 80081ee:	2064      	movs	r0, #100	; 0x64
 80081f0:	f002 ffd6 	bl	800b1a0 <HAL_Delay>
}
 80081f4:	bf00      	nop
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	08018088 	.word	0x08018088

080081fc <user_interface_init>:
void user_interface_init(void){
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 8008200:	f001 fd6c 	bl	8009cdc <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER_LAYER1);
 8008204:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008208:	2001      	movs	r0, #1
 800820a:	f001 fde9 	bl	8009de0 <BSP_LCD_LayerDefaultInit>

  BSP_LCD_SelectLayer(1);
 800820e:	2001      	movs	r0, #1
 8008210:	f001 fe4a 	bl	8009ea8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8008214:	480f      	ldr	r0, [pc, #60]	; (8008254 <user_interface_init+0x58>)
 8008216:	f001 fef5 	bl	800a004 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1,LCD_COLOR_DARKCYAN);
 800821a:	490f      	ldr	r1, [pc, #60]	; (8008258 <user_interface_init+0x5c>)
 800821c:	2001      	movs	r0, #1
 800821e:	f001 fe91 	bl	8009f44 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1,DISABLE);
 8008222:	2100      	movs	r1, #0
 8008224:	2001      	movs	r0, #1
 8008226:	f001 fe4f 	bl	8009ec8 <BSP_LCD_SetLayerVisible>

  BSP_LCD_LayerDefaultInit(0,LCD_FRAME_BUFFER_LAYER0);
 800822a:	490c      	ldr	r1, [pc, #48]	; (800825c <user_interface_init+0x60>)
 800822c:	2000      	movs	r0, #0
 800822e:	f001 fdd7 	bl	8009de0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8008232:	2000      	movs	r0, #0
 8008234:	f001 fe38 	bl	8009ea8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8008238:	f002 faa6 	bl	800a788 <BSP_LCD_DisplayOn>
  HAL_Delay(150);
 800823c:	2096      	movs	r0, #150	; 0x96
 800823e:	f002 ffaf 	bl	800b1a0 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8008242:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008246:	f001 fedd 	bl	800a004 <BSP_LCD_Clear>
  HAL_Delay(100);
 800824a:	2064      	movs	r0, #100	; 0x64
 800824c:	f002 ffa8 	bl	800b1a0 <HAL_Delay>

}
 8008250:	bf00      	nop
 8008252:	bd80      	pop	{r7, pc}
 8008254:	ffff0000 	.word	0xffff0000
 8008258:	ff008080 	.word	0xff008080
 800825c:	d0130000 	.word	0xd0130000

08008260 <user_interface_reset>:


void user_interface_reset(){
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8008264:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8008268:	f001 fecc 	bl	800a004 <BSP_LCD_Clear>
  //NOTE COLOR CHANGED FROM DARKYELLOW TO BLACK
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800826c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008270:	f001 fe7c 	bl	8009f6c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 8008274:	481d      	ldr	r0, [pc, #116]	; (80082ec <user_interface_reset+0x8c>)
 8008276:	f001 feab 	bl	8009fd0 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 800827a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800827e:	f001 fe8d 	bl	8009f9c <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(5,255,(uint8_t*) "AI  Guess:", LEFT_MODE);
 8008282:	2303      	movs	r3, #3
 8008284:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <user_interface_reset+0x90>)
 8008286:	21ff      	movs	r1, #255	; 0xff
 8008288:	2005      	movs	r0, #5
 800828a:	f001 ff27 	bl	800a0dc <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(200,250,28,28);
 800828e:	231c      	movs	r3, #28
 8008290:	221c      	movs	r2, #28
 8008292:	21fa      	movs	r1, #250	; 0xfa
 8008294:	20c8      	movs	r0, #200	; 0xc8
 8008296:	f002 f85b 	bl	800a350 <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800829a:	4816      	ldr	r0, [pc, #88]	; (80082f4 <user_interface_reset+0x94>)
 800829c:	f001 fe66 	bl	8009f6c <BSP_LCD_SetTextColor>

  BSP_LCD_FillRect(5,285,230,30);
 80082a0:	231e      	movs	r3, #30
 80082a2:	22e6      	movs	r2, #230	; 0xe6
 80082a4:	f240 111d 	movw	r1, #285	; 0x11d
 80082a8:	2005      	movs	r0, #5
 80082aa:	f002 f973 	bl	800a594 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	f001 fe5b 	bl	8009f6c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font16);
 80082b6:	480d      	ldr	r0, [pc, #52]	; (80082ec <user_interface_reset+0x8c>)
 80082b8:	f001 fe8a 	bl	8009fd0 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80082bc:	480d      	ldr	r0, [pc, #52]	; (80082f4 <user_interface_reset+0x94>)
 80082be:	f001 fe6d 	bl	8009f9c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(330,291,(uint8_t*) "ERASE", LEFT_MODE);
 80082c2:	2303      	movs	r3, #3
 80082c4:	4a0c      	ldr	r2, [pc, #48]	; (80082f8 <user_interface_reset+0x98>)
 80082c6:	f240 1123 	movw	r1, #291	; 0x123
 80082ca:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80082ce:	f001 ff05 	bl	800a0dc <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(2,2,237,237);
 80082d2:	23ed      	movs	r3, #237	; 0xed
 80082d4:	22ed      	movs	r2, #237	; 0xed
 80082d6:	2102      	movs	r1, #2
 80082d8:	2002      	movs	r0, #2
 80082da:	f002 f839 	bl	800a350 <BSP_LCD_DrawRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80082de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80082e2:	f001 fe43 	bl	8009f6c <BSP_LCD_SetTextColor>
}
 80082e6:	bf00      	nop
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200008b0 	.word	0x200008b0
 80082f0:	080180a0 	.word	0x080180a0
 80082f4:	ff0000ff 	.word	0xff0000ff
 80082f8:	080180ac 	.word	0x080180ac

080082fc <SystemClock_Config>:

void SystemClock_Config(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b0a0      	sub	sp, #128	; 0x80
 8008300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008306:	2230      	movs	r2, #48	; 0x30
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f008 f9de 	bl	80106cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008310:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	605a      	str	r2, [r3, #4]
 800831a:	609a      	str	r2, [r3, #8]
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008320:	f107 030c 	add.w	r3, r7, #12
 8008324:	2230      	movs	r2, #48	; 0x30
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f008 f9cf 	bl	80106cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800832e:	2300      	movs	r3, #0
 8008330:	60bb      	str	r3, [r7, #8]
 8008332:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <SystemClock_Config+0xfc>)
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	4a30      	ldr	r2, [pc, #192]	; (80083f8 <SystemClock_Config+0xfc>)
 8008338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833c:	6413      	str	r3, [r2, #64]	; 0x40
 800833e:	4b2e      	ldr	r3, [pc, #184]	; (80083f8 <SystemClock_Config+0xfc>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008346:	60bb      	str	r3, [r7, #8]
 8008348:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800834a:	2300      	movs	r3, #0
 800834c:	607b      	str	r3, [r7, #4]
 800834e:	4b2b      	ldr	r3, [pc, #172]	; (80083fc <SystemClock_Config+0x100>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a2a      	ldr	r2, [pc, #168]	; (80083fc <SystemClock_Config+0x100>)
 8008354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	4b28      	ldr	r3, [pc, #160]	; (80083fc <SystemClock_Config+0x100>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008362:	607b      	str	r3, [r7, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008366:	2301      	movs	r3, #1
 8008368:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800836a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800836e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008370:	2302      	movs	r3, #2
 8008372:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008378:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM =  4;
 800837a:	2304      	movs	r3, #4
 800837c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 800837e:	23a8      	movs	r3, #168	; 0xa8
 8008380:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008382:	2302      	movs	r3, #2
 8008384:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008386:	2307      	movs	r3, #7
 8008388:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800838a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800838e:	4618      	mov	r0, r3
 8008390:	f005 fb0a 	bl	800d9a8 <HAL_RCC_OscConfig>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800839a:	f000 f843 	bl	8008424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800839e:	230f      	movs	r3, #15
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80083a2:	2302      	movs	r3, #2
 80083a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80083a6:	2300      	movs	r3, #0
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80083aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80083ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80083b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80083b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083ba:	2105      	movs	r1, #5
 80083bc:	4618      	mov	r0, r3
 80083be:	f005 fd63 	bl	800de88 <HAL_RCC_ClockConfig>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80083c8:	f000 f82c 	bl	8008424 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80083cc:	2308      	movs	r3, #8
 80083ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80083d0:	2332      	movs	r3, #50	; 0x32
 80083d2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80083d4:	2302      	movs	r3, #2
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80083d8:	2300      	movs	r3, #0
 80083da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80083dc:	f107 030c 	add.w	r3, r7, #12
 80083e0:	4618      	mov	r0, r3
 80083e2:	f005 ff75 	bl	800e2d0 <HAL_RCCEx_PeriphCLKConfig>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d001      	beq.n	80083f0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80083ec:	f000 f81a 	bl	8008424 <Error_Handler>
  }
}
 80083f0:	bf00      	nop
 80083f2:	3780      	adds	r7, #128	; 0x80
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40023800 	.word	0x40023800
 80083fc:	40007000 	.word	0x40007000

08008400 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a04      	ldr	r2, [pc, #16]	; (8008420 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d101      	bne.n	8008416 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008412:	f002 fea5 	bl	800b160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40001000 	.word	0x40001000

08008424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008428:	bf00      	nop
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	3303      	adds	r3, #3
 8008444:	f023 0303 	bic.w	r3, r3, #3
 8008448:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_2_scratch0_array.data = AI_PTR(activations + 89856);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8008450:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008454:	4a29      	ldr	r2, [pc, #164]	; (80084fc <network_configure_activations+0xc8>)
 8008456:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 89856);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 800845e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008462:	4a26      	ldr	r2, [pc, #152]	; (80084fc <network_configure_activations+0xc8>)
 8008464:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 8008466:	4b26      	ldr	r3, [pc, #152]	; (8008500 <network_configure_activations+0xcc>)
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800846c:	4b24      	ldr	r3, [pc, #144]	; (8008500 <network_configure_activations+0xcc>)
 800846e:	2200      	movs	r2, #0
 8008470:	60da      	str	r2, [r3, #12]
    conv2d_1_output_array.data = AI_PTR(activations + 3328);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8008478:	4a22      	ldr	r2, [pc, #136]	; (8008504 <network_configure_activations+0xd0>)
 800847a:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations + 3328);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8008482:	4a20      	ldr	r2, [pc, #128]	; (8008504 <network_configure_activations+0xd0>)
 8008484:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 0);
 8008486:	4a20      	ldr	r2, [pc, #128]	; (8008508 <network_configure_activations+0xd4>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 0);
 800848c:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <network_configure_activations+0xd4>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 89344);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 8008498:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800849c:	4a1b      	ldr	r2, [pc, #108]	; (800850c <network_configure_activations+0xd8>)
 800849e:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 89344);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80084a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084aa:	4a18      	ldr	r2, [pc, #96]	; (800850c <network_configure_activations+0xd8>)
 80084ac:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 89344);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80084b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084b8:	4a15      	ldr	r2, [pc, #84]	; (8008510 <network_configure_activations+0xdc>)
 80084ba:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 89344);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80084c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084c6:	4a12      	ldr	r2, [pc, #72]	; (8008510 <network_configure_activations+0xdc>)
 80084c8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 89304);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80084d0:	33d8      	adds	r3, #216	; 0xd8
 80084d2:	4a10      	ldr	r2, [pc, #64]	; (8008514 <network_configure_activations+0xe0>)
 80084d4:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 89304);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
 80084dc:	33d8      	adds	r3, #216	; 0xd8
 80084de:	4a0d      	ldr	r2, [pc, #52]	; (8008514 <network_configure_activations+0xe0>)
 80084e0:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 80084e2:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <network_configure_activations+0xe4>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <network_configure_activations+0xe4>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80084ee:	2301      	movs	r3, #1
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20000088 	.word	0x20000088
 8008500:	20000118 	.word	0x20000118
 8008504:	20000128 	.word	0x20000128
 8008508:	20000138 	.word	0x20000138
 800850c:	20000148 	.word	0x20000148
 8008510:	20000158 	.word	0x20000158
 8008514:	20000168 	.word	0x20000168
 8008518:	20000178 	.word	0x20000178

0800851c <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800852c:	4b47      	ldr	r3, [pc, #284]	; (800864c <network_configure_weights+0x130>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008534:	4a45      	ldr	r2, [pc, #276]	; (800864c <network_configure_weights+0x130>)
 8008536:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1261568);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
 800853e:	4a43      	ldr	r2, [pc, #268]	; (800864c <network_configure_weights+0x130>)
 8008540:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1261568);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
 8008548:	4a40      	ldr	r2, [pc, #256]	; (800864c <network_configure_weights+0x130>)
 800854a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800854c:	4b40      	ldr	r3, [pc, #256]	; (8008650 <network_configure_weights+0x134>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008554:	4a3e      	ldr	r2, [pc, #248]	; (8008650 <network_configure_weights+0x134>)
 8008556:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1256448);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 800855e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008562:	4a3b      	ldr	r2, [pc, #236]	; (8008650 <network_configure_weights+0x134>)
 8008564:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1256448);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 800856c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008570:	4a37      	ldr	r2, [pc, #220]	; (8008650 <network_configure_weights+0x134>)
 8008572:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008574:	4b37      	ldr	r3, [pc, #220]	; (8008654 <network_configure_weights+0x138>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800857c:	4a35      	ldr	r2, [pc, #212]	; (8008654 <network_configure_weights+0x138>)
 800857e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1255936);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008586:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800858a:	4a32      	ldr	r2, [pc, #200]	; (8008654 <network_configure_weights+0x138>)
 800858c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1255936);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 1399 	add.w	r3, r3, #1253376	; 0x132000
 8008594:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8008598:	4a2e      	ldr	r2, [pc, #184]	; (8008654 <network_configure_weights+0x138>)
 800859a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800859c:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <network_configure_weights+0x13c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085a4:	4a2c      	ldr	r2, [pc, #176]	; (8008658 <network_configure_weights+0x13c>)
 80085a6:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 76288);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f503 3395 	add.w	r3, r3, #76288	; 0x12a00
 80085ae:	4a2a      	ldr	r2, [pc, #168]	; (8008658 <network_configure_weights+0x13c>)
 80085b0:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 75264);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 80085b8:	4a27      	ldr	r2, [pc, #156]	; (8008658 <network_configure_weights+0x13c>)
 80085ba:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80085bc:	4b27      	ldr	r3, [pc, #156]	; (800865c <network_configure_weights+0x140>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085c4:	4a25      	ldr	r2, [pc, #148]	; (800865c <network_configure_weights+0x140>)
 80085c6:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(weights + 75008);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80085ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085d2:	4a22      	ldr	r2, [pc, #136]	; (800865c <network_configure_weights+0x140>)
 80085d4:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(weights + 75008);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80085dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085e0:	4a1e      	ldr	r2, [pc, #120]	; (800865c <network_configure_weights+0x140>)
 80085e2:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80085e4:	4b1e      	ldr	r3, [pc, #120]	; (8008660 <network_configure_weights+0x144>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ec:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <network_configure_weights+0x144>)
 80085ee:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(weights + 1280);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f6:	4a1a      	ldr	r2, [pc, #104]	; (8008660 <network_configure_weights+0x144>)
 80085f8:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 1280);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <network_configure_weights+0x144>)
 8008602:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <network_configure_weights+0x148>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800860c:	4a15      	ldr	r2, [pc, #84]	; (8008664 <network_configure_weights+0x148>)
 800860e:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights + 1152);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008616:	4a13      	ldr	r2, [pc, #76]	; (8008664 <network_configure_weights+0x148>)
 8008618:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights + 1152);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8008620:	4a10      	ldr	r2, [pc, #64]	; (8008664 <network_configure_weights+0x148>)
 8008622:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8008624:	4b10      	ldr	r3, [pc, #64]	; (8008668 <network_configure_weights+0x14c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862c:	4a0e      	ldr	r2, [pc, #56]	; (8008668 <network_configure_weights+0x14c>)
 800862e:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights + 0);
 8008630:	4a0d      	ldr	r2, [pc, #52]	; (8008668 <network_configure_weights+0x14c>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights + 0);
 8008636:	4a0c      	ldr	r2, [pc, #48]	; (8008668 <network_configure_weights+0x14c>)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800863c:	2301      	movs	r3, #1
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000098 	.word	0x20000098
 8008650:	200000a8 	.word	0x200000a8
 8008654:	200000b8 	.word	0x200000b8
 8008658:	200000c8 	.word	0x200000c8
 800865c:	200000d8 	.word	0x200000d8
 8008660:	200000e8 	.word	0x200000e8
 8008664:	200000f8 	.word	0x200000f8
 8008668:	20000108 	.word	0x20000108

0800866c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7f7 feb6 	bl	80003e6 <ai_platform_network_get_error>
 800867a:	4603      	mov	r3, r0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af02      	add	r7, sp, #8
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800868e:	2300      	movs	r3, #0
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	2303      	movs	r3, #3
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	2301      	movs	r3, #1
 8008698:	4a04      	ldr	r2, [pc, #16]	; (80086ac <ai_network_create+0x28>)
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7f7 ff8d 	bl	80005bc <ai_platform_network_create>
 80086a2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000030 	.word	0x20000030

080086b0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7f7 ffc4 	bl	8000646 <ai_platform_network_destroy>
 80086be:	4603      	mov	r3, r0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7f7 ffd9 	bl	800068c <ai_platform_network_init>
 80086da:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <ai_network_init+0x1e>
 80086e2:	2300      	movs	r3, #0
 80086e4:	e01f      	b.n	8008726 <ai_network_init+0x5e>

  ai_bool ok = true;
 80086e6:	2301      	movs	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	4619      	mov	r1, r3
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f7ff ff14 	bl	800851c <network_configure_weights>
 80086f4:	4603      	mov	r3, r0
 80086f6:	461a      	mov	r2, r3
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bf14      	ite	ne
 8008700:	2301      	movne	r3, #1
 8008702:	2300      	moveq	r3, #0
 8008704:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	3318      	adds	r3, #24
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7ff fe91 	bl	8008434 <network_configure_activations>
 8008712:	4603      	mov	r3, r0
 8008714:	461a      	mov	r2, r3
 8008716:	7afb      	ldrb	r3, [r7, #11]
 8008718:	4013      	ands	r3, r2
 800871a:	2b00      	cmp	r3, #0
 800871c:	bf14      	ite	ne
 800871e:	2301      	movne	r3, #1
 8008720:	2300      	moveq	r3, #0
 8008722:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008724:	7afb      	ldrb	r3, [r7, #11]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7f8 f800 	bl	8000744 <ai_platform_network_process>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
    0x96, 0xb4, 0x8d, 0xbd, 0x82, 0xc2, 0x18, 0xbe, 0xb8, 0x5b,
    0x4c, 0xbc, 0x6c, 0x24, 0xa1, 0xbd, 0x85, 0x58, 0x81,
    0x3c, 0x6f, 0xde, 0xdb, 0xbd, 0xd7, 0xd2, 0xb3, 0xbd
  };

  return AI_HANDLE_PTR(s_network_weights);
 8008754:	4b02      	ldr	r3, [pc, #8]	; (8008760 <ai_network_data_weights_get+0x10>)

}
 8008756:	4618      	mov	r0, r3
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	08018184 	.word	0x08018184

08008764 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8008768:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <MX_SPI5_Init+0x64>)
 800876a:	4a18      	ldr	r2, [pc, #96]	; (80087cc <MX_SPI5_Init+0x68>)
 800876c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800876e:	4b16      	ldr	r3, [pc, #88]	; (80087c8 <MX_SPI5_Init+0x64>)
 8008770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008774:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <MX_SPI5_Init+0x64>)
 8008778:	2200      	movs	r2, #0
 800877a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800877c:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <MX_SPI5_Init+0x64>)
 800877e:	2200      	movs	r2, #0
 8008780:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008782:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <MX_SPI5_Init+0x64>)
 8008784:	2200      	movs	r2, #0
 8008786:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <MX_SPI5_Init+0x64>)
 800878a:	2200      	movs	r2, #0
 800878c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800878e:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <MX_SPI5_Init+0x64>)
 8008790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008794:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <MX_SPI5_Init+0x64>)
 8008798:	2200      	movs	r2, #0
 800879a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <MX_SPI5_Init+0x64>)
 800879e:	2200      	movs	r2, #0
 80087a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <MX_SPI5_Init+0x64>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <MX_SPI5_Init+0x64>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <MX_SPI5_Init+0x64>)
 80087b0:	220a      	movs	r2, #10
 80087b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80087b4:	4804      	ldr	r0, [pc, #16]	; (80087c8 <MX_SPI5_Init+0x64>)
 80087b6:	f005 ffc8 	bl	800e74a <HAL_SPI_Init>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80087c0:	f7ff fe30 	bl	8008424 <Error_Handler>
  }

}
 80087c4:	bf00      	nop
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20019dbc 	.word	0x20019dbc
 80087cc:	40015000 	.word	0x40015000

080087d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	609a      	str	r2, [r3, #8]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a19      	ldr	r2, [pc, #100]	; (8008854 <HAL_SPI_MspInit+0x84>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d12c      	bne.n	800884c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	4b18      	ldr	r3, [pc, #96]	; (8008858 <HAL_SPI_MspInit+0x88>)
 80087f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fa:	4a17      	ldr	r2, [pc, #92]	; (8008858 <HAL_SPI_MspInit+0x88>)
 80087fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008800:	6453      	str	r3, [r2, #68]	; 0x44
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <HAL_SPI_MspInit+0x88>)
 8008804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	4b11      	ldr	r3, [pc, #68]	; (8008858 <HAL_SPI_MspInit+0x88>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	4a10      	ldr	r2, [pc, #64]	; (8008858 <HAL_SPI_MspInit+0x88>)
 8008818:	f043 0320 	orr.w	r3, r3, #32
 800881c:	6313      	str	r3, [r2, #48]	; 0x30
 800881e:	4b0e      	ldr	r3, [pc, #56]	; (8008858 <HAL_SPI_MspInit+0x88>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800882a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800882e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008830:	2302      	movs	r3, #2
 8008832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008834:	2300      	movs	r3, #0
 8008836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008838:	2300      	movs	r3, #0
 800883a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800883c:	2305      	movs	r3, #5
 800883e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008840:	f107 0314 	add.w	r3, r7, #20
 8008844:	4619      	mov	r1, r3
 8008846:	4805      	ldr	r0, [pc, #20]	; (800885c <HAL_SPI_MspInit+0x8c>)
 8008848:	f003 fa12 	bl	800bc70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800884c:	bf00      	nop
 800884e:	3728      	adds	r7, #40	; 0x28
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	40015000 	.word	0x40015000
 8008858:	40023800 	.word	0x40023800
 800885c:	40021400 	.word	0x40021400

08008860 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a08      	ldr	r2, [pc, #32]	; (8008890 <HAL_SPI_MspDeInit+0x30>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10a      	bne.n	8008888 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <HAL_SPI_MspDeInit+0x34>)
 8008874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008876:	4a07      	ldr	r2, [pc, #28]	; (8008894 <HAL_SPI_MspDeInit+0x34>)
 8008878:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800887c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800887e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008882:	4805      	ldr	r0, [pc, #20]	; (8008898 <HAL_SPI_MspDeInit+0x38>)
 8008884:	f003 fb9e 	bl	800bfc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40015000 	.word	0x40015000
 8008894:	40023800 	.word	0x40023800
 8008898:	40021400 	.word	0x40021400

0800889c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088a2:	2300      	movs	r3, #0
 80088a4:	607b      	str	r3, [r7, #4]
 80088a6:	4b10      	ldr	r3, [pc, #64]	; (80088e8 <HAL_MspInit+0x4c>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	4a0f      	ldr	r2, [pc, #60]	; (80088e8 <HAL_MspInit+0x4c>)
 80088ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b0:	6453      	str	r3, [r2, #68]	; 0x44
 80088b2:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <HAL_MspInit+0x4c>)
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088be:	2300      	movs	r3, #0
 80088c0:	603b      	str	r3, [r7, #0]
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <HAL_MspInit+0x4c>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	4a08      	ldr	r2, [pc, #32]	; (80088e8 <HAL_MspInit+0x4c>)
 80088c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088cc:	6413      	str	r3, [r2, #64]	; 0x40
 80088ce:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <HAL_MspInit+0x4c>)
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	40023800 	.word	0x40023800

080088ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	; 0x30
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80088fc:	2200      	movs	r2, #0
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	2036      	movs	r0, #54	; 0x36
 8008902:	f002 fd27 	bl	800b354 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8008906:	2036      	movs	r0, #54	; 0x36
 8008908:	f002 fd40 	bl	800b38c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <HAL_InitTick+0xa4>)
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <HAL_InitTick+0xa4>)
 8008916:	f043 0310 	orr.w	r3, r3, #16
 800891a:	6413      	str	r3, [r2, #64]	; 0x40
 800891c:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <HAL_InitTick+0xa4>)
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008928:	f107 0210 	add.w	r2, r7, #16
 800892c:	f107 0314 	add.w	r3, r7, #20
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f005 fc9a 	bl	800e26c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008938:	f005 fc70 	bl	800e21c <HAL_RCC_GetPCLK1Freq>
 800893c:	4603      	mov	r3, r0
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	4a13      	ldr	r2, [pc, #76]	; (8008994 <HAL_InitTick+0xa8>)
 8008946:	fba2 2303 	umull	r2, r3, r2, r3
 800894a:	0c9b      	lsrs	r3, r3, #18
 800894c:	3b01      	subs	r3, #1
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008950:	4b11      	ldr	r3, [pc, #68]	; (8008998 <HAL_InitTick+0xac>)
 8008952:	4a12      	ldr	r2, [pc, #72]	; (800899c <HAL_InitTick+0xb0>)
 8008954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8008956:	4b10      	ldr	r3, [pc, #64]	; (8008998 <HAL_InitTick+0xac>)
 8008958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800895c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800895e:	4a0e      	ldr	r2, [pc, #56]	; (8008998 <HAL_InitTick+0xac>)
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008964:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <HAL_InitTick+0xac>)
 8008966:	2200      	movs	r2, #0
 8008968:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <HAL_InitTick+0xac>)
 800896c:	2200      	movs	r2, #0
 800896e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8008970:	4809      	ldr	r0, [pc, #36]	; (8008998 <HAL_InitTick+0xac>)
 8008972:	f006 fc75 	bl	800f260 <HAL_TIM_Base_Init>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800897c:	4806      	ldr	r0, [pc, #24]	; (8008998 <HAL_InitTick+0xac>)
 800897e:	f006 fc9a 	bl	800f2b6 <HAL_TIM_Base_Start_IT>
 8008982:	4603      	mov	r3, r0
 8008984:	e000      	b.n	8008988 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
}
 8008988:	4618      	mov	r0, r3
 800898a:	3730      	adds	r7, #48	; 0x30
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40023800 	.word	0x40023800
 8008994:	431bde83 	.word	0x431bde83
 8008998:	20019e14 	.word	0x20019e14
 800899c:	40001000 	.word	0x40001000

080089a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80089a4:	bf00      	nop
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089ae:	b480      	push	{r7}
 80089b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089b2:	e7fe      	b.n	80089b2 <HardFault_Handler+0x4>

080089b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089b4:	b480      	push	{r7}
 80089b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089b8:	e7fe      	b.n	80089b8 <MemManage_Handler+0x4>

080089ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80089ba:	b480      	push	{r7}
 80089bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80089be:	e7fe      	b.n	80089be <BusFault_Handler+0x4>

080089c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80089c4:	e7fe      	b.n	80089c4 <UsageFault_Handler+0x4>

080089c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089c6:	b480      	push	{r7}
 80089c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80089ca:	bf00      	nop
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089e2:	b480      	push	{r7}
 80089e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089e6:	bf00      	nop
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80089f4:	4802      	ldr	r0, [pc, #8]	; (8008a00 <TIM6_DAC_IRQHandler+0x10>)
 80089f6:	f006 fc82 	bl	800f2fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80089fa:	bf00      	nop
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20019e14 	.word	0x20019e14

08008a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	e00a      	b.n	8008a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008a16:	f3af 8000 	nop.w
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	60ba      	str	r2, [r7, #8]
 8008a22:	b2ca      	uxtb	r2, r1
 8008a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	dbf0      	blt.n	8008a16 <_read+0x12>
	}

return len;
 8008a34:	687b      	ldr	r3, [r7, #4]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
	return -1;
 8008a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a66:	605a      	str	r2, [r3, #4]
	return 0;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <_isatty>:

int _isatty(int file)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8008a7e:	2301      	movs	r3, #1
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
	return 0;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
	...

08008aa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ab0:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <_sbrk+0x50>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d102      	bne.n	8008abe <_sbrk+0x16>
		heap_end = &end;
 8008ab8:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <_sbrk+0x50>)
 8008aba:	4a10      	ldr	r2, [pc, #64]	; (8008afc <_sbrk+0x54>)
 8008abc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008abe:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <_sbrk+0x50>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <_sbrk+0x50>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4413      	add	r3, r2
 8008acc:	466a      	mov	r2, sp
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d907      	bls.n	8008ae2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008ad2:	f007 fdb7 	bl	8010644 <__errno>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	230c      	movs	r3, #12
 8008ada:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008adc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae0:	e006      	b.n	8008af0 <_sbrk+0x48>
	}

	heap_end += incr;
 8008ae2:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <_sbrk+0x50>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4413      	add	r3, r2
 8008aea:	4a03      	ldr	r2, [pc, #12]	; (8008af8 <_sbrk+0x50>)
 8008aec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008aee:	68fb      	ldr	r3, [r7, #12]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20019a6c 	.word	0x20019a6c
 8008afc:	20019fe0 	.word	0x20019fe0

08008b00 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b06:	f107 0308 	add.w	r3, r7, #8
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	605a      	str	r2, [r3, #4]
 8008b10:	609a      	str	r2, [r3, #8]
 8008b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b14:	463b      	mov	r3, r7
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8008b1c:	4b1e      	ldr	r3, [pc, #120]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b1e:	4a1f      	ldr	r2, [pc, #124]	; (8008b9c <MX_TIM1_Init+0x9c>)
 8008b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008b22:	4b1d      	ldr	r3, [pc, #116]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b28:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8008b2e:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b34:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008b3a:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b40:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008b46:	4814      	ldr	r0, [pc, #80]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b48:	f006 fb8a 	bl	800f260 <HAL_TIM_Base_Init>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8008b52:	f7ff fc67 	bl	8008424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008b5c:	f107 0308 	add.w	r3, r7, #8
 8008b60:	4619      	mov	r1, r3
 8008b62:	480d      	ldr	r0, [pc, #52]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b64:	f006 fcd3 	bl	800f50e <HAL_TIM_ConfigClockSource>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8008b6e:	f7ff fc59 	bl	8008424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b72:	2300      	movs	r3, #0
 8008b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4806      	ldr	r0, [pc, #24]	; (8008b98 <MX_TIM1_Init+0x98>)
 8008b80:	f006 fede 	bl	800f940 <HAL_TIMEx_MasterConfigSynchronization>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8008b8a:	f7ff fc4b 	bl	8008424 <Error_Handler>
  }

}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20019e54 	.word	0x20019e54
 8008b9c:	40010000 	.word	0x40010000

08008ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a0b      	ldr	r2, [pc, #44]	; (8008bdc <HAL_TIM_Base_MspInit+0x3c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d10d      	bne.n	8008bce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <HAL_TIM_Base_MspInit+0x40>)
 8008bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bba:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <HAL_TIM_Base_MspInit+0x40>)
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bc2:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <HAL_TIM_Base_MspInit+0x40>)
 8008bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40010000 	.word	0x40010000
 8008be0:	40023800 	.word	0x40023800

08008be4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008be8:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008bea:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <MX_USART1_UART_Init+0x50>)
 8008bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008bee:	4b10      	ldr	r3, [pc, #64]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c02:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c08:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008c0a:	220c      	movs	r2, #12
 8008c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c1a:	4805      	ldr	r0, [pc, #20]	; (8008c30 <MX_USART1_UART_Init+0x4c>)
 8008c1c:	f006 ff20 	bl	800fa60 <HAL_UART_Init>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c26:	f7ff fbfd 	bl	8008424 <Error_Handler>
  }

}
 8008c2a:	bf00      	nop
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20019e94 	.word	0x20019e94
 8008c34:	40011000 	.word	0x40011000

08008c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c40:	f107 0314 	add.w	r3, r7, #20
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	605a      	str	r2, [r3, #4]
 8008c4a:	609a      	str	r2, [r3, #8]
 8008c4c:	60da      	str	r2, [r3, #12]
 8008c4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a19      	ldr	r2, [pc, #100]	; (8008cbc <HAL_UART_MspInit+0x84>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d12c      	bne.n	8008cb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	4b18      	ldr	r3, [pc, #96]	; (8008cc0 <HAL_UART_MspInit+0x88>)
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	4a17      	ldr	r2, [pc, #92]	; (8008cc0 <HAL_UART_MspInit+0x88>)
 8008c64:	f043 0310 	orr.w	r3, r3, #16
 8008c68:	6453      	str	r3, [r2, #68]	; 0x44
 8008c6a:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <HAL_UART_MspInit+0x88>)
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	f003 0310 	and.w	r3, r3, #16
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <HAL_UART_MspInit+0x88>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	4a10      	ldr	r2, [pc, #64]	; (8008cc0 <HAL_UART_MspInit+0x88>)
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	6313      	str	r3, [r2, #48]	; 0x30
 8008c86:	4b0e      	ldr	r3, [pc, #56]	; (8008cc0 <HAL_UART_MspInit+0x88>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8008c92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008ca4:	2307      	movs	r3, #7
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ca8:	f107 0314 	add.w	r3, r7, #20
 8008cac:	4619      	mov	r1, r3
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <HAL_UART_MspInit+0x8c>)
 8008cb0:	f002 ffde 	bl	800bc70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008cb4:	bf00      	nop
 8008cb6:	3728      	adds	r7, #40	; 0x28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40011000 	.word	0x40011000
 8008cc0:	40023800 	.word	0x40023800
 8008cc4:	40020000 	.word	0x40020000

08008cc8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8008ccc:	f000 feb8 	bl	8009a40 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8008cd0:	20ca      	movs	r0, #202	; 0xca
 8008cd2:	f000 f95d 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8008cd6:	20c3      	movs	r0, #195	; 0xc3
 8008cd8:	f000 f967 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8008cdc:	2008      	movs	r0, #8
 8008cde:	f000 f964 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8008ce2:	2050      	movs	r0, #80	; 0x50
 8008ce4:	f000 f961 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8008ce8:	20cf      	movs	r0, #207	; 0xcf
 8008cea:	f000 f951 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f000 f95b 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8008cf4:	20c1      	movs	r0, #193	; 0xc1
 8008cf6:	f000 f958 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8008cfa:	2030      	movs	r0, #48	; 0x30
 8008cfc:	f000 f955 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8008d00:	20ed      	movs	r0, #237	; 0xed
 8008d02:	f000 f945 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8008d06:	2064      	movs	r0, #100	; 0x64
 8008d08:	f000 f94f 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8008d0c:	2003      	movs	r0, #3
 8008d0e:	f000 f94c 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8008d12:	2012      	movs	r0, #18
 8008d14:	f000 f949 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8008d18:	2081      	movs	r0, #129	; 0x81
 8008d1a:	f000 f946 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8008d1e:	20e8      	movs	r0, #232	; 0xe8
 8008d20:	f000 f936 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8008d24:	2085      	movs	r0, #133	; 0x85
 8008d26:	f000 f940 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f000 f93d 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8008d30:	2078      	movs	r0, #120	; 0x78
 8008d32:	f000 f93a 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8008d36:	20cb      	movs	r0, #203	; 0xcb
 8008d38:	f000 f92a 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8008d3c:	2039      	movs	r0, #57	; 0x39
 8008d3e:	f000 f934 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8008d42:	202c      	movs	r0, #44	; 0x2c
 8008d44:	f000 f931 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f000 f92e 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8008d4e:	2034      	movs	r0, #52	; 0x34
 8008d50:	f000 f92b 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8008d54:	2002      	movs	r0, #2
 8008d56:	f000 f928 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8008d5a:	20f7      	movs	r0, #247	; 0xf7
 8008d5c:	f000 f918 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8008d60:	2020      	movs	r0, #32
 8008d62:	f000 f922 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8008d66:	20ea      	movs	r0, #234	; 0xea
 8008d68:	f000 f912 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f000 f91c 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008d72:	2000      	movs	r0, #0
 8008d74:	f000 f919 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8008d78:	20b1      	movs	r0, #177	; 0xb1
 8008d7a:	f000 f909 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f000 f913 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8008d84:	201b      	movs	r0, #27
 8008d86:	f000 f910 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008d8a:	20b6      	movs	r0, #182	; 0xb6
 8008d8c:	f000 f900 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008d90:	200a      	movs	r0, #10
 8008d92:	f000 f90a 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8008d96:	20a2      	movs	r0, #162	; 0xa2
 8008d98:	f000 f907 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8008d9c:	20c0      	movs	r0, #192	; 0xc0
 8008d9e:	f000 f8f7 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008da2:	2010      	movs	r0, #16
 8008da4:	f000 f901 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8008da8:	20c1      	movs	r0, #193	; 0xc1
 8008daa:	f000 f8f1 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8008dae:	2010      	movs	r0, #16
 8008db0:	f000 f8fb 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8008db4:	20c5      	movs	r0, #197	; 0xc5
 8008db6:	f000 f8eb 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8008dba:	2045      	movs	r0, #69	; 0x45
 8008dbc:	f000 f8f5 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8008dc0:	2015      	movs	r0, #21
 8008dc2:	f000 f8f2 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8008dc6:	20c7      	movs	r0, #199	; 0xc7
 8008dc8:	f000 f8e2 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8008dcc:	2090      	movs	r0, #144	; 0x90
 8008dce:	f000 f8ec 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8008dd2:	2036      	movs	r0, #54	; 0x36
 8008dd4:	f000 f8dc 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8008dd8:	20c8      	movs	r0, #200	; 0xc8
 8008dda:	f000 f8e6 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8008dde:	20f2      	movs	r0, #242	; 0xf2
 8008de0:	f000 f8d6 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008de4:	2000      	movs	r0, #0
 8008de6:	f000 f8e0 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8008dea:	20b0      	movs	r0, #176	; 0xb0
 8008dec:	f000 f8d0 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8008df0:	20c2      	movs	r0, #194	; 0xc2
 8008df2:	f000 f8da 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8008df6:	20b6      	movs	r0, #182	; 0xb6
 8008df8:	f000 f8ca 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8008dfc:	200a      	movs	r0, #10
 8008dfe:	f000 f8d4 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8008e02:	20a7      	movs	r0, #167	; 0xa7
 8008e04:	f000 f8d1 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8008e08:	2027      	movs	r0, #39	; 0x27
 8008e0a:	f000 f8ce 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8008e0e:	2004      	movs	r0, #4
 8008e10:	f000 f8cb 	bl	8008faa <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8008e14:	202a      	movs	r0, #42	; 0x2a
 8008e16:	f000 f8bb 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	f000 f8c5 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e20:	2000      	movs	r0, #0
 8008e22:	f000 f8c2 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e26:	2000      	movs	r0, #0
 8008e28:	f000 f8bf 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8008e2c:	20ef      	movs	r0, #239	; 0xef
 8008e2e:	f000 f8bc 	bl	8008faa <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8008e32:	202b      	movs	r0, #43	; 0x2b
 8008e34:	f000 f8ac 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f000 f8b6 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f000 f8b3 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8008e44:	2001      	movs	r0, #1
 8008e46:	f000 f8b0 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8008e4a:	203f      	movs	r0, #63	; 0x3f
 8008e4c:	f000 f8ad 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8008e50:	20f6      	movs	r0, #246	; 0xf6
 8008e52:	f000 f89d 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008e56:	2001      	movs	r0, #1
 8008e58:	f000 f8a7 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f000 f8a4 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8008e62:	2006      	movs	r0, #6
 8008e64:	f000 f8a1 	bl	8008faa <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8008e68:	202c      	movs	r0, #44	; 0x2c
 8008e6a:	f000 f891 	bl	8008f90 <ili9341_WriteReg>
  LCD_Delay(200);
 8008e6e:	20c8      	movs	r0, #200	; 0xc8
 8008e70:	f000 fed4 	bl	8009c1c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8008e74:	2026      	movs	r0, #38	; 0x26
 8008e76:	f000 f88b 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	f000 f895 	bl	8008faa <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8008e80:	20e0      	movs	r0, #224	; 0xe0
 8008e82:	f000 f885 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8008e86:	200f      	movs	r0, #15
 8008e88:	f000 f88f 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8008e8c:	2029      	movs	r0, #41	; 0x29
 8008e8e:	f000 f88c 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8008e92:	2024      	movs	r0, #36	; 0x24
 8008e94:	f000 f889 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8008e98:	200c      	movs	r0, #12
 8008e9a:	f000 f886 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8008e9e:	200e      	movs	r0, #14
 8008ea0:	f000 f883 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8008ea4:	2009      	movs	r0, #9
 8008ea6:	f000 f880 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8008eaa:	204e      	movs	r0, #78	; 0x4e
 8008eac:	f000 f87d 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8008eb0:	2078      	movs	r0, #120	; 0x78
 8008eb2:	f000 f87a 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8008eb6:	203c      	movs	r0, #60	; 0x3c
 8008eb8:	f000 f877 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8008ebc:	2009      	movs	r0, #9
 8008ebe:	f000 f874 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8008ec2:	2013      	movs	r0, #19
 8008ec4:	f000 f871 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8008ec8:	2005      	movs	r0, #5
 8008eca:	f000 f86e 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8008ece:	2017      	movs	r0, #23
 8008ed0:	f000 f86b 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8008ed4:	2011      	movs	r0, #17
 8008ed6:	f000 f868 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8008eda:	2000      	movs	r0, #0
 8008edc:	f000 f865 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8008ee0:	20e1      	movs	r0, #225	; 0xe1
 8008ee2:	f000 f855 	bl	8008f90 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f000 f85f 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8008eec:	2016      	movs	r0, #22
 8008eee:	f000 f85c 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8008ef2:	201b      	movs	r0, #27
 8008ef4:	f000 f859 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8008ef8:	2004      	movs	r0, #4
 8008efa:	f000 f856 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8008efe:	2011      	movs	r0, #17
 8008f00:	f000 f853 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8008f04:	2007      	movs	r0, #7
 8008f06:	f000 f850 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8008f0a:	2031      	movs	r0, #49	; 0x31
 8008f0c:	f000 f84d 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8008f10:	2033      	movs	r0, #51	; 0x33
 8008f12:	f000 f84a 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8008f16:	2042      	movs	r0, #66	; 0x42
 8008f18:	f000 f847 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8008f1c:	2005      	movs	r0, #5
 8008f1e:	f000 f844 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8008f22:	200c      	movs	r0, #12
 8008f24:	f000 f841 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8008f28:	200a      	movs	r0, #10
 8008f2a:	f000 f83e 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8008f2e:	2028      	movs	r0, #40	; 0x28
 8008f30:	f000 f83b 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8008f34:	202f      	movs	r0, #47	; 0x2f
 8008f36:	f000 f838 	bl	8008faa <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8008f3a:	200f      	movs	r0, #15
 8008f3c:	f000 f835 	bl	8008faa <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8008f40:	2011      	movs	r0, #17
 8008f42:	f000 f825 	bl	8008f90 <ili9341_WriteReg>
  LCD_Delay(200);
 8008f46:	20c8      	movs	r0, #200	; 0xc8
 8008f48:	f000 fe68 	bl	8009c1c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8008f4c:	2029      	movs	r0, #41	; 0x29
 8008f4e:	f000 f81f 	bl	8008f90 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8008f52:	202c      	movs	r0, #44	; 0x2c
 8008f54:	f000 f81c 	bl	8008f90 <ili9341_WriteReg>
}
 8008f58:	bf00      	nop
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8008f60:	f000 fd6e 	bl	8009a40 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8008f64:	2103      	movs	r1, #3
 8008f66:	20d3      	movs	r0, #211	; 0xd3
 8008f68:	f000 f82c 	bl	8008fc4 <ili9341_ReadData>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	b29b      	uxth	r3, r3
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8008f78:	2029      	movs	r0, #41	; 0x29
 8008f7a:	f000 f809 	bl	8008f90 <ili9341_WriteReg>
}
 8008f7e:	bf00      	nop
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8008f86:	2028      	movs	r0, #40	; 0x28
 8008f88:	f000 f802 	bl	8008f90 <ili9341_WriteReg>
}
 8008f8c:	bf00      	nop
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fde9 	bl	8009b74 <LCD_IO_WriteReg>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fdba 	bl	8009b30 <LCD_IO_WriteData>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	460a      	mov	r2, r1
 8008fce:	80fb      	strh	r3, [r7, #6]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8008fd4:	797a      	ldrb	r2, [r7, #5]
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fdec 	bl	8009bb8 <LCD_IO_ReadData>
 8008fe0:	4603      	mov	r3, r0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8008fea:	b480      	push	{r7}
 8008fec:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8008fee:	23f0      	movs	r3, #240	; 0xf0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8008ffe:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8009002:	4618      	mov	r0, r3
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8009016:	88fb      	ldrh	r3, [r7, #6]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fa59 	bl	80094d0 <stmpe811_GetInstance>
 800901e:	4603      	mov	r3, r0
 8009020:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	2bff      	cmp	r3, #255	; 0xff
 8009026:	d112      	bne.n	800904e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8009028:	2000      	movs	r0, #0
 800902a:	f000 fa51 	bl	80094d0 <stmpe811_GetInstance>
 800902e:	4603      	mov	r3, r0
 8009030:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d80a      	bhi.n	800904e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	88fa      	ldrh	r2, [r7, #6]
 800903c:	b2d1      	uxtb	r1, r2
 800903e:	4a06      	ldr	r2, [pc, #24]	; (8009058 <stmpe811_Init+0x4c>)
 8009040:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8009042:	f000 fdf6 	bl	8009c32 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f807 	bl	800905c <stmpe811_Reset>
    }
  }
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20019a70 	.word	0x20019a70

0800905c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2202      	movs	r2, #2
 800906c:	2103      	movs	r1, #3
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fdeb 	bl	8009c4a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8009074:	200a      	movs	r0, #10
 8009076:	f000 fe25 	bl	8009cc4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800907a:	88fb      	ldrh	r3, [r7, #6]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2200      	movs	r2, #0
 8009080:	2103      	movs	r1, #3
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fde1 	bl	8009c4a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8009088:	2002      	movs	r0, #2
 800908a:	f000 fe1b 	bl	8009cc4 <IOE_Delay>
}
 800908e:	bf00      	nop
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8009096:	b590      	push	{r4, r7, lr}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	4603      	mov	r3, r0
 800909e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80090a0:	f000 fdc7 	bl	8009c32 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fde0 	bl	8009c70 <IOE_Read>
 80090b0:	4603      	mov	r3, r0
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2101      	movs	r1, #1
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 fdd7 	bl	8009c70 <IOE_Read>
 80090c2:	4603      	mov	r3, r0
 80090c4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80090c6:	4323      	orrs	r3, r4
 80090c8:	b21b      	sxth	r3, r3
 80090ca:	b29b      	uxth	r3, r3
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd90      	pop	{r4, r7, pc}

080090d4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2109      	movs	r1, #9
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fdc1 	bl	8009c70 <IOE_Read>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	7bfa      	ldrb	r2, [r7, #15]
 8009100:	2109      	movs	r1, #9
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fda1 	bl	8009c4a <IOE_Write>
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2109      	movs	r1, #9
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fda3 	bl	8009c70 <IOE_Read>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	7bfa      	ldrb	r2, [r7, #15]
 800913c:	2109      	movs	r1, #9
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fd83 	bl	8009c4a <IOE_Write>
    
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	460a      	mov	r2, r1
 8009156:	80fb      	strh	r3, [r7, #6]
 8009158:	4613      	mov	r3, r2
 800915a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	210a      	movs	r1, #10
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fd82 	bl	8009c70 <IOE_Read>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8009170:	7bfa      	ldrb	r2, [r7, #15]
 8009172:	797b      	ldrb	r3, [r7, #5]
 8009174:	4313      	orrs	r3, r2
 8009176:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	7bfa      	ldrb	r2, [r7, #15]
 800917e:	210a      	movs	r1, #10
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fd62 	bl	8009c4a <IOE_Write>
}
 8009186:	bf00      	nop
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	4603      	mov	r3, r0
 8009196:	460a      	mov	r2, r1
 8009198:	80fb      	strh	r3, [r7, #6]
 800919a:	4613      	mov	r3, r2
 800919c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80091a2:	88fb      	ldrh	r3, [r7, #6]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	210a      	movs	r1, #10
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fd61 	bl	8009c70 <IOE_Read>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80091b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80091b6:	43db      	mvns	r3, r3
 80091b8:	b25a      	sxtb	r2, r3
 80091ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091be:	4013      	ands	r3, r2
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	7bfa      	ldrb	r2, [r7, #15]
 80091ca:	210a      	movs	r1, #10
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fd3c 	bl	8009c4a <IOE_Write>
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	4603      	mov	r3, r0
 80091e2:	460a      	mov	r2, r1
 80091e4:	80fb      	strh	r3, [r7, #6]
 80091e6:	4613      	mov	r3, r2
 80091e8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	210b      	movs	r1, #11
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fd3d 	bl	8009c70 <IOE_Read>
 80091f6:	4603      	mov	r3, r0
 80091f8:	461a      	mov	r2, r3
 80091fa:	797b      	ldrb	r3, [r7, #5]
 80091fc:	4013      	ands	r3, r2
 80091fe:	b2db      	uxtb	r3, r3
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	460a      	mov	r2, r1
 8009212:	80fb      	strh	r3, [r7, #6]
 8009214:	4613      	mov	r3, r2
 8009216:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	797a      	ldrb	r2, [r7, #5]
 800921e:	210b      	movs	r1, #11
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fd12 	bl	8009c4a <IOE_Write>
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	4603      	mov	r3, r0
 8009236:	6039      	str	r1, [r7, #0]
 8009238:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2117      	movs	r1, #23
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fd13 	bl	8009c70 <IOE_Read>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	b25b      	sxtb	r3, r3
 8009252:	43db      	mvns	r3, r3
 8009254:	b25a      	sxtb	r2, r3
 8009256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800925a:	4013      	ands	r3, r2
 800925c:	b25b      	sxtb	r3, r3
 800925e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	7bfa      	ldrb	r2, [r7, #15]
 8009266:	2117      	movs	r1, #23
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fcee 	bl	8009c4a <IOE_Write>
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	4603      	mov	r3, r0
 800927e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2104      	movs	r1, #4
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fcf2 	bl	8009c70 <IOE_Read>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	f023 0304 	bic.w	r3, r3, #4
 8009296:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	7bfa      	ldrb	r2, [r7, #15]
 800929e:	2104      	movs	r1, #4
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fcd2 	bl	8009c4a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80092a6:	88fb      	ldrh	r3, [r7, #6]
 80092a8:	21f0      	movs	r1, #240	; 0xf0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff ffbf 	bl	800922e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	f023 0303 	bic.w	r3, r3, #3
 80092b6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	7bfa      	ldrb	r2, [r7, #15]
 80092be:	2104      	movs	r1, #4
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fcc2 	bl	8009c4a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80092c6:	88fb      	ldrh	r3, [r7, #6]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2249      	movs	r2, #73	; 0x49
 80092cc:	2120      	movs	r1, #32
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fcbb 	bl	8009c4a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80092d4:	2002      	movs	r0, #2
 80092d6:	f000 fcf5 	bl	8009cc4 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2201      	movs	r2, #1
 80092e0:	2121      	movs	r1, #33	; 0x21
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fcb1 	bl	8009c4a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	229a      	movs	r2, #154	; 0x9a
 80092ee:	2141      	movs	r1, #65	; 0x41
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fcaa 	bl	8009c4a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2201      	movs	r2, #1
 80092fc:	214a      	movs	r1, #74	; 0x4a
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fca3 	bl	8009c4a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2201      	movs	r2, #1
 800930a:	214b      	movs	r1, #75	; 0x4b
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fc9c 	bl	8009c4a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2200      	movs	r2, #0
 8009318:	214b      	movs	r1, #75	; 0x4b
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fc95 	bl	8009c4a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	2201      	movs	r2, #1
 8009326:	2156      	movs	r1, #86	; 0x56
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fc8e 	bl	8009c4a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800932e:	88fb      	ldrh	r3, [r7, #6]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2201      	movs	r2, #1
 8009334:	2158      	movs	r1, #88	; 0x58
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fc87 	bl	8009c4a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800933c:	88fb      	ldrh	r3, [r7, #6]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2201      	movs	r2, #1
 8009342:	2140      	movs	r1, #64	; 0x40
 8009344:	4618      	mov	r0, r3
 8009346:	f000 fc80 	bl	8009c4a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	b2db      	uxtb	r3, r3
 800934e:	22ff      	movs	r2, #255	; 0xff
 8009350:	210b      	movs	r1, #11
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fc79 	bl	8009c4a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8009358:	2002      	movs	r0, #2
 800935a:	f000 fcb3 	bl	8009cc4 <IOE_Delay>
}
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	4603      	mov	r3, r0
 800936e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8009374:	88fb      	ldrh	r3, [r7, #6]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2140      	movs	r1, #64	; 0x40
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fc78 	bl	8009c70 <IOE_Read>
 8009380:	4603      	mov	r3, r0
 8009382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009386:	2b80      	cmp	r3, #128	; 0x80
 8009388:	bf0c      	ite	eq
 800938a:	2301      	moveq	r3, #1
 800938c:	2300      	movne	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8009398:	88fb      	ldrh	r3, [r7, #6]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	214c      	movs	r1, #76	; 0x4c
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fc66 	bl	8009c70 <IOE_Read>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d010      	beq.n	80093cc <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80093aa:	2301      	movs	r3, #1
 80093ac:	73fb      	strb	r3, [r7, #15]
 80093ae:	e00d      	b.n	80093cc <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2201      	movs	r2, #1
 80093b6:	214b      	movs	r1, #75	; 0x4b
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fc46 	bl	8009c4a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80093be:	88fb      	ldrh	r3, [r7, #6]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2200      	movs	r2, #0
 80093c4:	214b      	movs	r1, #75	; 0x4b
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fc3f 	bl	8009c4a <IOE_Write>
  }
  
  return ret;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b086      	sub	sp, #24
 80093da:	af00      	add	r7, sp, #0
 80093dc:	4603      	mov	r3, r0
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	b2d8      	uxtb	r0, r3
 80093e8:	f107 0210 	add.w	r2, r7, #16
 80093ec:	2304      	movs	r3, #4
 80093ee:	21d7      	movs	r1, #215	; 0xd7
 80093f0:	f000 fc51 	bl	8009c96 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80093f4:	7c3b      	ldrb	r3, [r7, #16]
 80093f6:	061a      	lsls	r2, r3, #24
 80093f8:	7c7b      	ldrb	r3, [r7, #17]
 80093fa:	041b      	lsls	r3, r3, #16
 80093fc:	431a      	orrs	r2, r3
 80093fe:	7cbb      	ldrb	r3, [r7, #18]
 8009400:	021b      	lsls	r3, r3, #8
 8009402:	4313      	orrs	r3, r2
 8009404:	7cfa      	ldrb	r2, [r7, #19]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	0d1b      	lsrs	r3, r3, #20
 800940e:	b29a      	uxth	r2, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	b29b      	uxth	r3, r3
 800941a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2201      	movs	r2, #1
 800942a:	214b      	movs	r1, #75	; 0x4b
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fc0c 	bl	8009c4a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8009432:	89fb      	ldrh	r3, [r7, #14]
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2200      	movs	r2, #0
 8009438:	214b      	movs	r1, #75	; 0x4b
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fc05 	bl	8009c4a <IOE_Write>
}
 8009440:	bf00      	nop
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8009452:	f000 fbf4 	bl	8009c3e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	211f      	movs	r1, #31
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff fe76 	bl	800914c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8009460:	88fb      	ldrh	r3, [r7, #6]
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fe36 	bl	80090d4 <stmpe811_EnableGlobalIT>
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800947a:	88fb      	ldrh	r3, [r7, #6]
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff fe47 	bl	8009110 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8009482:	88fb      	ldrh	r3, [r7, #6]
 8009484:	211f      	movs	r1, #31
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff fe81 	bl	800918e <stmpe811_DisableITSource>
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	211f      	movs	r1, #31
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fe99 	bl	80091da <stmpe811_ReadGITStatus>
 80094a8:	4603      	mov	r3, r0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	4603      	mov	r3, r0
 80094ba:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	211f      	movs	r1, #31
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fea1 	bl	8009208 <stmpe811_ClearGlobalIT>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
 80094e2:	e00b      	b.n	80094fc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4a0a      	ldr	r2, [pc, #40]	; (8009510 <stmpe811_GetInstance+0x40>)
 80094e8:	5cd3      	ldrb	r3, [r2, r3]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	88fa      	ldrh	r2, [r7, #6]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d101      	bne.n	80094f6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	e006      	b.n	8009504 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	3301      	adds	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d9f0      	bls.n	80094e4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8009502:	23ff      	movs	r3, #255	; 0xff
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	20019a70 	.word	0x20019a70

08009514 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	460a      	mov	r2, r1
 800951e:	71fb      	strb	r3, [r7, #7]
 8009520:	4613      	mov	r3, r2
 8009522:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10d      	bne.n	8009546 <BSP_PB_Init+0x32>
 800952a:	2300      	movs	r3, #0
 800952c:	60bb      	str	r3, [r7, #8]
 800952e:	4b22      	ldr	r3, [pc, #136]	; (80095b8 <BSP_PB_Init+0xa4>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	4a21      	ldr	r2, [pc, #132]	; (80095b8 <BSP_PB_Init+0xa4>)
 8009534:	f043 0301 	orr.w	r3, r3, #1
 8009538:	6313      	str	r3, [r2, #48]	; 0x30
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <BSP_PB_Init+0xa4>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	60bb      	str	r3, [r7, #8]
 8009544:	68bb      	ldr	r3, [r7, #8]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 8009546:	79bb      	ldrb	r3, [r7, #6]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d111      	bne.n	8009570 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800954c:	2301      	movs	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009554:	2302      	movs	r3, #2
 8009556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8009558:	2302      	movs	r3, #2
 800955a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	4a17      	ldr	r2, [pc, #92]	; (80095bc <BSP_PB_Init+0xa8>)
 8009560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009564:	f107 020c 	add.w	r2, r7, #12
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f002 fb80 	bl	800bc70 <HAL_GPIO_Init>
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 8009570:	79bb      	ldrb	r3, [r7, #6]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d11b      	bne.n	80095ae <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8009576:	2301      	movs	r3, #1
 8009578:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800957e:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <BSP_PB_Init+0xac>)
 8009580:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8009582:	79fb      	ldrb	r3, [r7, #7]
 8009584:	4a0d      	ldr	r2, [pc, #52]	; (80095bc <BSP_PB_Init+0xa8>)
 8009586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958a:	f107 020c 	add.w	r2, r7, #12
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f002 fb6d 	bl	800bc70 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8009596:	2306      	movs	r3, #6
 8009598:	b25b      	sxtb	r3, r3
 800959a:	2200      	movs	r2, #0
 800959c:	210f      	movs	r1, #15
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 fed8 	bl	800b354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80095a4:	2306      	movs	r3, #6
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	4618      	mov	r0, r3
 80095aa:	f001 feef 	bl	800b38c <HAL_NVIC_EnableIRQ>
  }
}
 80095ae:	bf00      	nop
 80095b0:	3720      	adds	r7, #32
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	40023800 	.word	0x40023800
 80095bc:	20000894 	.word	0x20000894
 80095c0:	10110000 	.word	0x10110000

080095c4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	4a06      	ldr	r2, [pc, #24]	; (80095ec <BSP_PB_GetState+0x28>)
 80095d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d6:	2201      	movs	r2, #1
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f002 fdfc 	bl	800c1d8 <HAL_GPIO_ReadPin>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000894 	.word	0x20000894

080095f0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08a      	sub	sp, #40	; 0x28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a33      	ldr	r2, [pc, #204]	; (80096cc <I2Cx_MspInit+0xdc>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d15f      	bne.n	80096c2 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8009602:	2300      	movs	r3, #0
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	4b32      	ldr	r3, [pc, #200]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960a:	4a31      	ldr	r2, [pc, #196]	; (80096d0 <I2Cx_MspInit+0xe0>)
 800960c:	f043 0304 	orr.w	r3, r3, #4
 8009610:	6313      	str	r3, [r2, #48]	; 0x30
 8009612:	4b2f      	ldr	r3, [pc, #188]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	f003 0304 	and.w	r3, r3, #4
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	4b2b      	ldr	r3, [pc, #172]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009626:	4a2a      	ldr	r2, [pc, #168]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009628:	f043 0301 	orr.w	r3, r3, #1
 800962c:	6313      	str	r3, [r2, #48]	; 0x30
 800962e:	4b28      	ldr	r3, [pc, #160]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800963a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800963e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8009640:	2312      	movs	r3, #18
 8009642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009644:	2300      	movs	r3, #0
 8009646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8009648:	2302      	movs	r3, #2
 800964a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800964c:	2304      	movs	r3, #4
 800964e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8009650:	f107 0314 	add.w	r3, r7, #20
 8009654:	4619      	mov	r1, r3
 8009656:	481f      	ldr	r0, [pc, #124]	; (80096d4 <I2Cx_MspInit+0xe4>)
 8009658:	f002 fb0a 	bl	800bc70 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800965c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009660:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8009662:	f107 0314 	add.w	r3, r7, #20
 8009666:	4619      	mov	r1, r3
 8009668:	481b      	ldr	r0, [pc, #108]	; (80096d8 <I2Cx_MspInit+0xe8>)
 800966a:	f002 fb01 	bl	800bc70 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]
 8009672:	4b17      	ldr	r3, [pc, #92]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	4a16      	ldr	r2, [pc, #88]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009678:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800967c:	6413      	str	r3, [r2, #64]	; 0x40
 800967e:	4b14      	ldr	r3, [pc, #80]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009686:	60bb      	str	r3, [r7, #8]
 8009688:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <I2Cx_MspInit+0xe0>)
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	4a10      	ldr	r2, [pc, #64]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009694:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8009696:	4b0e      	ldr	r3, [pc, #56]	; (80096d0 <I2Cx_MspInit+0xe0>)
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	4a0d      	ldr	r2, [pc, #52]	; (80096d0 <I2Cx_MspInit+0xe0>)
 800969c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80096a0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80096a2:	2200      	movs	r2, #0
 80096a4:	210f      	movs	r1, #15
 80096a6:	2048      	movs	r0, #72	; 0x48
 80096a8:	f001 fe54 	bl	800b354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80096ac:	2048      	movs	r0, #72	; 0x48
 80096ae:	f001 fe6d 	bl	800b38c <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80096b2:	2200      	movs	r2, #0
 80096b4:	210f      	movs	r1, #15
 80096b6:	2049      	movs	r0, #73	; 0x49
 80096b8:	f001 fe4c 	bl	800b354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80096bc:	2049      	movs	r0, #73	; 0x49
 80096be:	f001 fe65 	bl	800b38c <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80096c2:	bf00      	nop
 80096c4:	3728      	adds	r7, #40	; 0x28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	40005c00 	.word	0x40005c00
 80096d0:	40023800 	.word	0x40023800
 80096d4:	40020000 	.word	0x40020000
 80096d8:	40020800 	.word	0x40020800

080096dc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80096e0:	4814      	ldr	r0, [pc, #80]	; (8009734 <I2Cx_Init+0x58>)
 80096e2:	f003 fa33 	bl	800cb4c <HAL_I2C_GetState>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d121      	bne.n	8009730 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80096ec:	4b11      	ldr	r3, [pc, #68]	; (8009734 <I2Cx_Init+0x58>)
 80096ee:	4a12      	ldr	r2, [pc, #72]	; (8009738 <I2Cx_Init+0x5c>)
 80096f0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80096f2:	4b10      	ldr	r3, [pc, #64]	; (8009734 <I2Cx_Init+0x58>)
 80096f4:	4a11      	ldr	r2, [pc, #68]	; (800973c <I2Cx_Init+0x60>)
 80096f6:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80096f8:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <I2Cx_Init+0x58>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80096fe:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <I2Cx_Init+0x58>)
 8009700:	2200      	movs	r2, #0
 8009702:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <I2Cx_Init+0x58>)
 8009706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800970a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800970c:	4b09      	ldr	r3, [pc, #36]	; (8009734 <I2Cx_Init+0x58>)
 800970e:	2200      	movs	r2, #0
 8009710:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8009712:	4b08      	ldr	r3, [pc, #32]	; (8009734 <I2Cx_Init+0x58>)
 8009714:	2200      	movs	r2, #0
 8009716:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8009718:	4b06      	ldr	r3, [pc, #24]	; (8009734 <I2Cx_Init+0x58>)
 800971a:	2200      	movs	r2, #0
 800971c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <I2Cx_Init+0x58>)
 8009720:	2200      	movs	r2, #0
 8009722:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8009724:	4803      	ldr	r0, [pc, #12]	; (8009734 <I2Cx_Init+0x58>)
 8009726:	f7ff ff63 	bl	80095f0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800972a:	4802      	ldr	r0, [pc, #8]	; (8009734 <I2Cx_Init+0x58>)
 800972c:	f002 fd86 	bl	800c23c <HAL_I2C_Init>
  }
}
 8009730:	bf00      	nop
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20019ed4 	.word	0x20019ed4
 8009738:	40005c00 	.word	0x40005c00
 800973c:	000186a0 	.word	0x000186a0

08009740 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8009746:	2300      	movs	r3, #0
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	4b13      	ldr	r3, [pc, #76]	; (8009798 <I2Cx_ITConfig+0x58>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	4a12      	ldr	r2, [pc, #72]	; (8009798 <I2Cx_ITConfig+0x58>)
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	6313      	str	r3, [r2, #48]	; 0x30
 8009756:	4b10      	ldr	r3, [pc, #64]	; (8009798 <I2Cx_ITConfig+0x58>)
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8009762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8009768:	2301      	movs	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800976c:	2300      	movs	r3, #0
 800976e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <I2Cx_ITConfig+0x5c>)
 8009772:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8009774:	1d3b      	adds	r3, r7, #4
 8009776:	4619      	mov	r1, r3
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <I2Cx_ITConfig+0x60>)
 800977a:	f002 fa79 	bl	800bc70 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800977e:	2200      	movs	r2, #0
 8009780:	210f      	movs	r1, #15
 8009782:	2028      	movs	r0, #40	; 0x28
 8009784:	f001 fde6 	bl	800b354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8009788:	2028      	movs	r0, #40	; 0x28
 800978a:	f001 fdff 	bl	800b38c <HAL_NVIC_EnableIRQ>
}
 800978e:	bf00      	nop
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40023800 	.word	0x40023800
 800979c:	10210000 	.word	0x10210000
 80097a0:	40020000 	.word	0x40020000

080097a4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af04      	add	r7, sp, #16
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
 80097ae:	460b      	mov	r3, r1
 80097b0:	71bb      	strb	r3, [r7, #6]
 80097b2:	4613      	mov	r3, r2
 80097b4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80097ba:	79fb      	ldrb	r3, [r7, #7]
 80097bc:	b299      	uxth	r1, r3
 80097be:	79bb      	ldrb	r3, [r7, #6]
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <I2Cx_WriteData+0x4c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	2301      	movs	r3, #1
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	1d7b      	adds	r3, r7, #5
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	2301      	movs	r3, #1
 80097d2:	4808      	ldr	r0, [pc, #32]	; (80097f4 <I2Cx_WriteData+0x50>)
 80097d4:	f002 fe9a 	bl	800c50c <HAL_I2C_Mem_Write>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80097e2:	f000 f863 	bl	80098ac <I2Cx_Error>
  }        
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000898 	.word	0x20000898
 80097f4:	20019ed4 	.word	0x20019ed4

080097f8 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af04      	add	r7, sp, #16
 80097fe:	4603      	mov	r3, r0
 8009800:	460a      	mov	r2, r1
 8009802:	71fb      	strb	r3, [r7, #7]
 8009804:	4613      	mov	r3, r2
 8009806:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	b299      	uxth	r1, r3
 8009814:	79bb      	ldrb	r3, [r7, #6]
 8009816:	b29a      	uxth	r2, r3
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <I2Cx_ReadData+0x50>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9302      	str	r3, [sp, #8]
 800981e:	2301      	movs	r3, #1
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	f107 030e 	add.w	r3, r7, #14
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	2301      	movs	r3, #1
 800982a:	4808      	ldr	r0, [pc, #32]	; (800984c <I2Cx_ReadData+0x54>)
 800982c:	f002 ff68 	bl	800c700 <HAL_I2C_Mem_Read>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800983a:	f000 f837 	bl	80098ac <I2Cx_Error>
  
  }
  return value;
 800983e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000898 	.word	0x20000898
 800984c:	20019ed4 	.word	0x20019ed4

08009850 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af04      	add	r7, sp, #16
 8009856:	603a      	str	r2, [r7, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
 800985e:	460b      	mov	r3, r1
 8009860:	71bb      	strb	r3, [r7, #6]
 8009862:	4613      	mov	r3, r2
 8009864:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	b299      	uxth	r1, r3
 800986e:	79bb      	ldrb	r3, [r7, #6]
 8009870:	b29a      	uxth	r2, r3
 8009872:	4b0c      	ldr	r3, [pc, #48]	; (80098a4 <I2Cx_ReadBuffer+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	9302      	str	r3, [sp, #8]
 8009878:	88bb      	ldrh	r3, [r7, #4]
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	2301      	movs	r3, #1
 8009882:	4809      	ldr	r0, [pc, #36]	; (80098a8 <I2Cx_ReadBuffer+0x58>)
 8009884:	f002 ff3c 	bl	800c700 <HAL_I2C_Mem_Read>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8009892:	2300      	movs	r3, #0
 8009894:	e002      	b.n	800989c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8009896:	f000 f809 	bl	80098ac <I2Cx_Error>

    return 1;
 800989a:	2301      	movs	r3, #1
  }
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20000898 	.word	0x20000898
 80098a8:	20019ed4 	.word	0x20019ed4

080098ac <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80098b0:	4803      	ldr	r0, [pc, #12]	; (80098c0 <I2Cx_Error+0x14>)
 80098b2:	f002 fdfb 	bl	800c4ac <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80098b6:	f7ff ff11 	bl	80096dc <I2Cx_Init>
}
 80098ba:	bf00      	nop
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20019ed4 	.word	0x20019ed4

080098c4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80098c8:	4819      	ldr	r0, [pc, #100]	; (8009930 <SPIx_Init+0x6c>)
 80098ca:	f005 fba9 	bl	800f020 <HAL_SPI_GetState>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d12b      	bne.n	800992c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80098d4:	4b16      	ldr	r3, [pc, #88]	; (8009930 <SPIx_Init+0x6c>)
 80098d6:	4a17      	ldr	r2, [pc, #92]	; (8009934 <SPIx_Init+0x70>)
 80098d8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80098da:	4b15      	ldr	r3, [pc, #84]	; (8009930 <SPIx_Init+0x6c>)
 80098dc:	2218      	movs	r2, #24
 80098de:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80098e0:	4b13      	ldr	r3, [pc, #76]	; (8009930 <SPIx_Init+0x6c>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80098e6:	4b12      	ldr	r3, [pc, #72]	; (8009930 <SPIx_Init+0x6c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80098ec:	4b10      	ldr	r3, [pc, #64]	; (8009930 <SPIx_Init+0x6c>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80098f2:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <SPIx_Init+0x6c>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80098f8:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <SPIx_Init+0x6c>)
 80098fa:	2207      	movs	r2, #7
 80098fc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80098fe:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <SPIx_Init+0x6c>)
 8009900:	2200      	movs	r2, #0
 8009902:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8009904:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <SPIx_Init+0x6c>)
 8009906:	2200      	movs	r2, #0
 8009908:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800990a:	4b09      	ldr	r3, [pc, #36]	; (8009930 <SPIx_Init+0x6c>)
 800990c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009910:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8009912:	4b07      	ldr	r3, [pc, #28]	; (8009930 <SPIx_Init+0x6c>)
 8009914:	2200      	movs	r2, #0
 8009916:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8009918:	4b05      	ldr	r3, [pc, #20]	; (8009930 <SPIx_Init+0x6c>)
 800991a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800991e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8009920:	4803      	ldr	r0, [pc, #12]	; (8009930 <SPIx_Init+0x6c>)
 8009922:	f000 f853 	bl	80099cc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8009926:	4802      	ldr	r0, [pc, #8]	; (8009930 <SPIx_Init+0x6c>)
 8009928:	f004 ff0f 	bl	800e74a <HAL_SPI_Init>
  } 
}
 800992c:	bf00      	nop
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20019a74 	.word	0x20019a74
 8009934:	40015000 	.word	0x40015000

08009938 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	b29a      	uxth	r2, r3
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <SPIx_Read+0x38>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f107 0108 	add.w	r1, r7, #8
 8009952:	4808      	ldr	r0, [pc, #32]	; (8009974 <SPIx_Read+0x3c>)
 8009954:	f005 f8b9 	bl	800eaca <HAL_SPI_Receive>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8009962:	f000 f827 	bl	80099b4 <SPIx_Error>
  }
  
  return readvalue;
 8009966:	68bb      	ldr	r3, [r7, #8]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	2000089c 	.word	0x2000089c
 8009974:	20019a74 	.word	0x20019a74

08009978 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8009986:	4b09      	ldr	r3, [pc, #36]	; (80099ac <SPIx_Write+0x34>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	1db9      	adds	r1, r7, #6
 800998c:	2201      	movs	r2, #1
 800998e:	4808      	ldr	r0, [pc, #32]	; (80099b0 <SPIx_Write+0x38>)
 8009990:	f004 ff67 	bl	800e862 <HAL_SPI_Transmit>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800999e:	f000 f809 	bl	80099b4 <SPIx_Error>
  }
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	2000089c 	.word	0x2000089c
 80099b0:	20019a74 	.word	0x20019a74

080099b4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80099b8:	4803      	ldr	r0, [pc, #12]	; (80099c8 <SPIx_Error+0x14>)
 80099ba:	f004 ff2a 	bl	800e812 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80099be:	f7ff ff81 	bl	80098c4 <SPIx_Init>
}
 80099c2:	bf00      	nop
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20019a74 	.word	0x20019a74

080099cc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08a      	sub	sp, #40	; 0x28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80099d4:	2300      	movs	r3, #0
 80099d6:	613b      	str	r3, [r7, #16]
 80099d8:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <SPIx_MspInit+0x6c>)
 80099da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099dc:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <SPIx_MspInit+0x6c>)
 80099de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099e2:	6453      	str	r3, [r2, #68]	; 0x44
 80099e4:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <SPIx_MspInit+0x6c>)
 80099e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099ec:	613b      	str	r3, [r7, #16]
 80099ee:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <SPIx_MspInit+0x6c>)
 80099f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f8:	4a0f      	ldr	r2, [pc, #60]	; (8009a38 <SPIx_MspInit+0x6c>)
 80099fa:	f043 0320 	orr.w	r3, r3, #32
 80099fe:	6313      	str	r3, [r2, #48]	; 0x30
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <SPIx_MspInit+0x6c>)
 8009a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8009a0c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8009a12:	2302      	movs	r3, #2
 8009a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8009a16:	2302      	movs	r3, #2
 8009a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8009a1e:	2305      	movs	r3, #5
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8009a22:	f107 0314 	add.w	r3, r7, #20
 8009a26:	4619      	mov	r1, r3
 8009a28:	4804      	ldr	r0, [pc, #16]	; (8009a3c <SPIx_MspInit+0x70>)
 8009a2a:	f002 f921 	bl	800bc70 <HAL_GPIO_Init>
}
 8009a2e:	bf00      	nop
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	40021400 	.word	0x40021400

08009a40 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8009a46:	4b36      	ldr	r3, [pc, #216]	; (8009b20 <LCD_IO_Init+0xe0>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d164      	bne.n	8009b18 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8009a4e:	4b34      	ldr	r3, [pc, #208]	; (8009b20 <LCD_IO_Init+0xe0>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8009a54:	2300      	movs	r3, #0
 8009a56:	60bb      	str	r3, [r7, #8]
 8009a58:	4b32      	ldr	r3, [pc, #200]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5c:	4a31      	ldr	r2, [pc, #196]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009a5e:	f043 0308 	orr.w	r3, r3, #8
 8009a62:	6313      	str	r3, [r2, #48]	; 0x30
 8009a64:	4b2f      	ldr	r3, [pc, #188]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	60bb      	str	r3, [r7, #8]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8009a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009a76:	2301      	movs	r3, #1
 8009a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8009a82:	f107 030c 	add.w	r3, r7, #12
 8009a86:	4619      	mov	r1, r3
 8009a88:	4827      	ldr	r0, [pc, #156]	; (8009b28 <LCD_IO_Init+0xe8>)
 8009a8a:	f002 f8f1 	bl	800bc70 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8009a8e:	2300      	movs	r3, #0
 8009a90:	607b      	str	r3, [r7, #4]
 8009a92:	4b24      	ldr	r3, [pc, #144]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	4a23      	ldr	r2, [pc, #140]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009a98:	f043 0308 	orr.w	r3, r3, #8
 8009a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a9e:	4b21      	ldr	r3, [pc, #132]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa2:	f003 0308 	and.w	r3, r3, #8
 8009aa6:	607b      	str	r3, [r7, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8009aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8009abc:	f107 030c 	add.w	r3, r7, #12
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4819      	ldr	r0, [pc, #100]	; (8009b28 <LCD_IO_Init+0xe8>)
 8009ac4:	f002 f8d4 	bl	800bc70 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8009ac8:	2300      	movs	r3, #0
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	4b15      	ldr	r3, [pc, #84]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad0:	4a14      	ldr	r2, [pc, #80]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009ad2:	f043 0304 	orr.w	r3, r3, #4
 8009ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8009ad8:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <LCD_IO_Init+0xe4>)
 8009ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009adc:	f003 0304 	and.w	r3, r3, #4
 8009ae0:	603b      	str	r3, [r7, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8009af0:	2302      	movs	r3, #2
 8009af2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8009af4:	f107 030c 	add.w	r3, r7, #12
 8009af8:	4619      	mov	r1, r3
 8009afa:	480c      	ldr	r0, [pc, #48]	; (8009b2c <LCD_IO_Init+0xec>)
 8009afc:	f002 f8b8 	bl	800bc70 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8009b00:	2200      	movs	r2, #0
 8009b02:	2104      	movs	r1, #4
 8009b04:	4809      	ldr	r0, [pc, #36]	; (8009b2c <LCD_IO_Init+0xec>)
 8009b06:	f002 fb7f 	bl	800c208 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	2104      	movs	r1, #4
 8009b0e:	4807      	ldr	r0, [pc, #28]	; (8009b2c <LCD_IO_Init+0xec>)
 8009b10:	f002 fb7a 	bl	800c208 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8009b14:	f7ff fed6 	bl	80098c4 <SPIx_Init>
  }
}
 8009b18:	bf00      	nop
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20019acc 	.word	0x20019acc
 8009b24:	40023800 	.word	0x40023800
 8009b28:	40020c00 	.word	0x40020c00
 8009b2c:	40020800 	.word	0x40020800

08009b30 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b40:	480a      	ldr	r0, [pc, #40]	; (8009b6c <LCD_IO_WriteData+0x3c>)
 8009b42:	f002 fb61 	bl	800c208 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8009b46:	2200      	movs	r2, #0
 8009b48:	2104      	movs	r1, #4
 8009b4a:	4809      	ldr	r0, [pc, #36]	; (8009b70 <LCD_IO_WriteData+0x40>)
 8009b4c:	f002 fb5c 	bl	800c208 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8009b50:	88fb      	ldrh	r3, [r7, #6]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff ff10 	bl	8009978 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009b58:	2201      	movs	r2, #1
 8009b5a:	2104      	movs	r1, #4
 8009b5c:	4804      	ldr	r0, [pc, #16]	; (8009b70 <LCD_IO_WriteData+0x40>)
 8009b5e:	f002 fb53 	bl	800c208 <HAL_GPIO_WritePin>
}
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	40020c00 	.word	0x40020c00
 8009b70:	40020800 	.word	0x40020800

08009b74 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b84:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <LCD_IO_WriteReg+0x3c>)
 8009b86:	f002 fb3f 	bl	800c208 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2104      	movs	r1, #4
 8009b8e:	4809      	ldr	r0, [pc, #36]	; (8009bb4 <LCD_IO_WriteReg+0x40>)
 8009b90:	f002 fb3a 	bl	800c208 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff feed 	bl	8009978 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	2104      	movs	r1, #4
 8009ba2:	4804      	ldr	r0, [pc, #16]	; (8009bb4 <LCD_IO_WriteReg+0x40>)
 8009ba4:	f002 fb30 	bl	800c208 <HAL_GPIO_WritePin>
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	40020c00 	.word	0x40020c00
 8009bb4:	40020800 	.word	0x40020800

08009bb8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	80fb      	strh	r3, [r7, #6]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2104      	movs	r1, #4
 8009bd0:	4810      	ldr	r0, [pc, #64]	; (8009c14 <LCD_IO_ReadData+0x5c>)
 8009bd2:	f002 fb19 	bl	800c208 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009bdc:	480e      	ldr	r0, [pc, #56]	; (8009c18 <LCD_IO_ReadData+0x60>)
 8009bde:	f002 fb13 	bl	800c208 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8009be2:	88fb      	ldrh	r3, [r7, #6]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fec7 	bl	8009978 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8009bea:	797b      	ldrb	r3, [r7, #5]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff fea3 	bl	8009938 <SPIx_Read>
 8009bf2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009bfa:	4807      	ldr	r0, [pc, #28]	; (8009c18 <LCD_IO_ReadData+0x60>)
 8009bfc:	f002 fb04 	bl	800c208 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8009c00:	2201      	movs	r2, #1
 8009c02:	2104      	movs	r1, #4
 8009c04:	4803      	ldr	r0, [pc, #12]	; (8009c14 <LCD_IO_ReadData+0x5c>)
 8009c06:	f002 faff 	bl	800c208 <HAL_GPIO_WritePin>
  
  return readvalue;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40020800 	.word	0x40020800
 8009c18:	40020c00 	.word	0x40020c00

08009c1c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 fabb 	bl	800b1a0 <HAL_Delay>
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8009c36:	f7ff fd51 	bl	80096dc <I2Cx_Init>
}
 8009c3a:	bf00      	nop
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8009c42:	f7ff fd7d 	bl	8009740 <I2Cx_ITConfig>
}
 8009c46:	bf00      	nop
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	4603      	mov	r3, r0
 8009c52:	71fb      	strb	r3, [r7, #7]
 8009c54:	460b      	mov	r3, r1
 8009c56:	71bb      	strb	r3, [r7, #6]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8009c5c:	797a      	ldrb	r2, [r7, #5]
 8009c5e:	79b9      	ldrb	r1, [r7, #6]
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff fd9e 	bl	80097a4 <I2Cx_WriteData>
}
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	460a      	mov	r2, r1
 8009c7a:	71fb      	strb	r3, [r7, #7]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8009c80:	79ba      	ldrb	r2, [r7, #6]
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff fdb6 	bl	80097f8 <I2Cx_ReadData>
 8009c8c:	4603      	mov	r3, r0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	603a      	str	r2, [r7, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	71fb      	strb	r3, [r7, #7]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	71bb      	strb	r3, [r7, #6]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8009cac:	88bb      	ldrh	r3, [r7, #4]
 8009cae:	79b9      	ldrb	r1, [r7, #6]
 8009cb0:	79f8      	ldrb	r0, [r7, #7]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	f7ff fdcc 	bl	8009850 <I2Cx_ReadBuffer>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	b29b      	uxth	r3, r3
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 fa67 	bl	800b1a0 <HAL_Delay>
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8009ce0:	4b2d      	ldr	r3, [pc, #180]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009ce2:	4a2e      	ldr	r2, [pc, #184]	; (8009d9c <BSP_LCD_Init+0xc0>)
 8009ce4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8009ce6:	4b2c      	ldr	r3, [pc, #176]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009ce8:	2209      	movs	r2, #9
 8009cea:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8009cec:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009cee:	2201      	movs	r2, #1
 8009cf0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8009cf2:	4b29      	ldr	r3, [pc, #164]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009cf4:	221d      	movs	r2, #29
 8009cf6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8009cf8:	4b27      	ldr	r3, [pc, #156]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009cfa:	2203      	movs	r2, #3
 8009cfc:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8009cfe:	4b26      	ldr	r3, [pc, #152]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d00:	f240 120d 	movw	r2, #269	; 0x10d
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8009d06:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d08:	f240 1243 	movw	r2, #323	; 0x143
 8009d0c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8009d0e:	4b22      	ldr	r3, [pc, #136]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d10:	f240 1217 	movw	r2, #279	; 0x117
 8009d14:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8009d16:	4b20      	ldr	r3, [pc, #128]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d18:	f240 1247 	movw	r2, #327	; 0x147
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8009d1e:	4b1e      	ldr	r3, [pc, #120]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8009d2e:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <BSP_LCD_Init+0xc4>)
 8009d38:	2208      	movs	r2, #8
 8009d3a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8009d3c:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <BSP_LCD_Init+0xc4>)
 8009d3e:	22c0      	movs	r2, #192	; 0xc0
 8009d40:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8009d42:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <BSP_LCD_Init+0xc4>)
 8009d44:	2204      	movs	r2, #4
 8009d46:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009d48:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <BSP_LCD_Init+0xc4>)
 8009d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009d4e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8009d50:	4813      	ldr	r0, [pc, #76]	; (8009da0 <BSP_LCD_Init+0xc4>)
 8009d52:	f004 fabd 	bl	800e2d0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009d56:	4b10      	ldr	r3, [pc, #64]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009d5c:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009d62:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009d68:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8009d6e:	f000 fd1b 	bl	800a7a8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8009d72:	4809      	ldr	r0, [pc, #36]	; (8009d98 <BSP_LCD_Init+0xbc>)
 8009d74:	f003 faca 	bl	800d30c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8009d78:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <BSP_LCD_Init+0xc8>)
 8009d7a:	4a0b      	ldr	r2, [pc, #44]	; (8009da8 <BSP_LCD_Init+0xcc>)
 8009d7c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <BSP_LCD_Init+0xc8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8009d86:	f000 fefd 	bl	800ab84 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009d8a:	4808      	ldr	r0, [pc, #32]	; (8009dac <BSP_LCD_Init+0xd0>)
 8009d8c:	f000 f920 	bl	8009fd0 <BSP_LCD_SetFont>

  return LCD_OK;
 8009d90:	2300      	movs	r3, #0
}  
 8009d92:	4618      	mov	r0, r3
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20019f28 	.word	0x20019f28
 8009d9c:	40016800 	.word	0x40016800
 8009da0:	20019b10 	.word	0x20019b10
 8009da4:	20019fd0 	.word	0x20019fd0
 8009da8:	20000834 	.word	0x20000834
 8009dac:	200008a0 	.word	0x200008a0

08009db0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8009db4:	4b03      	ldr	r3, [pc, #12]	; (8009dc4 <BSP_LCD_GetXSize+0x14>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	4798      	blx	r3
 8009dbc:	4603      	mov	r3, r0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20019fd0 	.word	0x20019fd0

08009dc8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8009dcc:	4b03      	ldr	r3, [pc, #12]	; (8009ddc <BSP_LCD_GetYSize+0x14>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	4798      	blx	r3
 8009dd4:	4603      	mov	r3, r0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20019fd0 	.word	0x20019fd0

08009de0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b090      	sub	sp, #64	; 0x40
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8009df0:	f7ff ffde 	bl	8009db0 <BSP_LCD_GetXSize>
 8009df4:	4603      	mov	r3, r0
 8009df6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009dfc:	f7ff ffe4 	bl	8009dc8 <BSP_LCD_GetYSize>
 8009e00:	4603      	mov	r3, r0
 8009e02:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009e04:	2300      	movs	r3, #0
 8009e06:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8009e0c:	23ff      	movs	r3, #255	; 0xff
 8009e0e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009e2c:	2307      	movs	r3, #7
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8009e30:	f7ff ffbe 	bl	8009db0 <BSP_LCD_GetXSize>
 8009e34:	4603      	mov	r3, r0
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8009e38:	f7ff ffc6 	bl	8009dc8 <BSP_LCD_GetYSize>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	f107 030c 	add.w	r3, r7, #12
 8009e46:	4619      	mov	r1, r3
 8009e48:	4814      	ldr	r0, [pc, #80]	; (8009e9c <BSP_LCD_LayerDefaultInit+0xbc>)
 8009e4a:	f003 fb2f 	bl	800d4ac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	4913      	ldr	r1, [pc, #76]	; (8009ea0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009e52:	4613      	mov	r3, r2
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8009e64:	88fa      	ldrh	r2, [r7, #6]
 8009e66:	490e      	ldr	r1, [pc, #56]	; (8009ea0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009e68:	4613      	mov	r3, r2
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	3308      	adds	r3, #8
 8009e74:	4a0b      	ldr	r2, [pc, #44]	; (8009ea4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8009e76:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	4909      	ldr	r1, [pc, #36]	; (8009ea0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009e8a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8009e8c:	4803      	ldr	r0, [pc, #12]	; (8009e9c <BSP_LCD_LayerDefaultInit+0xbc>)
 8009e8e:	f003 fbc9 	bl	800d624 <HAL_LTDC_EnableDither>
}
 8009e92:	bf00      	nop
 8009e94:	3740      	adds	r7, #64	; 0x40
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20019f28 	.word	0x20019f28
 8009ea0:	20019b44 	.word	0x20019b44
 8009ea4:	200008a0 	.word	0x200008a0

08009ea8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8009eb0:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <BSP_LCD_SelectLayer+0x1c>)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6013      	str	r3, [r2, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20019b40 	.word	0x20019b40

08009ec8 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d112      	bne.n	8009f00 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8009eda:	4b19      	ldr	r3, [pc, #100]	; (8009f40 <BSP_LCD_SetLayerVisible+0x78>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	01db      	lsls	r3, r3, #7
 8009ee4:	4413      	add	r3, r2
 8009ee6:	3384      	adds	r3, #132	; 0x84
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <BSP_LCD_SetLayerVisible+0x78>)
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	01d2      	lsls	r2, r2, #7
 8009ef4:	440a      	add	r2, r1
 8009ef6:	3284      	adds	r2, #132	; 0x84
 8009ef8:	f043 0301 	orr.w	r3, r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	e011      	b.n	8009f24 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <BSP_LCD_SetLayerVisible+0x78>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	461a      	mov	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	01db      	lsls	r3, r3, #7
 8009f0a:	4413      	add	r3, r2
 8009f0c:	3384      	adds	r3, #132	; 0x84
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a0b      	ldr	r2, [pc, #44]	; (8009f40 <BSP_LCD_SetLayerVisible+0x78>)
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	4611      	mov	r1, r2
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	01d2      	lsls	r2, r2, #7
 8009f1a:	440a      	add	r2, r1
 8009f1c:	3284      	adds	r2, #132	; 0x84
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8009f24:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <BSP_LCD_SetLayerVisible+0x78>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <BSP_LCD_SetLayerVisible+0x78>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	20019f28 	.word	0x20019f28

08009f44 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	4805      	ldr	r0, [pc, #20]	; (8009f68 <BSP_LCD_SetColorKeying+0x24>)
 8009f54:	f003 fae8 	bl	800d528 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	4803      	ldr	r0, [pc, #12]	; (8009f68 <BSP_LCD_SetColorKeying+0x24>)
 8009f5c:	f003 fb28 	bl	800d5b0 <HAL_LTDC_EnableColorKeying>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20019f28 	.word	0x20019f28

08009f6c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8009f74:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <BSP_LCD_SetTextColor+0x28>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	4907      	ldr	r1, [pc, #28]	; (8009f98 <BSP_LCD_SetTextColor+0x2c>)
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	601a      	str	r2, [r3, #0]
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	20019b40 	.word	0x20019b40
 8009f98:	20019b44 	.word	0x20019b44

08009f9c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8009fa4:	4b08      	ldr	r3, [pc, #32]	; (8009fc8 <BSP_LCD_SetBackColor+0x2c>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	4908      	ldr	r1, [pc, #32]	; (8009fcc <BSP_LCD_SetBackColor+0x30>)
 8009faa:	4613      	mov	r3, r2
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	440b      	add	r3, r1
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	601a      	str	r2, [r3, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	20019b40 	.word	0x20019b40
 8009fcc:	20019b44 	.word	0x20019b44

08009fd0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8009fd8:	4b08      	ldr	r3, [pc, #32]	; (8009ffc <BSP_LCD_SetFont+0x2c>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	4908      	ldr	r1, [pc, #32]	; (800a000 <BSP_LCD_SetFont+0x30>)
 8009fde:	4613      	mov	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	3308      	adds	r3, #8
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	601a      	str	r2, [r3, #0]
}
 8009fee:	bf00      	nop
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	20019b40 	.word	0x20019b40
 800a000:	20019b44 	.word	0x20019b44

0800a004 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800a004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a006:	b085      	sub	sp, #20
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800a00c:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <BSP_LCD_Clear+0x48>)
 800a00e:	681c      	ldr	r4, [r3, #0]
 800a010:	4b0e      	ldr	r3, [pc, #56]	; (800a04c <BSP_LCD_Clear+0x48>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a0e      	ldr	r2, [pc, #56]	; (800a050 <BSP_LCD_Clear+0x4c>)
 800a016:	2134      	movs	r1, #52	; 0x34
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	4413      	add	r3, r2
 800a01e:	335c      	adds	r3, #92	; 0x5c
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	461d      	mov	r5, r3
 800a024:	f7ff fec4 	bl	8009db0 <BSP_LCD_GetXSize>
 800a028:	4606      	mov	r6, r0
 800a02a:	f7ff fecd 	bl	8009dc8 <BSP_LCD_GetYSize>
 800a02e:	4602      	mov	r2, r0
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	2300      	movs	r3, #0
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	4613      	mov	r3, r2
 800a03a:	4632      	mov	r2, r6
 800a03c:	4629      	mov	r1, r5
 800a03e:	4620      	mov	r0, r4
 800a040:	f000 fd68 	bl	800ab14 <FillBuffer>
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a04c:	20019b40 	.word	0x20019b40
 800a050:	20019f28 	.word	0x20019f28

0800a054 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a054:	b590      	push	{r4, r7, lr}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	80fb      	strh	r3, [r7, #6]
 800a05e:	460b      	mov	r3, r1
 800a060:	80bb      	strh	r3, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a066:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <BSP_LCD_DisplayChar+0x80>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	491b      	ldr	r1, [pc, #108]	; (800a0d8 <BSP_LCD_DisplayChar+0x84>)
 800a06c:	4613      	mov	r3, r2
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	4413      	add	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	440b      	add	r3, r1
 800a076:	3308      	adds	r3, #8
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6819      	ldr	r1, [r3, #0]
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a082:	4b14      	ldr	r3, [pc, #80]	; (800a0d4 <BSP_LCD_DisplayChar+0x80>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4c14      	ldr	r4, [pc, #80]	; (800a0d8 <BSP_LCD_DisplayChar+0x84>)
 800a088:	4613      	mov	r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4423      	add	r3, r4
 800a092:	3308      	adds	r3, #8
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a098:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <BSP_LCD_DisplayChar+0x80>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	4c0d      	ldr	r4, [pc, #52]	; (800a0d8 <BSP_LCD_DisplayChar+0x84>)
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4423      	add	r3, r4
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	889b      	ldrh	r3, [r3, #4]
 800a0b2:	3307      	adds	r3, #7
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da00      	bge.n	800a0ba <BSP_LCD_DisplayChar+0x66>
 800a0b8:	3307      	adds	r3, #7
 800a0ba:	10db      	asrs	r3, r3, #3
 800a0bc:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a0c0:	18ca      	adds	r2, r1, r3
 800a0c2:	88b9      	ldrh	r1, [r7, #4]
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fc6a 	bl	800a9a0 <DrawChar>
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd90      	pop	{r4, r7, pc}
 800a0d4:	20019b40 	.word	0x20019b40
 800a0d8:	20019b44 	.word	0x20019b44

0800a0dc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800a0dc:	b5b0      	push	{r4, r5, r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60ba      	str	r2, [r7, #8]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	81fb      	strh	r3, [r7, #14]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	81bb      	strh	r3, [r7, #12]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	83fb      	strh	r3, [r7, #30]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61bb      	str	r3, [r7, #24]
 800a0fe:	2300      	movs	r3, #0
 800a100:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800a106:	e002      	b.n	800a10e <BSP_LCD_DisplayStringAt+0x32>
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61bb      	str	r3, [r7, #24]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	617a      	str	r2, [r7, #20]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1f6      	bne.n	800a108 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800a11a:	f7ff fe49 	bl	8009db0 <BSP_LCD_GetXSize>
 800a11e:	4b4a      	ldr	r3, [pc, #296]	; (800a248 <BSP_LCD_DisplayStringAt+0x16c>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	494a      	ldr	r1, [pc, #296]	; (800a24c <BSP_LCD_DisplayStringAt+0x170>)
 800a124:	4613      	mov	r3, r2
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	3308      	adds	r3, #8
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	889b      	ldrh	r3, [r3, #4]
 800a134:	fbb0 f3f3 	udiv	r3, r0, r3
 800a138:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d01c      	beq.n	800a17a <BSP_LCD_DisplayStringAt+0x9e>
 800a140:	2b03      	cmp	r3, #3
 800a142:	d017      	beq.n	800a174 <BSP_LCD_DisplayStringAt+0x98>
 800a144:	2b01      	cmp	r3, #1
 800a146:	d12e      	bne.n	800a1a6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	1ad1      	subs	r1, r2, r3
 800a14e:	4b3e      	ldr	r3, [pc, #248]	; (800a248 <BSP_LCD_DisplayStringAt+0x16c>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	483e      	ldr	r0, [pc, #248]	; (800a24c <BSP_LCD_DisplayStringAt+0x170>)
 800a154:	4613      	mov	r3, r2
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4403      	add	r3, r0
 800a15e:	3308      	adds	r3, #8
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	889b      	ldrh	r3, [r3, #4]
 800a164:	fb03 f301 	mul.w	r3, r3, r1
 800a168:	085b      	lsrs	r3, r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	89fb      	ldrh	r3, [r7, #14]
 800a16e:	4413      	add	r3, r2
 800a170:	83fb      	strh	r3, [r7, #30]
      break;
 800a172:	e01b      	b.n	800a1ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800a174:	89fb      	ldrh	r3, [r7, #14]
 800a176:	83fb      	strh	r3, [r7, #30]
      break;
 800a178:	e018      	b.n	800a1ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	b299      	uxth	r1, r3
 800a182:	4b31      	ldr	r3, [pc, #196]	; (800a248 <BSP_LCD_DisplayStringAt+0x16c>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	4831      	ldr	r0, [pc, #196]	; (800a24c <BSP_LCD_DisplayStringAt+0x170>)
 800a188:	4613      	mov	r3, r2
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4403      	add	r3, r0
 800a192:	3308      	adds	r3, #8
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	889b      	ldrh	r3, [r3, #4]
 800a198:	fb11 f303 	smulbb	r3, r1, r3
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	89fb      	ldrh	r3, [r7, #14]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	83fb      	strh	r3, [r7, #30]
      break;
 800a1a4:	e002      	b.n	800a1ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 800a1a6:	89fb      	ldrh	r3, [r7, #14]
 800a1a8:	83fb      	strh	r3, [r7, #30]
      break;
 800a1aa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a1ac:	e01a      	b.n	800a1e4 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	781a      	ldrb	r2, [r3, #0]
 800a1b2:	89b9      	ldrh	r1, [r7, #12]
 800a1b4:	8bfb      	ldrh	r3, [r7, #30]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff ff4c 	bl	800a054 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800a1bc:	4b22      	ldr	r3, [pc, #136]	; (800a248 <BSP_LCD_DisplayStringAt+0x16c>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4922      	ldr	r1, [pc, #136]	; (800a24c <BSP_LCD_DisplayStringAt+0x170>)
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	440b      	add	r3, r1
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	889a      	ldrh	r2, [r3, #4]
 800a1d2:	8bfb      	ldrh	r3, [r7, #30]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	60bb      	str	r3, [r7, #8]
    i++;
 800a1de:	8bbb      	ldrh	r3, [r7, #28]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	bf14      	ite	ne
 800a1ec:	2301      	movne	r3, #1
 800a1ee:	2300      	moveq	r3, #0
 800a1f0:	b2dc      	uxtb	r4, r3
 800a1f2:	f7ff fddd 	bl	8009db0 <BSP_LCD_GetXSize>
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	8bb9      	ldrh	r1, [r7, #28]
 800a1fa:	4b13      	ldr	r3, [pc, #76]	; (800a248 <BSP_LCD_DisplayStringAt+0x16c>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4813      	ldr	r0, [pc, #76]	; (800a24c <BSP_LCD_DisplayStringAt+0x170>)
 800a200:	4613      	mov	r3, r2
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4403      	add	r3, r0
 800a20a:	3308      	adds	r3, #8
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	889b      	ldrh	r3, [r3, #4]
 800a210:	fb03 f301 	mul.w	r3, r3, r1
 800a214:	1aeb      	subs	r3, r5, r3
 800a216:	b299      	uxth	r1, r3
 800a218:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <BSP_LCD_DisplayStringAt+0x16c>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	480b      	ldr	r0, [pc, #44]	; (800a24c <BSP_LCD_DisplayStringAt+0x170>)
 800a21e:	4613      	mov	r3, r2
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4403      	add	r3, r0
 800a228:	3308      	adds	r3, #8
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	889b      	ldrh	r3, [r3, #4]
 800a22e:	4299      	cmp	r1, r3
 800a230:	bf2c      	ite	cs
 800a232:	2301      	movcs	r3, #1
 800a234:	2300      	movcc	r3, #0
 800a236:	b2db      	uxtb	r3, r3
 800a238:	4023      	ands	r3, r4
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1b6      	bne.n	800a1ae <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 800a240:	bf00      	nop
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bdb0      	pop	{r4, r5, r7, pc}
 800a248:	20019b40 	.word	0x20019b40
 800a24c:	20019b44 	.word	0x20019b44

0800a250 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a250:	b5b0      	push	{r4, r5, r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af02      	add	r7, sp, #8
 800a256:	4603      	mov	r3, r0
 800a258:	80fb      	strh	r3, [r7, #6]
 800a25a:	460b      	mov	r3, r1
 800a25c:	80bb      	strh	r3, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a266:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <BSP_LCD_DrawHLine+0x70>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <BSP_LCD_DrawHLine+0x74>)
 800a26c:	2134      	movs	r1, #52	; 0x34
 800a26e:	fb01 f303 	mul.w	r3, r1, r3
 800a272:	4413      	add	r3, r2
 800a274:	335c      	adds	r3, #92	; 0x5c
 800a276:	681c      	ldr	r4, [r3, #0]
 800a278:	f7ff fd9a 	bl	8009db0 <BSP_LCD_GetXSize>
 800a27c:	4602      	mov	r2, r0
 800a27e:	88bb      	ldrh	r3, [r7, #4]
 800a280:	fb03 f202 	mul.w	r2, r3, r2
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	4413      	add	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4423      	add	r3, r4
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800a28e:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <BSP_LCD_DrawHLine+0x70>)
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	68fc      	ldr	r4, [r7, #12]
 800a294:	887d      	ldrh	r5, [r7, #2]
 800a296:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <BSP_LCD_DrawHLine+0x70>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	490b      	ldr	r1, [pc, #44]	; (800a2c8 <BSP_LCD_DrawHLine+0x78>)
 800a29c:	4613      	mov	r3, r2
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	462a      	mov	r2, r5
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	f000 fc2e 	bl	800ab14 <FillBuffer>
}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c0:	20019b40 	.word	0x20019b40
 800a2c4:	20019f28 	.word	0x20019f28
 800a2c8:	20019b44 	.word	0x20019b44

0800a2cc <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	80fb      	strh	r3, [r7, #6]
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	80bb      	strh	r3, [r7, #4]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a2e2:	4b18      	ldr	r3, [pc, #96]	; (800a344 <BSP_LCD_DrawVLine+0x78>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a18      	ldr	r2, [pc, #96]	; (800a348 <BSP_LCD_DrawVLine+0x7c>)
 800a2e8:	2134      	movs	r1, #52	; 0x34
 800a2ea:	fb01 f303 	mul.w	r3, r1, r3
 800a2ee:	4413      	add	r3, r2
 800a2f0:	335c      	adds	r3, #92	; 0x5c
 800a2f2:	681c      	ldr	r4, [r3, #0]
 800a2f4:	f7ff fd5c 	bl	8009db0 <BSP_LCD_GetXSize>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	88bb      	ldrh	r3, [r7, #4]
 800a2fc:	fb03 f202 	mul.w	r2, r3, r2
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4423      	add	r3, r4
 800a308:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800a30a:	4b0e      	ldr	r3, [pc, #56]	; (800a344 <BSP_LCD_DrawVLine+0x78>)
 800a30c:	681c      	ldr	r4, [r3, #0]
 800a30e:	68fd      	ldr	r5, [r7, #12]
 800a310:	887e      	ldrh	r6, [r7, #2]
 800a312:	f7ff fd4d 	bl	8009db0 <BSP_LCD_GetXSize>
 800a316:	4603      	mov	r3, r0
 800a318:	1e59      	subs	r1, r3, #1
 800a31a:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <BSP_LCD_DrawVLine+0x78>)
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	480b      	ldr	r0, [pc, #44]	; (800a34c <BSP_LCD_DrawVLine+0x80>)
 800a320:	4613      	mov	r3, r2
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	4413      	add	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4403      	add	r3, r0
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9100      	str	r1, [sp, #0]
 800a330:	4633      	mov	r3, r6
 800a332:	2201      	movs	r2, #1
 800a334:	4629      	mov	r1, r5
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fbec 	bl	800ab14 <FillBuffer>
}
 800a33c:	bf00      	nop
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a344:	20019b40 	.word	0x20019b40
 800a348:	20019f28 	.word	0x20019f28
 800a34c:	20019b44 	.word	0x20019b44

0800a350 <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a350:	b590      	push	{r4, r7, lr}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	4611      	mov	r1, r2
 800a35c:	461a      	mov	r2, r3
 800a35e:	4623      	mov	r3, r4
 800a360:	80fb      	strh	r3, [r7, #6]
 800a362:	4603      	mov	r3, r0
 800a364:	80bb      	strh	r3, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	807b      	strh	r3, [r7, #2]
 800a36a:	4613      	mov	r3, r2
 800a36c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800a36e:	887a      	ldrh	r2, [r7, #2]
 800a370:	88b9      	ldrh	r1, [r7, #4]
 800a372:	88fb      	ldrh	r3, [r7, #6]
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff ff6b 	bl	800a250 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800a37a:	88ba      	ldrh	r2, [r7, #4]
 800a37c:	883b      	ldrh	r3, [r7, #0]
 800a37e:	4413      	add	r3, r2
 800a380:	b299      	uxth	r1, r3
 800a382:	887a      	ldrh	r2, [r7, #2]
 800a384:	88fb      	ldrh	r3, [r7, #6]
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff ff62 	bl	800a250 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800a38c:	883a      	ldrh	r2, [r7, #0]
 800a38e:	88b9      	ldrh	r1, [r7, #4]
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff ff9a 	bl	800a2cc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800a398:	88fa      	ldrh	r2, [r7, #6]
 800a39a:	887b      	ldrh	r3, [r7, #2]
 800a39c:	4413      	add	r3, r2
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	883a      	ldrh	r2, [r7, #0]
 800a3a2:	88b9      	ldrh	r1, [r7, #4]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff ff91 	bl	800a2cc <BSP_LCD_DrawVLine>
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd90      	pop	{r4, r7, pc}
	...

0800a3b4 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a3b4:	b590      	push	{r4, r7, lr}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	80fb      	strh	r3, [r7, #6]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	80bb      	strh	r3, [r7, #4]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a3c6:	887b      	ldrh	r3, [r7, #2]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	f1c3 0303 	rsb	r3, r3, #3
 800a3ce:	617b      	str	r3, [r7, #20]
  curx = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a3d4:	887b      	ldrh	r3, [r7, #2]
 800a3d6:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800a3d8:	e0cf      	b.n	800a57a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b298      	uxth	r0, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	88ba      	ldrh	r2, [r7, #4]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	b29c      	uxth	r4, r3
 800a3ee:	4b67      	ldr	r3, [pc, #412]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4967      	ldr	r1, [pc, #412]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	440b      	add	r3, r1
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	461a      	mov	r2, r3
 800a402:	4621      	mov	r1, r4
 800a404:	f000 faa6 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	88fa      	ldrh	r2, [r7, #6]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	b298      	uxth	r0, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	b29b      	uxth	r3, r3
 800a416:	88ba      	ldrh	r2, [r7, #4]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	b29c      	uxth	r4, r3
 800a41c:	4b5b      	ldr	r3, [pc, #364]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	495b      	ldr	r1, [pc, #364]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a422:	4613      	mov	r3, r2
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	440b      	add	r3, r1
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	4621      	mov	r1, r4
 800a432:	f000 fa8f 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	b29a      	uxth	r2, r3
 800a43a:	88fb      	ldrh	r3, [r7, #6]
 800a43c:	4413      	add	r3, r2
 800a43e:	b298      	uxth	r0, r3
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	b29b      	uxth	r3, r3
 800a444:	88ba      	ldrh	r2, [r7, #4]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	b29c      	uxth	r4, r3
 800a44a:	4b50      	ldr	r3, [pc, #320]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	4950      	ldr	r1, [pc, #320]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a450:	4613      	mov	r3, r2
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	4621      	mov	r1, r4
 800a460:	f000 fa78 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	b29b      	uxth	r3, r3
 800a468:	88fa      	ldrh	r2, [r7, #6]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	b298      	uxth	r0, r3
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	b29b      	uxth	r3, r3
 800a472:	88ba      	ldrh	r2, [r7, #4]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	b29c      	uxth	r4, r3
 800a478:	4b44      	ldr	r3, [pc, #272]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	4944      	ldr	r1, [pc, #272]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a47e:	4613      	mov	r3, r2
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	4413      	add	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	440b      	add	r3, r1
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	4621      	mov	r1, r4
 800a48e:	f000 fa61 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	b29a      	uxth	r2, r3
 800a496:	88fb      	ldrh	r3, [r7, #6]
 800a498:	4413      	add	r3, r2
 800a49a:	b298      	uxth	r0, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	88bb      	ldrh	r3, [r7, #4]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	b29c      	uxth	r4, r3
 800a4a6:	4b39      	ldr	r3, [pc, #228]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4939      	ldr	r1, [pc, #228]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	f000 fa4a 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	88fa      	ldrh	r2, [r7, #6]
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	b298      	uxth	r0, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	88bb      	ldrh	r3, [r7, #4]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	b29c      	uxth	r4, r3
 800a4d4:	4b2d      	ldr	r3, [pc, #180]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	492d      	ldr	r1, [pc, #180]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a4da:	4613      	mov	r3, r2
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	440b      	add	r3, r1
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	f000 fa33 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	88fb      	ldrh	r3, [r7, #6]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	b298      	uxth	r0, r3
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	88bb      	ldrh	r3, [r7, #4]
 800a4fe:	4413      	add	r3, r2
 800a500:	b29c      	uxth	r4, r3
 800a502:	4b22      	ldr	r3, [pc, #136]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4922      	ldr	r1, [pc, #136]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a508:	4613      	mov	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	440b      	add	r3, r1
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	4621      	mov	r1, r4
 800a518:	f000 fa1c 	bl	800a954 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	88fa      	ldrh	r2, [r7, #6]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	b298      	uxth	r0, r3
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	b29a      	uxth	r2, r3
 800a52a:	88bb      	ldrh	r3, [r7, #4]
 800a52c:	4413      	add	r3, r2
 800a52e:	b29c      	uxth	r4, r3
 800a530:	4b16      	ldr	r3, [pc, #88]	; (800a58c <BSP_LCD_DrawCircle+0x1d8>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	4916      	ldr	r1, [pc, #88]	; (800a590 <BSP_LCD_DrawCircle+0x1dc>)
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	440b      	add	r3, r1
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	4621      	mov	r1, r4
 800a546:	f000 fa05 	bl	800a954 <BSP_LCD_DrawPixel>

    if (d < 0)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	da06      	bge.n	800a55e <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	009a      	lsls	r2, r3, #2
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	4413      	add	r3, r2
 800a558:	3306      	adds	r3, #6
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	e00a      	b.n	800a574 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	009a      	lsls	r2, r3, #2
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	4413      	add	r3, r2
 800a56a:	330a      	adds	r3, #10
 800a56c:	617b      	str	r3, [r7, #20]
      cury--;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3b01      	subs	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	3301      	adds	r3, #1
 800a578:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	429a      	cmp	r2, r3
 800a580:	f67f af2b 	bls.w	800a3da <BSP_LCD_DrawCircle+0x26>
  } 
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd90      	pop	{r4, r7, pc}
 800a58c:	20019b40 	.word	0x20019b40
 800a590:	20019b44 	.word	0x20019b44

0800a594 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af02      	add	r7, sp, #8
 800a59c:	4604      	mov	r4, r0
 800a59e:	4608      	mov	r0, r1
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	4623      	mov	r3, r4
 800a5a6:	80fb      	strh	r3, [r7, #6]
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	80bb      	strh	r3, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	807b      	strh	r3, [r7, #2]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a5b8:	4b20      	ldr	r3, [pc, #128]	; (800a63c <BSP_LCD_FillRect+0xa8>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	4920      	ldr	r1, [pc, #128]	; (800a640 <BSP_LCD_FillRect+0xac>)
 800a5be:	4613      	mov	r3, r2
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	440b      	add	r3, r1
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fcce 	bl	8009f6c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800a5d0:	4b1a      	ldr	r3, [pc, #104]	; (800a63c <BSP_LCD_FillRect+0xa8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <BSP_LCD_FillRect+0xb0>)
 800a5d6:	2134      	movs	r1, #52	; 0x34
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	4413      	add	r3, r2
 800a5de:	335c      	adds	r3, #92	; 0x5c
 800a5e0:	681c      	ldr	r4, [r3, #0]
 800a5e2:	f7ff fbe5 	bl	8009db0 <BSP_LCD_GetXSize>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	88bb      	ldrh	r3, [r7, #4]
 800a5ea:	fb03 f202 	mul.w	r2, r3, r2
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4423      	add	r3, r4
 800a5f6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800a5f8:	4b10      	ldr	r3, [pc, #64]	; (800a63c <BSP_LCD_FillRect+0xa8>)
 800a5fa:	681c      	ldr	r4, [r3, #0]
 800a5fc:	68fd      	ldr	r5, [r7, #12]
 800a5fe:	887e      	ldrh	r6, [r7, #2]
 800a600:	f8b7 8000 	ldrh.w	r8, [r7]
 800a604:	f7ff fbd4 	bl	8009db0 <BSP_LCD_GetXSize>
 800a608:	4602      	mov	r2, r0
 800a60a:	887b      	ldrh	r3, [r7, #2]
 800a60c:	1ad1      	subs	r1, r2, r3
 800a60e:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <BSP_LCD_FillRect+0xa8>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	480b      	ldr	r0, [pc, #44]	; (800a640 <BSP_LCD_FillRect+0xac>)
 800a614:	4613      	mov	r3, r2
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4403      	add	r3, r0
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	9100      	str	r1, [sp, #0]
 800a624:	4643      	mov	r3, r8
 800a626:	4632      	mov	r2, r6
 800a628:	4629      	mov	r1, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 fa72 	bl	800ab14 <FillBuffer>
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a63a:	bf00      	nop
 800a63c:	20019b40 	.word	0x20019b40
 800a640:	20019b44 	.word	0x20019b44
 800a644:	20019f28 	.word	0x20019f28

0800a648 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	80fb      	strh	r3, [r7, #6]
 800a652:	460b      	mov	r3, r1
 800a654:	80bb      	strh	r3, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800a65a:	887b      	ldrh	r3, [r7, #2]
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	f1c3 0303 	rsb	r3, r3, #3
 800a662:	617b      	str	r3, [r7, #20]

  curx = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800a668:	887b      	ldrh	r3, [r7, #2]
 800a66a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a66c:	4b44      	ldr	r3, [pc, #272]	; (800a780 <BSP_LCD_FillCircle+0x138>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	4944      	ldr	r1, [pc, #272]	; (800a784 <BSP_LCD_FillCircle+0x13c>)
 800a672:	4613      	mov	r3, r2
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	440b      	add	r3, r1
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff fc74 	bl	8009f6c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800a684:	e061      	b.n	800a74a <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d021      	beq.n	800a6d0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	88fa      	ldrh	r2, [r7, #6]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	b298      	uxth	r0, r3
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	b29a      	uxth	r2, r3
 800a69a:	88bb      	ldrh	r3, [r7, #4]
 800a69c:	4413      	add	r3, r2
 800a69e:	b299      	uxth	r1, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f7ff fdd1 	bl	800a250 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	88fa      	ldrh	r2, [r7, #6]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	b298      	uxth	r0, r3
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	88ba      	ldrh	r2, [r7, #4]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	b299      	uxth	r1, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7ff fdc0 	bl	800a250 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d021      	beq.n	800a71a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	88fa      	ldrh	r2, [r7, #6]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	b298      	uxth	r0, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	88ba      	ldrh	r2, [r7, #4]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	b299      	uxth	r1, r3
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f7ff fdac 	bl	800a250 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	88fa      	ldrh	r2, [r7, #6]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	b298      	uxth	r0, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	b29a      	uxth	r2, r3
 800a706:	88bb      	ldrh	r3, [r7, #4]
 800a708:	4413      	add	r3, r2
 800a70a:	b299      	uxth	r1, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	b29b      	uxth	r3, r3
 800a714:	461a      	mov	r2, r3
 800a716:	f7ff fd9b 	bl	800a250 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	da06      	bge.n	800a72e <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	009a      	lsls	r2, r3, #2
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4413      	add	r3, r2
 800a728:	3306      	adds	r3, #6
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e00a      	b.n	800a744 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	009a      	lsls	r2, r3, #2
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	330a      	adds	r3, #10
 800a73c:	617b      	str	r3, [r7, #20]
      cury--;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3b01      	subs	r3, #1
 800a742:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	3301      	adds	r3, #1
 800a748:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d999      	bls.n	800a686 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800a752:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <BSP_LCD_FillCircle+0x138>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	490b      	ldr	r1, [pc, #44]	; (800a784 <BSP_LCD_FillCircle+0x13c>)
 800a758:	4613      	mov	r3, r2
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	440b      	add	r3, r1
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff fc01 	bl	8009f6c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a76a:	887a      	ldrh	r2, [r7, #2]
 800a76c:	88b9      	ldrh	r1, [r7, #4]
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff fe1f 	bl	800a3b4 <BSP_LCD_DrawCircle>
}
 800a776:	bf00      	nop
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20019b40 	.word	0x20019b40
 800a784:	20019b44 	.word	0x20019b44

0800a788 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <BSP_LCD_DisplayOn+0x1c>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800a796:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <BSP_LCD_DisplayOn+0x1c>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	4798      	blx	r3
  }
}
 800a79e:	bf00      	nop
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20019fd0 	.word	0x20019fd0

0800a7a8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	623b      	str	r3, [r7, #32]
 800a7b2:	4b61      	ldr	r3, [pc, #388]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7b6:	4a60      	ldr	r2, [pc, #384]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7bc:	6453      	str	r3, [r2, #68]	; 0x44
 800a7be:	4b5e      	ldr	r3, [pc, #376]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7c6:	623b      	str	r3, [r7, #32]
 800a7c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	4b5a      	ldr	r3, [pc, #360]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	4a59      	ldr	r2, [pc, #356]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a7da:	4b57      	ldr	r3, [pc, #348]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7e2:	61fb      	str	r3, [r7, #28]
 800a7e4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61bb      	str	r3, [r7, #24]
 800a7ea:	4b53      	ldr	r3, [pc, #332]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	4a52      	ldr	r2, [pc, #328]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7f0:	f043 0301 	orr.w	r3, r3, #1
 800a7f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a7f6:	4b50      	ldr	r3, [pc, #320]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	61bb      	str	r3, [r7, #24]
 800a800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a802:	2300      	movs	r3, #0
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	4b4c      	ldr	r3, [pc, #304]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80a:	4a4b      	ldr	r2, [pc, #300]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a80c:	f043 0302 	orr.w	r3, r3, #2
 800a810:	6313      	str	r3, [r2, #48]	; 0x30
 800a812:	4b49      	ldr	r3, [pc, #292]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a81e:	2300      	movs	r3, #0
 800a820:	613b      	str	r3, [r7, #16]
 800a822:	4b45      	ldr	r3, [pc, #276]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	4a44      	ldr	r2, [pc, #272]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a828:	f043 0304 	orr.w	r3, r3, #4
 800a82c:	6313      	str	r3, [r2, #48]	; 0x30
 800a82e:	4b42      	ldr	r3, [pc, #264]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	613b      	str	r3, [r7, #16]
 800a838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	4b3e      	ldr	r3, [pc, #248]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	4a3d      	ldr	r2, [pc, #244]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a844:	f043 0308 	orr.w	r3, r3, #8
 800a848:	6313      	str	r3, [r2, #48]	; 0x30
 800a84a:	4b3b      	ldr	r3, [pc, #236]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84e:	f003 0308 	and.w	r3, r3, #8
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a856:	2300      	movs	r3, #0
 800a858:	60bb      	str	r3, [r7, #8]
 800a85a:	4b37      	ldr	r3, [pc, #220]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	4a36      	ldr	r2, [pc, #216]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a860:	f043 0320 	orr.w	r3, r3, #32
 800a864:	6313      	str	r3, [r2, #48]	; 0x30
 800a866:	4b34      	ldr	r3, [pc, #208]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
 800a876:	4b30      	ldr	r3, [pc, #192]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	4a2f      	ldr	r2, [pc, #188]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a880:	6313      	str	r3, [r2, #48]	; 0x30
 800a882:	4b2d      	ldr	r3, [pc, #180]	; (800a938 <BSP_LCD_MspInit+0x190>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88a:	607b      	str	r3, [r7, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800a88e:	f641 0358 	movw	r3, #6232	; 0x1858
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800a894:	2302      	movs	r3, #2
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800a89c:	2302      	movs	r3, #2
 800a89e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800a8a0:	230e      	movs	r3, #14
 800a8a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a8a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4824      	ldr	r0, [pc, #144]	; (800a93c <BSP_LCD_MspInit+0x194>)
 800a8ac:	f001 f9e0 	bl	800bc70 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800a8b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800a8b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4820      	ldr	r0, [pc, #128]	; (800a940 <BSP_LCD_MspInit+0x198>)
 800a8be:	f001 f9d7 	bl	800bc70 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800a8c2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800a8c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	481d      	ldr	r0, [pc, #116]	; (800a944 <BSP_LCD_MspInit+0x19c>)
 800a8d0:	f001 f9ce 	bl	800bc70 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800a8d4:	2348      	movs	r3, #72	; 0x48
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800a8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8dc:	4619      	mov	r1, r3
 800a8de:	481a      	ldr	r0, [pc, #104]	; (800a948 <BSP_LCD_MspInit+0x1a0>)
 800a8e0:	f001 f9c6 	bl	800bc70 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800a8e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800a8ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4816      	ldr	r0, [pc, #88]	; (800a94c <BSP_LCD_MspInit+0x1a4>)
 800a8f2:	f001 f9bd 	bl	800bc70 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800a8f6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800a8fa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800a8fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a900:	4619      	mov	r1, r3
 800a902:	4813      	ldr	r0, [pc, #76]	; (800a950 <BSP_LCD_MspInit+0x1a8>)
 800a904:	f001 f9b4 	bl	800bc70 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800a908:	2303      	movs	r3, #3
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800a90c:	2309      	movs	r3, #9
 800a90e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800a910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a914:	4619      	mov	r1, r3
 800a916:	480a      	ldr	r0, [pc, #40]	; (800a940 <BSP_LCD_MspInit+0x198>)
 800a918:	f001 f9aa 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800a91c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800a922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a926:	4619      	mov	r1, r3
 800a928:	4809      	ldr	r0, [pc, #36]	; (800a950 <BSP_LCD_MspInit+0x1a8>)
 800a92a:	f001 f9a1 	bl	800bc70 <HAL_GPIO_Init>
}
 800a92e:	bf00      	nop
 800a930:	3738      	adds	r7, #56	; 0x38
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	40023800 	.word	0x40023800
 800a93c:	40020000 	.word	0x40020000
 800a940:	40020400 	.word	0x40020400
 800a944:	40020800 	.word	0x40020800
 800a948:	40020c00 	.word	0x40020c00
 800a94c:	40021400 	.word	0x40021400
 800a950:	40021800 	.word	0x40021800

0800a954 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800a954:	b5b0      	push	{r4, r5, r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	603a      	str	r2, [r7, #0]
 800a95e:	80fb      	strh	r3, [r7, #6]
 800a960:	460b      	mov	r3, r1
 800a962:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800a964:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <BSP_LCD_DrawPixel+0x44>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a0c      	ldr	r2, [pc, #48]	; (800a99c <BSP_LCD_DrawPixel+0x48>)
 800a96a:	2134      	movs	r1, #52	; 0x34
 800a96c:	fb01 f303 	mul.w	r3, r1, r3
 800a970:	4413      	add	r3, r2
 800a972:	335c      	adds	r3, #92	; 0x5c
 800a974:	681c      	ldr	r4, [r3, #0]
 800a976:	88bd      	ldrh	r5, [r7, #4]
 800a978:	f7ff fa1a 	bl	8009db0 <BSP_LCD_GetXSize>
 800a97c:	4603      	mov	r3, r0
 800a97e:	fb03 f205 	mul.w	r2, r3, r5
 800a982:	88fb      	ldrh	r3, [r7, #6]
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4423      	add	r3, r4
 800a98a:	461a      	mov	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	6013      	str	r3, [r2, #0]
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bdb0      	pop	{r4, r5, r7, pc}
 800a998:	20019b40 	.word	0x20019b40
 800a99c:	20019f28 	.word	0x20019f28

0800a9a0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	603a      	str	r2, [r7, #0]
 800a9aa:	80fb      	strh	r3, [r7, #6]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	61fb      	str	r3, [r7, #28]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800a9bc:	4b53      	ldr	r3, [pc, #332]	; (800ab0c <DrawChar+0x16c>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	4953      	ldr	r1, [pc, #332]	; (800ab10 <DrawChar+0x170>)
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	440b      	add	r3, r1
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	88db      	ldrh	r3, [r3, #6]
 800a9d2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800a9d4:	4b4d      	ldr	r3, [pc, #308]	; (800ab0c <DrawChar+0x16c>)
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	494d      	ldr	r1, [pc, #308]	; (800ab10 <DrawChar+0x170>)
 800a9da:	4613      	mov	r3, r2
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	440b      	add	r3, r1
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800a9ec:	8a3b      	ldrh	r3, [r7, #16]
 800a9ee:	3307      	adds	r3, #7
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	da00      	bge.n	800a9f6 <DrawChar+0x56>
 800a9f4:	3307      	adds	r3, #7
 800a9f6:	10db      	asrs	r3, r3, #3
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	8a3b      	ldrh	r3, [r7, #16]
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800aa06:	2300      	movs	r3, #0
 800aa08:	61fb      	str	r3, [r7, #28]
 800aa0a:	e076      	b.n	800aafa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800aa0c:	8a3b      	ldrh	r3, [r7, #16]
 800aa0e:	3307      	adds	r3, #7
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	da00      	bge.n	800aa16 <DrawChar+0x76>
 800aa14:	3307      	adds	r3, #7
 800aa16:	10db      	asrs	r3, r3, #3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	fb03 f302 	mul.w	r3, r3, r2
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	4413      	add	r3, r2
 800aa24:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800aa26:	8a3b      	ldrh	r3, [r7, #16]
 800aa28:	3307      	adds	r3, #7
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	da00      	bge.n	800aa30 <DrawChar+0x90>
 800aa2e:	3307      	adds	r3, #7
 800aa30:	10db      	asrs	r3, r3, #3
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d002      	beq.n	800aa3c <DrawChar+0x9c>
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d004      	beq.n	800aa44 <DrawChar+0xa4>
 800aa3a:	e00c      	b.n	800aa56 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	617b      	str	r3, [r7, #20]
      break;
 800aa42:	e016      	b.n	800aa72 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	021b      	lsls	r3, r3, #8
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	3201      	adds	r2, #1
 800aa4e:	7812      	ldrb	r2, [r2, #0]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]
      break;
 800aa54:	e00d      	b.n	800aa72 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	041a      	lsls	r2, r3, #16
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	4313      	orrs	r3, r2
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	3202      	adds	r2, #2
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]
      break;
 800aa70:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800aa72:	2300      	movs	r3, #0
 800aa74:	61bb      	str	r3, [r7, #24]
 800aa76:	e036      	b.n	800aae6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800aa78:	8a3a      	ldrh	r2, [r7, #16]
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	1ad2      	subs	r2, r2, r3
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	4413      	add	r3, r2
 800aa82:	3b01      	subs	r3, #1
 800aa84:	2201      	movs	r2, #1
 800aa86:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d012      	beq.n	800aaba <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	88fb      	ldrh	r3, [r7, #6]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	b298      	uxth	r0, r3
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <DrawChar+0x16c>)
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	491b      	ldr	r1, [pc, #108]	; (800ab10 <DrawChar+0x170>)
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	88bb      	ldrh	r3, [r7, #4]
 800aab2:	4619      	mov	r1, r3
 800aab4:	f7ff ff4e 	bl	800a954 <BSP_LCD_DrawPixel>
 800aab8:	e012      	b.n	800aae0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	88fb      	ldrh	r3, [r7, #6]
 800aac0:	4413      	add	r3, r2
 800aac2:	b298      	uxth	r0, r3
 800aac4:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <DrawChar+0x16c>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	4911      	ldr	r1, [pc, #68]	; (800ab10 <DrawChar+0x170>)
 800aaca:	4613      	mov	r3, r2
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	3304      	adds	r3, #4
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	88bb      	ldrh	r3, [r7, #4]
 800aada:	4619      	mov	r1, r3
 800aadc:	f7ff ff3a 	bl	800a954 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	3301      	adds	r3, #1
 800aae4:	61bb      	str	r3, [r7, #24]
 800aae6:	8a3b      	ldrh	r3, [r7, #16]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d3c4      	bcc.n	800aa78 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800aaee:	88bb      	ldrh	r3, [r7, #4]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	61fb      	str	r3, [r7, #28]
 800aafa:	8a7b      	ldrh	r3, [r7, #18]
 800aafc:	69fa      	ldr	r2, [r7, #28]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d384      	bcc.n	800aa0c <DrawChar+0x6c>
  }
}
 800ab02:	bf00      	nop
 800ab04:	3720      	adds	r7, #32
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20019b40 	.word	0x20019b40
 800ab10:	20019b44 	.word	0x20019b44

0800ab14 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800ab22:	4b16      	ldr	r3, [pc, #88]	; (800ab7c <FillBuffer+0x68>)
 800ab24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ab28:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800ab2a:	4b14      	ldr	r3, [pc, #80]	; (800ab7c <FillBuffer+0x68>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800ab30:	4a12      	ldr	r2, [pc, #72]	; (800ab7c <FillBuffer+0x68>)
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800ab36:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <FillBuffer+0x68>)
 800ab38:	4a11      	ldr	r2, [pc, #68]	; (800ab80 <FillBuffer+0x6c>)
 800ab3a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800ab3c:	480f      	ldr	r0, [pc, #60]	; (800ab7c <FillBuffer+0x68>)
 800ab3e:	f000 fe0b 	bl	800b758 <HAL_DMA2D_Init>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d115      	bne.n	800ab74 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800ab48:	68f9      	ldr	r1, [r7, #12]
 800ab4a:	480c      	ldr	r0, [pc, #48]	; (800ab7c <FillBuffer+0x68>)
 800ab4c:	f000 ff62 	bl	800ba14 <HAL_DMA2D_ConfigLayer>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10e      	bne.n	800ab74 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	69f9      	ldr	r1, [r7, #28]
 800ab60:	4806      	ldr	r0, [pc, #24]	; (800ab7c <FillBuffer+0x68>)
 800ab62:	f000 fe42 	bl	800b7ea <HAL_DMA2D_Start>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800ab6c:	210a      	movs	r1, #10
 800ab6e:	4803      	ldr	r0, [pc, #12]	; (800ab7c <FillBuffer+0x68>)
 800ab70:	f000 fe66 	bl	800b840 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800ab74:	bf00      	nop
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20019ad0 	.word	0x20019ad0
 800ab80:	4002b000 	.word	0x4002b000

0800ab84 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800ab88:	4b29      	ldr	r3, [pc, #164]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800ab8a:	4a2a      	ldr	r2, [pc, #168]	; (800ac34 <BSP_SDRAM_Init+0xb0>)
 800ab8c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800ab8e:	4b2a      	ldr	r3, [pc, #168]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800ab90:	2202      	movs	r2, #2
 800ab92:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800ab94:	4b28      	ldr	r3, [pc, #160]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800ab96:	2207      	movs	r2, #7
 800ab98:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800ab9a:	4b27      	ldr	r3, [pc, #156]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800aba2:	2207      	movs	r2, #7
 800aba4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800aba6:	4b24      	ldr	r3, [pc, #144]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800aba8:	2202      	movs	r2, #2
 800abaa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800abac:	4b22      	ldr	r3, [pc, #136]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800abae:	2202      	movs	r2, #2
 800abb0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800abb2:	4b21      	ldr	r3, [pc, #132]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800abb4:	2202      	movs	r2, #2
 800abb6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800abb8:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abba:	2201      	movs	r2, #1
 800abbc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800abbe:	4b1c      	ldr	r3, [pc, #112]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800abc4:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abc6:	2204      	movs	r2, #4
 800abc8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800abca:	4b19      	ldr	r3, [pc, #100]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abcc:	2210      	movs	r2, #16
 800abce:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800abd0:	4b17      	ldr	r3, [pc, #92]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abd2:	2240      	movs	r2, #64	; 0x40
 800abd4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800abd6:	4b16      	ldr	r3, [pc, #88]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abd8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800abdc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800abde:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abea:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800abec:	4b10      	ldr	r3, [pc, #64]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abee:	2200      	movs	r2, #0
 800abf0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800abf2:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800abf8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800abfa:	2100      	movs	r1, #0
 800abfc:	480c      	ldr	r0, [pc, #48]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800abfe:	f000 f87f 	bl	800ad00 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800ac02:	490d      	ldr	r1, [pc, #52]	; (800ac38 <BSP_SDRAM_Init+0xb4>)
 800ac04:	480a      	ldr	r0, [pc, #40]	; (800ac30 <BSP_SDRAM_Init+0xac>)
 800ac06:	f003 fd21 	bl	800e64c <HAL_SDRAM_Init>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <BSP_SDRAM_Init+0xb8>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	701a      	strb	r2, [r3, #0]
 800ac16:	e002      	b.n	800ac1e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800ac18:	4b08      	ldr	r3, [pc, #32]	; (800ac3c <BSP_SDRAM_Init+0xb8>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800ac1e:	f240 506a 	movw	r0, #1386	; 0x56a
 800ac22:	f000 f80d 	bl	800ac40 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <BSP_SDRAM_Init+0xb8>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20019b5c 	.word	0x20019b5c
 800ac34:	a0000140 	.word	0xa0000140
 800ac38:	20019b90 	.word	0x20019b90
 800ac3c:	200008b8 	.word	0x200008b8

0800ac40 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800ac4c:	4b2a      	ldr	r3, [pc, #168]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac4e:	2201      	movs	r2, #1
 800ac50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ac52:	4b29      	ldr	r3, [pc, #164]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac54:	2208      	movs	r2, #8
 800ac56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800ac58:	4b27      	ldr	r3, [pc, #156]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800ac5e:	4b26      	ldr	r3, [pc, #152]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800ac64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac68:	4923      	ldr	r1, [pc, #140]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac6a:	4824      	ldr	r0, [pc, #144]	; (800acfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ac6c:	f003 fd22 	bl	800e6b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800ac70:	2001      	movs	r0, #1
 800ac72:	f000 fa95 	bl	800b1a0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800ac76:	4b20      	ldr	r3, [pc, #128]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac78:	2202      	movs	r2, #2
 800ac7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800ac7c:	4b1e      	ldr	r3, [pc, #120]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac7e:	2208      	movs	r2, #8
 800ac80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800ac82:	4b1d      	ldr	r3, [pc, #116]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac84:	2201      	movs	r2, #1
 800ac86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800ac88:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800ac8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac92:	4919      	ldr	r1, [pc, #100]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac94:	4819      	ldr	r0, [pc, #100]	; (800acfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ac96:	f003 fd0d 	bl	800e6b4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ac9a:	4b17      	ldr	r3, [pc, #92]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800aca0:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aca2:	2208      	movs	r2, #8
 800aca4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800aca6:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aca8:	2204      	movs	r2, #4
 800acaa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800acac:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800acae:	2200      	movs	r2, #0
 800acb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800acb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acb6:	4910      	ldr	r1, [pc, #64]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800acb8:	4810      	ldr	r0, [pc, #64]	; (800acfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800acba:	f003 fcfb 	bl	800e6b4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800acbe:	f44f 730c 	mov.w	r3, #560	; 0x230
 800acc2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800acc4:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800acc6:	2204      	movs	r2, #4
 800acc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800acca:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800accc:	2208      	movs	r2, #8
 800acce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800acd0:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	4a07      	ldr	r2, [pc, #28]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800acda:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800acdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ace0:	4905      	ldr	r1, [pc, #20]	; (800acf8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ace2:	4806      	ldr	r0, [pc, #24]	; (800acfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ace4:	f003 fce6 	bl	800e6b4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	4804      	ldr	r0, [pc, #16]	; (800acfc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800acec:	f003 fd0d 	bl	800e70a <HAL_SDRAM_ProgramRefreshRate>
}
 800acf0:	bf00      	nop
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20019bac 	.word	0x20019bac
 800acfc:	20019b5c 	.word	0x20019b5c

0800ad00 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b090      	sub	sp, #64	; 0x40
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 80ec 	beq.w	800aeea <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ad12:	2300      	movs	r3, #0
 800ad14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad16:	4b77      	ldr	r3, [pc, #476]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	4a76      	ldr	r2, [pc, #472]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad1c:	f043 0301 	orr.w	r3, r3, #1
 800ad20:	6393      	str	r3, [r2, #56]	; 0x38
 800ad22:	4b74      	ldr	r3, [pc, #464]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad26:	f003 0301 	and.w	r3, r3, #1
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800ad2e:	2300      	movs	r3, #0
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
 800ad32:	4b70      	ldr	r3, [pc, #448]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	4a6f      	ldr	r2, [pc, #444]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ad3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad3e:	4b6d      	ldr	r3, [pc, #436]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	623b      	str	r3, [r7, #32]
 800ad4e:	4b69      	ldr	r3, [pc, #420]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad52:	4a68      	ldr	r2, [pc, #416]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad54:	f043 0302 	orr.w	r3, r3, #2
 800ad58:	6313      	str	r3, [r2, #48]	; 0x30
 800ad5a:	4b66      	ldr	r3, [pc, #408]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	623b      	str	r3, [r7, #32]
 800ad64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	4b62      	ldr	r3, [pc, #392]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6e:	4a61      	ldr	r2, [pc, #388]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad70:	f043 0304 	orr.w	r3, r3, #4
 800ad74:	6313      	str	r3, [r2, #48]	; 0x30
 800ad76:	4b5f      	ldr	r3, [pc, #380]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	61fb      	str	r3, [r7, #28]
 800ad80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad82:	2300      	movs	r3, #0
 800ad84:	61bb      	str	r3, [r7, #24]
 800ad86:	4b5b      	ldr	r3, [pc, #364]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	4a5a      	ldr	r2, [pc, #360]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad8c:	f043 0308 	orr.w	r3, r3, #8
 800ad90:	6313      	str	r3, [r2, #48]	; 0x30
 800ad92:	4b58      	ldr	r3, [pc, #352]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	f003 0308 	and.w	r3, r3, #8
 800ad9a:	61bb      	str	r3, [r7, #24]
 800ad9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ad9e:	2300      	movs	r3, #0
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	4b54      	ldr	r3, [pc, #336]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ada4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada6:	4a53      	ldr	r2, [pc, #332]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ada8:	f043 0310 	orr.w	r3, r3, #16
 800adac:	6313      	str	r3, [r2, #48]	; 0x30
 800adae:	4b51      	ldr	r3, [pc, #324]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800adb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb2:	f003 0310 	and.w	r3, r3, #16
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	4b4d      	ldr	r3, [pc, #308]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	4a4c      	ldr	r2, [pc, #304]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800adc4:	f043 0320 	orr.w	r3, r3, #32
 800adc8:	6313      	str	r3, [r2, #48]	; 0x30
 800adca:	4b4a      	ldr	r3, [pc, #296]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	4b46      	ldr	r3, [pc, #280]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	4a45      	ldr	r2, [pc, #276]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ade0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade4:	6313      	str	r3, [r2, #48]	; 0x30
 800ade6:	4b43      	ldr	r3, [pc, #268]	; (800aef4 <BSP_SDRAM_MspInit+0x1f4>)
 800ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800adf2:	2302      	movs	r3, #2
 800adf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800adf6:	2302      	movs	r3, #2
 800adf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800adfe:	230c      	movs	r3, #12
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800ae02:	2360      	movs	r3, #96	; 0x60
 800ae04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800ae06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	483a      	ldr	r0, [pc, #232]	; (800aef8 <BSP_SDRAM_MspInit+0x1f8>)
 800ae0e:	f000 ff2f 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800ae12:	2301      	movs	r3, #1
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800ae16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4837      	ldr	r0, [pc, #220]	; (800aefc <BSP_SDRAM_MspInit+0x1fc>)
 800ae1e:	f000 ff27 	bl	800bc70 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800ae22:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800ae28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4834      	ldr	r0, [pc, #208]	; (800af00 <BSP_SDRAM_MspInit+0x200>)
 800ae30:	f000 ff1e 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800ae34:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ae38:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800ae3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4830      	ldr	r0, [pc, #192]	; (800af04 <BSP_SDRAM_MspInit+0x204>)
 800ae42:	f000 ff15 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800ae46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800ae4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae50:	4619      	mov	r1, r3
 800ae52:	482d      	ldr	r0, [pc, #180]	; (800af08 <BSP_SDRAM_MspInit+0x208>)
 800ae54:	f000 ff0c 	bl	800bc70 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800ae58:	f248 1333 	movw	r3, #33075	; 0x8133
 800ae5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800ae5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae62:	4619      	mov	r1, r3
 800ae64:	4829      	ldr	r0, [pc, #164]	; (800af0c <BSP_SDRAM_MspInit+0x20c>)
 800ae66:	f000 ff03 	bl	800bc70 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ae6a:	4b29      	ldr	r3, [pc, #164]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ae70:	4b27      	ldr	r3, [pc, #156]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae72:	2280      	movs	r2, #128	; 0x80
 800ae74:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ae76:	4b26      	ldr	r3, [pc, #152]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae7c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800ae7e:	4b24      	ldr	r3, [pc, #144]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae84:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ae86:	4b22      	ldr	r3, [pc, #136]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae8c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ae8e:	4b20      	ldr	r3, [pc, #128]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ae94:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800ae96:	4b1e      	ldr	r3, [pc, #120]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800ae9c:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800ae9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aea2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800aea4:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800aeaa:	4b19      	ldr	r3, [pc, #100]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aeac:	2203      	movs	r2, #3
 800aeae:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800aeb0:	4b17      	ldr	r3, [pc, #92]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800aeb6:	4b16      	ldr	r3, [pc, #88]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800aebc:	4b14      	ldr	r3, [pc, #80]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aebe:	4a15      	ldr	r2, [pc, #84]	; (800af14 <BSP_SDRAM_MspInit+0x214>)
 800aec0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a12      	ldr	r2, [pc, #72]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
 800aec8:	4a11      	ldr	r2, [pc, #68]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800aece:	4810      	ldr	r0, [pc, #64]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aed0:	f000 fb34 	bl	800b53c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800aed4:	480e      	ldr	r0, [pc, #56]	; (800af10 <BSP_SDRAM_MspInit+0x210>)
 800aed6:	f000 fa83 	bl	800b3e0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800aeda:	2200      	movs	r2, #0
 800aedc:	210f      	movs	r1, #15
 800aede:	2038      	movs	r0, #56	; 0x38
 800aee0:	f000 fa38 	bl	800b354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800aee4:	2038      	movs	r0, #56	; 0x38
 800aee6:	f000 fa51 	bl	800b38c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800aeea:	bf00      	nop
 800aeec:	3740      	adds	r7, #64	; 0x40
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	40023800 	.word	0x40023800
 800aef8:	40020400 	.word	0x40020400
 800aefc:	40020800 	.word	0x40020800
 800af00:	40020c00 	.word	0x40020c00
 800af04:	40021000 	.word	0x40021000
 800af08:	40021400 	.word	0x40021400
 800af0c:	40021800 	.word	0x40021800
 800af10:	20019bbc 	.word	0x20019bbc
 800af14:	40026410 	.word	0x40026410

0800af18 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	460a      	mov	r2, r1
 800af22:	80fb      	strh	r3, [r7, #6]
 800af24:	4613      	mov	r3, r2
 800af26:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800af2c:	4a13      	ldr	r2, [pc, #76]	; (800af7c <BSP_TS_Init+0x64>)
 800af2e:	88fb      	ldrh	r3, [r7, #6]
 800af30:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800af32:	4a13      	ldr	r2, [pc, #76]	; (800af80 <BSP_TS_Init+0x68>)
 800af34:	88bb      	ldrh	r3, [r7, #4]
 800af36:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800af38:	4b12      	ldr	r3, [pc, #72]	; (800af84 <BSP_TS_Init+0x6c>)
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	2082      	movs	r0, #130	; 0x82
 800af3e:	4798      	blx	r3
 800af40:	4603      	mov	r3, r0
 800af42:	461a      	mov	r2, r3
 800af44:	f640 0311 	movw	r3, #2065	; 0x811
 800af48:	429a      	cmp	r2, r3
 800af4a:	d104      	bne.n	800af56 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800af4c:	4b0e      	ldr	r3, [pc, #56]	; (800af88 <BSP_TS_Init+0x70>)
 800af4e:	4a0d      	ldr	r2, [pc, #52]	; (800af84 <BSP_TS_Init+0x6c>)
 800af50:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800af5c:	4b0a      	ldr	r3, [pc, #40]	; (800af88 <BSP_TS_Init+0x70>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2082      	movs	r0, #130	; 0x82
 800af64:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800af66:	4b08      	ldr	r3, [pc, #32]	; (800af88 <BSP_TS_Init+0x70>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	2082      	movs	r0, #130	; 0x82
 800af6e:	4798      	blx	r3
  }

  return ret;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20019c20 	.word	0x20019c20
 800af80:	20019c22 	.word	0x20019c22
 800af84:	2000086c 	.word	0x2000086c
 800af88:	20019c1c 	.word	0x20019c1c

0800af8c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800af94:	4b4f      	ldr	r3, [pc, #316]	; (800b0d4 <BSP_TS_GetState+0x148>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2082      	movs	r0, #130	; 0x82
 800af9c:	4798      	blx	r3
 800af9e:	4603      	mov	r3, r0
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 808d 	beq.w	800b0ca <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800afb0:	4b48      	ldr	r3, [pc, #288]	; (800b0d4 <BSP_TS_GetState+0x148>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f107 020c 	add.w	r2, r7, #12
 800afba:	f107 010e 	add.w	r1, r7, #14
 800afbe:	2082      	movs	r0, #130	; 0x82
 800afc0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800afc2:	89bb      	ldrh	r3, [r7, #12]
 800afc4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800afc8:	b29b      	uxth	r3, r3
 800afca:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800afcc:	89bb      	ldrh	r3, [r7, #12]
 800afce:	4a42      	ldr	r2, [pc, #264]	; (800b0d8 <BSP_TS_GetState+0x14c>)
 800afd0:	fba2 2303 	umull	r2, r3, r2, r3
 800afd4:	08db      	lsrs	r3, r3, #3
 800afd6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 800afd8:	8abb      	ldrh	r3, [r7, #20]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	82bb      	strh	r3, [r7, #20]
 800afe2:	e008      	b.n	800aff6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800afe4:	4b3d      	ldr	r3, [pc, #244]	; (800b0dc <BSP_TS_GetState+0x150>)
 800afe6:	881b      	ldrh	r3, [r3, #0]
 800afe8:	8aba      	ldrh	r2, [r7, #20]
 800afea:	429a      	cmp	r2, r3
 800afec:	d903      	bls.n	800aff6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800afee:	4b3b      	ldr	r3, [pc, #236]	; (800b0dc <BSP_TS_GetState+0x150>)
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800aff6:	8abb      	ldrh	r3, [r7, #20]
 800aff8:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800affa:	89fb      	ldrh	r3, [r7, #14]
 800affc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800b000:	4293      	cmp	r3, r2
 800b002:	d806      	bhi.n	800b012 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800b004:	89fb      	ldrh	r3, [r7, #14]
 800b006:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800b00a:	330e      	adds	r3, #14
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	81fb      	strh	r3, [r7, #14]
 800b010:	e005      	b.n	800b01e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800b012:	89fb      	ldrh	r3, [r7, #14]
 800b014:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800b018:	3308      	adds	r3, #8
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800b01e:	89fb      	ldrh	r3, [r7, #14]
 800b020:	4a2f      	ldr	r2, [pc, #188]	; (800b0e0 <BSP_TS_GetState+0x154>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	08db      	lsrs	r3, r3, #3
 800b028:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800b02a:	8afb      	ldrh	r3, [r7, #22]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d102      	bne.n	800b036 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	82fb      	strh	r3, [r7, #22]
 800b034:	e008      	b.n	800b048 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800b036:	4b2b      	ldr	r3, [pc, #172]	; (800b0e4 <BSP_TS_GetState+0x158>)
 800b038:	881b      	ldrh	r3, [r3, #0]
 800b03a:	8afa      	ldrh	r2, [r7, #22]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d903      	bls.n	800b048 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800b040:	4b28      	ldr	r3, [pc, #160]	; (800b0e4 <BSP_TS_GetState+0x158>)
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	3b01      	subs	r3, #1
 800b046:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 800b048:	8afb      	ldrh	r3, [r7, #22]
 800b04a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800b04c:	89fb      	ldrh	r3, [r7, #14]
 800b04e:	461a      	mov	r2, r3
 800b050:	4b25      	ldr	r3, [pc, #148]	; (800b0e8 <BSP_TS_GetState+0x15c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d906      	bls.n	800b066 <BSP_TS_GetState+0xda>
 800b058:	89fa      	ldrh	r2, [r7, #14]
 800b05a:	4b23      	ldr	r3, [pc, #140]	; (800b0e8 <BSP_TS_GetState+0x15c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	b29b      	uxth	r3, r3
 800b064:	e005      	b.n	800b072 <BSP_TS_GetState+0xe6>
 800b066:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <BSP_TS_GetState+0x15c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	89fb      	ldrh	r3, [r7, #14]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	b29b      	uxth	r3, r3
 800b072:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800b074:	89bb      	ldrh	r3, [r7, #12]
 800b076:	461a      	mov	r2, r3
 800b078:	4b1c      	ldr	r3, [pc, #112]	; (800b0ec <BSP_TS_GetState+0x160>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d906      	bls.n	800b08e <BSP_TS_GetState+0x102>
 800b080:	89ba      	ldrh	r2, [r7, #12]
 800b082:	4b1a      	ldr	r3, [pc, #104]	; (800b0ec <BSP_TS_GetState+0x160>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	b29b      	uxth	r3, r3
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	e005      	b.n	800b09a <BSP_TS_GetState+0x10e>
 800b08e:	4b17      	ldr	r3, [pc, #92]	; (800b0ec <BSP_TS_GetState+0x160>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	b29a      	uxth	r2, r3
 800b094:	89bb      	ldrh	r3, [r7, #12]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	b29b      	uxth	r3, r3
 800b09a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800b09c:	8a7a      	ldrh	r2, [r7, #18]
 800b09e:	8a3b      	ldrh	r3, [r7, #16]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	2b05      	cmp	r3, #5
 800b0a4:	dd07      	ble.n	800b0b6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800b0a6:	89fb      	ldrh	r3, [r7, #14]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <BSP_TS_GetState+0x15c>)
 800b0ac:	601a      	str	r2, [r3, #0]
      _y = y; 
 800b0ae:	89bb      	ldrh	r3, [r7, #12]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	4b0e      	ldr	r3, [pc, #56]	; (800b0ec <BSP_TS_GetState+0x160>)
 800b0b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800b0b6:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <BSP_TS_GetState+0x15c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800b0c0:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <BSP_TS_GetState+0x160>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	809a      	strh	r2, [r3, #4]
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20019c1c 	.word	0x20019c1c
 800b0d8:	ba2e8ba3 	.word	0xba2e8ba3
 800b0dc:	20019c22 	.word	0x20019c22
 800b0e0:	88888889 	.word	0x88888889
 800b0e4:	20019c20 	.word	0x20019c20
 800b0e8:	20019c24 	.word	0x20019c24
 800b0ec:	20019c28 	.word	0x20019c28

0800b0f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b0f4:	4b08      	ldr	r3, [pc, #32]	; (800b118 <SystemInit+0x28>)
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fa:	4a07      	ldr	r2, [pc, #28]	; (800b118 <SystemInit+0x28>)
 800b0fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <SystemInit+0x28>)
 800b106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b10a:	609a      	str	r2, [r3, #8]
#endif
}
 800b10c:	bf00      	nop
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	e000ed00 	.word	0xe000ed00

0800b11c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b120:	4b0e      	ldr	r3, [pc, #56]	; (800b15c <HAL_Init+0x40>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a0d      	ldr	r2, [pc, #52]	; (800b15c <HAL_Init+0x40>)
 800b126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b12a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b12c:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <HAL_Init+0x40>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a0a      	ldr	r2, [pc, #40]	; (800b15c <HAL_Init+0x40>)
 800b132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b138:	4b08      	ldr	r3, [pc, #32]	; (800b15c <HAL_Init+0x40>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a07      	ldr	r2, [pc, #28]	; (800b15c <HAL_Init+0x40>)
 800b13e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b144:	2003      	movs	r0, #3
 800b146:	f000 f8fa 	bl	800b33e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b14a:	2000      	movs	r0, #0
 800b14c:	f7fd fbce 	bl	80088ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b150:	f7fd fba4 	bl	800889c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	40023c00 	.word	0x40023c00

0800b160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b160:	b480      	push	{r7}
 800b162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b164:	4b06      	ldr	r3, [pc, #24]	; (800b180 <HAL_IncTick+0x20>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	4b06      	ldr	r3, [pc, #24]	; (800b184 <HAL_IncTick+0x24>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4413      	add	r3, r2
 800b170:	4a04      	ldr	r2, [pc, #16]	; (800b184 <HAL_IncTick+0x24>)
 800b172:	6013      	str	r3, [r2, #0]
}
 800b174:	bf00      	nop
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	200008c4 	.word	0x200008c4
 800b184:	20019fd4 	.word	0x20019fd4

0800b188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b188:	b480      	push	{r7}
 800b18a:	af00      	add	r7, sp, #0
  return uwTick;
 800b18c:	4b03      	ldr	r3, [pc, #12]	; (800b19c <HAL_GetTick+0x14>)
 800b18e:	681b      	ldr	r3, [r3, #0]
}
 800b190:	4618      	mov	r0, r3
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20019fd4 	.word	0x20019fd4

0800b1a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b1a8:	f7ff ffee 	bl	800b188 <HAL_GetTick>
 800b1ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d005      	beq.n	800b1c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <HAL_Delay+0x40>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b1c6:	bf00      	nop
 800b1c8:	f7ff ffde 	bl	800b188 <HAL_GetTick>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d8f7      	bhi.n	800b1c8 <HAL_Delay+0x28>
  {
  }
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	200008c4 	.word	0x200008c4

0800b1e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b1f4:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <__NVIC_SetPriorityGrouping+0x44>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b200:	4013      	ands	r3, r2
 800b202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b20c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b216:	4a04      	ldr	r2, [pc, #16]	; (800b228 <__NVIC_SetPriorityGrouping+0x44>)
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	60d3      	str	r3, [r2, #12]
}
 800b21c:	bf00      	nop
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	e000ed00 	.word	0xe000ed00

0800b22c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b230:	4b04      	ldr	r3, [pc, #16]	; (800b244 <__NVIC_GetPriorityGrouping+0x18>)
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	0a1b      	lsrs	r3, r3, #8
 800b236:	f003 0307 	and.w	r3, r3, #7
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	e000ed00 	.word	0xe000ed00

0800b248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b256:	2b00      	cmp	r3, #0
 800b258:	db0b      	blt.n	800b272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b25a:	79fb      	ldrb	r3, [r7, #7]
 800b25c:	f003 021f 	and.w	r2, r3, #31
 800b260:	4907      	ldr	r1, [pc, #28]	; (800b280 <__NVIC_EnableIRQ+0x38>)
 800b262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b266:	095b      	lsrs	r3, r3, #5
 800b268:	2001      	movs	r0, #1
 800b26a:	fa00 f202 	lsl.w	r2, r0, r2
 800b26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b272:	bf00      	nop
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000e100 	.word	0xe000e100

0800b284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	6039      	str	r1, [r7, #0]
 800b28e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b294:	2b00      	cmp	r3, #0
 800b296:	db0a      	blt.n	800b2ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	490c      	ldr	r1, [pc, #48]	; (800b2d0 <__NVIC_SetPriority+0x4c>)
 800b29e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2a2:	0112      	lsls	r2, r2, #4
 800b2a4:	b2d2      	uxtb	r2, r2
 800b2a6:	440b      	add	r3, r1
 800b2a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b2ac:	e00a      	b.n	800b2c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	4908      	ldr	r1, [pc, #32]	; (800b2d4 <__NVIC_SetPriority+0x50>)
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	f003 030f 	and.w	r3, r3, #15
 800b2ba:	3b04      	subs	r3, #4
 800b2bc:	0112      	lsls	r2, r2, #4
 800b2be:	b2d2      	uxtb	r2, r2
 800b2c0:	440b      	add	r3, r1
 800b2c2:	761a      	strb	r2, [r3, #24]
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	e000e100 	.word	0xe000e100
 800b2d4:	e000ed00 	.word	0xe000ed00

0800b2d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b089      	sub	sp, #36	; 0x24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f1c3 0307 	rsb	r3, r3, #7
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	bf28      	it	cs
 800b2f6:	2304      	movcs	r3, #4
 800b2f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	2b06      	cmp	r3, #6
 800b300:	d902      	bls.n	800b308 <NVIC_EncodePriority+0x30>
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	3b03      	subs	r3, #3
 800b306:	e000      	b.n	800b30a <NVIC_EncodePriority+0x32>
 800b308:	2300      	movs	r3, #0
 800b30a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	fa02 f303 	lsl.w	r3, r2, r3
 800b316:	43da      	mvns	r2, r3
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	401a      	ands	r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b320:	f04f 31ff 	mov.w	r1, #4294967295
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	fa01 f303 	lsl.w	r3, r1, r3
 800b32a:	43d9      	mvns	r1, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b330:	4313      	orrs	r3, r2
         );
}
 800b332:	4618      	mov	r0, r3
 800b334:	3724      	adds	r7, #36	; 0x24
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b082      	sub	sp, #8
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff ff4c 	bl	800b1e4 <__NVIC_SetPriorityGrouping>
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b362:	2300      	movs	r3, #0
 800b364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b366:	f7ff ff61 	bl	800b22c <__NVIC_GetPriorityGrouping>
 800b36a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	6978      	ldr	r0, [r7, #20]
 800b372:	f7ff ffb1 	bl	800b2d8 <NVIC_EncodePriority>
 800b376:	4602      	mov	r2, r0
 800b378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff ff80 	bl	800b284 <__NVIC_SetPriority>
}
 800b384:	bf00      	nop
 800b386:	3718      	adds	r7, #24
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff ff54 	bl	800b248 <__NVIC_EnableIRQ>
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e00e      	b.n	800b3d8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	795b      	ldrb	r3, [r3, #5]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d105      	bne.n	800b3d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7fb ff4e 	bl	800726c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b3ec:	f7ff fecc 	bl	800b188 <HAL_GetTick>
 800b3f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e099      	b.n	800b530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2202      	movs	r2, #2
 800b408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b41c:	e00f      	b.n	800b43e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b41e:	f7ff feb3 	bl	800b188 <HAL_GetTick>
 800b422:	4602      	mov	r2, r0
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d908      	bls.n	800b43e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2220      	movs	r2, #32
 800b430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2203      	movs	r2, #3
 800b436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b43a:	2303      	movs	r3, #3
 800b43c:	e078      	b.n	800b530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1e8      	bne.n	800b41e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4b38      	ldr	r3, [pc, #224]	; (800b538 <HAL_DMA_Init+0x158>)
 800b458:	4013      	ands	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b46a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b494:	2b04      	cmp	r3, #4
 800b496:	d107      	bne.n	800b4a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	697a      	ldr	r2, [r7, #20]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f023 0307 	bic.w	r3, r3, #7
 800b4be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d117      	bne.n	800b502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00e      	beq.n	800b502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f8bd 	bl	800b664 <DMA_CheckFifoParam>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d008      	beq.n	800b502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2240      	movs	r2, #64	; 0x40
 800b4f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b4fe:	2301      	movs	r3, #1
 800b500:	e016      	b.n	800b530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f874 	bl	800b5f8 <DMA_CalcBaseAndBitshift>
 800b510:	4603      	mov	r3, r0
 800b512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b518:	223f      	movs	r2, #63	; 0x3f
 800b51a:	409a      	lsls	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	f010803f 	.word	0xf010803f

0800b53c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e050      	b.n	800b5f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d101      	bne.n	800b55e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b55a:	2302      	movs	r3, #2
 800b55c:	e048      	b.n	800b5f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f022 0201 	bic.w	r2, r2, #1
 800b56c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2200      	movs	r2, #0
 800b57c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2200      	movs	r2, #0
 800b584:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2200      	movs	r2, #0
 800b58c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2200      	movs	r2, #0
 800b594:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2221      	movs	r2, #33	; 0x21
 800b59c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f82a 	bl	800b5f8 <DMA_CalcBaseAndBitshift>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d0:	223f      	movs	r2, #63	; 0x3f
 800b5d2:	409a      	lsls	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	b2db      	uxtb	r3, r3
 800b606:	3b10      	subs	r3, #16
 800b608:	4a14      	ldr	r2, [pc, #80]	; (800b65c <DMA_CalcBaseAndBitshift+0x64>)
 800b60a:	fba2 2303 	umull	r2, r3, r2, r3
 800b60e:	091b      	lsrs	r3, r3, #4
 800b610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b612:	4a13      	ldr	r2, [pc, #76]	; (800b660 <DMA_CalcBaseAndBitshift+0x68>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4413      	add	r3, r2
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2b03      	cmp	r3, #3
 800b624:	d909      	bls.n	800b63a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b62e:	f023 0303 	bic.w	r3, r3, #3
 800b632:	1d1a      	adds	r2, r3, #4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	659a      	str	r2, [r3, #88]	; 0x58
 800b638:	e007      	b.n	800b64a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b642:	f023 0303 	bic.w	r3, r3, #3
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	aaaaaaab 	.word	0xaaaaaaab
 800b660:	0814f734 	.word	0x0814f734

0800b664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b66c:	2300      	movs	r3, #0
 800b66e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d11f      	bne.n	800b6be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2b03      	cmp	r3, #3
 800b682:	d855      	bhi.n	800b730 <DMA_CheckFifoParam+0xcc>
 800b684:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <DMA_CheckFifoParam+0x28>)
 800b686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68a:	bf00      	nop
 800b68c:	0800b69d 	.word	0x0800b69d
 800b690:	0800b6af 	.word	0x0800b6af
 800b694:	0800b69d 	.word	0x0800b69d
 800b698:	0800b731 	.word	0x0800b731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d045      	beq.n	800b734 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6ac:	e042      	b.n	800b734 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b6b6:	d13f      	bne.n	800b738 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6bc:	e03c      	b.n	800b738 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6c6:	d121      	bne.n	800b70c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d836      	bhi.n	800b73c <DMA_CheckFifoParam+0xd8>
 800b6ce:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <DMA_CheckFifoParam+0x70>)
 800b6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d4:	0800b6e5 	.word	0x0800b6e5
 800b6d8:	0800b6eb 	.word	0x0800b6eb
 800b6dc:	0800b6e5 	.word	0x0800b6e5
 800b6e0:	0800b6fd 	.word	0x0800b6fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e8:	e02f      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d024      	beq.n	800b740 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b6fa:	e021      	b.n	800b740 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b704:	d11e      	bne.n	800b744 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b70a:	e01b      	b.n	800b744 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d902      	bls.n	800b718 <DMA_CheckFifoParam+0xb4>
 800b712:	2b03      	cmp	r3, #3
 800b714:	d003      	beq.n	800b71e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b716:	e018      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	73fb      	strb	r3, [r7, #15]
      break;
 800b71c:	e015      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00e      	beq.n	800b748 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
      break;
 800b72e:	e00b      	b.n	800b748 <DMA_CheckFifoParam+0xe4>
      break;
 800b730:	bf00      	nop
 800b732:	e00a      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      break;
 800b734:	bf00      	nop
 800b736:	e008      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      break;
 800b738:	bf00      	nop
 800b73a:	e006      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      break;
 800b73c:	bf00      	nop
 800b73e:	e004      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      break;
 800b740:	bf00      	nop
 800b742:	e002      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      break;   
 800b744:	bf00      	nop
 800b746:	e000      	b.n	800b74a <DMA_CheckFifoParam+0xe6>
      break;
 800b748:	bf00      	nop
    }
  } 
  
  return status; 
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e03b      	b.n	800b7e2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b770:	b2db      	uxtb	r3, r3
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7fb fdc8 	bl	8007314 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a8:	f023 0107 	bic.w	r1, r3, #7
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	430a      	orrs	r2, r1
 800b7b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b7c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	68d1      	ldr	r1, [r2, #12]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6812      	ldr	r2, [r2, #0]
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b086      	sub	sp, #24
 800b7ee:	af02      	add	r7, sp, #8
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	607a      	str	r2, [r7, #4]
 800b7f6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d101      	bne.n	800b806 <HAL_DMA2D_Start+0x1c>
 800b802:	2302      	movs	r3, #2
 800b804:	e018      	b.n	800b838 <HAL_DMA2D_Start+0x4e>
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2202      	movs	r2, #2
 800b812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f989 	bl	800bb38 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f042 0201 	orr.w	r2, r2, #1
 800b834:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d056      	beq.n	800b90a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800b85c:	f7ff fc94 	bl	800b188 <HAL_GetTick>
 800b860:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800b862:	e04b      	b.n	800b8fc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800b872:	2b00      	cmp	r3, #0
 800b874:	d023      	beq.n	800b8be <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f003 0320 	and.w	r3, r3, #32
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d005      	beq.n	800b88c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b884:	f043 0202 	orr.w	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89a:	f043 0201 	orr.w	r2, r3, #1
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2221      	movs	r2, #33	; 0x21
 800b8a8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e0a5      	b.n	800ba0a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c4:	d01a      	beq.n	800b8fc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800b8c6:	f7ff fc5f 	bl	800b188 <HAL_GetTick>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d302      	bcc.n	800b8dc <HAL_DMA2D_PollForTransfer+0x9c>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10f      	bne.n	800b8fc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e0:	f043 0220 	orr.w	r2, r3, #32
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2203      	movs	r2, #3
 800b8ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e086      	b.n	800ba0a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f003 0302 	and.w	r3, r3, #2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0ac      	beq.n	800b864 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69db      	ldr	r3, [r3, #28]
 800b910:	f003 0320 	and.w	r3, r3, #32
 800b914:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	f003 0320 	and.w	r3, r3, #32
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	4313      	orrs	r3, r2
 800b924:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d061      	beq.n	800b9f0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800b92c:	f7ff fc2c 	bl	800b188 <HAL_GetTick>
 800b930:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800b932:	e056      	b.n	800b9e2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800b942:	2b00      	cmp	r3, #0
 800b944:	d02e      	beq.n	800b9a4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f003 0308 	and.w	r3, r3, #8
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d005      	beq.n	800b95c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b954:	f043 0204 	orr.w	r2, r3, #4
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f003 0320 	and.w	r3, r3, #32
 800b962:	2b00      	cmp	r3, #0
 800b964:	d005      	beq.n	800b972 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96a:	f043 0202 	orr.w	r2, r3, #2
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b980:	f043 0201 	orr.w	r2, r3, #1
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2229      	movs	r2, #41	; 0x29
 800b98e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2204      	movs	r2, #4
 800b994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e032      	b.n	800ba0a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9aa:	d01a      	beq.n	800b9e2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800b9ac:	f7ff fbec 	bl	800b188 <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d302      	bcc.n	800b9c2 <HAL_DMA2D_PollForTransfer+0x182>
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10f      	bne.n	800b9e2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c6:	f043 0220 	orr.w	r2, r3, #32
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2203      	movs	r2, #3
 800b9d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e013      	b.n	800ba0a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f003 0310 	and.w	r3, r3, #16
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0a1      	beq.n	800b934 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2212      	movs	r2, #18
 800b9f6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_DMA2D_ConfigLayer+0x20>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e079      	b.n	800bb28 <HAL_DMA2D_ConfigLayer+0x114>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	3318      	adds	r3, #24
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	041b      	lsls	r3, r3, #16
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800ba5e:	4b35      	ldr	r3, [pc, #212]	; (800bb34 <HAL_DMA2D_ConfigLayer+0x120>)
 800ba60:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	2b0a      	cmp	r3, #10
 800ba68:	d003      	beq.n	800ba72 <HAL_DMA2D_ConfigLayer+0x5e>
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	2b09      	cmp	r3, #9
 800ba70:	d107      	bne.n	800ba82 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	e005      	b.n	800ba8e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	061b      	lsls	r3, r3, #24
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d120      	bne.n	800bad6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	43db      	mvns	r3, r3
 800ba9e:	ea02 0103 	and.w	r1, r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	6812      	ldr	r2, [r2, #0]
 800bab4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	2b0a      	cmp	r3, #10
 800babc:	d003      	beq.n	800bac6 <HAL_DMA2D_ConfigLayer+0xb2>
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d127      	bne.n	800bb16 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bad2:	629a      	str	r2, [r3, #40]	; 0x28
 800bad4:	e01f      	b.n	800bb16 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69da      	ldr	r2, [r3, #28]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	43db      	mvns	r3, r3
 800bae0:	ea02 0103 	and.w	r1, r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	430a      	orrs	r2, r1
 800baec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	6812      	ldr	r2, [r2, #0]
 800baf6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	2b0a      	cmp	r3, #10
 800bafe:	d003      	beq.n	800bb08 <HAL_DMA2D_ConfigLayer+0xf4>
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d106      	bne.n	800bb16 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800bb14:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	ff03000f 	.word	0xff03000f

0800bb38 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b08b      	sub	sp, #44	; 0x2c
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	041a      	lsls	r2, r3, #16
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	431a      	orrs	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb70:	d174      	bne.n	800bc5c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bb78:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb80:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb88:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d108      	bne.n	800bbaa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800bb98:	69ba      	ldr	r2, [r7, #24]
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
 800bba8:	e053      	b.n	800bc52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d106      	bne.n	800bbc0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bbbe:	e048      	b.n	800bc52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d111      	bne.n	800bbec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	0cdb      	lsrs	r3, r3, #19
 800bbcc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	0a9b      	lsrs	r3, r3, #10
 800bbd2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	08db      	lsrs	r3, r3, #3
 800bbd8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	02db      	lsls	r3, r3, #11
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	697a      	ldr	r2, [r7, #20]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbea:	e032      	b.n	800bc52 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d117      	bne.n	800bc24 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	0fdb      	lsrs	r3, r3, #31
 800bbf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	0cdb      	lsrs	r3, r3, #19
 800bbfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	0adb      	lsrs	r3, r3, #11
 800bc04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	08db      	lsrs	r3, r3, #3
 800bc0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	029b      	lsls	r3, r3, #10
 800bc14:	431a      	orrs	r2, r3
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	03db      	lsls	r3, r3, #15
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
 800bc22:	e016      	b.n	800bc52 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	0f1b      	lsrs	r3, r3, #28
 800bc28:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	0d1b      	lsrs	r3, r3, #20
 800bc2e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	0b1b      	lsrs	r3, r3, #12
 800bc34:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	091b      	lsrs	r3, r3, #4
 800bc3a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	011a      	lsls	r2, r3, #4
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	431a      	orrs	r2, r3
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	031b      	lsls	r3, r3, #12
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc58:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800bc5a:	e003      	b.n	800bc64 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	60da      	str	r2, [r3, #12]
}
 800bc64:	bf00      	nop
 800bc66:	372c      	adds	r7, #44	; 0x2c
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b089      	sub	sp, #36	; 0x24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc86:	2300      	movs	r3, #0
 800bc88:	61fb      	str	r3, [r7, #28]
 800bc8a:	e177      	b.n	800bf7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	fa02 f303 	lsl.w	r3, r2, r3
 800bc94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	4013      	ands	r3, r2
 800bc9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	f040 8166 	bne.w	800bf76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d00b      	beq.n	800bcca <HAL_GPIO_Init+0x5a>
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d007      	beq.n	800bcca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcbe:	2b11      	cmp	r3, #17
 800bcc0:	d003      	beq.n	800bcca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	2b12      	cmp	r3, #18
 800bcc8:	d130      	bne.n	800bd2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcda:	43db      	mvns	r3, r3
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	4013      	ands	r3, r2
 800bce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68da      	ldr	r2, [r3, #12]
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	fa02 f303 	lsl.w	r3, r2, r3
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd00:	2201      	movs	r2, #1
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	fa02 f303 	lsl.w	r3, r2, r3
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	091b      	lsrs	r3, r3, #4
 800bd16:	f003 0201 	and.w	r2, r3, #1
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	2203      	movs	r2, #3
 800bd38:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3c:	43db      	mvns	r3, r3
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	4013      	ands	r3, r2
 800bd42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	689a      	ldr	r2, [r3, #8]
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	69ba      	ldr	r2, [r7, #24]
 800bd5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d003      	beq.n	800bd6c <HAL_GPIO_Init+0xfc>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	2b12      	cmp	r3, #18
 800bd6a:	d123      	bne.n	800bdb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	08da      	lsrs	r2, r3, #3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3208      	adds	r2, #8
 800bd74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	f003 0307 	and.w	r3, r3, #7
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	220f      	movs	r2, #15
 800bd84:	fa02 f303 	lsl.w	r3, r2, r3
 800bd88:	43db      	mvns	r3, r3
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	691a      	ldr	r2, [r3, #16]
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	f003 0307 	and.w	r3, r3, #7
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	08da      	lsrs	r2, r3, #3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3208      	adds	r2, #8
 800bdae:	69b9      	ldr	r1, [r7, #24]
 800bdb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	2203      	movs	r2, #3
 800bdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc4:	43db      	mvns	r3, r3
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	4013      	ands	r3, r2
 800bdca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	f003 0203 	and.w	r2, r3, #3
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 80c0 	beq.w	800bf76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	4b65      	ldr	r3, [pc, #404]	; (800bf90 <HAL_GPIO_Init+0x320>)
 800bdfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdfe:	4a64      	ldr	r2, [pc, #400]	; (800bf90 <HAL_GPIO_Init+0x320>)
 800be00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be04:	6453      	str	r3, [r2, #68]	; 0x44
 800be06:	4b62      	ldr	r3, [pc, #392]	; (800bf90 <HAL_GPIO_Init+0x320>)
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be0e:	60fb      	str	r3, [r7, #12]
 800be10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be12:	4a60      	ldr	r2, [pc, #384]	; (800bf94 <HAL_GPIO_Init+0x324>)
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	089b      	lsrs	r3, r3, #2
 800be18:	3302      	adds	r3, #2
 800be1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	220f      	movs	r2, #15
 800be2a:	fa02 f303 	lsl.w	r3, r2, r3
 800be2e:	43db      	mvns	r3, r3
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	4013      	ands	r3, r2
 800be34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a57      	ldr	r2, [pc, #348]	; (800bf98 <HAL_GPIO_Init+0x328>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d037      	beq.n	800beae <HAL_GPIO_Init+0x23e>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a56      	ldr	r2, [pc, #344]	; (800bf9c <HAL_GPIO_Init+0x32c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d031      	beq.n	800beaa <HAL_GPIO_Init+0x23a>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a55      	ldr	r2, [pc, #340]	; (800bfa0 <HAL_GPIO_Init+0x330>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d02b      	beq.n	800bea6 <HAL_GPIO_Init+0x236>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a54      	ldr	r2, [pc, #336]	; (800bfa4 <HAL_GPIO_Init+0x334>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d025      	beq.n	800bea2 <HAL_GPIO_Init+0x232>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a53      	ldr	r2, [pc, #332]	; (800bfa8 <HAL_GPIO_Init+0x338>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d01f      	beq.n	800be9e <HAL_GPIO_Init+0x22e>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a52      	ldr	r2, [pc, #328]	; (800bfac <HAL_GPIO_Init+0x33c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d019      	beq.n	800be9a <HAL_GPIO_Init+0x22a>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a51      	ldr	r2, [pc, #324]	; (800bfb0 <HAL_GPIO_Init+0x340>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d013      	beq.n	800be96 <HAL_GPIO_Init+0x226>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a50      	ldr	r2, [pc, #320]	; (800bfb4 <HAL_GPIO_Init+0x344>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d00d      	beq.n	800be92 <HAL_GPIO_Init+0x222>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a4f      	ldr	r2, [pc, #316]	; (800bfb8 <HAL_GPIO_Init+0x348>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d007      	beq.n	800be8e <HAL_GPIO_Init+0x21e>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a4e      	ldr	r2, [pc, #312]	; (800bfbc <HAL_GPIO_Init+0x34c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d101      	bne.n	800be8a <HAL_GPIO_Init+0x21a>
 800be86:	2309      	movs	r3, #9
 800be88:	e012      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800be8a:	230a      	movs	r3, #10
 800be8c:	e010      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800be8e:	2308      	movs	r3, #8
 800be90:	e00e      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800be92:	2307      	movs	r3, #7
 800be94:	e00c      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800be96:	2306      	movs	r3, #6
 800be98:	e00a      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800be9a:	2305      	movs	r3, #5
 800be9c:	e008      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800be9e:	2304      	movs	r3, #4
 800bea0:	e006      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800bea2:	2303      	movs	r3, #3
 800bea4:	e004      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800bea6:	2302      	movs	r3, #2
 800bea8:	e002      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800beaa:	2301      	movs	r3, #1
 800beac:	e000      	b.n	800beb0 <HAL_GPIO_Init+0x240>
 800beae:	2300      	movs	r3, #0
 800beb0:	69fa      	ldr	r2, [r7, #28]
 800beb2:	f002 0203 	and.w	r2, r2, #3
 800beb6:	0092      	lsls	r2, r2, #2
 800beb8:	4093      	lsls	r3, r2
 800beba:	69ba      	ldr	r2, [r7, #24]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bec0:	4934      	ldr	r1, [pc, #208]	; (800bf94 <HAL_GPIO_Init+0x324>)
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	089b      	lsrs	r3, r3, #2
 800bec6:	3302      	adds	r3, #2
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bece:	4b3c      	ldr	r3, [pc, #240]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	43db      	mvns	r3, r3
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	4013      	ands	r3, r2
 800bedc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	4313      	orrs	r3, r2
 800bef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bef2:	4a33      	ldr	r2, [pc, #204]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bef8:	4b31      	ldr	r3, [pc, #196]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	43db      	mvns	r3, r3
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	4013      	ands	r3, r2
 800bf06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d003      	beq.n	800bf1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf1c:	4a28      	ldr	r2, [pc, #160]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bf22:	4b27      	ldr	r3, [pc, #156]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	43db      	mvns	r3, r3
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	4013      	ands	r3, r2
 800bf30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf46:	4a1e      	ldr	r2, [pc, #120]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf4c:	4b1c      	ldr	r3, [pc, #112]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	43db      	mvns	r3, r3
 800bf56:	69ba      	ldr	r2, [r7, #24]
 800bf58:	4013      	ands	r3, r2
 800bf5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf70:	4a13      	ldr	r2, [pc, #76]	; (800bfc0 <HAL_GPIO_Init+0x350>)
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	61fb      	str	r3, [r7, #28]
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	2b0f      	cmp	r3, #15
 800bf80:	f67f ae84 	bls.w	800bc8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bf84:	bf00      	nop
 800bf86:	3724      	adds	r7, #36	; 0x24
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	40023800 	.word	0x40023800
 800bf94:	40013800 	.word	0x40013800
 800bf98:	40020000 	.word	0x40020000
 800bf9c:	40020400 	.word	0x40020400
 800bfa0:	40020800 	.word	0x40020800
 800bfa4:	40020c00 	.word	0x40020c00
 800bfa8:	40021000 	.word	0x40021000
 800bfac:	40021400 	.word	0x40021400
 800bfb0:	40021800 	.word	0x40021800
 800bfb4:	40021c00 	.word	0x40021c00
 800bfb8:	40022000 	.word	0x40022000
 800bfbc:	40022400 	.word	0x40022400
 800bfc0:	40013c00 	.word	0x40013c00

0800bfc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	e0d9      	b.n	800c194 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	4013      	ands	r3, r2
 800bff0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	f040 80c9 	bne.w	800c18e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bffc:	4a6a      	ldr	r2, [pc, #424]	; (800c1a8 <HAL_GPIO_DeInit+0x1e4>)
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	089b      	lsrs	r3, r3, #2
 800c002:	3302      	adds	r3, #2
 800c004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c008:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	f003 0303 	and.w	r3, r3, #3
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	220f      	movs	r2, #15
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	4013      	ands	r3, r2
 800c01c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4a62      	ldr	r2, [pc, #392]	; (800c1ac <HAL_GPIO_DeInit+0x1e8>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d037      	beq.n	800c096 <HAL_GPIO_DeInit+0xd2>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a61      	ldr	r2, [pc, #388]	; (800c1b0 <HAL_GPIO_DeInit+0x1ec>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d031      	beq.n	800c092 <HAL_GPIO_DeInit+0xce>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a60      	ldr	r2, [pc, #384]	; (800c1b4 <HAL_GPIO_DeInit+0x1f0>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d02b      	beq.n	800c08e <HAL_GPIO_DeInit+0xca>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a5f      	ldr	r2, [pc, #380]	; (800c1b8 <HAL_GPIO_DeInit+0x1f4>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d025      	beq.n	800c08a <HAL_GPIO_DeInit+0xc6>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a5e      	ldr	r2, [pc, #376]	; (800c1bc <HAL_GPIO_DeInit+0x1f8>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d01f      	beq.n	800c086 <HAL_GPIO_DeInit+0xc2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a5d      	ldr	r2, [pc, #372]	; (800c1c0 <HAL_GPIO_DeInit+0x1fc>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d019      	beq.n	800c082 <HAL_GPIO_DeInit+0xbe>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a5c      	ldr	r2, [pc, #368]	; (800c1c4 <HAL_GPIO_DeInit+0x200>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d013      	beq.n	800c07e <HAL_GPIO_DeInit+0xba>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a5b      	ldr	r2, [pc, #364]	; (800c1c8 <HAL_GPIO_DeInit+0x204>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d00d      	beq.n	800c07a <HAL_GPIO_DeInit+0xb6>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a5a      	ldr	r2, [pc, #360]	; (800c1cc <HAL_GPIO_DeInit+0x208>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d007      	beq.n	800c076 <HAL_GPIO_DeInit+0xb2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a59      	ldr	r2, [pc, #356]	; (800c1d0 <HAL_GPIO_DeInit+0x20c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d101      	bne.n	800c072 <HAL_GPIO_DeInit+0xae>
 800c06e:	2309      	movs	r3, #9
 800c070:	e012      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c072:	230a      	movs	r3, #10
 800c074:	e010      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c076:	2308      	movs	r3, #8
 800c078:	e00e      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c07a:	2307      	movs	r3, #7
 800c07c:	e00c      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c07e:	2306      	movs	r3, #6
 800c080:	e00a      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c082:	2305      	movs	r3, #5
 800c084:	e008      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c086:	2304      	movs	r3, #4
 800c088:	e006      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c08a:	2303      	movs	r3, #3
 800c08c:	e004      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c08e:	2302      	movs	r3, #2
 800c090:	e002      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c092:	2301      	movs	r3, #1
 800c094:	e000      	b.n	800c098 <HAL_GPIO_DeInit+0xd4>
 800c096:	2300      	movs	r3, #0
 800c098:	697a      	ldr	r2, [r7, #20]
 800c09a:	f002 0203 	and.w	r2, r2, #3
 800c09e:	0092      	lsls	r2, r2, #2
 800c0a0:	4093      	lsls	r3, r2
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d132      	bne.n	800c10e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c0a8:	4b4a      	ldr	r3, [pc, #296]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	43db      	mvns	r3, r3
 800c0b0:	4948      	ldr	r1, [pc, #288]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c0b6:	4b47      	ldr	r3, [pc, #284]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	43db      	mvns	r3, r3
 800c0be:	4945      	ldr	r1, [pc, #276]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c0c4:	4b43      	ldr	r3, [pc, #268]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0c6:	689a      	ldr	r2, [r3, #8]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	43db      	mvns	r3, r3
 800c0cc:	4941      	ldr	r1, [pc, #260]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0ce:	4013      	ands	r3, r2
 800c0d0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c0d2:	4b40      	ldr	r3, [pc, #256]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0d4:	68da      	ldr	r2, [r3, #12]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	493e      	ldr	r1, [pc, #248]	; (800c1d4 <HAL_GPIO_DeInit+0x210>)
 800c0dc:	4013      	ands	r3, r2
 800c0de:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	220f      	movs	r2, #15
 800c0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c0f0:	4a2d      	ldr	r2, [pc, #180]	; (800c1a8 <HAL_GPIO_DeInit+0x1e4>)
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	089b      	lsrs	r3, r3, #2
 800c0f6:	3302      	adds	r3, #2
 800c0f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	43da      	mvns	r2, r3
 800c100:	4829      	ldr	r0, [pc, #164]	; (800c1a8 <HAL_GPIO_DeInit+0x1e4>)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	089b      	lsrs	r3, r3, #2
 800c106:	400a      	ands	r2, r1
 800c108:	3302      	adds	r3, #2
 800c10a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	2103      	movs	r1, #3
 800c118:	fa01 f303 	lsl.w	r3, r1, r3
 800c11c:	43db      	mvns	r3, r3
 800c11e:	401a      	ands	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	08da      	lsrs	r2, r3, #3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3208      	adds	r2, #8
 800c12c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	f003 0307 	and.w	r3, r3, #7
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	220f      	movs	r2, #15
 800c13a:	fa02 f303 	lsl.w	r3, r2, r3
 800c13e:	43db      	mvns	r3, r3
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	08d2      	lsrs	r2, r2, #3
 800c144:	4019      	ands	r1, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3208      	adds	r2, #8
 800c14a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68da      	ldr	r2, [r3, #12]
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	2103      	movs	r1, #3
 800c158:	fa01 f303 	lsl.w	r3, r1, r3
 800c15c:	43db      	mvns	r3, r3
 800c15e:	401a      	ands	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	2101      	movs	r1, #1
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	fa01 f303 	lsl.w	r3, r1, r3
 800c170:	43db      	mvns	r3, r3
 800c172:	401a      	ands	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	689a      	ldr	r2, [r3, #8]
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	2103      	movs	r1, #3
 800c182:	fa01 f303 	lsl.w	r3, r1, r3
 800c186:	43db      	mvns	r3, r3
 800c188:	401a      	ands	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	3301      	adds	r3, #1
 800c192:	617b      	str	r3, [r7, #20]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	2b0f      	cmp	r3, #15
 800c198:	f67f af22 	bls.w	800bfe0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c19c:	bf00      	nop
 800c19e:	371c      	adds	r7, #28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	40013800 	.word	0x40013800
 800c1ac:	40020000 	.word	0x40020000
 800c1b0:	40020400 	.word	0x40020400
 800c1b4:	40020800 	.word	0x40020800
 800c1b8:	40020c00 	.word	0x40020c00
 800c1bc:	40021000 	.word	0x40021000
 800c1c0:	40021400 	.word	0x40021400
 800c1c4:	40021800 	.word	0x40021800
 800c1c8:	40021c00 	.word	0x40021c00
 800c1cc:	40022000 	.word	0x40022000
 800c1d0:	40022400 	.word	0x40022400
 800c1d4:	40013c00 	.word	0x40013c00

0800c1d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	887b      	ldrh	r3, [r7, #2]
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	73fb      	strb	r3, [r7, #15]
 800c1f4:	e001      	b.n	800c1fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	807b      	strh	r3, [r7, #2]
 800c214:	4613      	mov	r3, r2
 800c216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c218:	787b      	ldrb	r3, [r7, #1]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c21e:	887a      	ldrh	r2, [r7, #2]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c224:	e003      	b.n	800c22e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c226:	887b      	ldrh	r3, [r7, #2]
 800c228:	041a      	lsls	r2, r3, #16
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	619a      	str	r2, [r3, #24]
}
 800c22e:	bf00      	nop
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
	...

0800c23c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	e11f      	b.n	800c48e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7fb fad2 	bl	800780c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2224      	movs	r2, #36	; 0x24
 800c26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f022 0201 	bic.w	r2, r2, #1
 800c27e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c28e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c29e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c2a0:	f001 ffbc 	bl	800e21c <HAL_RCC_GetPCLK1Freq>
 800c2a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	4a7b      	ldr	r2, [pc, #492]	; (800c498 <HAL_I2C_Init+0x25c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d807      	bhi.n	800c2c0 <HAL_I2C_Init+0x84>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4a7a      	ldr	r2, [pc, #488]	; (800c49c <HAL_I2C_Init+0x260>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	bf94      	ite	ls
 800c2b8:	2301      	movls	r3, #1
 800c2ba:	2300      	movhi	r3, #0
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	e006      	b.n	800c2ce <HAL_I2C_Init+0x92>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4a77      	ldr	r2, [pc, #476]	; (800c4a0 <HAL_I2C_Init+0x264>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	bf94      	ite	ls
 800c2c8:	2301      	movls	r3, #1
 800c2ca:	2300      	movhi	r3, #0
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d001      	beq.n	800c2d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e0db      	b.n	800c48e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	4a72      	ldr	r2, [pc, #456]	; (800c4a4 <HAL_I2C_Init+0x268>)
 800c2da:	fba2 2303 	umull	r2, r3, r2, r3
 800c2de:	0c9b      	lsrs	r3, r3, #18
 800c2e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	4a64      	ldr	r2, [pc, #400]	; (800c498 <HAL_I2C_Init+0x25c>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d802      	bhi.n	800c310 <HAL_I2C_Init+0xd4>
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	3301      	adds	r3, #1
 800c30e:	e009      	b.n	800c324 <HAL_I2C_Init+0xe8>
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c316:	fb02 f303 	mul.w	r3, r2, r3
 800c31a:	4a63      	ldr	r2, [pc, #396]	; (800c4a8 <HAL_I2C_Init+0x26c>)
 800c31c:	fba2 2303 	umull	r2, r3, r2, r3
 800c320:	099b      	lsrs	r3, r3, #6
 800c322:	3301      	adds	r3, #1
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	6812      	ldr	r2, [r2, #0]
 800c328:	430b      	orrs	r3, r1
 800c32a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	4956      	ldr	r1, [pc, #344]	; (800c498 <HAL_I2C_Init+0x25c>)
 800c340:	428b      	cmp	r3, r1
 800c342:	d80d      	bhi.n	800c360 <HAL_I2C_Init+0x124>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	1e59      	subs	r1, r3, #1
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c352:	3301      	adds	r3, #1
 800c354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c358:	2b04      	cmp	r3, #4
 800c35a:	bf38      	it	cc
 800c35c:	2304      	movcc	r3, #4
 800c35e:	e04f      	b.n	800c400 <HAL_I2C_Init+0x1c4>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d111      	bne.n	800c38c <HAL_I2C_Init+0x150>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	1e58      	subs	r0, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6859      	ldr	r1, [r3, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	440b      	add	r3, r1
 800c376:	fbb0 f3f3 	udiv	r3, r0, r3
 800c37a:	3301      	adds	r3, #1
 800c37c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c380:	2b00      	cmp	r3, #0
 800c382:	bf0c      	ite	eq
 800c384:	2301      	moveq	r3, #1
 800c386:	2300      	movne	r3, #0
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	e012      	b.n	800c3b2 <HAL_I2C_Init+0x176>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	1e58      	subs	r0, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6859      	ldr	r1, [r3, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	440b      	add	r3, r1
 800c39a:	0099      	lsls	r1, r3, #2
 800c39c:	440b      	add	r3, r1
 800c39e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bf0c      	ite	eq
 800c3ac:	2301      	moveq	r3, #1
 800c3ae:	2300      	movne	r3, #0
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <HAL_I2C_Init+0x17e>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e022      	b.n	800c400 <HAL_I2C_Init+0x1c4>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10e      	bne.n	800c3e0 <HAL_I2C_Init+0x1a4>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	1e58      	subs	r0, r3, #1
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6859      	ldr	r1, [r3, #4]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	440b      	add	r3, r1
 800c3d0:	fbb0 f3f3 	udiv	r3, r0, r3
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3de:	e00f      	b.n	800c400 <HAL_I2C_Init+0x1c4>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	1e58      	subs	r0, r3, #1
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6859      	ldr	r1, [r3, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	440b      	add	r3, r1
 800c3ee:	0099      	lsls	r1, r3, #2
 800c3f0:	440b      	add	r3, r1
 800c3f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	6809      	ldr	r1, [r1, #0]
 800c404:	4313      	orrs	r3, r2
 800c406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	69da      	ldr	r2, [r3, #28]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	431a      	orrs	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	430a      	orrs	r2, r1
 800c422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c42e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	6911      	ldr	r1, [r2, #16]
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	68d2      	ldr	r2, [r2, #12]
 800c43a:	4311      	orrs	r1, r2
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6812      	ldr	r2, [r2, #0]
 800c440:	430b      	orrs	r3, r1
 800c442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	695a      	ldr	r2, [r3, #20]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	431a      	orrs	r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	430a      	orrs	r2, r1
 800c45e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f042 0201 	orr.w	r2, r2, #1
 800c46e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2220      	movs	r2, #32
 800c47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	000186a0 	.word	0x000186a0
 800c49c:	001e847f 	.word	0x001e847f
 800c4a0:	003d08ff 	.word	0x003d08ff
 800c4a4:	431bde83 	.word	0x431bde83
 800c4a8:	10624dd3 	.word	0x10624dd3

0800c4ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e021      	b.n	800c502 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2224      	movs	r2, #36	; 0x24
 800c4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0201 	bic.w	r2, r2, #1
 800c4d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7fb fa02 	bl	80078e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b088      	sub	sp, #32
 800c510:	af02      	add	r7, sp, #8
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	4608      	mov	r0, r1
 800c516:	4611      	mov	r1, r2
 800c518:	461a      	mov	r2, r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	817b      	strh	r3, [r7, #10]
 800c51e:	460b      	mov	r3, r1
 800c520:	813b      	strh	r3, [r7, #8]
 800c522:	4613      	mov	r3, r2
 800c524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c526:	f7fe fe2f 	bl	800b188 <HAL_GetTick>
 800c52a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b20      	cmp	r3, #32
 800c536:	f040 80d9 	bne.w	800c6ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	2319      	movs	r3, #25
 800c540:	2201      	movs	r2, #1
 800c542:	496d      	ldr	r1, [pc, #436]	; (800c6f8 <HAL_I2C_Mem_Write+0x1ec>)
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 fc89 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c550:	2302      	movs	r3, #2
 800c552:	e0cc      	b.n	800c6ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d101      	bne.n	800c562 <HAL_I2C_Mem_Write+0x56>
 800c55e:	2302      	movs	r3, #2
 800c560:	e0c5      	b.n	800c6ee <HAL_I2C_Mem_Write+0x1e2>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2201      	movs	r2, #1
 800c566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b01      	cmp	r3, #1
 800c576:	d007      	beq.n	800c588 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f042 0201 	orr.w	r2, r2, #1
 800c586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2221      	movs	r2, #33	; 0x21
 800c59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2240      	movs	r2, #64	; 0x40
 800c5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6a3a      	ldr	r2, [r7, #32]
 800c5b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4a4d      	ldr	r2, [pc, #308]	; (800c6fc <HAL_I2C_Mem_Write+0x1f0>)
 800c5c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c5ca:	88f8      	ldrh	r0, [r7, #6]
 800c5cc:	893a      	ldrh	r2, [r7, #8]
 800c5ce:	8979      	ldrh	r1, [r7, #10]
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	4603      	mov	r3, r0
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f000 fac4 	bl	800cb68 <I2C_RequestMemoryWrite>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d052      	beq.n	800c68c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e081      	b.n	800c6ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f000 fd0a 	bl	800d008 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00d      	beq.n	800c616 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d107      	bne.n	800c612 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c612:	2301      	movs	r3, #1
 800c614:	e06b      	b.n	800c6ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61a:	781a      	ldrb	r2, [r3, #0]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c630:	3b01      	subs	r3, #1
 800c632:	b29a      	uxth	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	3b01      	subs	r3, #1
 800c640:	b29a      	uxth	r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	f003 0304 	and.w	r3, r3, #4
 800c650:	2b04      	cmp	r3, #4
 800c652:	d11b      	bne.n	800c68c <HAL_I2C_Mem_Write+0x180>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d017      	beq.n	800c68c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c660:	781a      	ldrb	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c676:	3b01      	subs	r3, #1
 800c678:	b29a      	uxth	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c682:	b29b      	uxth	r3, r3
 800c684:	3b01      	subs	r3, #1
 800c686:	b29a      	uxth	r2, r3
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1aa      	bne.n	800c5ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f000 fcf6 	bl	800d08a <I2C_WaitOnBTFFlagUntilTimeout>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00d      	beq.n	800c6c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	d107      	bne.n	800c6bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e016      	b.n	800c6ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2220      	movs	r2, #32
 800c6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e000      	b.n	800c6ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c6ec:	2302      	movs	r3, #2
  }
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	00100002 	.word	0x00100002
 800c6fc:	ffff0000 	.word	0xffff0000

0800c700 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08c      	sub	sp, #48	; 0x30
 800c704:	af02      	add	r7, sp, #8
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	461a      	mov	r2, r3
 800c70e:	4603      	mov	r3, r0
 800c710:	817b      	strh	r3, [r7, #10]
 800c712:	460b      	mov	r3, r1
 800c714:	813b      	strh	r3, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c71a:	f7fe fd35 	bl	800b188 <HAL_GetTick>
 800c71e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b20      	cmp	r3, #32
 800c72a:	f040 8208 	bne.w	800cb3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	2319      	movs	r3, #25
 800c734:	2201      	movs	r2, #1
 800c736:	497b      	ldr	r1, [pc, #492]	; (800c924 <HAL_I2C_Mem_Read+0x224>)
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f000 fb8f 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d001      	beq.n	800c748 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c744:	2302      	movs	r3, #2
 800c746:	e1fb      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d101      	bne.n	800c756 <HAL_I2C_Mem_Read+0x56>
 800c752:	2302      	movs	r3, #2
 800c754:	e1f4      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0301 	and.w	r3, r3, #1
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d007      	beq.n	800c77c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f042 0201 	orr.w	r2, r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c78a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2222      	movs	r2, #34	; 0x22
 800c790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2240      	movs	r2, #64	; 0x40
 800c798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c7ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4a5b      	ldr	r2, [pc, #364]	; (800c928 <HAL_I2C_Mem_Read+0x228>)
 800c7bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c7be:	88f8      	ldrh	r0, [r7, #6]
 800c7c0:	893a      	ldrh	r2, [r7, #8]
 800c7c2:	8979      	ldrh	r1, [r7, #10]
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	9301      	str	r3, [sp, #4]
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f000 fa5e 	bl	800cc90 <I2C_RequestMemoryRead>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e1b0      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d113      	bne.n	800c80e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	623b      	str	r3, [r7, #32]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	623b      	str	r3, [r7, #32]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	623b      	str	r3, [r7, #32]
 800c7fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	e184      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c812:	2b01      	cmp	r3, #1
 800c814:	d11b      	bne.n	800c84e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c824:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c826:	2300      	movs	r3, #0
 800c828:	61fb      	str	r3, [r7, #28]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	61fb      	str	r3, [r7, #28]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	61fb      	str	r3, [r7, #28]
 800c83a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c84a:	601a      	str	r2, [r3, #0]
 800c84c:	e164      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c852:	2b02      	cmp	r3, #2
 800c854:	d11b      	bne.n	800c88e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c864:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c876:	2300      	movs	r3, #0
 800c878:	61bb      	str	r3, [r7, #24]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	61bb      	str	r3, [r7, #24]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	61bb      	str	r3, [r7, #24]
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	e144      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c88e:	2300      	movs	r3, #0
 800c890:	617b      	str	r3, [r7, #20]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	617b      	str	r3, [r7, #20]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	617b      	str	r3, [r7, #20]
 800c8a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c8a4:	e138      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	f200 80f1 	bhi.w	800ca92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d123      	bne.n	800c900 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 fc25 	bl	800d10c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e139      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	691a      	ldr	r2, [r3, #16]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c8fe:	e10b      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c904:	2b02      	cmp	r3, #2
 800c906:	d14e      	bne.n	800c9a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	9300      	str	r3, [sp, #0]
 800c90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90e:	2200      	movs	r2, #0
 800c910:	4906      	ldr	r1, [pc, #24]	; (800c92c <HAL_I2C_Mem_Read+0x22c>)
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f000 faa2 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d008      	beq.n	800c930 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e10e      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
 800c922:	bf00      	nop
 800c924:	00100002 	.word	0x00100002
 800c928:	ffff0000 	.word	0xffff0000
 800c92c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c93e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	691a      	ldr	r2, [r3, #16]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	b2d2      	uxtb	r2, r2
 800c94c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b29a      	uxth	r2, r3
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c968:	b29b      	uxth	r3, r3
 800c96a:	3b01      	subs	r3, #1
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	691a      	ldr	r2, [r3, #16]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c984:	1c5a      	adds	r2, r3, #1
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c98e:	3b01      	subs	r3, #1
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	3b01      	subs	r3, #1
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9a4:	e0b8      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4966      	ldr	r1, [pc, #408]	; (800cb48 <HAL_I2C_Mem_Read+0x448>)
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 fa53 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e0bf      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	691a      	ldr	r2, [r3, #16]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9da:	b2d2      	uxtb	r2, r2
 800c9dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	2200      	movs	r2, #0
 800ca0a:	494f      	ldr	r1, [pc, #316]	; (800cb48 <HAL_I2C_Mem_Read+0x448>)
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f000 fa25 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e091      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	691a      	ldr	r2, [r3, #16]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	3b01      	subs	r3, #1
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	691a      	ldr	r2, [r3, #16]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	b2d2      	uxtb	r2, r2
 800ca6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca90:	e042      	b.n	800cb18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 fb38 	bl	800d10c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e04c      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	691a      	ldr	r2, [r3, #16]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab0:	b2d2      	uxtb	r2, r2
 800cab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3b01      	subs	r3, #1
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	f003 0304 	and.w	r3, r3, #4
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	d118      	bne.n	800cb18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	691a      	ldr	r2, [r3, #16]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf0:	b2d2      	uxtb	r2, r2
 800caf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb02:	3b01      	subs	r3, #1
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	3b01      	subs	r3, #1
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f47f aec2 	bne.w	800c8a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2220      	movs	r2, #32
 800cb26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e000      	b.n	800cb40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cb3e:	2302      	movs	r3, #2
  }
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3728      	adds	r7, #40	; 0x28
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	00010004 	.word	0x00010004

0800cb4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb5a:	b2db      	uxtb	r3, r3
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	4608      	mov	r0, r1
 800cb72:	4611      	mov	r1, r2
 800cb74:	461a      	mov	r2, r3
 800cb76:	4603      	mov	r3, r0
 800cb78:	817b      	strh	r3, [r7, #10]
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	813b      	strh	r3, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f95c 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00c      	beq.n	800cbc4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d003      	beq.n	800cbc0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	e05f      	b.n	800cc84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cbc4:	897b      	ldrh	r3, [r7, #10]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	461a      	mov	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cbd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	6a3a      	ldr	r2, [r7, #32]
 800cbd8:	492c      	ldr	r1, [pc, #176]	; (800cc8c <I2C_RequestMemoryWrite+0x124>)
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 f995 	bl	800cf0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e04c      	b.n	800cc84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbea:	2300      	movs	r3, #0
 800cbec:	617b      	str	r3, [r7, #20]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	695b      	ldr	r3, [r3, #20]
 800cbf4:	617b      	str	r3, [r7, #20]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	699b      	ldr	r3, [r3, #24]
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc02:	6a39      	ldr	r1, [r7, #32]
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f000 f9ff 	bl	800d008 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00d      	beq.n	800cc2c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc14:	2b04      	cmp	r3, #4
 800cc16:	d107      	bne.n	800cc28 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e02b      	b.n	800cc84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cc2c:	88fb      	ldrh	r3, [r7, #6]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d105      	bne.n	800cc3e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cc32:	893b      	ldrh	r3, [r7, #8]
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	611a      	str	r2, [r3, #16]
 800cc3c:	e021      	b.n	800cc82 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cc3e:	893b      	ldrh	r3, [r7, #8]
 800cc40:	0a1b      	lsrs	r3, r3, #8
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc4e:	6a39      	ldr	r1, [r7, #32]
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f000 f9d9 	bl	800d008 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00d      	beq.n	800cc78 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d107      	bne.n	800cc74 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e005      	b.n	800cc84 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cc78:	893b      	ldrh	r3, [r7, #8]
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3718      	adds	r7, #24
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	00010002 	.word	0x00010002

0800cc90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af02      	add	r7, sp, #8
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4603      	mov	r3, r0
 800cca0:	817b      	strh	r3, [r7, #10]
 800cca2:	460b      	mov	r3, r1
 800cca4:	813b      	strh	r3, [r7, #8]
 800cca6:	4613      	mov	r3, r2
 800cca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	6a3b      	ldr	r3, [r7, #32]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f000 f8c0 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00c      	beq.n	800ccfc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e0a9      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ccfc:	897b      	ldrh	r3, [r7, #10]
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	461a      	mov	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cd0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	6a3a      	ldr	r2, [r7, #32]
 800cd10:	4951      	ldr	r1, [pc, #324]	; (800ce58 <I2C_RequestMemoryRead+0x1c8>)
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f8f9 	bl	800cf0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e096      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd3a:	6a39      	ldr	r1, [r7, #32]
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f963 	bl	800d008 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00d      	beq.n	800cd64 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4c:	2b04      	cmp	r3, #4
 800cd4e:	d107      	bne.n	800cd60 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e075      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cd64:	88fb      	ldrh	r3, [r7, #6]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d105      	bne.n	800cd76 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cd6a:	893b      	ldrh	r3, [r7, #8]
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	611a      	str	r2, [r3, #16]
 800cd74:	e021      	b.n	800cdba <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cd76:	893b      	ldrh	r3, [r7, #8]
 800cd78:	0a1b      	lsrs	r3, r3, #8
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd86:	6a39      	ldr	r1, [r7, #32]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f93d 	bl	800d008 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00d      	beq.n	800cdb0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d107      	bne.n	800cdac <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdaa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	e04f      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cdb0:	893b      	ldrh	r3, [r7, #8]
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cdba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdbc:	6a39      	ldr	r1, [r7, #32]
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f000 f922 	bl	800d008 <I2C_WaitOnTXEFlagUntilTimeout>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00d      	beq.n	800cde6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d107      	bne.n	800cde2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cde0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e034      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	6a3b      	ldr	r3, [r7, #32]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f000 f82a 	bl	800ce5c <I2C_WaitOnFlagUntilTimeout>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00c      	beq.n	800ce28 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d003      	beq.n	800ce24 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ce24:	2303      	movs	r3, #3
 800ce26:	e013      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ce28:	897b      	ldrh	r3, [r7, #10]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	f043 0301 	orr.w	r3, r3, #1
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	6a3a      	ldr	r2, [r7, #32]
 800ce3c:	4906      	ldr	r1, [pc, #24]	; (800ce58 <I2C_RequestMemoryRead+0x1c8>)
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f000 f863 	bl	800cf0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	00010002 	.word	0x00010002

0800ce5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ce6c:	e025      	b.n	800ceba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce74:	d021      	beq.n	800ceba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce76:	f7fe f987 	bl	800b188 <HAL_GetTick>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d302      	bcc.n	800ce8c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d116      	bne.n	800ceba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2220      	movs	r2, #32
 800ce96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea6:	f043 0220 	orr.w	r2, r3, #32
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e023      	b.n	800cf02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	0c1b      	lsrs	r3, r3, #16
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d10d      	bne.n	800cee0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	43da      	mvns	r2, r3
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4013      	ands	r3, r2
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	bf0c      	ite	eq
 800ced6:	2301      	moveq	r3, #1
 800ced8:	2300      	movne	r3, #0
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	461a      	mov	r2, r3
 800cede:	e00c      	b.n	800cefa <I2C_WaitOnFlagUntilTimeout+0x9e>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	43da      	mvns	r2, r3
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	4013      	ands	r3, r2
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	bf0c      	ite	eq
 800cef2:	2301      	moveq	r3, #1
 800cef4:	2300      	movne	r3, #0
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	461a      	mov	r2, r3
 800cefa:	79fb      	ldrb	r3, [r7, #7]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d0b6      	beq.n	800ce6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b084      	sub	sp, #16
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	607a      	str	r2, [r7, #4]
 800cf16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cf18:	e051      	b.n	800cfbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf28:	d123      	bne.n	800cf72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cf42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5e:	f043 0204 	orr.w	r2, r3, #4
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e046      	b.n	800d000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf78:	d021      	beq.n	800cfbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf7a:	f7fe f905 	bl	800b188 <HAL_GetTick>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d302      	bcc.n	800cf90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d116      	bne.n	800cfbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2220      	movs	r2, #32
 800cf9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfaa:	f043 0220 	orr.w	r2, r3, #32
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e020      	b.n	800d000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	0c1b      	lsrs	r3, r3, #16
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d10c      	bne.n	800cfe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	695b      	ldr	r3, [r3, #20]
 800cfce:	43da      	mvns	r2, r3
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	bf14      	ite	ne
 800cfda:	2301      	movne	r3, #1
 800cfdc:	2300      	moveq	r3, #0
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	e00b      	b.n	800cffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	43da      	mvns	r2, r3
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	4013      	ands	r3, r2
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	bf14      	ite	ne
 800cff4:	2301      	movne	r3, #1
 800cff6:	2300      	moveq	r3, #0
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d18d      	bne.n	800cf1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d014:	e02d      	b.n	800d072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f000 f8ce 	bl	800d1b8 <I2C_IsAcknowledgeFailed>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d022:	2301      	movs	r3, #1
 800d024:	e02d      	b.n	800d082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02c:	d021      	beq.n	800d072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d02e:	f7fe f8ab 	bl	800b188 <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d302      	bcc.n	800d044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d116      	bne.n	800d072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2220      	movs	r2, #32
 800d04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05e:	f043 0220 	orr.w	r2, r3, #32
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e007      	b.n	800d082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d07c:	2b80      	cmp	r3, #128	; 0x80
 800d07e:	d1ca      	bne.n	800d016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d096:	e02d      	b.n	800d0f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f000 f88d 	bl	800d1b8 <I2C_IsAcknowledgeFailed>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e02d      	b.n	800d104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ae:	d021      	beq.n	800d0f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0b0:	f7fe f86a 	bl	800b188 <HAL_GetTick>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d302      	bcc.n	800d0c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d116      	bne.n	800d0f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e0:	f043 0220 	orr.w	r2, r3, #32
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e007      	b.n	800d104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	695b      	ldr	r3, [r3, #20]
 800d0fa:	f003 0304 	and.w	r3, r3, #4
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	d1ca      	bne.n	800d098 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d118:	e042      	b.n	800d1a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	f003 0310 	and.w	r3, r3, #16
 800d124:	2b10      	cmp	r3, #16
 800d126:	d119      	bne.n	800d15c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f06f 0210 	mvn.w	r2, #16
 800d130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2220      	movs	r2, #32
 800d13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	e029      	b.n	800d1b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d15c:	f7fe f814 	bl	800b188 <HAL_GetTick>
 800d160:	4602      	mov	r2, r0
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d302      	bcc.n	800d172 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d116      	bne.n	800d1a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2220      	movs	r2, #32
 800d17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18c:	f043 0220 	orr.w	r2, r3, #32
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e007      	b.n	800d1b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1aa:	2b40      	cmp	r3, #64	; 0x40
 800d1ac:	d1b5      	bne.n	800d11a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1ce:	d11b      	bne.n	800d208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d1d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2220      	movs	r2, #32
 800d1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f4:	f043 0204 	orr.w	r2, r3, #4
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e000      	b.n	800d20a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d216:	b480      	push	{r7}
 800d218:	b083      	sub	sp, #12
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b20      	cmp	r3, #32
 800d22a:	d129      	bne.n	800d280 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2224      	movs	r2, #36	; 0x24
 800d230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0201 	bic.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f022 0210 	bic.w	r2, r2, #16
 800d252:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	430a      	orrs	r2, r1
 800d262:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f042 0201 	orr.w	r2, r2, #1
 800d272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2220      	movs	r2, #32
 800d278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	e000      	b.n	800d282 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800d280:	2302      	movs	r3, #2
  }
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d28e:	b480      	push	{r7}
 800d290:	b085      	sub	sp, #20
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b20      	cmp	r3, #32
 800d2a6:	d12a      	bne.n	800d2fe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2224      	movs	r2, #36	; 0x24
 800d2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f022 0201 	bic.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800d2c8:	89fb      	ldrh	r3, [r7, #14]
 800d2ca:	f023 030f 	bic.w	r3, r3, #15
 800d2ce:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	89fb      	ldrh	r3, [r7, #14]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	89fa      	ldrh	r2, [r7, #14]
 800d2e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f042 0201 	orr.w	r2, r2, #1
 800d2f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2220      	movs	r2, #32
 800d2f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e000      	b.n	800d300 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800d2fe:	2302      	movs	r3, #2
  }
}
 800d300:	4618      	mov	r0, r3
 800d302:	3714      	adds	r7, #20
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d101      	bne.n	800d31e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e0bf      	b.n	800d49e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800d324:	b2db      	uxtb	r3, r3
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7fa fb7a 	bl	8007a2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800d34e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6999      	ldr	r1, [r3, #24]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d364:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	430a      	orrs	r2, r1
 800d372:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6899      	ldr	r1, [r3, #8]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	4b4a      	ldr	r3, [pc, #296]	; (800d4a8 <HAL_LTDC_Init+0x19c>)
 800d380:	400b      	ands	r3, r1
 800d382:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	695b      	ldr	r3, [r3, #20]
 800d388:	041b      	lsls	r3, r3, #16
 800d38a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6899      	ldr	r1, [r3, #8]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	699a      	ldr	r2, [r3, #24]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	431a      	orrs	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68d9      	ldr	r1, [r3, #12]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	4b3e      	ldr	r3, [pc, #248]	; (800d4a8 <HAL_LTDC_Init+0x19c>)
 800d3ae:	400b      	ands	r3, r1
 800d3b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	69db      	ldr	r3, [r3, #28]
 800d3b6:	041b      	lsls	r3, r3, #16
 800d3b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68d9      	ldr	r1, [r3, #12]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a1a      	ldr	r2, [r3, #32]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	431a      	orrs	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6919      	ldr	r1, [r3, #16]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	4b33      	ldr	r3, [pc, #204]	; (800d4a8 <HAL_LTDC_Init+0x19c>)
 800d3dc:	400b      	ands	r3, r1
 800d3de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	041b      	lsls	r3, r3, #16
 800d3e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6919      	ldr	r1, [r3, #16]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6959      	ldr	r1, [r3, #20]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	4b27      	ldr	r3, [pc, #156]	; (800d4a8 <HAL_LTDC_Init+0x19c>)
 800d40a:	400b      	ands	r3, r1
 800d40c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d412:	041b      	lsls	r3, r3, #16
 800d414:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6959      	ldr	r1, [r3, #20]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	431a      	orrs	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	430a      	orrs	r2, r1
 800d42a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d43c:	041b      	lsls	r3, r3, #16
 800d43e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d44e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d456:	68ba      	ldr	r2, [r7, #8]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d462:	431a      	orrs	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	430a      	orrs	r2, r1
 800d46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f042 0206 	orr.w	r2, r2, #6
 800d47a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	699a      	ldr	r2, [r3, #24]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f042 0201 	orr.w	r2, r2, #1
 800d48a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	f000f800 	.word	0xf000f800

0800d4ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d4ac:	b5b0      	push	{r4, r5, r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d101      	bne.n	800d4c6 <HAL_LTDC_ConfigLayer+0x1a>
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	e02c      	b.n	800d520 <HAL_LTDC_ConfigLayer+0x74>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2134      	movs	r1, #52	; 0x34
 800d4dc:	fb01 f303 	mul.w	r3, r1, r3
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	4614      	mov	r4, r2
 800d4ea:	461d      	mov	r5, r3
 800d4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4f8:	682b      	ldr	r3, [r5, #0]
 800d4fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	68b9      	ldr	r1, [r7, #8]
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f000 f8b9 	bl	800d678 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2201      	movs	r2, #1
 800d50c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2201      	movs	r2, #1
 800d512:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bdb0      	pop	{r4, r5, r7, pc}

0800d528 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d101      	bne.n	800d542 <HAL_LTDC_ConfigColorKeying+0x1a>
 800d53e:	2302      	movs	r3, #2
 800d540:	e030      	b.n	800d5a4 <HAL_LTDC_ConfigColorKeying+0x7c>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2202      	movs	r2, #2
 800d54e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	01db      	lsls	r3, r3, #7
 800d55c:	4413      	add	r3, r2
 800d55e:	3384      	adds	r3, #132	; 0x84
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	6812      	ldr	r2, [r2, #0]
 800d566:	4611      	mov	r1, r2
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	01d2      	lsls	r2, r2, #7
 800d56c:	440a      	add	r2, r1
 800d56e:	3284      	adds	r2, #132	; 0x84
 800d570:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d574:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	01db      	lsls	r3, r3, #7
 800d580:	4413      	add	r3, r2
 800d582:	3384      	adds	r3, #132	; 0x84
 800d584:	461a      	mov	r2, r3
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2201      	movs	r2, #1
 800d590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3714      	adds	r7, #20
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d101      	bne.n	800d5c8 <HAL_LTDC_EnableColorKeying+0x18>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	e026      	b.n	800d616 <HAL_LTDC_EnableColorKeying+0x66>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	01db      	lsls	r3, r3, #7
 800d5e2:	4413      	add	r3, r2
 800d5e4:	3384      	adds	r3, #132	; 0x84
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	6812      	ldr	r2, [r2, #0]
 800d5ec:	4611      	mov	r1, r2
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	01d2      	lsls	r2, r2, #7
 800d5f2:	440a      	add	r2, r1
 800d5f4:	3284      	adds	r2, #132	; 0x84
 800d5f6:	f043 0302 	orr.w	r3, r3, #2
 800d5fa:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2201      	movs	r2, #1
 800d602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
	...

0800d624 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800d632:	2b01      	cmp	r3, #1
 800d634:	d101      	bne.n	800d63a <HAL_LTDC_EnableDither+0x16>
 800d636:	2302      	movs	r3, #2
 800d638:	e016      	b.n	800d668 <HAL_LTDC_EnableDither+0x44>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2202      	movs	r2, #2
 800d646:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800d64a:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <HAL_LTDC_EnableDither+0x50>)
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	4a09      	ldr	r2, [pc, #36]	; (800d674 <HAL_LTDC_EnableDither+0x50>)
 800d650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d654:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	40016800 	.word	0x40016800

0800d678 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800d678:	b480      	push	{r7}
 800d67a:	b089      	sub	sp, #36	; 0x24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	0c1b      	lsrs	r3, r3, #16
 800d690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d694:	4413      	add	r3, r2
 800d696:	041b      	lsls	r3, r3, #16
 800d698:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	01db      	lsls	r3, r3, #7
 800d6a4:	4413      	add	r3, r2
 800d6a6:	3384      	adds	r3, #132	; 0x84
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	01d2      	lsls	r2, r2, #7
 800d6b4:	440a      	add	r2, r1
 800d6b6:	3284      	adds	r2, #132	; 0x84
 800d6b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d6bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	0c1b      	lsrs	r3, r3, #16
 800d6ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d6ce:	4413      	add	r3, r2
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	01db      	lsls	r3, r3, #7
 800d6dc:	440b      	add	r3, r1
 800d6de:	3384      	adds	r3, #132	; 0x84
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6f6:	4413      	add	r3, r2
 800d6f8:	041b      	lsls	r3, r3, #16
 800d6fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	01db      	lsls	r3, r3, #7
 800d706:	4413      	add	r3, r2
 800d708:	3384      	adds	r3, #132	; 0x84
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	6812      	ldr	r2, [r2, #0]
 800d710:	4611      	mov	r1, r2
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	01d2      	lsls	r2, r2, #7
 800d716:	440a      	add	r2, r1
 800d718:	3284      	adds	r2, #132	; 0x84
 800d71a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800d71e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	689a      	ldr	r2, [r3, #8]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d72e:	4413      	add	r3, r2
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4619      	mov	r1, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	01db      	lsls	r3, r3, #7
 800d73c:	440b      	add	r3, r1
 800d73e:	3384      	adds	r3, #132	; 0x84
 800d740:	4619      	mov	r1, r3
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	4313      	orrs	r3, r2
 800d746:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	01db      	lsls	r3, r3, #7
 800d752:	4413      	add	r3, r2
 800d754:	3384      	adds	r3, #132	; 0x84
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	68fa      	ldr	r2, [r7, #12]
 800d75a:	6812      	ldr	r2, [r2, #0]
 800d75c:	4611      	mov	r1, r2
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	01d2      	lsls	r2, r2, #7
 800d762:	440a      	add	r2, r1
 800d764:	3284      	adds	r2, #132	; 0x84
 800d766:	f023 0307 	bic.w	r3, r3, #7
 800d76a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	461a      	mov	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	01db      	lsls	r3, r3, #7
 800d776:	4413      	add	r3, r2
 800d778:	3384      	adds	r3, #132	; 0x84
 800d77a:	461a      	mov	r2, r3
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d788:	021b      	lsls	r3, r3, #8
 800d78a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d792:	041b      	lsls	r3, r3, #16
 800d794:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	061b      	lsls	r3, r3, #24
 800d79c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	01db      	lsls	r3, r3, #7
 800d7a8:	4413      	add	r3, r2
 800d7aa:	3384      	adds	r3, #132	; 0x84
 800d7ac:	699b      	ldr	r3, [r3, #24]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	01db      	lsls	r3, r3, #7
 800d7b8:	4413      	add	r3, r2
 800d7ba:	3384      	adds	r3, #132	; 0x84
 800d7bc:	461a      	mov	r2, r3
 800d7be:	2300      	movs	r3, #0
 800d7c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	01db      	lsls	r3, r3, #7
 800d7dc:	440b      	add	r3, r1
 800d7de:	3384      	adds	r3, #132	; 0x84
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	01db      	lsls	r3, r3, #7
 800d7f2:	4413      	add	r3, r2
 800d7f4:	3384      	adds	r3, #132	; 0x84
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	6812      	ldr	r2, [r2, #0]
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	01d2      	lsls	r2, r2, #7
 800d802:	440a      	add	r2, r1
 800d804:	3284      	adds	r2, #132	; 0x84
 800d806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d80a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	461a      	mov	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	01db      	lsls	r3, r3, #7
 800d816:	4413      	add	r3, r2
 800d818:	3384      	adds	r3, #132	; 0x84
 800d81a:	461a      	mov	r2, r3
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	461a      	mov	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	01db      	lsls	r3, r3, #7
 800d82c:	4413      	add	r3, r2
 800d82e:	3384      	adds	r3, #132	; 0x84
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	6812      	ldr	r2, [r2, #0]
 800d836:	4611      	mov	r1, r2
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	01d2      	lsls	r2, r2, #7
 800d83c:	440a      	add	r2, r1
 800d83e:	3284      	adds	r2, #132	; 0x84
 800d840:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d844:	f023 0307 	bic.w	r3, r3, #7
 800d848:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	69da      	ldr	r2, [r3, #28]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	68f9      	ldr	r1, [r7, #12]
 800d854:	6809      	ldr	r1, [r1, #0]
 800d856:	4608      	mov	r0, r1
 800d858:	6879      	ldr	r1, [r7, #4]
 800d85a:	01c9      	lsls	r1, r1, #7
 800d85c:	4401      	add	r1, r0
 800d85e:	3184      	adds	r1, #132	; 0x84
 800d860:	4313      	orrs	r3, r2
 800d862:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	01db      	lsls	r3, r3, #7
 800d86e:	4413      	add	r3, r2
 800d870:	3384      	adds	r3, #132	; 0x84
 800d872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	461a      	mov	r2, r3
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	01db      	lsls	r3, r3, #7
 800d87e:	4413      	add	r3, r2
 800d880:	3384      	adds	r3, #132	; 0x84
 800d882:	461a      	mov	r2, r3
 800d884:	2300      	movs	r3, #0
 800d886:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	461a      	mov	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	01db      	lsls	r3, r3, #7
 800d892:	4413      	add	r3, r2
 800d894:	3384      	adds	r3, #132	; 0x84
 800d896:	461a      	mov	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800d8a6:	2304      	movs	r3, #4
 800d8a8:	61fb      	str	r3, [r7, #28]
 800d8aa:	e01b      	b.n	800d8e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d102      	bne.n	800d8ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	61fb      	str	r3, [r7, #28]
 800d8b8:	e014      	b.n	800d8e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d00b      	beq.n	800d8da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d007      	beq.n	800d8da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d003      	beq.n	800d8da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800d8d6:	2b07      	cmp	r3, #7
 800d8d8:	d102      	bne.n	800d8e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800d8da:	2302      	movs	r3, #2
 800d8dc:	61fb      	str	r3, [r7, #28]
 800d8de:	e001      	b.n	800d8e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	01db      	lsls	r3, r3, #7
 800d8ee:	4413      	add	r3, r2
 800d8f0:	3384      	adds	r3, #132	; 0x84
 800d8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f4:	68fa      	ldr	r2, [r7, #12]
 800d8f6:	6812      	ldr	r2, [r2, #0]
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	01d2      	lsls	r2, r2, #7
 800d8fe:	440a      	add	r2, r1
 800d900:	3284      	adds	r2, #132	; 0x84
 800d902:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800d906:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d90c:	69fa      	ldr	r2, [r7, #28]
 800d90e:	fb02 f303 	mul.w	r3, r2, r3
 800d912:	041a      	lsls	r2, r3, #16
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	6859      	ldr	r1, [r3, #4]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	1acb      	subs	r3, r1, r3
 800d91e:	69f9      	ldr	r1, [r7, #28]
 800d920:	fb01 f303 	mul.w	r3, r1, r3
 800d924:	3303      	adds	r3, #3
 800d926:	68f9      	ldr	r1, [r7, #12]
 800d928:	6809      	ldr	r1, [r1, #0]
 800d92a:	4608      	mov	r0, r1
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	01c9      	lsls	r1, r1, #7
 800d930:	4401      	add	r1, r0
 800d932:	3184      	adds	r1, #132	; 0x84
 800d934:	4313      	orrs	r3, r2
 800d936:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	461a      	mov	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	01db      	lsls	r3, r3, #7
 800d942:	4413      	add	r3, r2
 800d944:	3384      	adds	r3, #132	; 0x84
 800d946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	6812      	ldr	r2, [r2, #0]
 800d94c:	4611      	mov	r1, r2
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	01d2      	lsls	r2, r2, #7
 800d952:	440a      	add	r2, r1
 800d954:	3284      	adds	r2, #132	; 0x84
 800d956:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d95a:	f023 0307 	bic.w	r3, r3, #7
 800d95e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	461a      	mov	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	01db      	lsls	r3, r3, #7
 800d96a:	4413      	add	r3, r2
 800d96c:	3384      	adds	r3, #132	; 0x84
 800d96e:	461a      	mov	r2, r3
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d974:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	01db      	lsls	r3, r3, #7
 800d980:	4413      	add	r3, r2
 800d982:	3384      	adds	r3, #132	; 0x84
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	6812      	ldr	r2, [r2, #0]
 800d98a:	4611      	mov	r1, r2
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	01d2      	lsls	r2, r2, #7
 800d990:	440a      	add	r2, r1
 800d992:	3284      	adds	r2, #132	; 0x84
 800d994:	f043 0301 	orr.w	r3, r3, #1
 800d998:	6013      	str	r3, [r2, #0]
}
 800d99a:	bf00      	nop
 800d99c:	3724      	adds	r7, #36	; 0x24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
	...

0800d9a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e25b      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d075      	beq.n	800dab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d9c6:	4ba3      	ldr	r3, [pc, #652]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	f003 030c 	and.w	r3, r3, #12
 800d9ce:	2b04      	cmp	r3, #4
 800d9d0:	d00c      	beq.n	800d9ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d9d2:	4ba0      	ldr	r3, [pc, #640]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d9da:	2b08      	cmp	r3, #8
 800d9dc:	d112      	bne.n	800da04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d9de:	4b9d      	ldr	r3, [pc, #628]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9ea:	d10b      	bne.n	800da04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9ec:	4b99      	ldr	r3, [pc, #612]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d05b      	beq.n	800dab0 <HAL_RCC_OscConfig+0x108>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d157      	bne.n	800dab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e236      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da0c:	d106      	bne.n	800da1c <HAL_RCC_OscConfig+0x74>
 800da0e:	4b91      	ldr	r3, [pc, #580]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4a90      	ldr	r2, [pc, #576]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da18:	6013      	str	r3, [r2, #0]
 800da1a:	e01d      	b.n	800da58 <HAL_RCC_OscConfig+0xb0>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800da24:	d10c      	bne.n	800da40 <HAL_RCC_OscConfig+0x98>
 800da26:	4b8b      	ldr	r3, [pc, #556]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a8a      	ldr	r2, [pc, #552]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	4b88      	ldr	r3, [pc, #544]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a87      	ldr	r2, [pc, #540]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da3c:	6013      	str	r3, [r2, #0]
 800da3e:	e00b      	b.n	800da58 <HAL_RCC_OscConfig+0xb0>
 800da40:	4b84      	ldr	r3, [pc, #528]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a83      	ldr	r2, [pc, #524]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	4b81      	ldr	r3, [pc, #516]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a80      	ldr	r2, [pc, #512]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d013      	beq.n	800da88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da60:	f7fd fb92 	bl	800b188 <HAL_GetTick>
 800da64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da66:	e008      	b.n	800da7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da68:	f7fd fb8e 	bl	800b188 <HAL_GetTick>
 800da6c:	4602      	mov	r2, r0
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	2b64      	cmp	r3, #100	; 0x64
 800da74:	d901      	bls.n	800da7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800da76:	2303      	movs	r3, #3
 800da78:	e1fb      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800da7a:	4b76      	ldr	r3, [pc, #472]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da82:	2b00      	cmp	r3, #0
 800da84:	d0f0      	beq.n	800da68 <HAL_RCC_OscConfig+0xc0>
 800da86:	e014      	b.n	800dab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da88:	f7fd fb7e 	bl	800b188 <HAL_GetTick>
 800da8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800da8e:	e008      	b.n	800daa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800da90:	f7fd fb7a 	bl	800b188 <HAL_GetTick>
 800da94:	4602      	mov	r2, r0
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	1ad3      	subs	r3, r2, r3
 800da9a:	2b64      	cmp	r3, #100	; 0x64
 800da9c:	d901      	bls.n	800daa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da9e:	2303      	movs	r3, #3
 800daa0:	e1e7      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800daa2:	4b6c      	ldr	r3, [pc, #432]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1f0      	bne.n	800da90 <HAL_RCC_OscConfig+0xe8>
 800daae:	e000      	b.n	800dab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0302 	and.w	r3, r3, #2
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d063      	beq.n	800db86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dabe:	4b65      	ldr	r3, [pc, #404]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f003 030c 	and.w	r3, r3, #12
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00b      	beq.n	800dae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800daca:	4b62      	ldr	r3, [pc, #392]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dad2:	2b08      	cmp	r3, #8
 800dad4:	d11c      	bne.n	800db10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dad6:	4b5f      	ldr	r3, [pc, #380]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d116      	bne.n	800db10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dae2:	4b5c      	ldr	r3, [pc, #368]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f003 0302 	and.w	r3, r3, #2
 800daea:	2b00      	cmp	r3, #0
 800daec:	d005      	beq.n	800dafa <HAL_RCC_OscConfig+0x152>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d001      	beq.n	800dafa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e1bb      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dafa:	4b56      	ldr	r3, [pc, #344]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	00db      	lsls	r3, r3, #3
 800db08:	4952      	ldr	r1, [pc, #328]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800db0a:	4313      	orrs	r3, r2
 800db0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800db0e:	e03a      	b.n	800db86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d020      	beq.n	800db5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800db18:	4b4f      	ldr	r3, [pc, #316]	; (800dc58 <HAL_RCC_OscConfig+0x2b0>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db1e:	f7fd fb33 	bl	800b188 <HAL_GetTick>
 800db22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db24:	e008      	b.n	800db38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800db26:	f7fd fb2f 	bl	800b188 <HAL_GetTick>
 800db2a:	4602      	mov	r2, r0
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	2b02      	cmp	r3, #2
 800db32:	d901      	bls.n	800db38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800db34:	2303      	movs	r3, #3
 800db36:	e19c      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db38:	4b46      	ldr	r3, [pc, #280]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d0f0      	beq.n	800db26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db44:	4b43      	ldr	r3, [pc, #268]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	00db      	lsls	r3, r3, #3
 800db52:	4940      	ldr	r1, [pc, #256]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800db54:	4313      	orrs	r3, r2
 800db56:	600b      	str	r3, [r1, #0]
 800db58:	e015      	b.n	800db86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800db5a:	4b3f      	ldr	r3, [pc, #252]	; (800dc58 <HAL_RCC_OscConfig+0x2b0>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db60:	f7fd fb12 	bl	800b188 <HAL_GetTick>
 800db64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800db66:	e008      	b.n	800db7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800db68:	f7fd fb0e 	bl	800b188 <HAL_GetTick>
 800db6c:	4602      	mov	r2, r0
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	2b02      	cmp	r3, #2
 800db74:	d901      	bls.n	800db7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e17b      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800db7a:	4b36      	ldr	r3, [pc, #216]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f003 0302 	and.w	r3, r3, #2
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1f0      	bne.n	800db68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f003 0308 	and.w	r3, r3, #8
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d030      	beq.n	800dbf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	695b      	ldr	r3, [r3, #20]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d016      	beq.n	800dbc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800db9a:	4b30      	ldr	r3, [pc, #192]	; (800dc5c <HAL_RCC_OscConfig+0x2b4>)
 800db9c:	2201      	movs	r2, #1
 800db9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dba0:	f7fd faf2 	bl	800b188 <HAL_GetTick>
 800dba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dba6:	e008      	b.n	800dbba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dba8:	f7fd faee 	bl	800b188 <HAL_GetTick>
 800dbac:	4602      	mov	r2, r0
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d901      	bls.n	800dbba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	e15b      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dbba:	4b26      	ldr	r3, [pc, #152]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dbbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0f0      	beq.n	800dba8 <HAL_RCC_OscConfig+0x200>
 800dbc6:	e015      	b.n	800dbf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dbc8:	4b24      	ldr	r3, [pc, #144]	; (800dc5c <HAL_RCC_OscConfig+0x2b4>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dbce:	f7fd fadb 	bl	800b188 <HAL_GetTick>
 800dbd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dbd4:	e008      	b.n	800dbe8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dbd6:	f7fd fad7 	bl	800b188 <HAL_GetTick>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d901      	bls.n	800dbe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	e144      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dbe8:	4b1a      	ldr	r3, [pc, #104]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dbea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbec:	f003 0302 	and.w	r3, r3, #2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1f0      	bne.n	800dbd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 0304 	and.w	r3, r3, #4
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f000 80a0 	beq.w	800dd42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dc02:	2300      	movs	r3, #0
 800dc04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dc06:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10f      	bne.n	800dc32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dc12:	2300      	movs	r3, #0
 800dc14:	60bb      	str	r3, [r7, #8]
 800dc16:	4b0f      	ldr	r3, [pc, #60]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1a:	4a0e      	ldr	r2, [pc, #56]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dc1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc20:	6413      	str	r3, [r2, #64]	; 0x40
 800dc22:	4b0c      	ldr	r3, [pc, #48]	; (800dc54 <HAL_RCC_OscConfig+0x2ac>)
 800dc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc2a:	60bb      	str	r3, [r7, #8]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc32:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <HAL_RCC_OscConfig+0x2b8>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d121      	bne.n	800dc82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dc3e:	4b08      	ldr	r3, [pc, #32]	; (800dc60 <HAL_RCC_OscConfig+0x2b8>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a07      	ldr	r2, [pc, #28]	; (800dc60 <HAL_RCC_OscConfig+0x2b8>)
 800dc44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dc4a:	f7fd fa9d 	bl	800b188 <HAL_GetTick>
 800dc4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc50:	e011      	b.n	800dc76 <HAL_RCC_OscConfig+0x2ce>
 800dc52:	bf00      	nop
 800dc54:	40023800 	.word	0x40023800
 800dc58:	42470000 	.word	0x42470000
 800dc5c:	42470e80 	.word	0x42470e80
 800dc60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc64:	f7fd fa90 	bl	800b188 <HAL_GetTick>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d901      	bls.n	800dc76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800dc72:	2303      	movs	r3, #3
 800dc74:	e0fd      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dc76:	4b81      	ldr	r3, [pc, #516]	; (800de7c <HAL_RCC_OscConfig+0x4d4>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d0f0      	beq.n	800dc64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d106      	bne.n	800dc98 <HAL_RCC_OscConfig+0x2f0>
 800dc8a:	4b7d      	ldr	r3, [pc, #500]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc8e:	4a7c      	ldr	r2, [pc, #496]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dc90:	f043 0301 	orr.w	r3, r3, #1
 800dc94:	6713      	str	r3, [r2, #112]	; 0x70
 800dc96:	e01c      	b.n	800dcd2 <HAL_RCC_OscConfig+0x32a>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	2b05      	cmp	r3, #5
 800dc9e:	d10c      	bne.n	800dcba <HAL_RCC_OscConfig+0x312>
 800dca0:	4b77      	ldr	r3, [pc, #476]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dca4:	4a76      	ldr	r2, [pc, #472]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dca6:	f043 0304 	orr.w	r3, r3, #4
 800dcaa:	6713      	str	r3, [r2, #112]	; 0x70
 800dcac:	4b74      	ldr	r3, [pc, #464]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dcae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcb0:	4a73      	ldr	r2, [pc, #460]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dcb2:	f043 0301 	orr.w	r3, r3, #1
 800dcb6:	6713      	str	r3, [r2, #112]	; 0x70
 800dcb8:	e00b      	b.n	800dcd2 <HAL_RCC_OscConfig+0x32a>
 800dcba:	4b71      	ldr	r3, [pc, #452]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dcbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcbe:	4a70      	ldr	r2, [pc, #448]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dcc0:	f023 0301 	bic.w	r3, r3, #1
 800dcc4:	6713      	str	r3, [r2, #112]	; 0x70
 800dcc6:	4b6e      	ldr	r3, [pc, #440]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcca:	4a6d      	ldr	r2, [pc, #436]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dccc:	f023 0304 	bic.w	r3, r3, #4
 800dcd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d015      	beq.n	800dd06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcda:	f7fd fa55 	bl	800b188 <HAL_GetTick>
 800dcde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dce0:	e00a      	b.n	800dcf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dce2:	f7fd fa51 	bl	800b188 <HAL_GetTick>
 800dce6:	4602      	mov	r2, r0
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	1ad3      	subs	r3, r2, r3
 800dcec:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d901      	bls.n	800dcf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	e0bc      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dcf8:	4b61      	ldr	r3, [pc, #388]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dcfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcfc:	f003 0302 	and.w	r3, r3, #2
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d0ee      	beq.n	800dce2 <HAL_RCC_OscConfig+0x33a>
 800dd04:	e014      	b.n	800dd30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dd06:	f7fd fa3f 	bl	800b188 <HAL_GetTick>
 800dd0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dd0c:	e00a      	b.n	800dd24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dd0e:	f7fd fa3b 	bl	800b188 <HAL_GetTick>
 800dd12:	4602      	mov	r2, r0
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d901      	bls.n	800dd24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800dd20:	2303      	movs	r3, #3
 800dd22:	e0a6      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dd24:	4b56      	ldr	r3, [pc, #344]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dd26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd28:	f003 0302 	and.w	r3, r3, #2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1ee      	bne.n	800dd0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dd30:	7dfb      	ldrb	r3, [r7, #23]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d105      	bne.n	800dd42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dd36:	4b52      	ldr	r3, [pc, #328]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3a:	4a51      	ldr	r2, [pc, #324]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dd3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 8092 	beq.w	800de70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dd4c:	4b4c      	ldr	r3, [pc, #304]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f003 030c 	and.w	r3, r3, #12
 800dd54:	2b08      	cmp	r3, #8
 800dd56:	d05c      	beq.n	800de12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d141      	bne.n	800dde4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd60:	4b48      	ldr	r3, [pc, #288]	; (800de84 <HAL_RCC_OscConfig+0x4dc>)
 800dd62:	2200      	movs	r2, #0
 800dd64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd66:	f7fd fa0f 	bl	800b188 <HAL_GetTick>
 800dd6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd6c:	e008      	b.n	800dd80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dd6e:	f7fd fa0b 	bl	800b188 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d901      	bls.n	800dd80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	e078      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dd80:	4b3f      	ldr	r3, [pc, #252]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1f0      	bne.n	800dd6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	69da      	ldr	r2, [r3, #28]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a1b      	ldr	r3, [r3, #32]
 800dd94:	431a      	orrs	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9a:	019b      	lsls	r3, r3, #6
 800dd9c:	431a      	orrs	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda2:	085b      	lsrs	r3, r3, #1
 800dda4:	3b01      	subs	r3, #1
 800dda6:	041b      	lsls	r3, r3, #16
 800dda8:	431a      	orrs	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddae:	061b      	lsls	r3, r3, #24
 800ddb0:	4933      	ldr	r1, [pc, #204]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ddb6:	4b33      	ldr	r3, [pc, #204]	; (800de84 <HAL_RCC_OscConfig+0x4dc>)
 800ddb8:	2201      	movs	r2, #1
 800ddba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ddbc:	f7fd f9e4 	bl	800b188 <HAL_GetTick>
 800ddc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddc2:	e008      	b.n	800ddd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ddc4:	f7fd f9e0 	bl	800b188 <HAL_GetTick>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d901      	bls.n	800ddd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	e04d      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ddd6:	4b2a      	ldr	r3, [pc, #168]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d0f0      	beq.n	800ddc4 <HAL_RCC_OscConfig+0x41c>
 800dde2:	e045      	b.n	800de70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dde4:	4b27      	ldr	r3, [pc, #156]	; (800de84 <HAL_RCC_OscConfig+0x4dc>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ddea:	f7fd f9cd 	bl	800b188 <HAL_GetTick>
 800ddee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ddf0:	e008      	b.n	800de04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ddf2:	f7fd f9c9 	bl	800b188 <HAL_GetTick>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d901      	bls.n	800de04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800de00:	2303      	movs	r3, #3
 800de02:	e036      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800de04:	4b1e      	ldr	r3, [pc, #120]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1f0      	bne.n	800ddf2 <HAL_RCC_OscConfig+0x44a>
 800de10:	e02e      	b.n	800de70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d101      	bne.n	800de1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e029      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800de1e:	4b18      	ldr	r3, [pc, #96]	; (800de80 <HAL_RCC_OscConfig+0x4d8>)
 800de20:	689b      	ldr	r3, [r3, #8]
 800de22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d11c      	bne.n	800de6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d115      	bne.n	800de6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800de46:	4013      	ands	r3, r2
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d10d      	bne.n	800de6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d106      	bne.n	800de6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de68:	429a      	cmp	r2, r3
 800de6a:	d001      	beq.n	800de70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e000      	b.n	800de72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3718      	adds	r7, #24
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	40007000 	.word	0x40007000
 800de80:	40023800 	.word	0x40023800
 800de84:	42470060 	.word	0x42470060

0800de88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800de98:	2301      	movs	r3, #1
 800de9a:	e0cc      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800de9c:	4b68      	ldr	r3, [pc, #416]	; (800e040 <HAL_RCC_ClockConfig+0x1b8>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 030f 	and.w	r3, r3, #15
 800dea4:	683a      	ldr	r2, [r7, #0]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d90c      	bls.n	800dec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800deaa:	4b65      	ldr	r3, [pc, #404]	; (800e040 <HAL_RCC_ClockConfig+0x1b8>)
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	b2d2      	uxtb	r2, r2
 800deb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800deb2:	4b63      	ldr	r3, [pc, #396]	; (800e040 <HAL_RCC_ClockConfig+0x1b8>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f003 030f 	and.w	r3, r3, #15
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	429a      	cmp	r2, r3
 800debe:	d001      	beq.n	800dec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e0b8      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f003 0302 	and.w	r3, r3, #2
 800decc:	2b00      	cmp	r3, #0
 800dece:	d020      	beq.n	800df12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 0304 	and.w	r3, r3, #4
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d005      	beq.n	800dee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dedc:	4b59      	ldr	r3, [pc, #356]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	4a58      	ldr	r2, [pc, #352]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800dee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f003 0308 	and.w	r3, r3, #8
 800def0:	2b00      	cmp	r3, #0
 800def2:	d005      	beq.n	800df00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800def4:	4b53      	ldr	r3, [pc, #332]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	4a52      	ldr	r2, [pc, #328]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800defa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800defe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df00:	4b50      	ldr	r3, [pc, #320]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	494d      	ldr	r1, [pc, #308]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df0e:	4313      	orrs	r3, r2
 800df10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d044      	beq.n	800dfa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d107      	bne.n	800df36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df26:	4b47      	ldr	r3, [pc, #284]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d119      	bne.n	800df66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	e07f      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	2b02      	cmp	r3, #2
 800df3c:	d003      	beq.n	800df46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800df42:	2b03      	cmp	r3, #3
 800df44:	d107      	bne.n	800df56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df46:	4b3f      	ldr	r3, [pc, #252]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d109      	bne.n	800df66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e06f      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800df56:	4b3b      	ldr	r3, [pc, #236]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f003 0302 	and.w	r3, r3, #2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	e067      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800df66:	4b37      	ldr	r3, [pc, #220]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f023 0203 	bic.w	r2, r3, #3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	4934      	ldr	r1, [pc, #208]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df74:	4313      	orrs	r3, r2
 800df76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800df78:	f7fd f906 	bl	800b188 <HAL_GetTick>
 800df7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df7e:	e00a      	b.n	800df96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df80:	f7fd f902 	bl	800b188 <HAL_GetTick>
 800df84:	4602      	mov	r2, r0
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	1ad3      	subs	r3, r2, r3
 800df8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df8e:	4293      	cmp	r3, r2
 800df90:	d901      	bls.n	800df96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	e04f      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df96:	4b2b      	ldr	r3, [pc, #172]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	f003 020c 	and.w	r2, r3, #12
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d1eb      	bne.n	800df80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dfa8:	4b25      	ldr	r3, [pc, #148]	; (800e040 <HAL_RCC_ClockConfig+0x1b8>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f003 030f 	and.w	r3, r3, #15
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d20c      	bcs.n	800dfd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dfb6:	4b22      	ldr	r3, [pc, #136]	; (800e040 <HAL_RCC_ClockConfig+0x1b8>)
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	b2d2      	uxtb	r2, r2
 800dfbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <HAL_RCC_ClockConfig+0x1b8>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 030f 	and.w	r3, r3, #15
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d001      	beq.n	800dfd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	e032      	b.n	800e036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f003 0304 	and.w	r3, r3, #4
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d008      	beq.n	800dfee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dfdc:	4b19      	ldr	r3, [pc, #100]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	4916      	ldr	r1, [pc, #88]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800dfea:	4313      	orrs	r3, r2
 800dfec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f003 0308 	and.w	r3, r3, #8
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d009      	beq.n	800e00e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dffa:	4b12      	ldr	r3, [pc, #72]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	490e      	ldr	r1, [pc, #56]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800e00a:	4313      	orrs	r3, r2
 800e00c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e00e:	f000 f821 	bl	800e054 <HAL_RCC_GetSysClockFreq>
 800e012:	4601      	mov	r1, r0
 800e014:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <HAL_RCC_ClockConfig+0x1bc>)
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	091b      	lsrs	r3, r3, #4
 800e01a:	f003 030f 	and.w	r3, r3, #15
 800e01e:	4a0a      	ldr	r2, [pc, #40]	; (800e048 <HAL_RCC_ClockConfig+0x1c0>)
 800e020:	5cd3      	ldrb	r3, [r2, r3]
 800e022:	fa21 f303 	lsr.w	r3, r1, r3
 800e026:	4a09      	ldr	r2, [pc, #36]	; (800e04c <HAL_RCC_ClockConfig+0x1c4>)
 800e028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e02a:	4b09      	ldr	r3, [pc, #36]	; (800e050 <HAL_RCC_ClockConfig+0x1c8>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fa fc5c 	bl	80088ec <HAL_InitTick>

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	40023c00 	.word	0x40023c00
 800e044:	40023800 	.word	0x40023800
 800e048:	0814f71c 	.word	0x0814f71c
 800e04c:	200008bc 	.word	0x200008bc
 800e050:	200008c0 	.word	0x200008c0

0800e054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e05a:	2300      	movs	r3, #0
 800e05c:	607b      	str	r3, [r7, #4]
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	2300      	movs	r3, #0
 800e064:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e06a:	4b63      	ldr	r3, [pc, #396]	; (800e1f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	f003 030c 	and.w	r3, r3, #12
 800e072:	2b04      	cmp	r3, #4
 800e074:	d007      	beq.n	800e086 <HAL_RCC_GetSysClockFreq+0x32>
 800e076:	2b08      	cmp	r3, #8
 800e078:	d008      	beq.n	800e08c <HAL_RCC_GetSysClockFreq+0x38>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f040 80b4 	bne.w	800e1e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e080:	4b5e      	ldr	r3, [pc, #376]	; (800e1fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e082:	60bb      	str	r3, [r7, #8]
       break;
 800e084:	e0b3      	b.n	800e1ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e086:	4b5e      	ldr	r3, [pc, #376]	; (800e200 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800e088:	60bb      	str	r3, [r7, #8]
      break;
 800e08a:	e0b0      	b.n	800e1ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e08c:	4b5a      	ldr	r3, [pc, #360]	; (800e1f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e094:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e096:	4b58      	ldr	r3, [pc, #352]	; (800e1f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d04a      	beq.n	800e138 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e0a2:	4b55      	ldr	r3, [pc, #340]	; (800e1f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	099b      	lsrs	r3, r3, #6
 800e0a8:	f04f 0400 	mov.w	r4, #0
 800e0ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e0b0:	f04f 0200 	mov.w	r2, #0
 800e0b4:	ea03 0501 	and.w	r5, r3, r1
 800e0b8:	ea04 0602 	and.w	r6, r4, r2
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4632      	mov	r2, r6
 800e0c0:	f04f 0300 	mov.w	r3, #0
 800e0c4:	f04f 0400 	mov.w	r4, #0
 800e0c8:	0154      	lsls	r4, r2, #5
 800e0ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e0ce:	014b      	lsls	r3, r1, #5
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	1b49      	subs	r1, r1, r5
 800e0d6:	eb62 0206 	sbc.w	r2, r2, r6
 800e0da:	f04f 0300 	mov.w	r3, #0
 800e0de:	f04f 0400 	mov.w	r4, #0
 800e0e2:	0194      	lsls	r4, r2, #6
 800e0e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e0e8:	018b      	lsls	r3, r1, #6
 800e0ea:	1a5b      	subs	r3, r3, r1
 800e0ec:	eb64 0402 	sbc.w	r4, r4, r2
 800e0f0:	f04f 0100 	mov.w	r1, #0
 800e0f4:	f04f 0200 	mov.w	r2, #0
 800e0f8:	00e2      	lsls	r2, r4, #3
 800e0fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e0fe:	00d9      	lsls	r1, r3, #3
 800e100:	460b      	mov	r3, r1
 800e102:	4614      	mov	r4, r2
 800e104:	195b      	adds	r3, r3, r5
 800e106:	eb44 0406 	adc.w	r4, r4, r6
 800e10a:	f04f 0100 	mov.w	r1, #0
 800e10e:	f04f 0200 	mov.w	r2, #0
 800e112:	0262      	lsls	r2, r4, #9
 800e114:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800e118:	0259      	lsls	r1, r3, #9
 800e11a:	460b      	mov	r3, r1
 800e11c:	4614      	mov	r4, r2
 800e11e:	4618      	mov	r0, r3
 800e120:	4621      	mov	r1, r4
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f04f 0400 	mov.w	r4, #0
 800e128:	461a      	mov	r2, r3
 800e12a:	4623      	mov	r3, r4
 800e12c:	f7f8 fe24 	bl	8006d78 <__aeabi_uldivmod>
 800e130:	4603      	mov	r3, r0
 800e132:	460c      	mov	r4, r1
 800e134:	60fb      	str	r3, [r7, #12]
 800e136:	e049      	b.n	800e1cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e138:	4b2f      	ldr	r3, [pc, #188]	; (800e1f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	099b      	lsrs	r3, r3, #6
 800e13e:	f04f 0400 	mov.w	r4, #0
 800e142:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e146:	f04f 0200 	mov.w	r2, #0
 800e14a:	ea03 0501 	and.w	r5, r3, r1
 800e14e:	ea04 0602 	and.w	r6, r4, r2
 800e152:	4629      	mov	r1, r5
 800e154:	4632      	mov	r2, r6
 800e156:	f04f 0300 	mov.w	r3, #0
 800e15a:	f04f 0400 	mov.w	r4, #0
 800e15e:	0154      	lsls	r4, r2, #5
 800e160:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800e164:	014b      	lsls	r3, r1, #5
 800e166:	4619      	mov	r1, r3
 800e168:	4622      	mov	r2, r4
 800e16a:	1b49      	subs	r1, r1, r5
 800e16c:	eb62 0206 	sbc.w	r2, r2, r6
 800e170:	f04f 0300 	mov.w	r3, #0
 800e174:	f04f 0400 	mov.w	r4, #0
 800e178:	0194      	lsls	r4, r2, #6
 800e17a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800e17e:	018b      	lsls	r3, r1, #6
 800e180:	1a5b      	subs	r3, r3, r1
 800e182:	eb64 0402 	sbc.w	r4, r4, r2
 800e186:	f04f 0100 	mov.w	r1, #0
 800e18a:	f04f 0200 	mov.w	r2, #0
 800e18e:	00e2      	lsls	r2, r4, #3
 800e190:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800e194:	00d9      	lsls	r1, r3, #3
 800e196:	460b      	mov	r3, r1
 800e198:	4614      	mov	r4, r2
 800e19a:	195b      	adds	r3, r3, r5
 800e19c:	eb44 0406 	adc.w	r4, r4, r6
 800e1a0:	f04f 0100 	mov.w	r1, #0
 800e1a4:	f04f 0200 	mov.w	r2, #0
 800e1a8:	02a2      	lsls	r2, r4, #10
 800e1aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800e1ae:	0299      	lsls	r1, r3, #10
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4614      	mov	r4, r2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f04f 0400 	mov.w	r4, #0
 800e1be:	461a      	mov	r2, r3
 800e1c0:	4623      	mov	r3, r4
 800e1c2:	f7f8 fdd9 	bl	8006d78 <__aeabi_uldivmod>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e1cc:	4b0a      	ldr	r3, [pc, #40]	; (800e1f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	0c1b      	lsrs	r3, r3, #16
 800e1d2:	f003 0303 	and.w	r3, r3, #3
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e1dc:	68fa      	ldr	r2, [r7, #12]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1e4:	60bb      	str	r3, [r7, #8]
      break;
 800e1e6:	e002      	b.n	800e1ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e1e8:	4b04      	ldr	r3, [pc, #16]	; (800e1fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800e1ea:	60bb      	str	r3, [r7, #8]
      break;
 800e1ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3714      	adds	r7, #20
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f8:	40023800 	.word	0x40023800
 800e1fc:	00f42400 	.word	0x00f42400
 800e200:	007a1200 	.word	0x007a1200

0800e204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e204:	b480      	push	{r7}
 800e206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e208:	4b03      	ldr	r3, [pc, #12]	; (800e218 <HAL_RCC_GetHCLKFreq+0x14>)
 800e20a:	681b      	ldr	r3, [r3, #0]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	200008bc 	.word	0x200008bc

0800e21c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e220:	f7ff fff0 	bl	800e204 <HAL_RCC_GetHCLKFreq>
 800e224:	4601      	mov	r1, r0
 800e226:	4b05      	ldr	r3, [pc, #20]	; (800e23c <HAL_RCC_GetPCLK1Freq+0x20>)
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	0a9b      	lsrs	r3, r3, #10
 800e22c:	f003 0307 	and.w	r3, r3, #7
 800e230:	4a03      	ldr	r2, [pc, #12]	; (800e240 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e232:	5cd3      	ldrb	r3, [r2, r3]
 800e234:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e238:	4618      	mov	r0, r3
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	40023800 	.word	0x40023800
 800e240:	0814f72c 	.word	0x0814f72c

0800e244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e248:	f7ff ffdc 	bl	800e204 <HAL_RCC_GetHCLKFreq>
 800e24c:	4601      	mov	r1, r0
 800e24e:	4b05      	ldr	r3, [pc, #20]	; (800e264 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	0b5b      	lsrs	r3, r3, #13
 800e254:	f003 0307 	and.w	r3, r3, #7
 800e258:	4a03      	ldr	r2, [pc, #12]	; (800e268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e25a:	5cd3      	ldrb	r3, [r2, r3]
 800e25c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800e260:	4618      	mov	r0, r3
 800e262:	bd80      	pop	{r7, pc}
 800e264:	40023800 	.word	0x40023800
 800e268:	0814f72c 	.word	0x0814f72c

0800e26c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	220f      	movs	r2, #15
 800e27a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e27c:	4b12      	ldr	r3, [pc, #72]	; (800e2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	f003 0203 	and.w	r2, r3, #3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e288:	4b0f      	ldr	r3, [pc, #60]	; (800e2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e294:	4b0c      	ldr	r3, [pc, #48]	; (800e2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e2a0:	4b09      	ldr	r3, [pc, #36]	; (800e2c8 <HAL_RCC_GetClockConfig+0x5c>)
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	08db      	lsrs	r3, r3, #3
 800e2a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <HAL_RCC_GetClockConfig+0x60>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f003 020f 	and.w	r2, r3, #15
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	601a      	str	r2, [r3, #0]
}
 800e2ba:	bf00      	nop
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	40023800 	.word	0x40023800
 800e2cc:	40023c00 	.word	0x40023c00

0800e2d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f003 0301 	and.w	r3, r3, #1
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d10b      	bne.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d105      	bne.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800e300:	2b00      	cmp	r3, #0
 800e302:	d075      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e304:	4bad      	ldr	r3, [pc, #692]	; (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800e306:	2200      	movs	r2, #0
 800e308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e30a:	f7fc ff3d 	bl	800b188 <HAL_GetTick>
 800e30e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e310:	e008      	b.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e312:	f7fc ff39 	bl	800b188 <HAL_GetTick>
 800e316:	4602      	mov	r2, r0
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d901      	bls.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e320:	2303      	movs	r3, #3
 800e322:	e18b      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e324:	4ba6      	ldr	r3, [pc, #664]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1f0      	bne.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d009      	beq.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	019a      	lsls	r2, r3, #6
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	071b      	lsls	r3, r3, #28
 800e348:	499d      	ldr	r1, [pc, #628]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e34a:	4313      	orrs	r3, r2
 800e34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d01f      	beq.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e35c:	4b98      	ldr	r3, [pc, #608]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e362:	0f1b      	lsrs	r3, r3, #28
 800e364:	f003 0307 	and.w	r3, r3, #7
 800e368:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	019a      	lsls	r2, r3, #6
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	061b      	lsls	r3, r3, #24
 800e376:	431a      	orrs	r2, r3
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	071b      	lsls	r3, r3, #28
 800e37c:	4990      	ldr	r1, [pc, #576]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e37e:	4313      	orrs	r3, r2
 800e380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e384:	4b8e      	ldr	r3, [pc, #568]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e38a:	f023 021f 	bic.w	r2, r3, #31
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	69db      	ldr	r3, [r3, #28]
 800e392:	3b01      	subs	r3, #1
 800e394:	498a      	ldr	r1, [pc, #552]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e396:	4313      	orrs	r3, r2
 800e398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00d      	beq.n	800e3c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	019a      	lsls	r2, r3, #6
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	061b      	lsls	r3, r3, #24
 800e3b4:	431a      	orrs	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	071b      	lsls	r3, r3, #28
 800e3bc:	4980      	ldr	r1, [pc, #512]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e3c4:	4b7d      	ldr	r3, [pc, #500]	; (800e5bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e3ca:	f7fc fedd 	bl	800b188 <HAL_GetTick>
 800e3ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e3d0:	e008      	b.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800e3d2:	f7fc fed9 	bl	800b188 <HAL_GetTick>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d901      	bls.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	e12b      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e3e4:	4b76      	ldr	r3, [pc, #472]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d0f0      	beq.n	800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0304 	and.w	r3, r3, #4
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d105      	bne.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800e404:	2b00      	cmp	r3, #0
 800e406:	d079      	beq.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e408:	4b6e      	ldr	r3, [pc, #440]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e40e:	f7fc febb 	bl	800b188 <HAL_GetTick>
 800e412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e414:	e008      	b.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e416:	f7fc feb7 	bl	800b188 <HAL_GetTick>
 800e41a:	4602      	mov	r2, r0
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	2b02      	cmp	r3, #2
 800e422:	d901      	bls.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e424:	2303      	movs	r3, #3
 800e426:	e109      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e428:	4b65      	ldr	r3, [pc, #404]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e434:	d0ef      	beq.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f003 0304 	and.w	r3, r3, #4
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d020      	beq.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e442:	4b5f      	ldr	r3, [pc, #380]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e448:	0f1b      	lsrs	r3, r3, #28
 800e44a:	f003 0307 	and.w	r3, r3, #7
 800e44e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	019a      	lsls	r2, r3, #6
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	061b      	lsls	r3, r3, #24
 800e45c:	431a      	orrs	r2, r3
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	071b      	lsls	r3, r3, #28
 800e462:	4957      	ldr	r1, [pc, #348]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e464:	4313      	orrs	r3, r2
 800e466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e46a:	4b55      	ldr	r3, [pc, #340]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e470:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a1b      	ldr	r3, [r3, #32]
 800e478:	3b01      	subs	r3, #1
 800e47a:	021b      	lsls	r3, r3, #8
 800e47c:	4950      	ldr	r1, [pc, #320]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e47e:	4313      	orrs	r3, r2
 800e480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f003 0308 	and.w	r3, r3, #8
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d01e      	beq.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e490:	4b4b      	ldr	r3, [pc, #300]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e496:	0e1b      	lsrs	r3, r3, #24
 800e498:	f003 030f 	and.w	r3, r3, #15
 800e49c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	019a      	lsls	r2, r3, #6
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	061b      	lsls	r3, r3, #24
 800e4a8:	431a      	orrs	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	071b      	lsls	r3, r3, #28
 800e4b0:	4943      	ldr	r1, [pc, #268]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e4b8:	4b41      	ldr	r3, [pc, #260]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c6:	493e      	ldr	r1, [pc, #248]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e4ce:	4b3d      	ldr	r3, [pc, #244]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e4d4:	f7fc fe58 	bl	800b188 <HAL_GetTick>
 800e4d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e4da:	e008      	b.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e4dc:	f7fc fe54 	bl	800b188 <HAL_GetTick>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d901      	bls.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e0a6      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e4ee:	4b34      	ldr	r3, [pc, #208]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4fa:	d1ef      	bne.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0320 	and.w	r3, r3, #32
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 808d 	beq.w	800e624 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e50a:	2300      	movs	r3, #0
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	4b2c      	ldr	r3, [pc, #176]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e512:	4a2b      	ldr	r2, [pc, #172]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e518:	6413      	str	r3, [r2, #64]	; 0x40
 800e51a:	4b29      	ldr	r3, [pc, #164]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e51e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e522:	60fb      	str	r3, [r7, #12]
 800e524:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e526:	4b28      	ldr	r3, [pc, #160]	; (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a27      	ldr	r2, [pc, #156]	; (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800e52c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e530:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e532:	f7fc fe29 	bl	800b188 <HAL_GetTick>
 800e536:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e538:	e008      	b.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e53a:	f7fc fe25 	bl	800b188 <HAL_GetTick>
 800e53e:	4602      	mov	r2, r0
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	1ad3      	subs	r3, r2, r3
 800e544:	2b02      	cmp	r3, #2
 800e546:	d901      	bls.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800e548:	2303      	movs	r3, #3
 800e54a:	e077      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e54c:	4b1e      	ldr	r3, [pc, #120]	; (800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e554:	2b00      	cmp	r3, #0
 800e556:	d0f0      	beq.n	800e53a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e558:	4b19      	ldr	r3, [pc, #100]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e55a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e55c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e560:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d039      	beq.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e56c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e570:	693a      	ldr	r2, [r7, #16]
 800e572:	429a      	cmp	r2, r3
 800e574:	d032      	beq.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e576:	4b12      	ldr	r3, [pc, #72]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e57e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e580:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800e582:	2201      	movs	r2, #1
 800e584:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e586:	4b11      	ldr	r3, [pc, #68]	; (800e5cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e58c:	4a0c      	ldr	r2, [pc, #48]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e592:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800e594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e596:	f003 0301 	and.w	r3, r3, #1
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d11e      	bne.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e59e:	f7fc fdf3 	bl	800b188 <HAL_GetTick>
 800e5a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e5a4:	e014      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5a6:	f7fc fdef 	bl	800b188 <HAL_GetTick>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d90b      	bls.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800e5b8:	2303      	movs	r3, #3
 800e5ba:	e03f      	b.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800e5bc:	42470068 	.word	0x42470068
 800e5c0:	40023800 	.word	0x40023800
 800e5c4:	42470070 	.word	0x42470070
 800e5c8:	40007000 	.word	0x40007000
 800e5cc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e5d0:	4b1c      	ldr	r3, [pc, #112]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5d4:	f003 0302 	and.w	r3, r3, #2
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d0e4      	beq.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5e8:	d10d      	bne.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800e5ea:	4b16      	ldr	r3, [pc, #88]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e5fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5fe:	4911      	ldr	r1, [pc, #68]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e600:	4313      	orrs	r3, r2
 800e602:	608b      	str	r3, [r1, #8]
 800e604:	e005      	b.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800e606:	4b0f      	ldr	r3, [pc, #60]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	4a0e      	ldr	r2, [pc, #56]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e60c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e610:	6093      	str	r3, [r2, #8]
 800e612:	4b0c      	ldr	r3, [pc, #48]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e61e:	4909      	ldr	r1, [pc, #36]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800e620:	4313      	orrs	r3, r2
 800e622:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f003 0310 	and.w	r3, r3, #16
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d004      	beq.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800e636:	4b04      	ldr	r3, [pc, #16]	; (800e648 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800e638:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	40023800 	.word	0x40023800
 800e648:	424711e0 	.word	0x424711e0

0800e64c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d101      	bne.n	800e660 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e65c:	2301      	movs	r3, #1
 800e65e:	e025      	b.n	800e6ac <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e666:	b2db      	uxtb	r3, r3
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d106      	bne.n	800e67a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7f8 ff51 	bl	800751c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2202      	movs	r2, #2
 800e67e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	3304      	adds	r3, #4
 800e68a:	4619      	mov	r1, r3
 800e68c:	4610      	mov	r0, r2
 800e68e:	f001 fe93 	bl	80103b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6818      	ldr	r0, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	461a      	mov	r2, r3
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	f001 fefe 	bl	801049e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d101      	bne.n	800e6d0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	e018      	b.n	800e702 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	68b9      	ldr	r1, [r7, #8]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f001 ff5b 	bl	801059c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d104      	bne.n	800e6f8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2205      	movs	r2, #5
 800e6f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e6f6:	e003      	b.n	800e700 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b082      	sub	sp, #8
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d101      	bne.n	800e724 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e720:	2302      	movs	r3, #2
 800e722:	e00e      	b.n	800e742 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2202      	movs	r2, #2
 800e728:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6839      	ldr	r1, [r7, #0]
 800e732:	4618      	mov	r0, r3
 800e734:	f001 ff6e 	bl	8010614 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b082      	sub	sp, #8
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d101      	bne.n	800e75c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e758:	2301      	movs	r3, #1
 800e75a:	e056      	b.n	800e80a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d106      	bne.n	800e77c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7fa f82a 	bl	80087d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2202      	movs	r2, #2
 800e780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	431a      	orrs	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	431a      	orrs	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	431a      	orrs	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a1b      	ldr	r3, [r3, #32]
 800e7c4:	ea42 0103 	orr.w	r1, r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	430a      	orrs	r2, r1
 800e7d2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	0c1b      	lsrs	r3, r3, #16
 800e7da:	f003 0104 	and.w	r1, r3, #4
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	430a      	orrs	r2, r1
 800e7e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	69da      	ldr	r2, [r3, #28]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e7f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3708      	adds	r7, #8
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b082      	sub	sp, #8
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e820:	2301      	movs	r3, #1
 800e822:	e01a      	b.n	800e85a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2202      	movs	r2, #2
 800e828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e83a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7fa f80f 	bl	8008860 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b088      	sub	sp, #32
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	603b      	str	r3, [r7, #0]
 800e86e:	4613      	mov	r3, r2
 800e870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e872:	2300      	movs	r3, #0
 800e874:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d101      	bne.n	800e884 <HAL_SPI_Transmit+0x22>
 800e880:	2302      	movs	r3, #2
 800e882:	e11e      	b.n	800eac2 <HAL_SPI_Transmit+0x260>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2201      	movs	r2, #1
 800e888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e88c:	f7fc fc7c 	bl	800b188 <HAL_GetTick>
 800e890:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e892:	88fb      	ldrh	r3, [r7, #6]
 800e894:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d002      	beq.n	800e8a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e8a6:	e103      	b.n	800eab0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <HAL_SPI_Transmit+0x52>
 800e8ae:	88fb      	ldrh	r3, [r7, #6]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d102      	bne.n	800e8ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e8b8:	e0fa      	b.n	800eab0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2203      	movs	r2, #3
 800e8be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	88fa      	ldrh	r2, [r7, #6]
 800e8d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	88fa      	ldrh	r2, [r7, #6]
 800e8d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e900:	d107      	bne.n	800e912 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e91c:	2b40      	cmp	r3, #64	; 0x40
 800e91e:	d007      	beq.n	800e930 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e92e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e938:	d14b      	bne.n	800e9d2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <HAL_SPI_Transmit+0xe6>
 800e942:	8afb      	ldrh	r3, [r7, #22]
 800e944:	2b01      	cmp	r3, #1
 800e946:	d13e      	bne.n	800e9c6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e94c:	881a      	ldrh	r2, [r3, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e958:	1c9a      	adds	r2, r3, #2
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e962:	b29b      	uxth	r3, r3
 800e964:	3b01      	subs	r3, #1
 800e966:	b29a      	uxth	r2, r3
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e96c:	e02b      	b.n	800e9c6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	f003 0302 	and.w	r3, r3, #2
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d112      	bne.n	800e9a2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e980:	881a      	ldrh	r2, [r3, #0]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98c:	1c9a      	adds	r2, r3, #2
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e996:	b29b      	uxth	r3, r3
 800e998:	3b01      	subs	r3, #1
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	86da      	strh	r2, [r3, #54]	; 0x36
 800e9a0:	e011      	b.n	800e9c6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9a2:	f7fc fbf1 	bl	800b188 <HAL_GetTick>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d803      	bhi.n	800e9ba <HAL_SPI_Transmit+0x158>
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b8:	d102      	bne.n	800e9c0 <HAL_SPI_Transmit+0x15e>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e9c4:	e074      	b.n	800eab0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1ce      	bne.n	800e96e <HAL_SPI_Transmit+0x10c>
 800e9d0:	e04c      	b.n	800ea6c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d002      	beq.n	800e9e0 <HAL_SPI_Transmit+0x17e>
 800e9da:	8afb      	ldrh	r3, [r7, #22]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d140      	bne.n	800ea62 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	330c      	adds	r3, #12
 800e9ea:	7812      	ldrb	r2, [r2, #0]
 800e9ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	3b01      	subs	r3, #1
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ea06:	e02c      	b.n	800ea62 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f003 0302 	and.w	r3, r3, #2
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d113      	bne.n	800ea3e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	330c      	adds	r3, #12
 800ea20:	7812      	ldrb	r2, [r2, #0]
 800ea22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea28:	1c5a      	adds	r2, r3, #1
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	3b01      	subs	r3, #1
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	86da      	strh	r2, [r3, #54]	; 0x36
 800ea3c:	e011      	b.n	800ea62 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea3e:	f7fc fba3 	bl	800b188 <HAL_GetTick>
 800ea42:	4602      	mov	r2, r0
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	1ad3      	subs	r3, r2, r3
 800ea48:	683a      	ldr	r2, [r7, #0]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d803      	bhi.n	800ea56 <HAL_SPI_Transmit+0x1f4>
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea54:	d102      	bne.n	800ea5c <HAL_SPI_Transmit+0x1fa>
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ea5c:	2303      	movs	r3, #3
 800ea5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ea60:	e026      	b.n	800eab0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1cd      	bne.n	800ea08 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea6c:	69ba      	ldr	r2, [r7, #24]
 800ea6e:	6839      	ldr	r1, [r7, #0]
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f000 fbb3 	bl	800f1dc <SPI_EndRxTxTransaction>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d002      	beq.n	800ea82 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2220      	movs	r2, #32
 800ea80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10a      	bne.n	800eaa0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	613b      	str	r3, [r7, #16]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	613b      	str	r3, [r7, #16]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	613b      	str	r3, [r7, #16]
 800ea9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	77fb      	strb	r3, [r7, #31]
 800eaac:	e000      	b.n	800eab0 <HAL_SPI_Transmit+0x24e>
  }

error:
 800eaae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eac0:	7ffb      	ldrb	r3, [r7, #31]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3720      	adds	r7, #32
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b088      	sub	sp, #32
 800eace:	af02      	add	r7, sp, #8
 800ead0:	60f8      	str	r0, [r7, #12]
 800ead2:	60b9      	str	r1, [r7, #8]
 800ead4:	603b      	str	r3, [r7, #0]
 800ead6:	4613      	mov	r3, r2
 800ead8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eae6:	d112      	bne.n	800eb0e <HAL_SPI_Receive+0x44>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10e      	bne.n	800eb0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800eaf8:	88fa      	ldrh	r2, [r7, #6]
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	4613      	mov	r3, r2
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	68b9      	ldr	r1, [r7, #8]
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f000 f8e9 	bl	800ecdc <HAL_SPI_TransmitReceive>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	e0e2      	b.n	800ecd4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d101      	bne.n	800eb1c <HAL_SPI_Receive+0x52>
 800eb18:	2302      	movs	r3, #2
 800eb1a:	e0db      	b.n	800ecd4 <HAL_SPI_Receive+0x20a>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb24:	f7fc fb30 	bl	800b188 <HAL_GetTick>
 800eb28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d002      	beq.n	800eb3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800eb36:	2302      	movs	r3, #2
 800eb38:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb3a:	e0c2      	b.n	800ecc2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d002      	beq.n	800eb48 <HAL_SPI_Receive+0x7e>
 800eb42:	88fb      	ldrh	r3, [r7, #6]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d102      	bne.n	800eb4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800eb4c:	e0b9      	b.n	800ecc2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2204      	movs	r2, #4
 800eb52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	88fa      	ldrh	r2, [r7, #6]
 800eb66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	88fa      	ldrh	r2, [r7, #6]
 800eb6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb94:	d107      	bne.n	800eba6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eba4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb0:	2b40      	cmp	r3, #64	; 0x40
 800ebb2:	d007      	beq.n	800ebc4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ebc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d162      	bne.n	800ec92 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ebcc:	e02e      	b.n	800ec2c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d115      	bne.n	800ec08 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f103 020c 	add.w	r2, r3, #12
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe8:	7812      	ldrb	r2, [r2, #0]
 800ebea:	b2d2      	uxtb	r2, r2
 800ebec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	3b01      	subs	r3, #1
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec06:	e011      	b.n	800ec2c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec08:	f7fc fabe 	bl	800b188 <HAL_GetTick>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	683a      	ldr	r2, [r7, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d803      	bhi.n	800ec20 <HAL_SPI_Receive+0x156>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d102      	bne.n	800ec26 <HAL_SPI_Receive+0x15c>
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d102      	bne.n	800ec2c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ec2a:	e04a      	b.n	800ecc2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1cb      	bne.n	800ebce <HAL_SPI_Receive+0x104>
 800ec36:	e031      	b.n	800ec9c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	f003 0301 	and.w	r3, r3, #1
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d113      	bne.n	800ec6e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68da      	ldr	r2, [r3, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec50:	b292      	uxth	r2, r2
 800ec52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec58:	1c9a      	adds	r2, r3, #2
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	3b01      	subs	r3, #1
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ec6c:	e011      	b.n	800ec92 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec6e:	f7fc fa8b 	bl	800b188 <HAL_GetTick>
 800ec72:	4602      	mov	r2, r0
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	1ad3      	subs	r3, r2, r3
 800ec78:	683a      	ldr	r2, [r7, #0]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d803      	bhi.n	800ec86 <HAL_SPI_Receive+0x1bc>
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec84:	d102      	bne.n	800ec8c <HAL_SPI_Receive+0x1c2>
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d102      	bne.n	800ec92 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ec8c:	2303      	movs	r3, #3
 800ec8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ec90:	e017      	b.n	800ecc2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1cd      	bne.n	800ec38 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f000 fa35 	bl	800f110 <SPI_EndRxTransaction>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2220      	movs	r2, #32
 800ecb0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	75fb      	strb	r3, [r7, #23]
 800ecbe:	e000      	b.n	800ecc2 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ecc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ecd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3718      	adds	r7, #24
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08c      	sub	sp, #48	; 0x30
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ecea:	2301      	movs	r3, #1
 800ecec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d101      	bne.n	800ed02 <HAL_SPI_TransmitReceive+0x26>
 800ecfe:	2302      	movs	r3, #2
 800ed00:	e18a      	b.n	800f018 <HAL_SPI_TransmitReceive+0x33c>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed0a:	f7fc fa3d 	bl	800b188 <HAL_GetTick>
 800ed0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ed20:	887b      	ldrh	r3, [r7, #2]
 800ed22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ed24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d00f      	beq.n	800ed4c <HAL_SPI_TransmitReceive+0x70>
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed32:	d107      	bne.n	800ed44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d103      	bne.n	800ed44 <HAL_SPI_TransmitReceive+0x68>
 800ed3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed40:	2b04      	cmp	r3, #4
 800ed42:	d003      	beq.n	800ed4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ed44:	2302      	movs	r3, #2
 800ed46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ed4a:	e15b      	b.n	800f004 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d005      	beq.n	800ed5e <HAL_SPI_TransmitReceive+0x82>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <HAL_SPI_TransmitReceive+0x82>
 800ed58:	887b      	ldrh	r3, [r7, #2]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d103      	bne.n	800ed66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ed64:	e14e      	b.n	800f004 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b04      	cmp	r3, #4
 800ed70:	d003      	beq.n	800ed7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2205      	movs	r2, #5
 800ed76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	887a      	ldrh	r2, [r7, #2]
 800ed8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	887a      	ldrh	r2, [r7, #2]
 800ed90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	887a      	ldrh	r2, [r7, #2]
 800ed9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	887a      	ldrh	r2, [r7, #2]
 800eda2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2200      	movs	r2, #0
 800eda8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edba:	2b40      	cmp	r3, #64	; 0x40
 800edbc:	d007      	beq.n	800edce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edd6:	d178      	bne.n	800eeca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <HAL_SPI_TransmitReceive+0x10a>
 800ede0:	8b7b      	ldrh	r3, [r7, #26]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d166      	bne.n	800eeb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edea:	881a      	ldrh	r2, [r3, #0]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf6:	1c9a      	adds	r2, r3, #2
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	3b01      	subs	r3, #1
 800ee04:	b29a      	uxth	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee0a:	e053      	b.n	800eeb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	f003 0302 	and.w	r3, r3, #2
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d11b      	bne.n	800ee52 <HAL_SPI_TransmitReceive+0x176>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d016      	beq.n	800ee52 <HAL_SPI_TransmitReceive+0x176>
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d113      	bne.n	800ee52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2e:	881a      	ldrh	r2, [r3, #0]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3a:	1c9a      	adds	r2, r3, #2
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	3b01      	subs	r3, #1
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f003 0301 	and.w	r3, r3, #1
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d119      	bne.n	800ee94 <HAL_SPI_TransmitReceive+0x1b8>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d014      	beq.n	800ee94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68da      	ldr	r2, [r3, #12]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee74:	b292      	uxth	r2, r2
 800ee76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee7c:	1c9a      	adds	r2, r3, #2
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ee90:	2301      	movs	r3, #1
 800ee92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ee94:	f7fc f978 	bl	800b188 <HAL_GetTick>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d807      	bhi.n	800eeb4 <HAL_SPI_TransmitReceive+0x1d8>
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeaa:	d003      	beq.n	800eeb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eeac:	2303      	movs	r3, #3
 800eeae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eeb2:	e0a7      	b.n	800f004 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1a6      	bne.n	800ee0c <HAL_SPI_TransmitReceive+0x130>
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1a1      	bne.n	800ee0c <HAL_SPI_TransmitReceive+0x130>
 800eec8:	e07c      	b.n	800efc4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <HAL_SPI_TransmitReceive+0x1fc>
 800eed2:	8b7b      	ldrh	r3, [r7, #26]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d16b      	bne.n	800efb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	330c      	adds	r3, #12
 800eee2:	7812      	ldrb	r2, [r2, #0]
 800eee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeea:	1c5a      	adds	r2, r3, #1
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	3b01      	subs	r3, #1
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eefe:	e057      	b.n	800efb0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	f003 0302 	and.w	r3, r3, #2
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d11c      	bne.n	800ef48 <HAL_SPI_TransmitReceive+0x26c>
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d017      	beq.n	800ef48 <HAL_SPI_TransmitReceive+0x26c>
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d114      	bne.n	800ef48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	330c      	adds	r3, #12
 800ef28:	7812      	ldrb	r2, [r2, #0]
 800ef2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ef44:	2300      	movs	r3, #0
 800ef46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d119      	bne.n	800ef8a <HAL_SPI_TransmitReceive+0x2ae>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d014      	beq.n	800ef8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68da      	ldr	r2, [r3, #12]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6a:	b2d2      	uxtb	r2, r2
 800ef6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef72:	1c5a      	adds	r2, r3, #1
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ef86:	2301      	movs	r3, #1
 800ef88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ef8a:	f7fc f8fd 	bl	800b188 <HAL_GetTick>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d803      	bhi.n	800efa2 <HAL_SPI_TransmitReceive+0x2c6>
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa0:	d102      	bne.n	800efa8 <HAL_SPI_TransmitReceive+0x2cc>
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d103      	bne.n	800efb0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800efa8:	2303      	movs	r3, #3
 800efaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800efae:	e029      	b.n	800f004 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1a2      	bne.n	800ef00 <HAL_SPI_TransmitReceive+0x224>
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d19d      	bne.n	800ef00 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800efc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f000 f907 	bl	800f1dc <SPI_EndRxTxTransaction>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d006      	beq.n	800efe2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800efd4:	2301      	movs	r3, #1
 800efd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2220      	movs	r2, #32
 800efde:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800efe0:	e010      	b.n	800f004 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d10b      	bne.n	800f002 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efea:	2300      	movs	r3, #0
 800efec:	617b      	str	r3, [r7, #20]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	617b      	str	r3, [r7, #20]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	617b      	str	r3, [r7, #20]
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	e000      	b.n	800f004 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2200      	movs	r2, #0
 800f010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f014:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3730      	adds	r7, #48	; 0x30
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f02e:	b2db      	uxtb	r3, r3
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	4613      	mov	r3, r2
 800f04a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f04c:	e04c      	b.n	800f0e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f054:	d048      	beq.n	800f0e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f056:	f7fc f897 	bl	800b188 <HAL_GetTick>
 800f05a:	4602      	mov	r2, r0
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	1ad3      	subs	r3, r2, r3
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	d902      	bls.n	800f06c <SPI_WaitFlagStateUntilTimeout+0x30>
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d13d      	bne.n	800f0e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f07a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f084:	d111      	bne.n	800f0aa <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f08e:	d004      	beq.n	800f09a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	689b      	ldr	r3, [r3, #8]
 800f094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f098:	d107      	bne.n	800f0aa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0b2:	d10f      	bne.n	800f0d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f0d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e00f      	b.n	800f108 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	689a      	ldr	r2, [r3, #8]
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	4013      	ands	r3, r2
 800f0f2:	68ba      	ldr	r2, [r7, #8]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	bf0c      	ite	eq
 800f0f8:	2301      	moveq	r3, #1
 800f0fa:	2300      	movne	r3, #0
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	461a      	mov	r2, r3
 800f100:	79fb      	ldrb	r3, [r7, #7]
 800f102:	429a      	cmp	r2, r3
 800f104:	d1a3      	bne.n	800f04e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af02      	add	r7, sp, #8
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f124:	d111      	bne.n	800f14a <SPI_EndRxTransaction+0x3a>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	689b      	ldr	r3, [r3, #8]
 800f12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f12e:	d004      	beq.n	800f13a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f138:	d107      	bne.n	800f14a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f148:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f152:	d12a      	bne.n	800f1aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f15c:	d012      	beq.n	800f184 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2200      	movs	r2, #0
 800f166:	2180      	movs	r1, #128	; 0x80
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7ff ff67 	bl	800f03c <SPI_WaitFlagStateUntilTimeout>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d02d      	beq.n	800f1d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f178:	f043 0220 	orr.w	r2, r3, #32
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f180:	2303      	movs	r3, #3
 800f182:	e026      	b.n	800f1d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2200      	movs	r2, #0
 800f18c:	2101      	movs	r1, #1
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f7ff ff54 	bl	800f03c <SPI_WaitFlagStateUntilTimeout>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d01a      	beq.n	800f1d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f19e:	f043 0220 	orr.w	r2, r3, #32
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f1a6:	2303      	movs	r3, #3
 800f1a8:	e013      	b.n	800f1d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	2101      	movs	r1, #1
 800f1b4:	68f8      	ldr	r0, [r7, #12]
 800f1b6:	f7ff ff41 	bl	800f03c <SPI_WaitFlagStateUntilTimeout>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d007      	beq.n	800f1d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1c4:	f043 0220 	orr.w	r2, r3, #32
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f1cc:	2303      	movs	r3, #3
 800f1ce:	e000      	b.n	800f1d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3710      	adds	r7, #16
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
	...

0800f1dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f1e8:	4b1b      	ldr	r3, [pc, #108]	; (800f258 <SPI_EndRxTxTransaction+0x7c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a1b      	ldr	r2, [pc, #108]	; (800f25c <SPI_EndRxTxTransaction+0x80>)
 800f1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f1f2:	0d5b      	lsrs	r3, r3, #21
 800f1f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1f8:	fb02 f303 	mul.w	r3, r2, r3
 800f1fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f206:	d112      	bne.n	800f22e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2200      	movs	r2, #0
 800f210:	2180      	movs	r1, #128	; 0x80
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f7ff ff12 	bl	800f03c <SPI_WaitFlagStateUntilTimeout>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f222:	f043 0220 	orr.w	r2, r3, #32
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f22a:	2303      	movs	r3, #3
 800f22c:	e00f      	b.n	800f24e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00a      	beq.n	800f24a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	3b01      	subs	r3, #1
 800f238:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f244:	2b80      	cmp	r3, #128	; 0x80
 800f246:	d0f2      	beq.n	800f22e <SPI_EndRxTxTransaction+0x52>
 800f248:	e000      	b.n	800f24c <SPI_EndRxTxTransaction+0x70>
        break;
 800f24a:	bf00      	nop
  }

  return HAL_OK;
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3718      	adds	r7, #24
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
 800f256:	bf00      	nop
 800f258:	200008bc 	.word	0x200008bc
 800f25c:	165e9f81 	.word	0x165e9f81

0800f260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d101      	bne.n	800f272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f26e:	2301      	movs	r3, #1
 800f270:	e01d      	b.n	800f2ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7f9 fc8a 	bl	8008ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2202      	movs	r2, #2
 800f290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	3304      	adds	r3, #4
 800f29c:	4619      	mov	r1, r3
 800f29e:	4610      	mov	r0, r2
 800f2a0:	f000 fa14 	bl	800f6cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f2b6:	b480      	push	{r7}
 800f2b8:	b085      	sub	sp, #20
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	68da      	ldr	r2, [r3, #12]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f042 0201 	orr.w	r2, r2, #1
 800f2cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	f003 0307 	and.w	r3, r3, #7
 800f2d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2b06      	cmp	r3, #6
 800f2de:	d007      	beq.n	800f2f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f042 0201 	orr.w	r2, r2, #1
 800f2ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	f003 0302 	and.w	r3, r3, #2
 800f310:	2b02      	cmp	r3, #2
 800f312:	d122      	bne.n	800f35a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	f003 0302 	and.w	r3, r3, #2
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d11b      	bne.n	800f35a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f06f 0202 	mvn.w	r2, #2
 800f32a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	699b      	ldr	r3, [r3, #24]
 800f338:	f003 0303 	and.w	r3, r3, #3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d003      	beq.n	800f348 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 f9a5 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f346:	e005      	b.n	800f354 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 f997 	bl	800f67c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f9a8 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	691b      	ldr	r3, [r3, #16]
 800f360:	f003 0304 	and.w	r3, r3, #4
 800f364:	2b04      	cmp	r3, #4
 800f366:	d122      	bne.n	800f3ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f003 0304 	and.w	r3, r3, #4
 800f372:	2b04      	cmp	r3, #4
 800f374:	d11b      	bne.n	800f3ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f06f 0204 	mvn.w	r2, #4
 800f37e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2202      	movs	r2, #2
 800f384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	699b      	ldr	r3, [r3, #24]
 800f38c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f390:	2b00      	cmp	r3, #0
 800f392:	d003      	beq.n	800f39c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 f97b 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f39a:	e005      	b.n	800f3a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 f96d 	bl	800f67c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f97e 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	f003 0308 	and.w	r3, r3, #8
 800f3b8:	2b08      	cmp	r3, #8
 800f3ba:	d122      	bne.n	800f402 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	f003 0308 	and.w	r3, r3, #8
 800f3c6:	2b08      	cmp	r3, #8
 800f3c8:	d11b      	bne.n	800f402 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f06f 0208 	mvn.w	r2, #8
 800f3d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2204      	movs	r2, #4
 800f3d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	f003 0303 	and.w	r3, r3, #3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d003      	beq.n	800f3f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f951 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f3ee:	e005      	b.n	800f3fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 f943 	bl	800f67c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f954 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	f003 0310 	and.w	r3, r3, #16
 800f40c:	2b10      	cmp	r3, #16
 800f40e:	d122      	bne.n	800f456 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	f003 0310 	and.w	r3, r3, #16
 800f41a:	2b10      	cmp	r3, #16
 800f41c:	d11b      	bne.n	800f456 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f06f 0210 	mvn.w	r2, #16
 800f426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2208      	movs	r2, #8
 800f42c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f927 	bl	800f690 <HAL_TIM_IC_CaptureCallback>
 800f442:	e005      	b.n	800f450 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f919 	bl	800f67c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f92a 	bl	800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	691b      	ldr	r3, [r3, #16]
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	2b01      	cmp	r3, #1
 800f462:	d10e      	bne.n	800f482 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	f003 0301 	and.w	r3, r3, #1
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d107      	bne.n	800f482 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f06f 0201 	mvn.w	r2, #1
 800f47a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7f8 ffbf 	bl	8008400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f48c:	2b80      	cmp	r3, #128	; 0x80
 800f48e:	d10e      	bne.n	800f4ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f49a:	2b80      	cmp	r3, #128	; 0x80
 800f49c:	d107      	bne.n	800f4ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f4a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 facf 	bl	800fa4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4b8:	2b40      	cmp	r3, #64	; 0x40
 800f4ba:	d10e      	bne.n	800f4da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4c6:	2b40      	cmp	r3, #64	; 0x40
 800f4c8:	d107      	bne.n	800f4da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f8ef 	bl	800f6b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	f003 0320 	and.w	r3, r3, #32
 800f4e4:	2b20      	cmp	r3, #32
 800f4e6:	d10e      	bne.n	800f506 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	f003 0320 	and.w	r3, r3, #32
 800f4f2:	2b20      	cmp	r3, #32
 800f4f4:	d107      	bne.n	800f506 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f06f 0220 	mvn.w	r2, #32
 800f4fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 fa99 	bl	800fa38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f506:	bf00      	nop
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b084      	sub	sp, #16
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d101      	bne.n	800f526 <HAL_TIM_ConfigClockSource+0x18>
 800f522:	2302      	movs	r3, #2
 800f524:	e0a6      	b.n	800f674 <HAL_TIM_ConfigClockSource+0x166>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2201      	movs	r2, #1
 800f52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2202      	movs	r2, #2
 800f532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f544:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f54c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2b40      	cmp	r3, #64	; 0x40
 800f55c:	d067      	beq.n	800f62e <HAL_TIM_ConfigClockSource+0x120>
 800f55e:	2b40      	cmp	r3, #64	; 0x40
 800f560:	d80b      	bhi.n	800f57a <HAL_TIM_ConfigClockSource+0x6c>
 800f562:	2b10      	cmp	r3, #16
 800f564:	d073      	beq.n	800f64e <HAL_TIM_ConfigClockSource+0x140>
 800f566:	2b10      	cmp	r3, #16
 800f568:	d802      	bhi.n	800f570 <HAL_TIM_ConfigClockSource+0x62>
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d06f      	beq.n	800f64e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f56e:	e078      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f570:	2b20      	cmp	r3, #32
 800f572:	d06c      	beq.n	800f64e <HAL_TIM_ConfigClockSource+0x140>
 800f574:	2b30      	cmp	r3, #48	; 0x30
 800f576:	d06a      	beq.n	800f64e <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f578:	e073      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f57a:	2b70      	cmp	r3, #112	; 0x70
 800f57c:	d00d      	beq.n	800f59a <HAL_TIM_ConfigClockSource+0x8c>
 800f57e:	2b70      	cmp	r3, #112	; 0x70
 800f580:	d804      	bhi.n	800f58c <HAL_TIM_ConfigClockSource+0x7e>
 800f582:	2b50      	cmp	r3, #80	; 0x50
 800f584:	d033      	beq.n	800f5ee <HAL_TIM_ConfigClockSource+0xe0>
 800f586:	2b60      	cmp	r3, #96	; 0x60
 800f588:	d041      	beq.n	800f60e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f58a:	e06a      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f58c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f590:	d066      	beq.n	800f660 <HAL_TIM_ConfigClockSource+0x152>
 800f592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f596:	d017      	beq.n	800f5c8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f598:	e063      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6818      	ldr	r0, [r3, #0]
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	6899      	ldr	r1, [r3, #8]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f000 f9a9 	bl	800f900 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	609a      	str	r2, [r3, #8]
      break;
 800f5c6:	e04c      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	6899      	ldr	r1, [r3, #8]
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	685a      	ldr	r2, [r3, #4]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	f000 f992 	bl	800f900 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	689a      	ldr	r2, [r3, #8]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5ea:	609a      	str	r2, [r3, #8]
      break;
 800f5ec:	e039      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6818      	ldr	r0, [r3, #0]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	6859      	ldr	r1, [r3, #4]
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	f000 f906 	bl	800f80c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2150      	movs	r1, #80	; 0x50
 800f606:	4618      	mov	r0, r3
 800f608:	f000 f95f 	bl	800f8ca <TIM_ITRx_SetConfig>
      break;
 800f60c:	e029      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6818      	ldr	r0, [r3, #0]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	6859      	ldr	r1, [r3, #4]
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	461a      	mov	r2, r3
 800f61c:	f000 f925 	bl	800f86a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2160      	movs	r1, #96	; 0x60
 800f626:	4618      	mov	r0, r3
 800f628:	f000 f94f 	bl	800f8ca <TIM_ITRx_SetConfig>
      break;
 800f62c:	e019      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6818      	ldr	r0, [r3, #0]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	6859      	ldr	r1, [r3, #4]
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	461a      	mov	r2, r3
 800f63c:	f000 f8e6 	bl	800f80c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2140      	movs	r1, #64	; 0x40
 800f646:	4618      	mov	r0, r3
 800f648:	f000 f93f 	bl	800f8ca <TIM_ITRx_SetConfig>
      break;
 800f64c:	e009      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4619      	mov	r1, r3
 800f658:	4610      	mov	r0, r2
 800f65a:	f000 f936 	bl	800f8ca <TIM_ITRx_SetConfig>
      break;
 800f65e:	e000      	b.n	800f662 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800f660:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f684:	bf00      	nop
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr

0800f690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f698:	bf00      	nop
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a40      	ldr	r2, [pc, #256]	; (800f7e0 <TIM_Base_SetConfig+0x114>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d013      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ea:	d00f      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a3d      	ldr	r2, [pc, #244]	; (800f7e4 <TIM_Base_SetConfig+0x118>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d00b      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a3c      	ldr	r2, [pc, #240]	; (800f7e8 <TIM_Base_SetConfig+0x11c>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d007      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a3b      	ldr	r2, [pc, #236]	; (800f7ec <TIM_Base_SetConfig+0x120>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d003      	beq.n	800f70c <TIM_Base_SetConfig+0x40>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a3a      	ldr	r2, [pc, #232]	; (800f7f0 <TIM_Base_SetConfig+0x124>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d108      	bne.n	800f71e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	4313      	orrs	r3, r2
 800f71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4a2f      	ldr	r2, [pc, #188]	; (800f7e0 <TIM_Base_SetConfig+0x114>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d02b      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f72c:	d027      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a2c      	ldr	r2, [pc, #176]	; (800f7e4 <TIM_Base_SetConfig+0x118>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d023      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a2b      	ldr	r2, [pc, #172]	; (800f7e8 <TIM_Base_SetConfig+0x11c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d01f      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a2a      	ldr	r2, [pc, #168]	; (800f7ec <TIM_Base_SetConfig+0x120>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d01b      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a29      	ldr	r2, [pc, #164]	; (800f7f0 <TIM_Base_SetConfig+0x124>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d017      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a28      	ldr	r2, [pc, #160]	; (800f7f4 <TIM_Base_SetConfig+0x128>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d013      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a27      	ldr	r2, [pc, #156]	; (800f7f8 <TIM_Base_SetConfig+0x12c>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d00f      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4a26      	ldr	r2, [pc, #152]	; (800f7fc <TIM_Base_SetConfig+0x130>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d00b      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4a25      	ldr	r2, [pc, #148]	; (800f800 <TIM_Base_SetConfig+0x134>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d007      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a24      	ldr	r2, [pc, #144]	; (800f804 <TIM_Base_SetConfig+0x138>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d003      	beq.n	800f77e <TIM_Base_SetConfig+0xb2>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4a23      	ldr	r2, [pc, #140]	; (800f808 <TIM_Base_SetConfig+0x13c>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d108      	bne.n	800f790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	695b      	ldr	r3, [r3, #20]
 800f79a:	4313      	orrs	r3, r2
 800f79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	689a      	ldr	r2, [r3, #8]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a0a      	ldr	r2, [pc, #40]	; (800f7e0 <TIM_Base_SetConfig+0x114>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d003      	beq.n	800f7c4 <TIM_Base_SetConfig+0xf8>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a0c      	ldr	r2, [pc, #48]	; (800f7f0 <TIM_Base_SetConfig+0x124>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d103      	bne.n	800f7cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	691a      	ldr	r2, [r3, #16]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	615a      	str	r2, [r3, #20]
}
 800f7d2:	bf00      	nop
 800f7d4:	3714      	adds	r7, #20
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	40010000 	.word	0x40010000
 800f7e4:	40000400 	.word	0x40000400
 800f7e8:	40000800 	.word	0x40000800
 800f7ec:	40000c00 	.word	0x40000c00
 800f7f0:	40010400 	.word	0x40010400
 800f7f4:	40014000 	.word	0x40014000
 800f7f8:	40014400 	.word	0x40014400
 800f7fc:	40014800 	.word	0x40014800
 800f800:	40001800 	.word	0x40001800
 800f804:	40001c00 	.word	0x40001c00
 800f808:	40002000 	.word	0x40002000

0800f80c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b087      	sub	sp, #28
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6a1b      	ldr	r3, [r3, #32]
 800f81c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	f023 0201 	bic.w	r2, r3, #1
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	699b      	ldr	r3, [r3, #24]
 800f82e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	011b      	lsls	r3, r3, #4
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	4313      	orrs	r3, r2
 800f840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f023 030a 	bic.w	r3, r3, #10
 800f848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	4313      	orrs	r3, r2
 800f850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	693a      	ldr	r2, [r7, #16]
 800f856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	697a      	ldr	r2, [r7, #20]
 800f85c:	621a      	str	r2, [r3, #32]
}
 800f85e:	bf00      	nop
 800f860:	371c      	adds	r7, #28
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr

0800f86a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f86a:	b480      	push	{r7}
 800f86c:	b087      	sub	sp, #28
 800f86e:	af00      	add	r7, sp, #0
 800f870:	60f8      	str	r0, [r7, #12]
 800f872:	60b9      	str	r1, [r7, #8]
 800f874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6a1b      	ldr	r3, [r3, #32]
 800f87a:	f023 0210 	bic.w	r2, r3, #16
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	699b      	ldr	r3, [r3, #24]
 800f886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6a1b      	ldr	r3, [r3, #32]
 800f88c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	031b      	lsls	r3, r3, #12
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	4313      	orrs	r3, r2
 800f89e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f8a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	011b      	lsls	r3, r3, #4
 800f8ac:	693a      	ldr	r2, [r7, #16]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	697a      	ldr	r2, [r7, #20]
 800f8b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	693a      	ldr	r2, [r7, #16]
 800f8bc:	621a      	str	r2, [r3, #32]
}
 800f8be:	bf00      	nop
 800f8c0:	371c      	adds	r7, #28
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	b085      	sub	sp, #20
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	f043 0307 	orr.w	r3, r3, #7
 800f8ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	609a      	str	r2, [r3, #8]
}
 800f8f4:	bf00      	nop
 800f8f6:	3714      	adds	r7, #20
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f91a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	021a      	lsls	r2, r3, #8
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	431a      	orrs	r2, r3
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	4313      	orrs	r3, r2
 800f928:	697a      	ldr	r2, [r7, #20]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	609a      	str	r2, [r3, #8]
}
 800f934:	bf00      	nop
 800f936:	371c      	adds	r7, #28
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f950:	2b01      	cmp	r3, #1
 800f952:	d101      	bne.n	800f958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f954:	2302      	movs	r3, #2
 800f956:	e05a      	b.n	800fa0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2202      	movs	r2, #2
 800f964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f97e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	4313      	orrs	r3, r2
 800f988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a21      	ldr	r2, [pc, #132]	; (800fa1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d022      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9a4:	d01d      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a1d      	ldr	r2, [pc, #116]	; (800fa20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d018      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4a1b      	ldr	r2, [pc, #108]	; (800fa24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d013      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4a1a      	ldr	r2, [pc, #104]	; (800fa28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d00e      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4a18      	ldr	r2, [pc, #96]	; (800fa2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d009      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	4a17      	ldr	r2, [pc, #92]	; (800fa30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d004      	beq.n	800f9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a15      	ldr	r2, [pc, #84]	; (800fa34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d10c      	bne.n	800f9fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	68ba      	ldr	r2, [r7, #8]
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3714      	adds	r7, #20
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	40010000 	.word	0x40010000
 800fa20:	40000400 	.word	0x40000400
 800fa24:	40000800 	.word	0x40000800
 800fa28:	40000c00 	.word	0x40000c00
 800fa2c:	40010400 	.word	0x40010400
 800fa30:	40014000 	.word	0x40014000
 800fa34:	40001800 	.word	0x40001800

0800fa38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d101      	bne.n	800fa72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e03f      	b.n	800faf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7f9 f8d6 	bl	8008c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2224      	movs	r2, #36	; 0x24
 800fa90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68da      	ldr	r2, [r3, #12]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800faa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 f90b 	bl	800fcc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	691a      	ldr	r2, [r3, #16]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	695a      	ldr	r2, [r3, #20]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68da      	ldr	r2, [r3, #12]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2220      	movs	r2, #32
 800fae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2220      	movs	r2, #32
 800faec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b088      	sub	sp, #32
 800fafe:	af02      	add	r7, sp, #8
 800fb00:	60f8      	str	r0, [r7, #12]
 800fb02:	60b9      	str	r1, [r7, #8]
 800fb04:	603b      	str	r3, [r7, #0]
 800fb06:	4613      	mov	r3, r2
 800fb08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b20      	cmp	r3, #32
 800fb18:	f040 8083 	bne.w	800fc22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d002      	beq.n	800fb28 <HAL_UART_Transmit+0x2e>
 800fb22:	88fb      	ldrh	r3, [r7, #6]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d101      	bne.n	800fb2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e07b      	b.n	800fc24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d101      	bne.n	800fb3a <HAL_UART_Transmit+0x40>
 800fb36:	2302      	movs	r3, #2
 800fb38:	e074      	b.n	800fc24 <HAL_UART_Transmit+0x12a>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2200      	movs	r2, #0
 800fb46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2221      	movs	r2, #33	; 0x21
 800fb4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800fb50:	f7fb fb1a 	bl	800b188 <HAL_GetTick>
 800fb54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	88fa      	ldrh	r2, [r7, #6]
 800fb5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	88fa      	ldrh	r2, [r7, #6]
 800fb60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800fb6a:	e042      	b.n	800fbf2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	3b01      	subs	r3, #1
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb82:	d122      	bne.n	800fbca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	2180      	movs	r1, #128	; 0x80
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f000 f84c 	bl	800fc2c <UART_WaitOnFlagUntilTimeout>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	e042      	b.n	800fc24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	881b      	ldrh	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d103      	bne.n	800fbc2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	3302      	adds	r3, #2
 800fbbe:	60bb      	str	r3, [r7, #8]
 800fbc0:	e017      	b.n	800fbf2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	60bb      	str	r3, [r7, #8]
 800fbc8:	e013      	b.n	800fbf2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	2180      	movs	r1, #128	; 0x80
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	f000 f829 	bl	800fc2c <UART_WaitOnFlagUntilTimeout>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d001      	beq.n	800fbe4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	e01f      	b.n	800fc24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	1c5a      	adds	r2, r3, #1
 800fbe8:	60ba      	str	r2, [r7, #8]
 800fbea:	781a      	ldrb	r2, [r3, #0]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1b7      	bne.n	800fb6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	2200      	movs	r2, #0
 800fc04:	2140      	movs	r1, #64	; 0x40
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f000 f810 	bl	800fc2c <UART_WaitOnFlagUntilTimeout>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d001      	beq.n	800fc16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800fc12:	2303      	movs	r3, #3
 800fc14:	e006      	b.n	800fc24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2220      	movs	r2, #32
 800fc1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e000      	b.n	800fc24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800fc22:	2302      	movs	r3, #2
  }
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	603b      	str	r3, [r7, #0]
 800fc38:	4613      	mov	r3, r2
 800fc3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc3c:	e02c      	b.n	800fc98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc44:	d028      	beq.n	800fc98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d007      	beq.n	800fc5c <UART_WaitOnFlagUntilTimeout+0x30>
 800fc4c:	f7fb fa9c 	bl	800b188 <HAL_GetTick>
 800fc50:	4602      	mov	r2, r0
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	69ba      	ldr	r2, [r7, #24]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d21d      	bcs.n	800fc98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	68da      	ldr	r2, [r3, #12]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fc6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	695a      	ldr	r2, [r3, #20]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f022 0201 	bic.w	r2, r2, #1
 800fc7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2220      	movs	r2, #32
 800fc80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2220      	movs	r2, #32
 800fc88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800fc94:	2303      	movs	r3, #3
 800fc96:	e00f      	b.n	800fcb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	4013      	ands	r3, r2
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	bf0c      	ite	eq
 800fca8:	2301      	moveq	r3, #1
 800fcaa:	2300      	movne	r3, #0
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	461a      	mov	r2, r3
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d0c3      	beq.n	800fc3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	b085      	sub	sp, #20
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	691b      	ldr	r3, [r3, #16]
 800fcd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	68da      	ldr	r2, [r3, #12]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	430a      	orrs	r2, r1
 800fcde:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	689a      	ldr	r2, [r3, #8]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	691b      	ldr	r3, [r3, #16]
 800fce8:	431a      	orrs	r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	431a      	orrs	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	69db      	ldr	r3, [r3, #28]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fd02:	f023 030c 	bic.w	r3, r3, #12
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	6812      	ldr	r2, [r2, #0]
 800fd0a:	68f9      	ldr	r1, [r7, #12]
 800fd0c:	430b      	orrs	r3, r1
 800fd0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	699a      	ldr	r2, [r3, #24]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	430a      	orrs	r2, r1
 800fd24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	69db      	ldr	r3, [r3, #28]
 800fd2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd2e:	f040 818b 	bne.w	8010048 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4ac1      	ldr	r2, [pc, #772]	; (801003c <UART_SetConfig+0x37c>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d005      	beq.n	800fd48 <UART_SetConfig+0x88>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4abf      	ldr	r2, [pc, #764]	; (8010040 <UART_SetConfig+0x380>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	f040 80bd 	bne.w	800fec2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fd48:	f7fe fa7c 	bl	800e244 <HAL_RCC_GetPCLK2Freq>
 800fd4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	461d      	mov	r5, r3
 800fd52:	f04f 0600 	mov.w	r6, #0
 800fd56:	46a8      	mov	r8, r5
 800fd58:	46b1      	mov	r9, r6
 800fd5a:	eb18 0308 	adds.w	r3, r8, r8
 800fd5e:	eb49 0409 	adc.w	r4, r9, r9
 800fd62:	4698      	mov	r8, r3
 800fd64:	46a1      	mov	r9, r4
 800fd66:	eb18 0805 	adds.w	r8, r8, r5
 800fd6a:	eb49 0906 	adc.w	r9, r9, r6
 800fd6e:	f04f 0100 	mov.w	r1, #0
 800fd72:	f04f 0200 	mov.w	r2, #0
 800fd76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd82:	4688      	mov	r8, r1
 800fd84:	4691      	mov	r9, r2
 800fd86:	eb18 0005 	adds.w	r0, r8, r5
 800fd8a:	eb49 0106 	adc.w	r1, r9, r6
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	461d      	mov	r5, r3
 800fd94:	f04f 0600 	mov.w	r6, #0
 800fd98:	196b      	adds	r3, r5, r5
 800fd9a:	eb46 0406 	adc.w	r4, r6, r6
 800fd9e:	461a      	mov	r2, r3
 800fda0:	4623      	mov	r3, r4
 800fda2:	f7f6 ffe9 	bl	8006d78 <__aeabi_uldivmod>
 800fda6:	4603      	mov	r3, r0
 800fda8:	460c      	mov	r4, r1
 800fdaa:	461a      	mov	r2, r3
 800fdac:	4ba5      	ldr	r3, [pc, #660]	; (8010044 <UART_SetConfig+0x384>)
 800fdae:	fba3 2302 	umull	r2, r3, r3, r2
 800fdb2:	095b      	lsrs	r3, r3, #5
 800fdb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	461d      	mov	r5, r3
 800fdbc:	f04f 0600 	mov.w	r6, #0
 800fdc0:	46a9      	mov	r9, r5
 800fdc2:	46b2      	mov	sl, r6
 800fdc4:	eb19 0309 	adds.w	r3, r9, r9
 800fdc8:	eb4a 040a 	adc.w	r4, sl, sl
 800fdcc:	4699      	mov	r9, r3
 800fdce:	46a2      	mov	sl, r4
 800fdd0:	eb19 0905 	adds.w	r9, r9, r5
 800fdd4:	eb4a 0a06 	adc.w	sl, sl, r6
 800fdd8:	f04f 0100 	mov.w	r1, #0
 800fddc:	f04f 0200 	mov.w	r2, #0
 800fde0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fde4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fde8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdec:	4689      	mov	r9, r1
 800fdee:	4692      	mov	sl, r2
 800fdf0:	eb19 0005 	adds.w	r0, r9, r5
 800fdf4:	eb4a 0106 	adc.w	r1, sl, r6
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	461d      	mov	r5, r3
 800fdfe:	f04f 0600 	mov.w	r6, #0
 800fe02:	196b      	adds	r3, r5, r5
 800fe04:	eb46 0406 	adc.w	r4, r6, r6
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4623      	mov	r3, r4
 800fe0c:	f7f6 ffb4 	bl	8006d78 <__aeabi_uldivmod>
 800fe10:	4603      	mov	r3, r0
 800fe12:	460c      	mov	r4, r1
 800fe14:	461a      	mov	r2, r3
 800fe16:	4b8b      	ldr	r3, [pc, #556]	; (8010044 <UART_SetConfig+0x384>)
 800fe18:	fba3 1302 	umull	r1, r3, r3, r2
 800fe1c:	095b      	lsrs	r3, r3, #5
 800fe1e:	2164      	movs	r1, #100	; 0x64
 800fe20:	fb01 f303 	mul.w	r3, r1, r3
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	00db      	lsls	r3, r3, #3
 800fe28:	3332      	adds	r3, #50	; 0x32
 800fe2a:	4a86      	ldr	r2, [pc, #536]	; (8010044 <UART_SetConfig+0x384>)
 800fe2c:	fba2 2303 	umull	r2, r3, r2, r3
 800fe30:	095b      	lsrs	r3, r3, #5
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fe38:	4498      	add	r8, r3
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	461d      	mov	r5, r3
 800fe3e:	f04f 0600 	mov.w	r6, #0
 800fe42:	46a9      	mov	r9, r5
 800fe44:	46b2      	mov	sl, r6
 800fe46:	eb19 0309 	adds.w	r3, r9, r9
 800fe4a:	eb4a 040a 	adc.w	r4, sl, sl
 800fe4e:	4699      	mov	r9, r3
 800fe50:	46a2      	mov	sl, r4
 800fe52:	eb19 0905 	adds.w	r9, r9, r5
 800fe56:	eb4a 0a06 	adc.w	sl, sl, r6
 800fe5a:	f04f 0100 	mov.w	r1, #0
 800fe5e:	f04f 0200 	mov.w	r2, #0
 800fe62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe6e:	4689      	mov	r9, r1
 800fe70:	4692      	mov	sl, r2
 800fe72:	eb19 0005 	adds.w	r0, r9, r5
 800fe76:	eb4a 0106 	adc.w	r1, sl, r6
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	461d      	mov	r5, r3
 800fe80:	f04f 0600 	mov.w	r6, #0
 800fe84:	196b      	adds	r3, r5, r5
 800fe86:	eb46 0406 	adc.w	r4, r6, r6
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	4623      	mov	r3, r4
 800fe8e:	f7f6 ff73 	bl	8006d78 <__aeabi_uldivmod>
 800fe92:	4603      	mov	r3, r0
 800fe94:	460c      	mov	r4, r1
 800fe96:	461a      	mov	r2, r3
 800fe98:	4b6a      	ldr	r3, [pc, #424]	; (8010044 <UART_SetConfig+0x384>)
 800fe9a:	fba3 1302 	umull	r1, r3, r3, r2
 800fe9e:	095b      	lsrs	r3, r3, #5
 800fea0:	2164      	movs	r1, #100	; 0x64
 800fea2:	fb01 f303 	mul.w	r3, r1, r3
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	00db      	lsls	r3, r3, #3
 800feaa:	3332      	adds	r3, #50	; 0x32
 800feac:	4a65      	ldr	r2, [pc, #404]	; (8010044 <UART_SetConfig+0x384>)
 800feae:	fba2 2303 	umull	r2, r3, r2, r3
 800feb2:	095b      	lsrs	r3, r3, #5
 800feb4:	f003 0207 	and.w	r2, r3, #7
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4442      	add	r2, r8
 800febe:	609a      	str	r2, [r3, #8]
 800fec0:	e26f      	b.n	80103a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fec2:	f7fe f9ab 	bl	800e21c <HAL_RCC_GetPCLK1Freq>
 800fec6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	461d      	mov	r5, r3
 800fecc:	f04f 0600 	mov.w	r6, #0
 800fed0:	46a8      	mov	r8, r5
 800fed2:	46b1      	mov	r9, r6
 800fed4:	eb18 0308 	adds.w	r3, r8, r8
 800fed8:	eb49 0409 	adc.w	r4, r9, r9
 800fedc:	4698      	mov	r8, r3
 800fede:	46a1      	mov	r9, r4
 800fee0:	eb18 0805 	adds.w	r8, r8, r5
 800fee4:	eb49 0906 	adc.w	r9, r9, r6
 800fee8:	f04f 0100 	mov.w	r1, #0
 800feec:	f04f 0200 	mov.w	r2, #0
 800fef0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fef4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fef8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fefc:	4688      	mov	r8, r1
 800fefe:	4691      	mov	r9, r2
 800ff00:	eb18 0005 	adds.w	r0, r8, r5
 800ff04:	eb49 0106 	adc.w	r1, r9, r6
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	461d      	mov	r5, r3
 800ff0e:	f04f 0600 	mov.w	r6, #0
 800ff12:	196b      	adds	r3, r5, r5
 800ff14:	eb46 0406 	adc.w	r4, r6, r6
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4623      	mov	r3, r4
 800ff1c:	f7f6 ff2c 	bl	8006d78 <__aeabi_uldivmod>
 800ff20:	4603      	mov	r3, r0
 800ff22:	460c      	mov	r4, r1
 800ff24:	461a      	mov	r2, r3
 800ff26:	4b47      	ldr	r3, [pc, #284]	; (8010044 <UART_SetConfig+0x384>)
 800ff28:	fba3 2302 	umull	r2, r3, r3, r2
 800ff2c:	095b      	lsrs	r3, r3, #5
 800ff2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	461d      	mov	r5, r3
 800ff36:	f04f 0600 	mov.w	r6, #0
 800ff3a:	46a9      	mov	r9, r5
 800ff3c:	46b2      	mov	sl, r6
 800ff3e:	eb19 0309 	adds.w	r3, r9, r9
 800ff42:	eb4a 040a 	adc.w	r4, sl, sl
 800ff46:	4699      	mov	r9, r3
 800ff48:	46a2      	mov	sl, r4
 800ff4a:	eb19 0905 	adds.w	r9, r9, r5
 800ff4e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff52:	f04f 0100 	mov.w	r1, #0
 800ff56:	f04f 0200 	mov.w	r2, #0
 800ff5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff66:	4689      	mov	r9, r1
 800ff68:	4692      	mov	sl, r2
 800ff6a:	eb19 0005 	adds.w	r0, r9, r5
 800ff6e:	eb4a 0106 	adc.w	r1, sl, r6
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	461d      	mov	r5, r3
 800ff78:	f04f 0600 	mov.w	r6, #0
 800ff7c:	196b      	adds	r3, r5, r5
 800ff7e:	eb46 0406 	adc.w	r4, r6, r6
 800ff82:	461a      	mov	r2, r3
 800ff84:	4623      	mov	r3, r4
 800ff86:	f7f6 fef7 	bl	8006d78 <__aeabi_uldivmod>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	461a      	mov	r2, r3
 800ff90:	4b2c      	ldr	r3, [pc, #176]	; (8010044 <UART_SetConfig+0x384>)
 800ff92:	fba3 1302 	umull	r1, r3, r3, r2
 800ff96:	095b      	lsrs	r3, r3, #5
 800ff98:	2164      	movs	r1, #100	; 0x64
 800ff9a:	fb01 f303 	mul.w	r3, r1, r3
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	00db      	lsls	r3, r3, #3
 800ffa2:	3332      	adds	r3, #50	; 0x32
 800ffa4:	4a27      	ldr	r2, [pc, #156]	; (8010044 <UART_SetConfig+0x384>)
 800ffa6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffaa:	095b      	lsrs	r3, r3, #5
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ffb2:	4498      	add	r8, r3
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	461d      	mov	r5, r3
 800ffb8:	f04f 0600 	mov.w	r6, #0
 800ffbc:	46a9      	mov	r9, r5
 800ffbe:	46b2      	mov	sl, r6
 800ffc0:	eb19 0309 	adds.w	r3, r9, r9
 800ffc4:	eb4a 040a 	adc.w	r4, sl, sl
 800ffc8:	4699      	mov	r9, r3
 800ffca:	46a2      	mov	sl, r4
 800ffcc:	eb19 0905 	adds.w	r9, r9, r5
 800ffd0:	eb4a 0a06 	adc.w	sl, sl, r6
 800ffd4:	f04f 0100 	mov.w	r1, #0
 800ffd8:	f04f 0200 	mov.w	r2, #0
 800ffdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffe8:	4689      	mov	r9, r1
 800ffea:	4692      	mov	sl, r2
 800ffec:	eb19 0005 	adds.w	r0, r9, r5
 800fff0:	eb4a 0106 	adc.w	r1, sl, r6
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	461d      	mov	r5, r3
 800fffa:	f04f 0600 	mov.w	r6, #0
 800fffe:	196b      	adds	r3, r5, r5
 8010000:	eb46 0406 	adc.w	r4, r6, r6
 8010004:	461a      	mov	r2, r3
 8010006:	4623      	mov	r3, r4
 8010008:	f7f6 feb6 	bl	8006d78 <__aeabi_uldivmod>
 801000c:	4603      	mov	r3, r0
 801000e:	460c      	mov	r4, r1
 8010010:	461a      	mov	r2, r3
 8010012:	4b0c      	ldr	r3, [pc, #48]	; (8010044 <UART_SetConfig+0x384>)
 8010014:	fba3 1302 	umull	r1, r3, r3, r2
 8010018:	095b      	lsrs	r3, r3, #5
 801001a:	2164      	movs	r1, #100	; 0x64
 801001c:	fb01 f303 	mul.w	r3, r1, r3
 8010020:	1ad3      	subs	r3, r2, r3
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	3332      	adds	r3, #50	; 0x32
 8010026:	4a07      	ldr	r2, [pc, #28]	; (8010044 <UART_SetConfig+0x384>)
 8010028:	fba2 2303 	umull	r2, r3, r2, r3
 801002c:	095b      	lsrs	r3, r3, #5
 801002e:	f003 0207 	and.w	r2, r3, #7
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4442      	add	r2, r8
 8010038:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801003a:	e1b2      	b.n	80103a2 <UART_SetConfig+0x6e2>
 801003c:	40011000 	.word	0x40011000
 8010040:	40011400 	.word	0x40011400
 8010044:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4ad7      	ldr	r2, [pc, #860]	; (80103ac <UART_SetConfig+0x6ec>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d005      	beq.n	801005e <UART_SetConfig+0x39e>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4ad6      	ldr	r2, [pc, #856]	; (80103b0 <UART_SetConfig+0x6f0>)
 8010058:	4293      	cmp	r3, r2
 801005a:	f040 80d1 	bne.w	8010200 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801005e:	f7fe f8f1 	bl	800e244 <HAL_RCC_GetPCLK2Freq>
 8010062:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	469a      	mov	sl, r3
 8010068:	f04f 0b00 	mov.w	fp, #0
 801006c:	46d0      	mov	r8, sl
 801006e:	46d9      	mov	r9, fp
 8010070:	eb18 0308 	adds.w	r3, r8, r8
 8010074:	eb49 0409 	adc.w	r4, r9, r9
 8010078:	4698      	mov	r8, r3
 801007a:	46a1      	mov	r9, r4
 801007c:	eb18 080a 	adds.w	r8, r8, sl
 8010080:	eb49 090b 	adc.w	r9, r9, fp
 8010084:	f04f 0100 	mov.w	r1, #0
 8010088:	f04f 0200 	mov.w	r2, #0
 801008c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010090:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010094:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010098:	4688      	mov	r8, r1
 801009a:	4691      	mov	r9, r2
 801009c:	eb1a 0508 	adds.w	r5, sl, r8
 80100a0:	eb4b 0609 	adc.w	r6, fp, r9
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	4619      	mov	r1, r3
 80100aa:	f04f 0200 	mov.w	r2, #0
 80100ae:	f04f 0300 	mov.w	r3, #0
 80100b2:	f04f 0400 	mov.w	r4, #0
 80100b6:	0094      	lsls	r4, r2, #2
 80100b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80100bc:	008b      	lsls	r3, r1, #2
 80100be:	461a      	mov	r2, r3
 80100c0:	4623      	mov	r3, r4
 80100c2:	4628      	mov	r0, r5
 80100c4:	4631      	mov	r1, r6
 80100c6:	f7f6 fe57 	bl	8006d78 <__aeabi_uldivmod>
 80100ca:	4603      	mov	r3, r0
 80100cc:	460c      	mov	r4, r1
 80100ce:	461a      	mov	r2, r3
 80100d0:	4bb8      	ldr	r3, [pc, #736]	; (80103b4 <UART_SetConfig+0x6f4>)
 80100d2:	fba3 2302 	umull	r2, r3, r3, r2
 80100d6:	095b      	lsrs	r3, r3, #5
 80100d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	469b      	mov	fp, r3
 80100e0:	f04f 0c00 	mov.w	ip, #0
 80100e4:	46d9      	mov	r9, fp
 80100e6:	46e2      	mov	sl, ip
 80100e8:	eb19 0309 	adds.w	r3, r9, r9
 80100ec:	eb4a 040a 	adc.w	r4, sl, sl
 80100f0:	4699      	mov	r9, r3
 80100f2:	46a2      	mov	sl, r4
 80100f4:	eb19 090b 	adds.w	r9, r9, fp
 80100f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80100fc:	f04f 0100 	mov.w	r1, #0
 8010100:	f04f 0200 	mov.w	r2, #0
 8010104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010108:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801010c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010110:	4689      	mov	r9, r1
 8010112:	4692      	mov	sl, r2
 8010114:	eb1b 0509 	adds.w	r5, fp, r9
 8010118:	eb4c 060a 	adc.w	r6, ip, sl
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	4619      	mov	r1, r3
 8010122:	f04f 0200 	mov.w	r2, #0
 8010126:	f04f 0300 	mov.w	r3, #0
 801012a:	f04f 0400 	mov.w	r4, #0
 801012e:	0094      	lsls	r4, r2, #2
 8010130:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010134:	008b      	lsls	r3, r1, #2
 8010136:	461a      	mov	r2, r3
 8010138:	4623      	mov	r3, r4
 801013a:	4628      	mov	r0, r5
 801013c:	4631      	mov	r1, r6
 801013e:	f7f6 fe1b 	bl	8006d78 <__aeabi_uldivmod>
 8010142:	4603      	mov	r3, r0
 8010144:	460c      	mov	r4, r1
 8010146:	461a      	mov	r2, r3
 8010148:	4b9a      	ldr	r3, [pc, #616]	; (80103b4 <UART_SetConfig+0x6f4>)
 801014a:	fba3 1302 	umull	r1, r3, r3, r2
 801014e:	095b      	lsrs	r3, r3, #5
 8010150:	2164      	movs	r1, #100	; 0x64
 8010152:	fb01 f303 	mul.w	r3, r1, r3
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	3332      	adds	r3, #50	; 0x32
 801015c:	4a95      	ldr	r2, [pc, #596]	; (80103b4 <UART_SetConfig+0x6f4>)
 801015e:	fba2 2303 	umull	r2, r3, r2, r3
 8010162:	095b      	lsrs	r3, r3, #5
 8010164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010168:	4498      	add	r8, r3
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	469b      	mov	fp, r3
 801016e:	f04f 0c00 	mov.w	ip, #0
 8010172:	46d9      	mov	r9, fp
 8010174:	46e2      	mov	sl, ip
 8010176:	eb19 0309 	adds.w	r3, r9, r9
 801017a:	eb4a 040a 	adc.w	r4, sl, sl
 801017e:	4699      	mov	r9, r3
 8010180:	46a2      	mov	sl, r4
 8010182:	eb19 090b 	adds.w	r9, r9, fp
 8010186:	eb4a 0a0c 	adc.w	sl, sl, ip
 801018a:	f04f 0100 	mov.w	r1, #0
 801018e:	f04f 0200 	mov.w	r2, #0
 8010192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801019a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801019e:	4689      	mov	r9, r1
 80101a0:	4692      	mov	sl, r2
 80101a2:	eb1b 0509 	adds.w	r5, fp, r9
 80101a6:	eb4c 060a 	adc.w	r6, ip, sl
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	4619      	mov	r1, r3
 80101b0:	f04f 0200 	mov.w	r2, #0
 80101b4:	f04f 0300 	mov.w	r3, #0
 80101b8:	f04f 0400 	mov.w	r4, #0
 80101bc:	0094      	lsls	r4, r2, #2
 80101be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101c2:	008b      	lsls	r3, r1, #2
 80101c4:	461a      	mov	r2, r3
 80101c6:	4623      	mov	r3, r4
 80101c8:	4628      	mov	r0, r5
 80101ca:	4631      	mov	r1, r6
 80101cc:	f7f6 fdd4 	bl	8006d78 <__aeabi_uldivmod>
 80101d0:	4603      	mov	r3, r0
 80101d2:	460c      	mov	r4, r1
 80101d4:	461a      	mov	r2, r3
 80101d6:	4b77      	ldr	r3, [pc, #476]	; (80103b4 <UART_SetConfig+0x6f4>)
 80101d8:	fba3 1302 	umull	r1, r3, r3, r2
 80101dc:	095b      	lsrs	r3, r3, #5
 80101de:	2164      	movs	r1, #100	; 0x64
 80101e0:	fb01 f303 	mul.w	r3, r1, r3
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	011b      	lsls	r3, r3, #4
 80101e8:	3332      	adds	r3, #50	; 0x32
 80101ea:	4a72      	ldr	r2, [pc, #456]	; (80103b4 <UART_SetConfig+0x6f4>)
 80101ec:	fba2 2303 	umull	r2, r3, r2, r3
 80101f0:	095b      	lsrs	r3, r3, #5
 80101f2:	f003 020f 	and.w	r2, r3, #15
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4442      	add	r2, r8
 80101fc:	609a      	str	r2, [r3, #8]
 80101fe:	e0d0      	b.n	80103a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010200:	f7fe f80c 	bl	800e21c <HAL_RCC_GetPCLK1Freq>
 8010204:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	469a      	mov	sl, r3
 801020a:	f04f 0b00 	mov.w	fp, #0
 801020e:	46d0      	mov	r8, sl
 8010210:	46d9      	mov	r9, fp
 8010212:	eb18 0308 	adds.w	r3, r8, r8
 8010216:	eb49 0409 	adc.w	r4, r9, r9
 801021a:	4698      	mov	r8, r3
 801021c:	46a1      	mov	r9, r4
 801021e:	eb18 080a 	adds.w	r8, r8, sl
 8010222:	eb49 090b 	adc.w	r9, r9, fp
 8010226:	f04f 0100 	mov.w	r1, #0
 801022a:	f04f 0200 	mov.w	r2, #0
 801022e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010232:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010236:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801023a:	4688      	mov	r8, r1
 801023c:	4691      	mov	r9, r2
 801023e:	eb1a 0508 	adds.w	r5, sl, r8
 8010242:	eb4b 0609 	adc.w	r6, fp, r9
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	4619      	mov	r1, r3
 801024c:	f04f 0200 	mov.w	r2, #0
 8010250:	f04f 0300 	mov.w	r3, #0
 8010254:	f04f 0400 	mov.w	r4, #0
 8010258:	0094      	lsls	r4, r2, #2
 801025a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801025e:	008b      	lsls	r3, r1, #2
 8010260:	461a      	mov	r2, r3
 8010262:	4623      	mov	r3, r4
 8010264:	4628      	mov	r0, r5
 8010266:	4631      	mov	r1, r6
 8010268:	f7f6 fd86 	bl	8006d78 <__aeabi_uldivmod>
 801026c:	4603      	mov	r3, r0
 801026e:	460c      	mov	r4, r1
 8010270:	461a      	mov	r2, r3
 8010272:	4b50      	ldr	r3, [pc, #320]	; (80103b4 <UART_SetConfig+0x6f4>)
 8010274:	fba3 2302 	umull	r2, r3, r3, r2
 8010278:	095b      	lsrs	r3, r3, #5
 801027a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	469b      	mov	fp, r3
 8010282:	f04f 0c00 	mov.w	ip, #0
 8010286:	46d9      	mov	r9, fp
 8010288:	46e2      	mov	sl, ip
 801028a:	eb19 0309 	adds.w	r3, r9, r9
 801028e:	eb4a 040a 	adc.w	r4, sl, sl
 8010292:	4699      	mov	r9, r3
 8010294:	46a2      	mov	sl, r4
 8010296:	eb19 090b 	adds.w	r9, r9, fp
 801029a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801029e:	f04f 0100 	mov.w	r1, #0
 80102a2:	f04f 0200 	mov.w	r2, #0
 80102a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102b2:	4689      	mov	r9, r1
 80102b4:	4692      	mov	sl, r2
 80102b6:	eb1b 0509 	adds.w	r5, fp, r9
 80102ba:	eb4c 060a 	adc.w	r6, ip, sl
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	4619      	mov	r1, r3
 80102c4:	f04f 0200 	mov.w	r2, #0
 80102c8:	f04f 0300 	mov.w	r3, #0
 80102cc:	f04f 0400 	mov.w	r4, #0
 80102d0:	0094      	lsls	r4, r2, #2
 80102d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102d6:	008b      	lsls	r3, r1, #2
 80102d8:	461a      	mov	r2, r3
 80102da:	4623      	mov	r3, r4
 80102dc:	4628      	mov	r0, r5
 80102de:	4631      	mov	r1, r6
 80102e0:	f7f6 fd4a 	bl	8006d78 <__aeabi_uldivmod>
 80102e4:	4603      	mov	r3, r0
 80102e6:	460c      	mov	r4, r1
 80102e8:	461a      	mov	r2, r3
 80102ea:	4b32      	ldr	r3, [pc, #200]	; (80103b4 <UART_SetConfig+0x6f4>)
 80102ec:	fba3 1302 	umull	r1, r3, r3, r2
 80102f0:	095b      	lsrs	r3, r3, #5
 80102f2:	2164      	movs	r1, #100	; 0x64
 80102f4:	fb01 f303 	mul.w	r3, r1, r3
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	011b      	lsls	r3, r3, #4
 80102fc:	3332      	adds	r3, #50	; 0x32
 80102fe:	4a2d      	ldr	r2, [pc, #180]	; (80103b4 <UART_SetConfig+0x6f4>)
 8010300:	fba2 2303 	umull	r2, r3, r2, r3
 8010304:	095b      	lsrs	r3, r3, #5
 8010306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801030a:	4498      	add	r8, r3
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	469b      	mov	fp, r3
 8010310:	f04f 0c00 	mov.w	ip, #0
 8010314:	46d9      	mov	r9, fp
 8010316:	46e2      	mov	sl, ip
 8010318:	eb19 0309 	adds.w	r3, r9, r9
 801031c:	eb4a 040a 	adc.w	r4, sl, sl
 8010320:	4699      	mov	r9, r3
 8010322:	46a2      	mov	sl, r4
 8010324:	eb19 090b 	adds.w	r9, r9, fp
 8010328:	eb4a 0a0c 	adc.w	sl, sl, ip
 801032c:	f04f 0100 	mov.w	r1, #0
 8010330:	f04f 0200 	mov.w	r2, #0
 8010334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801033c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010340:	4689      	mov	r9, r1
 8010342:	4692      	mov	sl, r2
 8010344:	eb1b 0509 	adds.w	r5, fp, r9
 8010348:	eb4c 060a 	adc.w	r6, ip, sl
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	4619      	mov	r1, r3
 8010352:	f04f 0200 	mov.w	r2, #0
 8010356:	f04f 0300 	mov.w	r3, #0
 801035a:	f04f 0400 	mov.w	r4, #0
 801035e:	0094      	lsls	r4, r2, #2
 8010360:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010364:	008b      	lsls	r3, r1, #2
 8010366:	461a      	mov	r2, r3
 8010368:	4623      	mov	r3, r4
 801036a:	4628      	mov	r0, r5
 801036c:	4631      	mov	r1, r6
 801036e:	f7f6 fd03 	bl	8006d78 <__aeabi_uldivmod>
 8010372:	4603      	mov	r3, r0
 8010374:	460c      	mov	r4, r1
 8010376:	461a      	mov	r2, r3
 8010378:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <UART_SetConfig+0x6f4>)
 801037a:	fba3 1302 	umull	r1, r3, r3, r2
 801037e:	095b      	lsrs	r3, r3, #5
 8010380:	2164      	movs	r1, #100	; 0x64
 8010382:	fb01 f303 	mul.w	r3, r1, r3
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	011b      	lsls	r3, r3, #4
 801038a:	3332      	adds	r3, #50	; 0x32
 801038c:	4a09      	ldr	r2, [pc, #36]	; (80103b4 <UART_SetConfig+0x6f4>)
 801038e:	fba2 2303 	umull	r2, r3, r2, r3
 8010392:	095b      	lsrs	r3, r3, #5
 8010394:	f003 020f 	and.w	r2, r3, #15
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4442      	add	r2, r8
 801039e:	609a      	str	r2, [r3, #8]
}
 80103a0:	e7ff      	b.n	80103a2 <UART_SetConfig+0x6e2>
 80103a2:	bf00      	nop
 80103a4:	3714      	adds	r7, #20
 80103a6:	46bd      	mov	sp, r7
 80103a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ac:	40011000 	.word	0x40011000
 80103b0:	40011400 	.word	0x40011400
 80103b4:	51eb851f 	.word	0x51eb851f

080103b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b085      	sub	sp, #20
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80103c2:	2300      	movs	r3, #0
 80103c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80103c6:	2300      	movs	r3, #0
 80103c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d029      	beq.n	8010426 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80103de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80103e2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80103ec:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80103f2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80103f8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80103fe:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8010404:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 801040a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8010410:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8010416:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	4313      	orrs	r3, r2
 801041c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	68fa      	ldr	r2, [r7, #12]
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	e034      	b.n	8010490 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8010432:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801043c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8010442:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	4313      	orrs	r3, r2
 8010448:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8010456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801045a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010464:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 801046a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8010470:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8010476:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 801047c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	4313      	orrs	r3, r2
 8010482:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801049e:	b480      	push	{r7}
 80104a0:	b087      	sub	sp, #28
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	60f8      	str	r0, [r7, #12]
 80104a6:	60b9      	str	r1, [r7, #8]
 80104a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80104aa:	2300      	movs	r3, #0
 80104ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80104ae:	2300      	movs	r3, #0
 80104b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d02e      	beq.n	8010516 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	689b      	ldr	r3, [r3, #8]
 80104bc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80104c4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	3b01      	subs	r3, #1
 80104d2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80104d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	3b01      	subs	r3, #1
 80104dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80104de:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80104e8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	691b      	ldr	r3, [r3, #16]
 80104ee:	3b01      	subs	r3, #1
 80104f0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80104f2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	3b01      	subs	r3, #1
 80104fa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80104fc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	699b      	ldr	r3, [r3, #24]
 8010502:	3b01      	subs	r3, #1
 8010504:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8010506:	4313      	orrs	r3, r2
 8010508:	697a      	ldr	r2, [r7, #20]
 801050a:	4313      	orrs	r3, r2
 801050c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	609a      	str	r2, [r3, #8]
 8010514:	e03b      	b.n	801058e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010526:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	3b01      	subs	r3, #1
 801052e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	695b      	ldr	r3, [r3, #20]
 8010534:	3b01      	subs	r3, #1
 8010536:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8010538:	4313      	orrs	r3, r2
 801053a:	697a      	ldr	r2, [r7, #20]
 801053c:	4313      	orrs	r3, r2
 801053e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801054c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	3b01      	subs	r3, #1
 801055a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801055c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	3b01      	subs	r3, #1
 8010564:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8010566:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	691b      	ldr	r3, [r3, #16]
 801056c:	3b01      	subs	r3, #1
 801056e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8010570:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	3b01      	subs	r3, #1
 8010578:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801057a:	4313      	orrs	r3, r2
 801057c:	693a      	ldr	r2, [r7, #16]
 801057e:	4313      	orrs	r3, r2
 8010580:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	693a      	ldr	r2, [r7, #16]
 801058c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	371c      	adds	r7, #28
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80105a8:	2300      	movs	r3, #0
 80105aa:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80105ac:	2300      	movs	r3, #0
 80105ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80105b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	689b      	ldr	r3, [r3, #8]
 80105be:	3b01      	subs	r3, #1
 80105c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80105c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80105ca:	4313      	orrs	r3, r2
 80105cc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80105ce:	693a      	ldr	r2, [r7, #16]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80105d4:	f7fa fdd8 	bl	800b188 <HAL_GetTick>
 80105d8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80105da:	e010      	b.n	80105fe <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e2:	d00c      	beq.n	80105fe <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d007      	beq.n	80105fa <FMC_SDRAM_SendCommand+0x5e>
 80105ea:	f7fa fdcd 	bl	800b188 <HAL_GetTick>
 80105ee:	4602      	mov	r2, r0
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	1ad3      	subs	r3, r2, r3
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d201      	bcs.n	80105fe <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80105fa:	2303      	movs	r3, #3
 80105fc:	e006      	b.n	801060c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	699b      	ldr	r3, [r3, #24]
 8010602:	f003 0320 	and.w	r3, r3, #32
 8010606:	2b20      	cmp	r3, #32
 8010608:	d0e8      	beq.n	80105dc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 801060a:	2300      	movs	r3, #0
}
 801060c:	4618      	mov	r0, r3
 801060e:	3718      	adds	r7, #24
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	695a      	ldr	r2, [r3, #20]
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	431a      	orrs	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	370c      	adds	r7, #12
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr

0801063a <__aeabi_memclr>:
 801063a:	2200      	movs	r2, #0
 801063c:	f7f5 bdec 	b.w	8006218 <__aeabi_memset>

08010640 <__aeabi_memcpy>:
 8010640:	f000 b839 	b.w	80106b6 <memcpy>

08010644 <__errno>:
 8010644:	4b01      	ldr	r3, [pc, #4]	; (801064c <__errno+0x8>)
 8010646:	6818      	ldr	r0, [r3, #0]
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	200008c8 	.word	0x200008c8

08010650 <__libc_init_array>:
 8010650:	b570      	push	{r4, r5, r6, lr}
 8010652:	4e0d      	ldr	r6, [pc, #52]	; (8010688 <__libc_init_array+0x38>)
 8010654:	4c0d      	ldr	r4, [pc, #52]	; (801068c <__libc_init_array+0x3c>)
 8010656:	1ba4      	subs	r4, r4, r6
 8010658:	10a4      	asrs	r4, r4, #2
 801065a:	2500      	movs	r5, #0
 801065c:	42a5      	cmp	r5, r4
 801065e:	d109      	bne.n	8010674 <__libc_init_array+0x24>
 8010660:	4e0b      	ldr	r6, [pc, #44]	; (8010690 <__libc_init_array+0x40>)
 8010662:	4c0c      	ldr	r4, [pc, #48]	; (8010694 <__libc_init_array+0x44>)
 8010664:	f007 fcc4 	bl	8017ff0 <_init>
 8010668:	1ba4      	subs	r4, r4, r6
 801066a:	10a4      	asrs	r4, r4, #2
 801066c:	2500      	movs	r5, #0
 801066e:	42a5      	cmp	r5, r4
 8010670:	d105      	bne.n	801067e <__libc_init_array+0x2e>
 8010672:	bd70      	pop	{r4, r5, r6, pc}
 8010674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010678:	4798      	blx	r3
 801067a:	3501      	adds	r5, #1
 801067c:	e7ee      	b.n	801065c <__libc_init_array+0xc>
 801067e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010682:	4798      	blx	r3
 8010684:	3501      	adds	r5, #1
 8010686:	e7f2      	b.n	801066e <__libc_init_array+0x1e>
 8010688:	0814fec8 	.word	0x0814fec8
 801068c:	0814fec8 	.word	0x0814fec8
 8010690:	0814fec8 	.word	0x0814fec8
 8010694:	0814fecc 	.word	0x0814fecc

08010698 <memcmp>:
 8010698:	b530      	push	{r4, r5, lr}
 801069a:	2400      	movs	r4, #0
 801069c:	42a2      	cmp	r2, r4
 801069e:	d101      	bne.n	80106a4 <memcmp+0xc>
 80106a0:	2000      	movs	r0, #0
 80106a2:	e007      	b.n	80106b4 <memcmp+0x1c>
 80106a4:	5d03      	ldrb	r3, [r0, r4]
 80106a6:	3401      	adds	r4, #1
 80106a8:	190d      	adds	r5, r1, r4
 80106aa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80106ae:	42ab      	cmp	r3, r5
 80106b0:	d0f4      	beq.n	801069c <memcmp+0x4>
 80106b2:	1b58      	subs	r0, r3, r5
 80106b4:	bd30      	pop	{r4, r5, pc}

080106b6 <memcpy>:
 80106b6:	b510      	push	{r4, lr}
 80106b8:	1e43      	subs	r3, r0, #1
 80106ba:	440a      	add	r2, r1
 80106bc:	4291      	cmp	r1, r2
 80106be:	d100      	bne.n	80106c2 <memcpy+0xc>
 80106c0:	bd10      	pop	{r4, pc}
 80106c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106ca:	e7f7      	b.n	80106bc <memcpy+0x6>

080106cc <memset>:
 80106cc:	4402      	add	r2, r0
 80106ce:	4603      	mov	r3, r0
 80106d0:	4293      	cmp	r3, r2
 80106d2:	d100      	bne.n	80106d6 <memset+0xa>
 80106d4:	4770      	bx	lr
 80106d6:	f803 1b01 	strb.w	r1, [r3], #1
 80106da:	e7f9      	b.n	80106d0 <memset+0x4>

080106dc <__cvt>:
 80106dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106e0:	ec55 4b10 	vmov	r4, r5, d0
 80106e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80106e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80106ea:	2d00      	cmp	r5, #0
 80106ec:	460e      	mov	r6, r1
 80106ee:	4691      	mov	r9, r2
 80106f0:	4619      	mov	r1, r3
 80106f2:	bfb8      	it	lt
 80106f4:	4622      	movlt	r2, r4
 80106f6:	462b      	mov	r3, r5
 80106f8:	f027 0720 	bic.w	r7, r7, #32
 80106fc:	bfbb      	ittet	lt
 80106fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010702:	461d      	movlt	r5, r3
 8010704:	2300      	movge	r3, #0
 8010706:	232d      	movlt	r3, #45	; 0x2d
 8010708:	bfb8      	it	lt
 801070a:	4614      	movlt	r4, r2
 801070c:	2f46      	cmp	r7, #70	; 0x46
 801070e:	700b      	strb	r3, [r1, #0]
 8010710:	d004      	beq.n	801071c <__cvt+0x40>
 8010712:	2f45      	cmp	r7, #69	; 0x45
 8010714:	d100      	bne.n	8010718 <__cvt+0x3c>
 8010716:	3601      	adds	r6, #1
 8010718:	2102      	movs	r1, #2
 801071a:	e000      	b.n	801071e <__cvt+0x42>
 801071c:	2103      	movs	r1, #3
 801071e:	ab03      	add	r3, sp, #12
 8010720:	9301      	str	r3, [sp, #4]
 8010722:	ab02      	add	r3, sp, #8
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	4632      	mov	r2, r6
 8010728:	4653      	mov	r3, sl
 801072a:	ec45 4b10 	vmov	d0, r4, r5
 801072e:	f001 feb3 	bl	8012498 <_dtoa_r>
 8010732:	2f47      	cmp	r7, #71	; 0x47
 8010734:	4680      	mov	r8, r0
 8010736:	d102      	bne.n	801073e <__cvt+0x62>
 8010738:	f019 0f01 	tst.w	r9, #1
 801073c:	d026      	beq.n	801078c <__cvt+0xb0>
 801073e:	2f46      	cmp	r7, #70	; 0x46
 8010740:	eb08 0906 	add.w	r9, r8, r6
 8010744:	d111      	bne.n	801076a <__cvt+0x8e>
 8010746:	f898 3000 	ldrb.w	r3, [r8]
 801074a:	2b30      	cmp	r3, #48	; 0x30
 801074c:	d10a      	bne.n	8010764 <__cvt+0x88>
 801074e:	2200      	movs	r2, #0
 8010750:	2300      	movs	r3, #0
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	f7f6 fa2f 	bl	8006bb8 <__aeabi_dcmpeq>
 801075a:	b918      	cbnz	r0, 8010764 <__cvt+0x88>
 801075c:	f1c6 0601 	rsb	r6, r6, #1
 8010760:	f8ca 6000 	str.w	r6, [sl]
 8010764:	f8da 3000 	ldr.w	r3, [sl]
 8010768:	4499      	add	r9, r3
 801076a:	2200      	movs	r2, #0
 801076c:	2300      	movs	r3, #0
 801076e:	4620      	mov	r0, r4
 8010770:	4629      	mov	r1, r5
 8010772:	f7f6 fa21 	bl	8006bb8 <__aeabi_dcmpeq>
 8010776:	b938      	cbnz	r0, 8010788 <__cvt+0xac>
 8010778:	2230      	movs	r2, #48	; 0x30
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	454b      	cmp	r3, r9
 801077e:	d205      	bcs.n	801078c <__cvt+0xb0>
 8010780:	1c59      	adds	r1, r3, #1
 8010782:	9103      	str	r1, [sp, #12]
 8010784:	701a      	strb	r2, [r3, #0]
 8010786:	e7f8      	b.n	801077a <__cvt+0x9e>
 8010788:	f8cd 900c 	str.w	r9, [sp, #12]
 801078c:	9b03      	ldr	r3, [sp, #12]
 801078e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010790:	eba3 0308 	sub.w	r3, r3, r8
 8010794:	4640      	mov	r0, r8
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	b004      	add	sp, #16
 801079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801079e <__exponent>:
 801079e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107a0:	2900      	cmp	r1, #0
 80107a2:	4604      	mov	r4, r0
 80107a4:	bfba      	itte	lt
 80107a6:	4249      	neglt	r1, r1
 80107a8:	232d      	movlt	r3, #45	; 0x2d
 80107aa:	232b      	movge	r3, #43	; 0x2b
 80107ac:	2909      	cmp	r1, #9
 80107ae:	f804 2b02 	strb.w	r2, [r4], #2
 80107b2:	7043      	strb	r3, [r0, #1]
 80107b4:	dd20      	ble.n	80107f8 <__exponent+0x5a>
 80107b6:	f10d 0307 	add.w	r3, sp, #7
 80107ba:	461f      	mov	r7, r3
 80107bc:	260a      	movs	r6, #10
 80107be:	fb91 f5f6 	sdiv	r5, r1, r6
 80107c2:	fb06 1115 	mls	r1, r6, r5, r1
 80107c6:	3130      	adds	r1, #48	; 0x30
 80107c8:	2d09      	cmp	r5, #9
 80107ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80107ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80107d2:	4629      	mov	r1, r5
 80107d4:	dc09      	bgt.n	80107ea <__exponent+0x4c>
 80107d6:	3130      	adds	r1, #48	; 0x30
 80107d8:	3b02      	subs	r3, #2
 80107da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80107de:	42bb      	cmp	r3, r7
 80107e0:	4622      	mov	r2, r4
 80107e2:	d304      	bcc.n	80107ee <__exponent+0x50>
 80107e4:	1a10      	subs	r0, r2, r0
 80107e6:	b003      	add	sp, #12
 80107e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107ea:	4613      	mov	r3, r2
 80107ec:	e7e7      	b.n	80107be <__exponent+0x20>
 80107ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107f2:	f804 2b01 	strb.w	r2, [r4], #1
 80107f6:	e7f2      	b.n	80107de <__exponent+0x40>
 80107f8:	2330      	movs	r3, #48	; 0x30
 80107fa:	4419      	add	r1, r3
 80107fc:	7083      	strb	r3, [r0, #2]
 80107fe:	1d02      	adds	r2, r0, #4
 8010800:	70c1      	strb	r1, [r0, #3]
 8010802:	e7ef      	b.n	80107e4 <__exponent+0x46>

08010804 <_printf_float>:
 8010804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010808:	b08d      	sub	sp, #52	; 0x34
 801080a:	460c      	mov	r4, r1
 801080c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010810:	4616      	mov	r6, r2
 8010812:	461f      	mov	r7, r3
 8010814:	4605      	mov	r5, r0
 8010816:	f003 f89d 	bl	8013954 <_localeconv_r>
 801081a:	6803      	ldr	r3, [r0, #0]
 801081c:	9304      	str	r3, [sp, #16]
 801081e:	4618      	mov	r0, r3
 8010820:	f7f5 fd47 	bl	80062b2 <strlen>
 8010824:	2300      	movs	r3, #0
 8010826:	930a      	str	r3, [sp, #40]	; 0x28
 8010828:	f8d8 3000 	ldr.w	r3, [r8]
 801082c:	9005      	str	r0, [sp, #20]
 801082e:	3307      	adds	r3, #7
 8010830:	f023 0307 	bic.w	r3, r3, #7
 8010834:	f103 0208 	add.w	r2, r3, #8
 8010838:	f894 a018 	ldrb.w	sl, [r4, #24]
 801083c:	f8d4 b000 	ldr.w	fp, [r4]
 8010840:	f8c8 2000 	str.w	r2, [r8]
 8010844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010848:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801084c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010850:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010854:	9307      	str	r3, [sp, #28]
 8010856:	f8cd 8018 	str.w	r8, [sp, #24]
 801085a:	f04f 32ff 	mov.w	r2, #4294967295
 801085e:	4ba7      	ldr	r3, [pc, #668]	; (8010afc <_printf_float+0x2f8>)
 8010860:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010864:	f7f6 f9da 	bl	8006c1c <__aeabi_dcmpun>
 8010868:	bb70      	cbnz	r0, 80108c8 <_printf_float+0xc4>
 801086a:	f04f 32ff 	mov.w	r2, #4294967295
 801086e:	4ba3      	ldr	r3, [pc, #652]	; (8010afc <_printf_float+0x2f8>)
 8010870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010874:	f7f6 f9b4 	bl	8006be0 <__aeabi_dcmple>
 8010878:	bb30      	cbnz	r0, 80108c8 <_printf_float+0xc4>
 801087a:	2200      	movs	r2, #0
 801087c:	2300      	movs	r3, #0
 801087e:	4640      	mov	r0, r8
 8010880:	4649      	mov	r1, r9
 8010882:	f7f6 f9a3 	bl	8006bcc <__aeabi_dcmplt>
 8010886:	b110      	cbz	r0, 801088e <_printf_float+0x8a>
 8010888:	232d      	movs	r3, #45	; 0x2d
 801088a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801088e:	4a9c      	ldr	r2, [pc, #624]	; (8010b00 <_printf_float+0x2fc>)
 8010890:	4b9c      	ldr	r3, [pc, #624]	; (8010b04 <_printf_float+0x300>)
 8010892:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010896:	bf8c      	ite	hi
 8010898:	4690      	movhi	r8, r2
 801089a:	4698      	movls	r8, r3
 801089c:	2303      	movs	r3, #3
 801089e:	f02b 0204 	bic.w	r2, fp, #4
 80108a2:	6123      	str	r3, [r4, #16]
 80108a4:	6022      	str	r2, [r4, #0]
 80108a6:	f04f 0900 	mov.w	r9, #0
 80108aa:	9700      	str	r7, [sp, #0]
 80108ac:	4633      	mov	r3, r6
 80108ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80108b0:	4621      	mov	r1, r4
 80108b2:	4628      	mov	r0, r5
 80108b4:	f000 f9e6 	bl	8010c84 <_printf_common>
 80108b8:	3001      	adds	r0, #1
 80108ba:	f040 808d 	bne.w	80109d8 <_printf_float+0x1d4>
 80108be:	f04f 30ff 	mov.w	r0, #4294967295
 80108c2:	b00d      	add	sp, #52	; 0x34
 80108c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c8:	4642      	mov	r2, r8
 80108ca:	464b      	mov	r3, r9
 80108cc:	4640      	mov	r0, r8
 80108ce:	4649      	mov	r1, r9
 80108d0:	f7f6 f9a4 	bl	8006c1c <__aeabi_dcmpun>
 80108d4:	b110      	cbz	r0, 80108dc <_printf_float+0xd8>
 80108d6:	4a8c      	ldr	r2, [pc, #560]	; (8010b08 <_printf_float+0x304>)
 80108d8:	4b8c      	ldr	r3, [pc, #560]	; (8010b0c <_printf_float+0x308>)
 80108da:	e7da      	b.n	8010892 <_printf_float+0x8e>
 80108dc:	6861      	ldr	r1, [r4, #4]
 80108de:	1c4b      	adds	r3, r1, #1
 80108e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80108e4:	a80a      	add	r0, sp, #40	; 0x28
 80108e6:	d13e      	bne.n	8010966 <_printf_float+0x162>
 80108e8:	2306      	movs	r3, #6
 80108ea:	6063      	str	r3, [r4, #4]
 80108ec:	2300      	movs	r3, #0
 80108ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80108f2:	ab09      	add	r3, sp, #36	; 0x24
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	ec49 8b10 	vmov	d0, r8, r9
 80108fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80108fe:	6022      	str	r2, [r4, #0]
 8010900:	f8cd a004 	str.w	sl, [sp, #4]
 8010904:	6861      	ldr	r1, [r4, #4]
 8010906:	4628      	mov	r0, r5
 8010908:	f7ff fee8 	bl	80106dc <__cvt>
 801090c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010910:	2b47      	cmp	r3, #71	; 0x47
 8010912:	4680      	mov	r8, r0
 8010914:	d109      	bne.n	801092a <_printf_float+0x126>
 8010916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010918:	1cd8      	adds	r0, r3, #3
 801091a:	db02      	blt.n	8010922 <_printf_float+0x11e>
 801091c:	6862      	ldr	r2, [r4, #4]
 801091e:	4293      	cmp	r3, r2
 8010920:	dd47      	ble.n	80109b2 <_printf_float+0x1ae>
 8010922:	f1aa 0a02 	sub.w	sl, sl, #2
 8010926:	fa5f fa8a 	uxtb.w	sl, sl
 801092a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801092e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010930:	d824      	bhi.n	801097c <_printf_float+0x178>
 8010932:	3901      	subs	r1, #1
 8010934:	4652      	mov	r2, sl
 8010936:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801093a:	9109      	str	r1, [sp, #36]	; 0x24
 801093c:	f7ff ff2f 	bl	801079e <__exponent>
 8010940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010942:	1813      	adds	r3, r2, r0
 8010944:	2a01      	cmp	r2, #1
 8010946:	4681      	mov	r9, r0
 8010948:	6123      	str	r3, [r4, #16]
 801094a:	dc02      	bgt.n	8010952 <_printf_float+0x14e>
 801094c:	6822      	ldr	r2, [r4, #0]
 801094e:	07d1      	lsls	r1, r2, #31
 8010950:	d501      	bpl.n	8010956 <_printf_float+0x152>
 8010952:	3301      	adds	r3, #1
 8010954:	6123      	str	r3, [r4, #16]
 8010956:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0a5      	beq.n	80108aa <_printf_float+0xa6>
 801095e:	232d      	movs	r3, #45	; 0x2d
 8010960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010964:	e7a1      	b.n	80108aa <_printf_float+0xa6>
 8010966:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801096a:	f000 8177 	beq.w	8010c5c <_printf_float+0x458>
 801096e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010972:	d1bb      	bne.n	80108ec <_printf_float+0xe8>
 8010974:	2900      	cmp	r1, #0
 8010976:	d1b9      	bne.n	80108ec <_printf_float+0xe8>
 8010978:	2301      	movs	r3, #1
 801097a:	e7b6      	b.n	80108ea <_printf_float+0xe6>
 801097c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010980:	d119      	bne.n	80109b6 <_printf_float+0x1b2>
 8010982:	2900      	cmp	r1, #0
 8010984:	6863      	ldr	r3, [r4, #4]
 8010986:	dd0c      	ble.n	80109a2 <_printf_float+0x19e>
 8010988:	6121      	str	r1, [r4, #16]
 801098a:	b913      	cbnz	r3, 8010992 <_printf_float+0x18e>
 801098c:	6822      	ldr	r2, [r4, #0]
 801098e:	07d2      	lsls	r2, r2, #31
 8010990:	d502      	bpl.n	8010998 <_printf_float+0x194>
 8010992:	3301      	adds	r3, #1
 8010994:	440b      	add	r3, r1
 8010996:	6123      	str	r3, [r4, #16]
 8010998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099a:	65a3      	str	r3, [r4, #88]	; 0x58
 801099c:	f04f 0900 	mov.w	r9, #0
 80109a0:	e7d9      	b.n	8010956 <_printf_float+0x152>
 80109a2:	b913      	cbnz	r3, 80109aa <_printf_float+0x1a6>
 80109a4:	6822      	ldr	r2, [r4, #0]
 80109a6:	07d0      	lsls	r0, r2, #31
 80109a8:	d501      	bpl.n	80109ae <_printf_float+0x1aa>
 80109aa:	3302      	adds	r3, #2
 80109ac:	e7f3      	b.n	8010996 <_printf_float+0x192>
 80109ae:	2301      	movs	r3, #1
 80109b0:	e7f1      	b.n	8010996 <_printf_float+0x192>
 80109b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80109b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80109ba:	4293      	cmp	r3, r2
 80109bc:	db05      	blt.n	80109ca <_printf_float+0x1c6>
 80109be:	6822      	ldr	r2, [r4, #0]
 80109c0:	6123      	str	r3, [r4, #16]
 80109c2:	07d1      	lsls	r1, r2, #31
 80109c4:	d5e8      	bpl.n	8010998 <_printf_float+0x194>
 80109c6:	3301      	adds	r3, #1
 80109c8:	e7e5      	b.n	8010996 <_printf_float+0x192>
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	bfd4      	ite	le
 80109ce:	f1c3 0302 	rsble	r3, r3, #2
 80109d2:	2301      	movgt	r3, #1
 80109d4:	4413      	add	r3, r2
 80109d6:	e7de      	b.n	8010996 <_printf_float+0x192>
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	055a      	lsls	r2, r3, #21
 80109dc:	d407      	bmi.n	80109ee <_printf_float+0x1ea>
 80109de:	6923      	ldr	r3, [r4, #16]
 80109e0:	4642      	mov	r2, r8
 80109e2:	4631      	mov	r1, r6
 80109e4:	4628      	mov	r0, r5
 80109e6:	47b8      	blx	r7
 80109e8:	3001      	adds	r0, #1
 80109ea:	d12b      	bne.n	8010a44 <_printf_float+0x240>
 80109ec:	e767      	b.n	80108be <_printf_float+0xba>
 80109ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80109f2:	f240 80dc 	bls.w	8010bae <_printf_float+0x3aa>
 80109f6:	2200      	movs	r2, #0
 80109f8:	2300      	movs	r3, #0
 80109fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80109fe:	f7f6 f8db 	bl	8006bb8 <__aeabi_dcmpeq>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	d033      	beq.n	8010a6e <_printf_float+0x26a>
 8010a06:	2301      	movs	r3, #1
 8010a08:	4a41      	ldr	r2, [pc, #260]	; (8010b10 <_printf_float+0x30c>)
 8010a0a:	4631      	mov	r1, r6
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	47b8      	blx	r7
 8010a10:	3001      	adds	r0, #1
 8010a12:	f43f af54 	beq.w	80108be <_printf_float+0xba>
 8010a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	db02      	blt.n	8010a24 <_printf_float+0x220>
 8010a1e:	6823      	ldr	r3, [r4, #0]
 8010a20:	07d8      	lsls	r0, r3, #31
 8010a22:	d50f      	bpl.n	8010a44 <_printf_float+0x240>
 8010a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a28:	4631      	mov	r1, r6
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	47b8      	blx	r7
 8010a2e:	3001      	adds	r0, #1
 8010a30:	f43f af45 	beq.w	80108be <_printf_float+0xba>
 8010a34:	f04f 0800 	mov.w	r8, #0
 8010a38:	f104 091a 	add.w	r9, r4, #26
 8010a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a3e:	3b01      	subs	r3, #1
 8010a40:	4543      	cmp	r3, r8
 8010a42:	dc09      	bgt.n	8010a58 <_printf_float+0x254>
 8010a44:	6823      	ldr	r3, [r4, #0]
 8010a46:	079b      	lsls	r3, r3, #30
 8010a48:	f100 8103 	bmi.w	8010c52 <_printf_float+0x44e>
 8010a4c:	68e0      	ldr	r0, [r4, #12]
 8010a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a50:	4298      	cmp	r0, r3
 8010a52:	bfb8      	it	lt
 8010a54:	4618      	movlt	r0, r3
 8010a56:	e734      	b.n	80108c2 <_printf_float+0xbe>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	464a      	mov	r2, r9
 8010a5c:	4631      	mov	r1, r6
 8010a5e:	4628      	mov	r0, r5
 8010a60:	47b8      	blx	r7
 8010a62:	3001      	adds	r0, #1
 8010a64:	f43f af2b 	beq.w	80108be <_printf_float+0xba>
 8010a68:	f108 0801 	add.w	r8, r8, #1
 8010a6c:	e7e6      	b.n	8010a3c <_printf_float+0x238>
 8010a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	dc2b      	bgt.n	8010acc <_printf_float+0x2c8>
 8010a74:	2301      	movs	r3, #1
 8010a76:	4a26      	ldr	r2, [pc, #152]	; (8010b10 <_printf_float+0x30c>)
 8010a78:	4631      	mov	r1, r6
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	47b8      	blx	r7
 8010a7e:	3001      	adds	r0, #1
 8010a80:	f43f af1d 	beq.w	80108be <_printf_float+0xba>
 8010a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a86:	b923      	cbnz	r3, 8010a92 <_printf_float+0x28e>
 8010a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a8a:	b913      	cbnz	r3, 8010a92 <_printf_float+0x28e>
 8010a8c:	6823      	ldr	r3, [r4, #0]
 8010a8e:	07d9      	lsls	r1, r3, #31
 8010a90:	d5d8      	bpl.n	8010a44 <_printf_float+0x240>
 8010a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a96:	4631      	mov	r1, r6
 8010a98:	4628      	mov	r0, r5
 8010a9a:	47b8      	blx	r7
 8010a9c:	3001      	adds	r0, #1
 8010a9e:	f43f af0e 	beq.w	80108be <_printf_float+0xba>
 8010aa2:	f04f 0900 	mov.w	r9, #0
 8010aa6:	f104 0a1a 	add.w	sl, r4, #26
 8010aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aac:	425b      	negs	r3, r3
 8010aae:	454b      	cmp	r3, r9
 8010ab0:	dc01      	bgt.n	8010ab6 <_printf_float+0x2b2>
 8010ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab4:	e794      	b.n	80109e0 <_printf_float+0x1dc>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	4652      	mov	r2, sl
 8010aba:	4631      	mov	r1, r6
 8010abc:	4628      	mov	r0, r5
 8010abe:	47b8      	blx	r7
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	f43f aefc 	beq.w	80108be <_printf_float+0xba>
 8010ac6:	f109 0901 	add.w	r9, r9, #1
 8010aca:	e7ee      	b.n	8010aaa <_printf_float+0x2a6>
 8010acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	bfa8      	it	ge
 8010ad4:	461a      	movge	r2, r3
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	4691      	mov	r9, r2
 8010ada:	dd07      	ble.n	8010aec <_printf_float+0x2e8>
 8010adc:	4613      	mov	r3, r2
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4642      	mov	r2, r8
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	47b8      	blx	r7
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	f43f aee9 	beq.w	80108be <_printf_float+0xba>
 8010aec:	f104 031a 	add.w	r3, r4, #26
 8010af0:	f04f 0b00 	mov.w	fp, #0
 8010af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010af8:	9306      	str	r3, [sp, #24]
 8010afa:	e015      	b.n	8010b28 <_printf_float+0x324>
 8010afc:	7fefffff 	.word	0x7fefffff
 8010b00:	0814fa87 	.word	0x0814fa87
 8010b04:	0814f740 	.word	0x0814f740
 8010b08:	0814f748 	.word	0x0814f748
 8010b0c:	0814f744 	.word	0x0814f744
 8010b10:	0814f74c 	.word	0x0814f74c
 8010b14:	2301      	movs	r3, #1
 8010b16:	9a06      	ldr	r2, [sp, #24]
 8010b18:	4631      	mov	r1, r6
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	47b8      	blx	r7
 8010b1e:	3001      	adds	r0, #1
 8010b20:	f43f aecd 	beq.w	80108be <_printf_float+0xba>
 8010b24:	f10b 0b01 	add.w	fp, fp, #1
 8010b28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010b2c:	ebaa 0309 	sub.w	r3, sl, r9
 8010b30:	455b      	cmp	r3, fp
 8010b32:	dcef      	bgt.n	8010b14 <_printf_float+0x310>
 8010b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	44d0      	add	r8, sl
 8010b3c:	db15      	blt.n	8010b6a <_printf_float+0x366>
 8010b3e:	6823      	ldr	r3, [r4, #0]
 8010b40:	07da      	lsls	r2, r3, #31
 8010b42:	d412      	bmi.n	8010b6a <_printf_float+0x366>
 8010b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b48:	eba3 020a 	sub.w	r2, r3, sl
 8010b4c:	eba3 0a01 	sub.w	sl, r3, r1
 8010b50:	4592      	cmp	sl, r2
 8010b52:	bfa8      	it	ge
 8010b54:	4692      	movge	sl, r2
 8010b56:	f1ba 0f00 	cmp.w	sl, #0
 8010b5a:	dc0e      	bgt.n	8010b7a <_printf_float+0x376>
 8010b5c:	f04f 0800 	mov.w	r8, #0
 8010b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b64:	f104 091a 	add.w	r9, r4, #26
 8010b68:	e019      	b.n	8010b9e <_printf_float+0x39a>
 8010b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b6e:	4631      	mov	r1, r6
 8010b70:	4628      	mov	r0, r5
 8010b72:	47b8      	blx	r7
 8010b74:	3001      	adds	r0, #1
 8010b76:	d1e5      	bne.n	8010b44 <_printf_float+0x340>
 8010b78:	e6a1      	b.n	80108be <_printf_float+0xba>
 8010b7a:	4653      	mov	r3, sl
 8010b7c:	4642      	mov	r2, r8
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4628      	mov	r0, r5
 8010b82:	47b8      	blx	r7
 8010b84:	3001      	adds	r0, #1
 8010b86:	d1e9      	bne.n	8010b5c <_printf_float+0x358>
 8010b88:	e699      	b.n	80108be <_printf_float+0xba>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	464a      	mov	r2, r9
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4628      	mov	r0, r5
 8010b92:	47b8      	blx	r7
 8010b94:	3001      	adds	r0, #1
 8010b96:	f43f ae92 	beq.w	80108be <_printf_float+0xba>
 8010b9a:	f108 0801 	add.w	r8, r8, #1
 8010b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ba2:	1a9b      	subs	r3, r3, r2
 8010ba4:	eba3 030a 	sub.w	r3, r3, sl
 8010ba8:	4543      	cmp	r3, r8
 8010baa:	dcee      	bgt.n	8010b8a <_printf_float+0x386>
 8010bac:	e74a      	b.n	8010a44 <_printf_float+0x240>
 8010bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bb0:	2a01      	cmp	r2, #1
 8010bb2:	dc01      	bgt.n	8010bb8 <_printf_float+0x3b4>
 8010bb4:	07db      	lsls	r3, r3, #31
 8010bb6:	d53a      	bpl.n	8010c2e <_printf_float+0x42a>
 8010bb8:	2301      	movs	r3, #1
 8010bba:	4642      	mov	r2, r8
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	47b8      	blx	r7
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	f43f ae7b 	beq.w	80108be <_printf_float+0xba>
 8010bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bcc:	4631      	mov	r1, r6
 8010bce:	4628      	mov	r0, r5
 8010bd0:	47b8      	blx	r7
 8010bd2:	3001      	adds	r0, #1
 8010bd4:	f108 0801 	add.w	r8, r8, #1
 8010bd8:	f43f ae71 	beq.w	80108be <_printf_float+0xba>
 8010bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bde:	2200      	movs	r2, #0
 8010be0:	f103 3aff 	add.w	sl, r3, #4294967295
 8010be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010be8:	2300      	movs	r3, #0
 8010bea:	f7f5 ffe5 	bl	8006bb8 <__aeabi_dcmpeq>
 8010bee:	b9c8      	cbnz	r0, 8010c24 <_printf_float+0x420>
 8010bf0:	4653      	mov	r3, sl
 8010bf2:	4642      	mov	r2, r8
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	47b8      	blx	r7
 8010bfa:	3001      	adds	r0, #1
 8010bfc:	d10e      	bne.n	8010c1c <_printf_float+0x418>
 8010bfe:	e65e      	b.n	80108be <_printf_float+0xba>
 8010c00:	2301      	movs	r3, #1
 8010c02:	4652      	mov	r2, sl
 8010c04:	4631      	mov	r1, r6
 8010c06:	4628      	mov	r0, r5
 8010c08:	47b8      	blx	r7
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	f43f ae57 	beq.w	80108be <_printf_float+0xba>
 8010c10:	f108 0801 	add.w	r8, r8, #1
 8010c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c16:	3b01      	subs	r3, #1
 8010c18:	4543      	cmp	r3, r8
 8010c1a:	dcf1      	bgt.n	8010c00 <_printf_float+0x3fc>
 8010c1c:	464b      	mov	r3, r9
 8010c1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010c22:	e6de      	b.n	80109e2 <_printf_float+0x1de>
 8010c24:	f04f 0800 	mov.w	r8, #0
 8010c28:	f104 0a1a 	add.w	sl, r4, #26
 8010c2c:	e7f2      	b.n	8010c14 <_printf_float+0x410>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	e7df      	b.n	8010bf2 <_printf_float+0x3ee>
 8010c32:	2301      	movs	r3, #1
 8010c34:	464a      	mov	r2, r9
 8010c36:	4631      	mov	r1, r6
 8010c38:	4628      	mov	r0, r5
 8010c3a:	47b8      	blx	r7
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	f43f ae3e 	beq.w	80108be <_printf_float+0xba>
 8010c42:	f108 0801 	add.w	r8, r8, #1
 8010c46:	68e3      	ldr	r3, [r4, #12]
 8010c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c4a:	1a9b      	subs	r3, r3, r2
 8010c4c:	4543      	cmp	r3, r8
 8010c4e:	dcf0      	bgt.n	8010c32 <_printf_float+0x42e>
 8010c50:	e6fc      	b.n	8010a4c <_printf_float+0x248>
 8010c52:	f04f 0800 	mov.w	r8, #0
 8010c56:	f104 0919 	add.w	r9, r4, #25
 8010c5a:	e7f4      	b.n	8010c46 <_printf_float+0x442>
 8010c5c:	2900      	cmp	r1, #0
 8010c5e:	f43f ae8b 	beq.w	8010978 <_printf_float+0x174>
 8010c62:	2300      	movs	r3, #0
 8010c64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010c68:	ab09      	add	r3, sp, #36	; 0x24
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	ec49 8b10 	vmov	d0, r8, r9
 8010c70:	6022      	str	r2, [r4, #0]
 8010c72:	f8cd a004 	str.w	sl, [sp, #4]
 8010c76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	f7ff fd2e 	bl	80106dc <__cvt>
 8010c80:	4680      	mov	r8, r0
 8010c82:	e648      	b.n	8010916 <_printf_float+0x112>

08010c84 <_printf_common>:
 8010c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c88:	4691      	mov	r9, r2
 8010c8a:	461f      	mov	r7, r3
 8010c8c:	688a      	ldr	r2, [r1, #8]
 8010c8e:	690b      	ldr	r3, [r1, #16]
 8010c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c94:	4293      	cmp	r3, r2
 8010c96:	bfb8      	it	lt
 8010c98:	4613      	movlt	r3, r2
 8010c9a:	f8c9 3000 	str.w	r3, [r9]
 8010c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ca2:	4606      	mov	r6, r0
 8010ca4:	460c      	mov	r4, r1
 8010ca6:	b112      	cbz	r2, 8010cae <_printf_common+0x2a>
 8010ca8:	3301      	adds	r3, #1
 8010caa:	f8c9 3000 	str.w	r3, [r9]
 8010cae:	6823      	ldr	r3, [r4, #0]
 8010cb0:	0699      	lsls	r1, r3, #26
 8010cb2:	bf42      	ittt	mi
 8010cb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010cb8:	3302      	addmi	r3, #2
 8010cba:	f8c9 3000 	strmi.w	r3, [r9]
 8010cbe:	6825      	ldr	r5, [r4, #0]
 8010cc0:	f015 0506 	ands.w	r5, r5, #6
 8010cc4:	d107      	bne.n	8010cd6 <_printf_common+0x52>
 8010cc6:	f104 0a19 	add.w	sl, r4, #25
 8010cca:	68e3      	ldr	r3, [r4, #12]
 8010ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8010cd0:	1a9b      	subs	r3, r3, r2
 8010cd2:	42ab      	cmp	r3, r5
 8010cd4:	dc28      	bgt.n	8010d28 <_printf_common+0xa4>
 8010cd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010cda:	6822      	ldr	r2, [r4, #0]
 8010cdc:	3300      	adds	r3, #0
 8010cde:	bf18      	it	ne
 8010ce0:	2301      	movne	r3, #1
 8010ce2:	0692      	lsls	r2, r2, #26
 8010ce4:	d42d      	bmi.n	8010d42 <_printf_common+0xbe>
 8010ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cea:	4639      	mov	r1, r7
 8010cec:	4630      	mov	r0, r6
 8010cee:	47c0      	blx	r8
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d020      	beq.n	8010d36 <_printf_common+0xb2>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	68e5      	ldr	r5, [r4, #12]
 8010cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8010cfc:	f003 0306 	and.w	r3, r3, #6
 8010d00:	2b04      	cmp	r3, #4
 8010d02:	bf08      	it	eq
 8010d04:	1aad      	subeq	r5, r5, r2
 8010d06:	68a3      	ldr	r3, [r4, #8]
 8010d08:	6922      	ldr	r2, [r4, #16]
 8010d0a:	bf0c      	ite	eq
 8010d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d10:	2500      	movne	r5, #0
 8010d12:	4293      	cmp	r3, r2
 8010d14:	bfc4      	itt	gt
 8010d16:	1a9b      	subgt	r3, r3, r2
 8010d18:	18ed      	addgt	r5, r5, r3
 8010d1a:	f04f 0900 	mov.w	r9, #0
 8010d1e:	341a      	adds	r4, #26
 8010d20:	454d      	cmp	r5, r9
 8010d22:	d11a      	bne.n	8010d5a <_printf_common+0xd6>
 8010d24:	2000      	movs	r0, #0
 8010d26:	e008      	b.n	8010d3a <_printf_common+0xb6>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	4652      	mov	r2, sl
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	4630      	mov	r0, r6
 8010d30:	47c0      	blx	r8
 8010d32:	3001      	adds	r0, #1
 8010d34:	d103      	bne.n	8010d3e <_printf_common+0xba>
 8010d36:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d3e:	3501      	adds	r5, #1
 8010d40:	e7c3      	b.n	8010cca <_printf_common+0x46>
 8010d42:	18e1      	adds	r1, r4, r3
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	2030      	movs	r0, #48	; 0x30
 8010d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d4c:	4422      	add	r2, r4
 8010d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d56:	3302      	adds	r3, #2
 8010d58:	e7c5      	b.n	8010ce6 <_printf_common+0x62>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	4622      	mov	r2, r4
 8010d5e:	4639      	mov	r1, r7
 8010d60:	4630      	mov	r0, r6
 8010d62:	47c0      	blx	r8
 8010d64:	3001      	adds	r0, #1
 8010d66:	d0e6      	beq.n	8010d36 <_printf_common+0xb2>
 8010d68:	f109 0901 	add.w	r9, r9, #1
 8010d6c:	e7d8      	b.n	8010d20 <_printf_common+0x9c>
	...

08010d70 <_printf_i>:
 8010d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010d78:	460c      	mov	r4, r1
 8010d7a:	7e09      	ldrb	r1, [r1, #24]
 8010d7c:	b085      	sub	sp, #20
 8010d7e:	296e      	cmp	r1, #110	; 0x6e
 8010d80:	4617      	mov	r7, r2
 8010d82:	4606      	mov	r6, r0
 8010d84:	4698      	mov	r8, r3
 8010d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d88:	f000 80b3 	beq.w	8010ef2 <_printf_i+0x182>
 8010d8c:	d822      	bhi.n	8010dd4 <_printf_i+0x64>
 8010d8e:	2963      	cmp	r1, #99	; 0x63
 8010d90:	d036      	beq.n	8010e00 <_printf_i+0x90>
 8010d92:	d80a      	bhi.n	8010daa <_printf_i+0x3a>
 8010d94:	2900      	cmp	r1, #0
 8010d96:	f000 80b9 	beq.w	8010f0c <_printf_i+0x19c>
 8010d9a:	2958      	cmp	r1, #88	; 0x58
 8010d9c:	f000 8083 	beq.w	8010ea6 <_printf_i+0x136>
 8010da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010da4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010da8:	e032      	b.n	8010e10 <_printf_i+0xa0>
 8010daa:	2964      	cmp	r1, #100	; 0x64
 8010dac:	d001      	beq.n	8010db2 <_printf_i+0x42>
 8010dae:	2969      	cmp	r1, #105	; 0x69
 8010db0:	d1f6      	bne.n	8010da0 <_printf_i+0x30>
 8010db2:	6820      	ldr	r0, [r4, #0]
 8010db4:	6813      	ldr	r3, [r2, #0]
 8010db6:	0605      	lsls	r5, r0, #24
 8010db8:	f103 0104 	add.w	r1, r3, #4
 8010dbc:	d52a      	bpl.n	8010e14 <_printf_i+0xa4>
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	6011      	str	r1, [r2, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	da03      	bge.n	8010dce <_printf_i+0x5e>
 8010dc6:	222d      	movs	r2, #45	; 0x2d
 8010dc8:	425b      	negs	r3, r3
 8010dca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010dce:	486f      	ldr	r0, [pc, #444]	; (8010f8c <_printf_i+0x21c>)
 8010dd0:	220a      	movs	r2, #10
 8010dd2:	e039      	b.n	8010e48 <_printf_i+0xd8>
 8010dd4:	2973      	cmp	r1, #115	; 0x73
 8010dd6:	f000 809d 	beq.w	8010f14 <_printf_i+0x1a4>
 8010dda:	d808      	bhi.n	8010dee <_printf_i+0x7e>
 8010ddc:	296f      	cmp	r1, #111	; 0x6f
 8010dde:	d020      	beq.n	8010e22 <_printf_i+0xb2>
 8010de0:	2970      	cmp	r1, #112	; 0x70
 8010de2:	d1dd      	bne.n	8010da0 <_printf_i+0x30>
 8010de4:	6823      	ldr	r3, [r4, #0]
 8010de6:	f043 0320 	orr.w	r3, r3, #32
 8010dea:	6023      	str	r3, [r4, #0]
 8010dec:	e003      	b.n	8010df6 <_printf_i+0x86>
 8010dee:	2975      	cmp	r1, #117	; 0x75
 8010df0:	d017      	beq.n	8010e22 <_printf_i+0xb2>
 8010df2:	2978      	cmp	r1, #120	; 0x78
 8010df4:	d1d4      	bne.n	8010da0 <_printf_i+0x30>
 8010df6:	2378      	movs	r3, #120	; 0x78
 8010df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010dfc:	4864      	ldr	r0, [pc, #400]	; (8010f90 <_printf_i+0x220>)
 8010dfe:	e055      	b.n	8010eac <_printf_i+0x13c>
 8010e00:	6813      	ldr	r3, [r2, #0]
 8010e02:	1d19      	adds	r1, r3, #4
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6011      	str	r1, [r2, #0]
 8010e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e10:	2301      	movs	r3, #1
 8010e12:	e08c      	b.n	8010f2e <_printf_i+0x1be>
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6011      	str	r1, [r2, #0]
 8010e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010e1c:	bf18      	it	ne
 8010e1e:	b21b      	sxthne	r3, r3
 8010e20:	e7cf      	b.n	8010dc2 <_printf_i+0x52>
 8010e22:	6813      	ldr	r3, [r2, #0]
 8010e24:	6825      	ldr	r5, [r4, #0]
 8010e26:	1d18      	adds	r0, r3, #4
 8010e28:	6010      	str	r0, [r2, #0]
 8010e2a:	0628      	lsls	r0, r5, #24
 8010e2c:	d501      	bpl.n	8010e32 <_printf_i+0xc2>
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	e002      	b.n	8010e38 <_printf_i+0xc8>
 8010e32:	0668      	lsls	r0, r5, #25
 8010e34:	d5fb      	bpl.n	8010e2e <_printf_i+0xbe>
 8010e36:	881b      	ldrh	r3, [r3, #0]
 8010e38:	4854      	ldr	r0, [pc, #336]	; (8010f8c <_printf_i+0x21c>)
 8010e3a:	296f      	cmp	r1, #111	; 0x6f
 8010e3c:	bf14      	ite	ne
 8010e3e:	220a      	movne	r2, #10
 8010e40:	2208      	moveq	r2, #8
 8010e42:	2100      	movs	r1, #0
 8010e44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e48:	6865      	ldr	r5, [r4, #4]
 8010e4a:	60a5      	str	r5, [r4, #8]
 8010e4c:	2d00      	cmp	r5, #0
 8010e4e:	f2c0 8095 	blt.w	8010f7c <_printf_i+0x20c>
 8010e52:	6821      	ldr	r1, [r4, #0]
 8010e54:	f021 0104 	bic.w	r1, r1, #4
 8010e58:	6021      	str	r1, [r4, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d13d      	bne.n	8010eda <_printf_i+0x16a>
 8010e5e:	2d00      	cmp	r5, #0
 8010e60:	f040 808e 	bne.w	8010f80 <_printf_i+0x210>
 8010e64:	4665      	mov	r5, ip
 8010e66:	2a08      	cmp	r2, #8
 8010e68:	d10b      	bne.n	8010e82 <_printf_i+0x112>
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	07db      	lsls	r3, r3, #31
 8010e6e:	d508      	bpl.n	8010e82 <_printf_i+0x112>
 8010e70:	6923      	ldr	r3, [r4, #16]
 8010e72:	6862      	ldr	r2, [r4, #4]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	bfde      	ittt	le
 8010e78:	2330      	movle	r3, #48	; 0x30
 8010e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010e7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010e82:	ebac 0305 	sub.w	r3, ip, r5
 8010e86:	6123      	str	r3, [r4, #16]
 8010e88:	f8cd 8000 	str.w	r8, [sp]
 8010e8c:	463b      	mov	r3, r7
 8010e8e:	aa03      	add	r2, sp, #12
 8010e90:	4621      	mov	r1, r4
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ff fef6 	bl	8010c84 <_printf_common>
 8010e98:	3001      	adds	r0, #1
 8010e9a:	d14d      	bne.n	8010f38 <_printf_i+0x1c8>
 8010e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea0:	b005      	add	sp, #20
 8010ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ea6:	4839      	ldr	r0, [pc, #228]	; (8010f8c <_printf_i+0x21c>)
 8010ea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010eac:	6813      	ldr	r3, [r2, #0]
 8010eae:	6821      	ldr	r1, [r4, #0]
 8010eb0:	1d1d      	adds	r5, r3, #4
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6015      	str	r5, [r2, #0]
 8010eb6:	060a      	lsls	r2, r1, #24
 8010eb8:	d50b      	bpl.n	8010ed2 <_printf_i+0x162>
 8010eba:	07ca      	lsls	r2, r1, #31
 8010ebc:	bf44      	itt	mi
 8010ebe:	f041 0120 	orrmi.w	r1, r1, #32
 8010ec2:	6021      	strmi	r1, [r4, #0]
 8010ec4:	b91b      	cbnz	r3, 8010ece <_printf_i+0x15e>
 8010ec6:	6822      	ldr	r2, [r4, #0]
 8010ec8:	f022 0220 	bic.w	r2, r2, #32
 8010ecc:	6022      	str	r2, [r4, #0]
 8010ece:	2210      	movs	r2, #16
 8010ed0:	e7b7      	b.n	8010e42 <_printf_i+0xd2>
 8010ed2:	064d      	lsls	r5, r1, #25
 8010ed4:	bf48      	it	mi
 8010ed6:	b29b      	uxthmi	r3, r3
 8010ed8:	e7ef      	b.n	8010eba <_printf_i+0x14a>
 8010eda:	4665      	mov	r5, ip
 8010edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ee0:	fb02 3311 	mls	r3, r2, r1, r3
 8010ee4:	5cc3      	ldrb	r3, [r0, r3]
 8010ee6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010eea:	460b      	mov	r3, r1
 8010eec:	2900      	cmp	r1, #0
 8010eee:	d1f5      	bne.n	8010edc <_printf_i+0x16c>
 8010ef0:	e7b9      	b.n	8010e66 <_printf_i+0xf6>
 8010ef2:	6813      	ldr	r3, [r2, #0]
 8010ef4:	6825      	ldr	r5, [r4, #0]
 8010ef6:	6961      	ldr	r1, [r4, #20]
 8010ef8:	1d18      	adds	r0, r3, #4
 8010efa:	6010      	str	r0, [r2, #0]
 8010efc:	0628      	lsls	r0, r5, #24
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	d501      	bpl.n	8010f06 <_printf_i+0x196>
 8010f02:	6019      	str	r1, [r3, #0]
 8010f04:	e002      	b.n	8010f0c <_printf_i+0x19c>
 8010f06:	066a      	lsls	r2, r5, #25
 8010f08:	d5fb      	bpl.n	8010f02 <_printf_i+0x192>
 8010f0a:	8019      	strh	r1, [r3, #0]
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	6123      	str	r3, [r4, #16]
 8010f10:	4665      	mov	r5, ip
 8010f12:	e7b9      	b.n	8010e88 <_printf_i+0x118>
 8010f14:	6813      	ldr	r3, [r2, #0]
 8010f16:	1d19      	adds	r1, r3, #4
 8010f18:	6011      	str	r1, [r2, #0]
 8010f1a:	681d      	ldr	r5, [r3, #0]
 8010f1c:	6862      	ldr	r2, [r4, #4]
 8010f1e:	2100      	movs	r1, #0
 8010f20:	4628      	mov	r0, r5
 8010f22:	f7f5 f9d5 	bl	80062d0 <memchr>
 8010f26:	b108      	cbz	r0, 8010f2c <_printf_i+0x1bc>
 8010f28:	1b40      	subs	r0, r0, r5
 8010f2a:	6060      	str	r0, [r4, #4]
 8010f2c:	6863      	ldr	r3, [r4, #4]
 8010f2e:	6123      	str	r3, [r4, #16]
 8010f30:	2300      	movs	r3, #0
 8010f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f36:	e7a7      	b.n	8010e88 <_printf_i+0x118>
 8010f38:	6923      	ldr	r3, [r4, #16]
 8010f3a:	462a      	mov	r2, r5
 8010f3c:	4639      	mov	r1, r7
 8010f3e:	4630      	mov	r0, r6
 8010f40:	47c0      	blx	r8
 8010f42:	3001      	adds	r0, #1
 8010f44:	d0aa      	beq.n	8010e9c <_printf_i+0x12c>
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	079b      	lsls	r3, r3, #30
 8010f4a:	d413      	bmi.n	8010f74 <_printf_i+0x204>
 8010f4c:	68e0      	ldr	r0, [r4, #12]
 8010f4e:	9b03      	ldr	r3, [sp, #12]
 8010f50:	4298      	cmp	r0, r3
 8010f52:	bfb8      	it	lt
 8010f54:	4618      	movlt	r0, r3
 8010f56:	e7a3      	b.n	8010ea0 <_printf_i+0x130>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	464a      	mov	r2, r9
 8010f5c:	4639      	mov	r1, r7
 8010f5e:	4630      	mov	r0, r6
 8010f60:	47c0      	blx	r8
 8010f62:	3001      	adds	r0, #1
 8010f64:	d09a      	beq.n	8010e9c <_printf_i+0x12c>
 8010f66:	3501      	adds	r5, #1
 8010f68:	68e3      	ldr	r3, [r4, #12]
 8010f6a:	9a03      	ldr	r2, [sp, #12]
 8010f6c:	1a9b      	subs	r3, r3, r2
 8010f6e:	42ab      	cmp	r3, r5
 8010f70:	dcf2      	bgt.n	8010f58 <_printf_i+0x1e8>
 8010f72:	e7eb      	b.n	8010f4c <_printf_i+0x1dc>
 8010f74:	2500      	movs	r5, #0
 8010f76:	f104 0919 	add.w	r9, r4, #25
 8010f7a:	e7f5      	b.n	8010f68 <_printf_i+0x1f8>
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d1ac      	bne.n	8010eda <_printf_i+0x16a>
 8010f80:	7803      	ldrb	r3, [r0, #0]
 8010f82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f8a:	e76c      	b.n	8010e66 <_printf_i+0xf6>
 8010f8c:	0814f74e 	.word	0x0814f74e
 8010f90:	0814f75f 	.word	0x0814f75f

08010f94 <_scanf_float>:
 8010f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f98:	469a      	mov	sl, r3
 8010f9a:	688b      	ldr	r3, [r1, #8]
 8010f9c:	4616      	mov	r6, r2
 8010f9e:	1e5a      	subs	r2, r3, #1
 8010fa0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010fa4:	b087      	sub	sp, #28
 8010fa6:	bf83      	ittte	hi
 8010fa8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010fac:	189b      	addhi	r3, r3, r2
 8010fae:	9301      	strhi	r3, [sp, #4]
 8010fb0:	2300      	movls	r3, #0
 8010fb2:	bf86      	itte	hi
 8010fb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010fb8:	608b      	strhi	r3, [r1, #8]
 8010fba:	9301      	strls	r3, [sp, #4]
 8010fbc:	680b      	ldr	r3, [r1, #0]
 8010fbe:	4688      	mov	r8, r1
 8010fc0:	f04f 0b00 	mov.w	fp, #0
 8010fc4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010fc8:	f848 3b1c 	str.w	r3, [r8], #28
 8010fcc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8010fd0:	4607      	mov	r7, r0
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	4645      	mov	r5, r8
 8010fd6:	465a      	mov	r2, fp
 8010fd8:	46d9      	mov	r9, fp
 8010fda:	f8cd b008 	str.w	fp, [sp, #8]
 8010fde:	68a1      	ldr	r1, [r4, #8]
 8010fe0:	b181      	cbz	r1, 8011004 <_scanf_float+0x70>
 8010fe2:	6833      	ldr	r3, [r6, #0]
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	2b49      	cmp	r3, #73	; 0x49
 8010fe8:	d071      	beq.n	80110ce <_scanf_float+0x13a>
 8010fea:	d84d      	bhi.n	8011088 <_scanf_float+0xf4>
 8010fec:	2b39      	cmp	r3, #57	; 0x39
 8010fee:	d840      	bhi.n	8011072 <_scanf_float+0xde>
 8010ff0:	2b31      	cmp	r3, #49	; 0x31
 8010ff2:	f080 8088 	bcs.w	8011106 <_scanf_float+0x172>
 8010ff6:	2b2d      	cmp	r3, #45	; 0x2d
 8010ff8:	f000 8090 	beq.w	801111c <_scanf_float+0x188>
 8010ffc:	d815      	bhi.n	801102a <_scanf_float+0x96>
 8010ffe:	2b2b      	cmp	r3, #43	; 0x2b
 8011000:	f000 808c 	beq.w	801111c <_scanf_float+0x188>
 8011004:	f1b9 0f00 	cmp.w	r9, #0
 8011008:	d003      	beq.n	8011012 <_scanf_float+0x7e>
 801100a:	6823      	ldr	r3, [r4, #0]
 801100c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	3a01      	subs	r2, #1
 8011014:	2a01      	cmp	r2, #1
 8011016:	f200 80ea 	bhi.w	80111ee <_scanf_float+0x25a>
 801101a:	4545      	cmp	r5, r8
 801101c:	f200 80dc 	bhi.w	80111d8 <_scanf_float+0x244>
 8011020:	2601      	movs	r6, #1
 8011022:	4630      	mov	r0, r6
 8011024:	b007      	add	sp, #28
 8011026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102a:	2b2e      	cmp	r3, #46	; 0x2e
 801102c:	f000 809f 	beq.w	801116e <_scanf_float+0x1da>
 8011030:	2b30      	cmp	r3, #48	; 0x30
 8011032:	d1e7      	bne.n	8011004 <_scanf_float+0x70>
 8011034:	6820      	ldr	r0, [r4, #0]
 8011036:	f410 7f80 	tst.w	r0, #256	; 0x100
 801103a:	d064      	beq.n	8011106 <_scanf_float+0x172>
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011042:	6020      	str	r0, [r4, #0]
 8011044:	f109 0901 	add.w	r9, r9, #1
 8011048:	b11b      	cbz	r3, 8011052 <_scanf_float+0xbe>
 801104a:	3b01      	subs	r3, #1
 801104c:	3101      	adds	r1, #1
 801104e:	9301      	str	r3, [sp, #4]
 8011050:	60a1      	str	r1, [r4, #8]
 8011052:	68a3      	ldr	r3, [r4, #8]
 8011054:	3b01      	subs	r3, #1
 8011056:	60a3      	str	r3, [r4, #8]
 8011058:	6923      	ldr	r3, [r4, #16]
 801105a:	3301      	adds	r3, #1
 801105c:	6123      	str	r3, [r4, #16]
 801105e:	6873      	ldr	r3, [r6, #4]
 8011060:	3b01      	subs	r3, #1
 8011062:	2b00      	cmp	r3, #0
 8011064:	6073      	str	r3, [r6, #4]
 8011066:	f340 80ac 	ble.w	80111c2 <_scanf_float+0x22e>
 801106a:	6833      	ldr	r3, [r6, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	6033      	str	r3, [r6, #0]
 8011070:	e7b5      	b.n	8010fde <_scanf_float+0x4a>
 8011072:	2b45      	cmp	r3, #69	; 0x45
 8011074:	f000 8085 	beq.w	8011182 <_scanf_float+0x1ee>
 8011078:	2b46      	cmp	r3, #70	; 0x46
 801107a:	d06a      	beq.n	8011152 <_scanf_float+0x1be>
 801107c:	2b41      	cmp	r3, #65	; 0x41
 801107e:	d1c1      	bne.n	8011004 <_scanf_float+0x70>
 8011080:	2a01      	cmp	r2, #1
 8011082:	d1bf      	bne.n	8011004 <_scanf_float+0x70>
 8011084:	2202      	movs	r2, #2
 8011086:	e046      	b.n	8011116 <_scanf_float+0x182>
 8011088:	2b65      	cmp	r3, #101	; 0x65
 801108a:	d07a      	beq.n	8011182 <_scanf_float+0x1ee>
 801108c:	d818      	bhi.n	80110c0 <_scanf_float+0x12c>
 801108e:	2b54      	cmp	r3, #84	; 0x54
 8011090:	d066      	beq.n	8011160 <_scanf_float+0x1cc>
 8011092:	d811      	bhi.n	80110b8 <_scanf_float+0x124>
 8011094:	2b4e      	cmp	r3, #78	; 0x4e
 8011096:	d1b5      	bne.n	8011004 <_scanf_float+0x70>
 8011098:	2a00      	cmp	r2, #0
 801109a:	d146      	bne.n	801112a <_scanf_float+0x196>
 801109c:	f1b9 0f00 	cmp.w	r9, #0
 80110a0:	d145      	bne.n	801112e <_scanf_float+0x19a>
 80110a2:	6821      	ldr	r1, [r4, #0]
 80110a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80110a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80110ac:	d13f      	bne.n	801112e <_scanf_float+0x19a>
 80110ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80110b2:	6021      	str	r1, [r4, #0]
 80110b4:	2201      	movs	r2, #1
 80110b6:	e02e      	b.n	8011116 <_scanf_float+0x182>
 80110b8:	2b59      	cmp	r3, #89	; 0x59
 80110ba:	d01e      	beq.n	80110fa <_scanf_float+0x166>
 80110bc:	2b61      	cmp	r3, #97	; 0x61
 80110be:	e7de      	b.n	801107e <_scanf_float+0xea>
 80110c0:	2b6e      	cmp	r3, #110	; 0x6e
 80110c2:	d0e9      	beq.n	8011098 <_scanf_float+0x104>
 80110c4:	d815      	bhi.n	80110f2 <_scanf_float+0x15e>
 80110c6:	2b66      	cmp	r3, #102	; 0x66
 80110c8:	d043      	beq.n	8011152 <_scanf_float+0x1be>
 80110ca:	2b69      	cmp	r3, #105	; 0x69
 80110cc:	d19a      	bne.n	8011004 <_scanf_float+0x70>
 80110ce:	f1bb 0f00 	cmp.w	fp, #0
 80110d2:	d138      	bne.n	8011146 <_scanf_float+0x1b2>
 80110d4:	f1b9 0f00 	cmp.w	r9, #0
 80110d8:	d197      	bne.n	801100a <_scanf_float+0x76>
 80110da:	6821      	ldr	r1, [r4, #0]
 80110dc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80110e0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80110e4:	d195      	bne.n	8011012 <_scanf_float+0x7e>
 80110e6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80110ea:	6021      	str	r1, [r4, #0]
 80110ec:	f04f 0b01 	mov.w	fp, #1
 80110f0:	e011      	b.n	8011116 <_scanf_float+0x182>
 80110f2:	2b74      	cmp	r3, #116	; 0x74
 80110f4:	d034      	beq.n	8011160 <_scanf_float+0x1cc>
 80110f6:	2b79      	cmp	r3, #121	; 0x79
 80110f8:	d184      	bne.n	8011004 <_scanf_float+0x70>
 80110fa:	f1bb 0f07 	cmp.w	fp, #7
 80110fe:	d181      	bne.n	8011004 <_scanf_float+0x70>
 8011100:	f04f 0b08 	mov.w	fp, #8
 8011104:	e007      	b.n	8011116 <_scanf_float+0x182>
 8011106:	eb12 0f0b 	cmn.w	r2, fp
 801110a:	f47f af7b 	bne.w	8011004 <_scanf_float+0x70>
 801110e:	6821      	ldr	r1, [r4, #0]
 8011110:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011114:	6021      	str	r1, [r4, #0]
 8011116:	702b      	strb	r3, [r5, #0]
 8011118:	3501      	adds	r5, #1
 801111a:	e79a      	b.n	8011052 <_scanf_float+0xbe>
 801111c:	6821      	ldr	r1, [r4, #0]
 801111e:	0608      	lsls	r0, r1, #24
 8011120:	f57f af70 	bpl.w	8011004 <_scanf_float+0x70>
 8011124:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011128:	e7f4      	b.n	8011114 <_scanf_float+0x180>
 801112a:	2a02      	cmp	r2, #2
 801112c:	d047      	beq.n	80111be <_scanf_float+0x22a>
 801112e:	f1bb 0f01 	cmp.w	fp, #1
 8011132:	d003      	beq.n	801113c <_scanf_float+0x1a8>
 8011134:	f1bb 0f04 	cmp.w	fp, #4
 8011138:	f47f af64 	bne.w	8011004 <_scanf_float+0x70>
 801113c:	f10b 0b01 	add.w	fp, fp, #1
 8011140:	fa5f fb8b 	uxtb.w	fp, fp
 8011144:	e7e7      	b.n	8011116 <_scanf_float+0x182>
 8011146:	f1bb 0f03 	cmp.w	fp, #3
 801114a:	d0f7      	beq.n	801113c <_scanf_float+0x1a8>
 801114c:	f1bb 0f05 	cmp.w	fp, #5
 8011150:	e7f2      	b.n	8011138 <_scanf_float+0x1a4>
 8011152:	f1bb 0f02 	cmp.w	fp, #2
 8011156:	f47f af55 	bne.w	8011004 <_scanf_float+0x70>
 801115a:	f04f 0b03 	mov.w	fp, #3
 801115e:	e7da      	b.n	8011116 <_scanf_float+0x182>
 8011160:	f1bb 0f06 	cmp.w	fp, #6
 8011164:	f47f af4e 	bne.w	8011004 <_scanf_float+0x70>
 8011168:	f04f 0b07 	mov.w	fp, #7
 801116c:	e7d3      	b.n	8011116 <_scanf_float+0x182>
 801116e:	6821      	ldr	r1, [r4, #0]
 8011170:	0588      	lsls	r0, r1, #22
 8011172:	f57f af47 	bpl.w	8011004 <_scanf_float+0x70>
 8011176:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801117a:	6021      	str	r1, [r4, #0]
 801117c:	f8cd 9008 	str.w	r9, [sp, #8]
 8011180:	e7c9      	b.n	8011116 <_scanf_float+0x182>
 8011182:	6821      	ldr	r1, [r4, #0]
 8011184:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011188:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801118c:	d006      	beq.n	801119c <_scanf_float+0x208>
 801118e:	0548      	lsls	r0, r1, #21
 8011190:	f57f af38 	bpl.w	8011004 <_scanf_float+0x70>
 8011194:	f1b9 0f00 	cmp.w	r9, #0
 8011198:	f43f af3b 	beq.w	8011012 <_scanf_float+0x7e>
 801119c:	0588      	lsls	r0, r1, #22
 801119e:	bf58      	it	pl
 80111a0:	9802      	ldrpl	r0, [sp, #8]
 80111a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80111a6:	bf58      	it	pl
 80111a8:	eba9 0000 	subpl.w	r0, r9, r0
 80111ac:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80111b0:	bf58      	it	pl
 80111b2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80111b6:	6021      	str	r1, [r4, #0]
 80111b8:	f04f 0900 	mov.w	r9, #0
 80111bc:	e7ab      	b.n	8011116 <_scanf_float+0x182>
 80111be:	2203      	movs	r2, #3
 80111c0:	e7a9      	b.n	8011116 <_scanf_float+0x182>
 80111c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80111c6:	9205      	str	r2, [sp, #20]
 80111c8:	4631      	mov	r1, r6
 80111ca:	4638      	mov	r0, r7
 80111cc:	4798      	blx	r3
 80111ce:	9a05      	ldr	r2, [sp, #20]
 80111d0:	2800      	cmp	r0, #0
 80111d2:	f43f af04 	beq.w	8010fde <_scanf_float+0x4a>
 80111d6:	e715      	b.n	8011004 <_scanf_float+0x70>
 80111d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80111dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80111e0:	4632      	mov	r2, r6
 80111e2:	4638      	mov	r0, r7
 80111e4:	4798      	blx	r3
 80111e6:	6923      	ldr	r3, [r4, #16]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	6123      	str	r3, [r4, #16]
 80111ec:	e715      	b.n	801101a <_scanf_float+0x86>
 80111ee:	f10b 33ff 	add.w	r3, fp, #4294967295
 80111f2:	2b06      	cmp	r3, #6
 80111f4:	d80a      	bhi.n	801120c <_scanf_float+0x278>
 80111f6:	f1bb 0f02 	cmp.w	fp, #2
 80111fa:	d968      	bls.n	80112ce <_scanf_float+0x33a>
 80111fc:	f1ab 0b03 	sub.w	fp, fp, #3
 8011200:	fa5f fb8b 	uxtb.w	fp, fp
 8011204:	eba5 0b0b 	sub.w	fp, r5, fp
 8011208:	455d      	cmp	r5, fp
 801120a:	d14b      	bne.n	80112a4 <_scanf_float+0x310>
 801120c:	6823      	ldr	r3, [r4, #0]
 801120e:	05da      	lsls	r2, r3, #23
 8011210:	d51f      	bpl.n	8011252 <_scanf_float+0x2be>
 8011212:	055b      	lsls	r3, r3, #21
 8011214:	d468      	bmi.n	80112e8 <_scanf_float+0x354>
 8011216:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	2965      	cmp	r1, #101	; 0x65
 801121e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011222:	f105 3bff 	add.w	fp, r5, #4294967295
 8011226:	6123      	str	r3, [r4, #16]
 8011228:	d00d      	beq.n	8011246 <_scanf_float+0x2b2>
 801122a:	2945      	cmp	r1, #69	; 0x45
 801122c:	d00b      	beq.n	8011246 <_scanf_float+0x2b2>
 801122e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011232:	4632      	mov	r2, r6
 8011234:	4638      	mov	r0, r7
 8011236:	4798      	blx	r3
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801123e:	3b01      	subs	r3, #1
 8011240:	f1a5 0b02 	sub.w	fp, r5, #2
 8011244:	6123      	str	r3, [r4, #16]
 8011246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801124a:	4632      	mov	r2, r6
 801124c:	4638      	mov	r0, r7
 801124e:	4798      	blx	r3
 8011250:	465d      	mov	r5, fp
 8011252:	6826      	ldr	r6, [r4, #0]
 8011254:	f016 0610 	ands.w	r6, r6, #16
 8011258:	d17a      	bne.n	8011350 <_scanf_float+0x3bc>
 801125a:	702e      	strb	r6, [r5, #0]
 801125c:	6823      	ldr	r3, [r4, #0]
 801125e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011266:	d142      	bne.n	80112ee <_scanf_float+0x35a>
 8011268:	9b02      	ldr	r3, [sp, #8]
 801126a:	eba9 0303 	sub.w	r3, r9, r3
 801126e:	425a      	negs	r2, r3
 8011270:	2b00      	cmp	r3, #0
 8011272:	d149      	bne.n	8011308 <_scanf_float+0x374>
 8011274:	2200      	movs	r2, #0
 8011276:	4641      	mov	r1, r8
 8011278:	4638      	mov	r0, r7
 801127a:	f000 ff21 	bl	80120c0 <_strtod_r>
 801127e:	6825      	ldr	r5, [r4, #0]
 8011280:	f8da 3000 	ldr.w	r3, [sl]
 8011284:	f015 0f02 	tst.w	r5, #2
 8011288:	f103 0204 	add.w	r2, r3, #4
 801128c:	ec59 8b10 	vmov	r8, r9, d0
 8011290:	f8ca 2000 	str.w	r2, [sl]
 8011294:	d043      	beq.n	801131e <_scanf_float+0x38a>
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	e9c3 8900 	strd	r8, r9, [r3]
 801129c:	68e3      	ldr	r3, [r4, #12]
 801129e:	3301      	adds	r3, #1
 80112a0:	60e3      	str	r3, [r4, #12]
 80112a2:	e6be      	b.n	8011022 <_scanf_float+0x8e>
 80112a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80112ac:	4632      	mov	r2, r6
 80112ae:	4638      	mov	r0, r7
 80112b0:	4798      	blx	r3
 80112b2:	6923      	ldr	r3, [r4, #16]
 80112b4:	3b01      	subs	r3, #1
 80112b6:	6123      	str	r3, [r4, #16]
 80112b8:	e7a6      	b.n	8011208 <_scanf_float+0x274>
 80112ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112be:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80112c2:	4632      	mov	r2, r6
 80112c4:	4638      	mov	r0, r7
 80112c6:	4798      	blx	r3
 80112c8:	6923      	ldr	r3, [r4, #16]
 80112ca:	3b01      	subs	r3, #1
 80112cc:	6123      	str	r3, [r4, #16]
 80112ce:	4545      	cmp	r5, r8
 80112d0:	d8f3      	bhi.n	80112ba <_scanf_float+0x326>
 80112d2:	e6a5      	b.n	8011020 <_scanf_float+0x8c>
 80112d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80112dc:	4632      	mov	r2, r6
 80112de:	4638      	mov	r0, r7
 80112e0:	4798      	blx	r3
 80112e2:	6923      	ldr	r3, [r4, #16]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	6123      	str	r3, [r4, #16]
 80112e8:	4545      	cmp	r5, r8
 80112ea:	d8f3      	bhi.n	80112d4 <_scanf_float+0x340>
 80112ec:	e698      	b.n	8011020 <_scanf_float+0x8c>
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d0bf      	beq.n	8011274 <_scanf_float+0x2e0>
 80112f4:	9904      	ldr	r1, [sp, #16]
 80112f6:	230a      	movs	r3, #10
 80112f8:	4632      	mov	r2, r6
 80112fa:	3101      	adds	r1, #1
 80112fc:	4638      	mov	r0, r7
 80112fe:	f000 ff6b 	bl	80121d8 <_strtol_r>
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	9d04      	ldr	r5, [sp, #16]
 8011306:	1ac2      	subs	r2, r0, r3
 8011308:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801130c:	429d      	cmp	r5, r3
 801130e:	bf28      	it	cs
 8011310:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011314:	490f      	ldr	r1, [pc, #60]	; (8011354 <_scanf_float+0x3c0>)
 8011316:	4628      	mov	r0, r5
 8011318:	f000 f8a0 	bl	801145c <siprintf>
 801131c:	e7aa      	b.n	8011274 <_scanf_float+0x2e0>
 801131e:	f015 0504 	ands.w	r5, r5, #4
 8011322:	d1b8      	bne.n	8011296 <_scanf_float+0x302>
 8011324:	681f      	ldr	r7, [r3, #0]
 8011326:	ee10 2a10 	vmov	r2, s0
 801132a:	464b      	mov	r3, r9
 801132c:	ee10 0a10 	vmov	r0, s0
 8011330:	4649      	mov	r1, r9
 8011332:	f7f5 fc73 	bl	8006c1c <__aeabi_dcmpun>
 8011336:	b128      	cbz	r0, 8011344 <_scanf_float+0x3b0>
 8011338:	4628      	mov	r0, r5
 801133a:	f000 f889 	bl	8011450 <nanf>
 801133e:	ed87 0a00 	vstr	s0, [r7]
 8011342:	e7ab      	b.n	801129c <_scanf_float+0x308>
 8011344:	4640      	mov	r0, r8
 8011346:	4649      	mov	r1, r9
 8011348:	f7f5 fcc6 	bl	8006cd8 <__aeabi_d2f>
 801134c:	6038      	str	r0, [r7, #0]
 801134e:	e7a5      	b.n	801129c <_scanf_float+0x308>
 8011350:	2600      	movs	r6, #0
 8011352:	e666      	b.n	8011022 <_scanf_float+0x8e>
 8011354:	0814f770 	.word	0x0814f770

08011358 <iprintf>:
 8011358:	b40f      	push	{r0, r1, r2, r3}
 801135a:	4b0a      	ldr	r3, [pc, #40]	; (8011384 <iprintf+0x2c>)
 801135c:	b513      	push	{r0, r1, r4, lr}
 801135e:	681c      	ldr	r4, [r3, #0]
 8011360:	b124      	cbz	r4, 801136c <iprintf+0x14>
 8011362:	69a3      	ldr	r3, [r4, #24]
 8011364:	b913      	cbnz	r3, 801136c <iprintf+0x14>
 8011366:	4620      	mov	r0, r4
 8011368:	f001 ff3e 	bl	80131e8 <__sinit>
 801136c:	ab05      	add	r3, sp, #20
 801136e:	9a04      	ldr	r2, [sp, #16]
 8011370:	68a1      	ldr	r1, [r4, #8]
 8011372:	9301      	str	r3, [sp, #4]
 8011374:	4620      	mov	r0, r4
 8011376:	f003 f9ab 	bl	80146d0 <_vfiprintf_r>
 801137a:	b002      	add	sp, #8
 801137c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011380:	b004      	add	sp, #16
 8011382:	4770      	bx	lr
 8011384:	200008c8 	.word	0x200008c8

08011388 <_puts_r>:
 8011388:	b570      	push	{r4, r5, r6, lr}
 801138a:	460e      	mov	r6, r1
 801138c:	4605      	mov	r5, r0
 801138e:	b118      	cbz	r0, 8011398 <_puts_r+0x10>
 8011390:	6983      	ldr	r3, [r0, #24]
 8011392:	b90b      	cbnz	r3, 8011398 <_puts_r+0x10>
 8011394:	f001 ff28 	bl	80131e8 <__sinit>
 8011398:	69ab      	ldr	r3, [r5, #24]
 801139a:	68ac      	ldr	r4, [r5, #8]
 801139c:	b913      	cbnz	r3, 80113a4 <_puts_r+0x1c>
 801139e:	4628      	mov	r0, r5
 80113a0:	f001 ff22 	bl	80131e8 <__sinit>
 80113a4:	4b23      	ldr	r3, [pc, #140]	; (8011434 <_puts_r+0xac>)
 80113a6:	429c      	cmp	r4, r3
 80113a8:	d117      	bne.n	80113da <_puts_r+0x52>
 80113aa:	686c      	ldr	r4, [r5, #4]
 80113ac:	89a3      	ldrh	r3, [r4, #12]
 80113ae:	071b      	lsls	r3, r3, #28
 80113b0:	d51d      	bpl.n	80113ee <_puts_r+0x66>
 80113b2:	6923      	ldr	r3, [r4, #16]
 80113b4:	b1db      	cbz	r3, 80113ee <_puts_r+0x66>
 80113b6:	3e01      	subs	r6, #1
 80113b8:	68a3      	ldr	r3, [r4, #8]
 80113ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80113be:	3b01      	subs	r3, #1
 80113c0:	60a3      	str	r3, [r4, #8]
 80113c2:	b9e9      	cbnz	r1, 8011400 <_puts_r+0x78>
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	da2e      	bge.n	8011426 <_puts_r+0x9e>
 80113c8:	4622      	mov	r2, r4
 80113ca:	210a      	movs	r1, #10
 80113cc:	4628      	mov	r0, r5
 80113ce:	f000 ff15 	bl	80121fc <__swbuf_r>
 80113d2:	3001      	adds	r0, #1
 80113d4:	d011      	beq.n	80113fa <_puts_r+0x72>
 80113d6:	200a      	movs	r0, #10
 80113d8:	e011      	b.n	80113fe <_puts_r+0x76>
 80113da:	4b17      	ldr	r3, [pc, #92]	; (8011438 <_puts_r+0xb0>)
 80113dc:	429c      	cmp	r4, r3
 80113de:	d101      	bne.n	80113e4 <_puts_r+0x5c>
 80113e0:	68ac      	ldr	r4, [r5, #8]
 80113e2:	e7e3      	b.n	80113ac <_puts_r+0x24>
 80113e4:	4b15      	ldr	r3, [pc, #84]	; (801143c <_puts_r+0xb4>)
 80113e6:	429c      	cmp	r4, r3
 80113e8:	bf08      	it	eq
 80113ea:	68ec      	ldreq	r4, [r5, #12]
 80113ec:	e7de      	b.n	80113ac <_puts_r+0x24>
 80113ee:	4621      	mov	r1, r4
 80113f0:	4628      	mov	r0, r5
 80113f2:	f000 ff55 	bl	80122a0 <__swsetup_r>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d0dd      	beq.n	80113b6 <_puts_r+0x2e>
 80113fa:	f04f 30ff 	mov.w	r0, #4294967295
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	2b00      	cmp	r3, #0
 8011402:	da04      	bge.n	801140e <_puts_r+0x86>
 8011404:	69a2      	ldr	r2, [r4, #24]
 8011406:	429a      	cmp	r2, r3
 8011408:	dc06      	bgt.n	8011418 <_puts_r+0x90>
 801140a:	290a      	cmp	r1, #10
 801140c:	d004      	beq.n	8011418 <_puts_r+0x90>
 801140e:	6823      	ldr	r3, [r4, #0]
 8011410:	1c5a      	adds	r2, r3, #1
 8011412:	6022      	str	r2, [r4, #0]
 8011414:	7019      	strb	r1, [r3, #0]
 8011416:	e7cf      	b.n	80113b8 <_puts_r+0x30>
 8011418:	4622      	mov	r2, r4
 801141a:	4628      	mov	r0, r5
 801141c:	f000 feee 	bl	80121fc <__swbuf_r>
 8011420:	3001      	adds	r0, #1
 8011422:	d1c9      	bne.n	80113b8 <_puts_r+0x30>
 8011424:	e7e9      	b.n	80113fa <_puts_r+0x72>
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	200a      	movs	r0, #10
 801142a:	1c5a      	adds	r2, r3, #1
 801142c:	6022      	str	r2, [r4, #0]
 801142e:	7018      	strb	r0, [r3, #0]
 8011430:	e7e5      	b.n	80113fe <_puts_r+0x76>
 8011432:	bf00      	nop
 8011434:	0814f7f8 	.word	0x0814f7f8
 8011438:	0814f818 	.word	0x0814f818
 801143c:	0814f7d8 	.word	0x0814f7d8

08011440 <puts>:
 8011440:	4b02      	ldr	r3, [pc, #8]	; (801144c <puts+0xc>)
 8011442:	4601      	mov	r1, r0
 8011444:	6818      	ldr	r0, [r3, #0]
 8011446:	f7ff bf9f 	b.w	8011388 <_puts_r>
 801144a:	bf00      	nop
 801144c:	200008c8 	.word	0x200008c8

08011450 <nanf>:
 8011450:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011458 <nanf+0x8>
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	7fc00000 	.word	0x7fc00000

0801145c <siprintf>:
 801145c:	b40e      	push	{r1, r2, r3}
 801145e:	b500      	push	{lr}
 8011460:	b09c      	sub	sp, #112	; 0x70
 8011462:	ab1d      	add	r3, sp, #116	; 0x74
 8011464:	9002      	str	r0, [sp, #8]
 8011466:	9006      	str	r0, [sp, #24]
 8011468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801146c:	4809      	ldr	r0, [pc, #36]	; (8011494 <siprintf+0x38>)
 801146e:	9107      	str	r1, [sp, #28]
 8011470:	9104      	str	r1, [sp, #16]
 8011472:	4909      	ldr	r1, [pc, #36]	; (8011498 <siprintf+0x3c>)
 8011474:	f853 2b04 	ldr.w	r2, [r3], #4
 8011478:	9105      	str	r1, [sp, #20]
 801147a:	6800      	ldr	r0, [r0, #0]
 801147c:	9301      	str	r3, [sp, #4]
 801147e:	a902      	add	r1, sp, #8
 8011480:	f003 f804 	bl	801448c <_svfiprintf_r>
 8011484:	9b02      	ldr	r3, [sp, #8]
 8011486:	2200      	movs	r2, #0
 8011488:	701a      	strb	r2, [r3, #0]
 801148a:	b01c      	add	sp, #112	; 0x70
 801148c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011490:	b003      	add	sp, #12
 8011492:	4770      	bx	lr
 8011494:	200008c8 	.word	0x200008c8
 8011498:	ffff0208 	.word	0xffff0208

0801149c <sulp>:
 801149c:	b570      	push	{r4, r5, r6, lr}
 801149e:	4604      	mov	r4, r0
 80114a0:	460d      	mov	r5, r1
 80114a2:	ec45 4b10 	vmov	d0, r4, r5
 80114a6:	4616      	mov	r6, r2
 80114a8:	f002 fdac 	bl	8014004 <__ulp>
 80114ac:	ec51 0b10 	vmov	r0, r1, d0
 80114b0:	b17e      	cbz	r6, 80114d2 <sulp+0x36>
 80114b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80114b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	dd09      	ble.n	80114d2 <sulp+0x36>
 80114be:	051b      	lsls	r3, r3, #20
 80114c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80114c4:	2400      	movs	r4, #0
 80114c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80114ca:	4622      	mov	r2, r4
 80114cc:	462b      	mov	r3, r5
 80114ce:	f7f5 f90b 	bl	80066e8 <__aeabi_dmul>
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	0000      	movs	r0, r0
	...

080114d8 <_strtod_l>:
 80114d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	461f      	mov	r7, r3
 80114de:	b0a1      	sub	sp, #132	; 0x84
 80114e0:	2300      	movs	r3, #0
 80114e2:	4681      	mov	r9, r0
 80114e4:	4638      	mov	r0, r7
 80114e6:	460e      	mov	r6, r1
 80114e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80114ea:	931c      	str	r3, [sp, #112]	; 0x70
 80114ec:	f002 fa2f 	bl	801394e <__localeconv_l>
 80114f0:	4680      	mov	r8, r0
 80114f2:	6800      	ldr	r0, [r0, #0]
 80114f4:	f7f4 fedd 	bl	80062b2 <strlen>
 80114f8:	f04f 0a00 	mov.w	sl, #0
 80114fc:	4604      	mov	r4, r0
 80114fe:	f04f 0b00 	mov.w	fp, #0
 8011502:	961b      	str	r6, [sp, #108]	; 0x6c
 8011504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011506:	781a      	ldrb	r2, [r3, #0]
 8011508:	2a0d      	cmp	r2, #13
 801150a:	d832      	bhi.n	8011572 <_strtod_l+0x9a>
 801150c:	2a09      	cmp	r2, #9
 801150e:	d236      	bcs.n	801157e <_strtod_l+0xa6>
 8011510:	2a00      	cmp	r2, #0
 8011512:	d03e      	beq.n	8011592 <_strtod_l+0xba>
 8011514:	2300      	movs	r3, #0
 8011516:	930d      	str	r3, [sp, #52]	; 0x34
 8011518:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801151a:	782b      	ldrb	r3, [r5, #0]
 801151c:	2b30      	cmp	r3, #48	; 0x30
 801151e:	f040 80ac 	bne.w	801167a <_strtod_l+0x1a2>
 8011522:	786b      	ldrb	r3, [r5, #1]
 8011524:	2b58      	cmp	r3, #88	; 0x58
 8011526:	d001      	beq.n	801152c <_strtod_l+0x54>
 8011528:	2b78      	cmp	r3, #120	; 0x78
 801152a:	d167      	bne.n	80115fc <_strtod_l+0x124>
 801152c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	ab1c      	add	r3, sp, #112	; 0x70
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	9702      	str	r7, [sp, #8]
 8011536:	ab1d      	add	r3, sp, #116	; 0x74
 8011538:	4a88      	ldr	r2, [pc, #544]	; (801175c <_strtod_l+0x284>)
 801153a:	a91b      	add	r1, sp, #108	; 0x6c
 801153c:	4648      	mov	r0, r9
 801153e:	f001 ff2c 	bl	801339a <__gethex>
 8011542:	f010 0407 	ands.w	r4, r0, #7
 8011546:	4606      	mov	r6, r0
 8011548:	d005      	beq.n	8011556 <_strtod_l+0x7e>
 801154a:	2c06      	cmp	r4, #6
 801154c:	d12b      	bne.n	80115a6 <_strtod_l+0xce>
 801154e:	3501      	adds	r5, #1
 8011550:	2300      	movs	r3, #0
 8011552:	951b      	str	r5, [sp, #108]	; 0x6c
 8011554:	930d      	str	r3, [sp, #52]	; 0x34
 8011556:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011558:	2b00      	cmp	r3, #0
 801155a:	f040 859a 	bne.w	8012092 <_strtod_l+0xbba>
 801155e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011560:	b1e3      	cbz	r3, 801159c <_strtod_l+0xc4>
 8011562:	4652      	mov	r2, sl
 8011564:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011568:	ec43 2b10 	vmov	d0, r2, r3
 801156c:	b021      	add	sp, #132	; 0x84
 801156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011572:	2a2b      	cmp	r2, #43	; 0x2b
 8011574:	d015      	beq.n	80115a2 <_strtod_l+0xca>
 8011576:	2a2d      	cmp	r2, #45	; 0x2d
 8011578:	d004      	beq.n	8011584 <_strtod_l+0xac>
 801157a:	2a20      	cmp	r2, #32
 801157c:	d1ca      	bne.n	8011514 <_strtod_l+0x3c>
 801157e:	3301      	adds	r3, #1
 8011580:	931b      	str	r3, [sp, #108]	; 0x6c
 8011582:	e7bf      	b.n	8011504 <_strtod_l+0x2c>
 8011584:	2201      	movs	r2, #1
 8011586:	920d      	str	r2, [sp, #52]	; 0x34
 8011588:	1c5a      	adds	r2, r3, #1
 801158a:	921b      	str	r2, [sp, #108]	; 0x6c
 801158c:	785b      	ldrb	r3, [r3, #1]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1c2      	bne.n	8011518 <_strtod_l+0x40>
 8011592:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011594:	961b      	str	r6, [sp, #108]	; 0x6c
 8011596:	2b00      	cmp	r3, #0
 8011598:	f040 8579 	bne.w	801208e <_strtod_l+0xbb6>
 801159c:	4652      	mov	r2, sl
 801159e:	465b      	mov	r3, fp
 80115a0:	e7e2      	b.n	8011568 <_strtod_l+0x90>
 80115a2:	2200      	movs	r2, #0
 80115a4:	e7ef      	b.n	8011586 <_strtod_l+0xae>
 80115a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80115a8:	b13a      	cbz	r2, 80115ba <_strtod_l+0xe2>
 80115aa:	2135      	movs	r1, #53	; 0x35
 80115ac:	a81e      	add	r0, sp, #120	; 0x78
 80115ae:	f002 fe21 	bl	80141f4 <__copybits>
 80115b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80115b4:	4648      	mov	r0, r9
 80115b6:	f002 fa8d 	bl	8013ad4 <_Bfree>
 80115ba:	3c01      	subs	r4, #1
 80115bc:	2c04      	cmp	r4, #4
 80115be:	d806      	bhi.n	80115ce <_strtod_l+0xf6>
 80115c0:	e8df f004 	tbb	[pc, r4]
 80115c4:	1714030a 	.word	0x1714030a
 80115c8:	0a          	.byte	0x0a
 80115c9:	00          	.byte	0x00
 80115ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80115ce:	0730      	lsls	r0, r6, #28
 80115d0:	d5c1      	bpl.n	8011556 <_strtod_l+0x7e>
 80115d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80115d6:	e7be      	b.n	8011556 <_strtod_l+0x7e>
 80115d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80115dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80115de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80115e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80115e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80115ea:	e7f0      	b.n	80115ce <_strtod_l+0xf6>
 80115ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011760 <_strtod_l+0x288>
 80115f0:	e7ed      	b.n	80115ce <_strtod_l+0xf6>
 80115f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80115f6:	f04f 3aff 	mov.w	sl, #4294967295
 80115fa:	e7e8      	b.n	80115ce <_strtod_l+0xf6>
 80115fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80115fe:	1c5a      	adds	r2, r3, #1
 8011600:	921b      	str	r2, [sp, #108]	; 0x6c
 8011602:	785b      	ldrb	r3, [r3, #1]
 8011604:	2b30      	cmp	r3, #48	; 0x30
 8011606:	d0f9      	beq.n	80115fc <_strtod_l+0x124>
 8011608:	2b00      	cmp	r3, #0
 801160a:	d0a4      	beq.n	8011556 <_strtod_l+0x7e>
 801160c:	2301      	movs	r3, #1
 801160e:	2500      	movs	r5, #0
 8011610:	9306      	str	r3, [sp, #24]
 8011612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011614:	9308      	str	r3, [sp, #32]
 8011616:	9507      	str	r5, [sp, #28]
 8011618:	9505      	str	r5, [sp, #20]
 801161a:	220a      	movs	r2, #10
 801161c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801161e:	7807      	ldrb	r7, [r0, #0]
 8011620:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011624:	b2d9      	uxtb	r1, r3
 8011626:	2909      	cmp	r1, #9
 8011628:	d929      	bls.n	801167e <_strtod_l+0x1a6>
 801162a:	4622      	mov	r2, r4
 801162c:	f8d8 1000 	ldr.w	r1, [r8]
 8011630:	f003 f9b7 	bl	80149a2 <strncmp>
 8011634:	2800      	cmp	r0, #0
 8011636:	d031      	beq.n	801169c <_strtod_l+0x1c4>
 8011638:	2000      	movs	r0, #0
 801163a:	9c05      	ldr	r4, [sp, #20]
 801163c:	9004      	str	r0, [sp, #16]
 801163e:	463b      	mov	r3, r7
 8011640:	4602      	mov	r2, r0
 8011642:	2b65      	cmp	r3, #101	; 0x65
 8011644:	d001      	beq.n	801164a <_strtod_l+0x172>
 8011646:	2b45      	cmp	r3, #69	; 0x45
 8011648:	d114      	bne.n	8011674 <_strtod_l+0x19c>
 801164a:	b924      	cbnz	r4, 8011656 <_strtod_l+0x17e>
 801164c:	b910      	cbnz	r0, 8011654 <_strtod_l+0x17c>
 801164e:	9b06      	ldr	r3, [sp, #24]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d09e      	beq.n	8011592 <_strtod_l+0xba>
 8011654:	2400      	movs	r4, #0
 8011656:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011658:	1c73      	adds	r3, r6, #1
 801165a:	931b      	str	r3, [sp, #108]	; 0x6c
 801165c:	7873      	ldrb	r3, [r6, #1]
 801165e:	2b2b      	cmp	r3, #43	; 0x2b
 8011660:	d078      	beq.n	8011754 <_strtod_l+0x27c>
 8011662:	2b2d      	cmp	r3, #45	; 0x2d
 8011664:	d070      	beq.n	8011748 <_strtod_l+0x270>
 8011666:	f04f 0c00 	mov.w	ip, #0
 801166a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801166e:	2f09      	cmp	r7, #9
 8011670:	d97c      	bls.n	801176c <_strtod_l+0x294>
 8011672:	961b      	str	r6, [sp, #108]	; 0x6c
 8011674:	f04f 0e00 	mov.w	lr, #0
 8011678:	e09a      	b.n	80117b0 <_strtod_l+0x2d8>
 801167a:	2300      	movs	r3, #0
 801167c:	e7c7      	b.n	801160e <_strtod_l+0x136>
 801167e:	9905      	ldr	r1, [sp, #20]
 8011680:	2908      	cmp	r1, #8
 8011682:	bfdd      	ittte	le
 8011684:	9907      	ldrle	r1, [sp, #28]
 8011686:	fb02 3301 	mlale	r3, r2, r1, r3
 801168a:	9307      	strle	r3, [sp, #28]
 801168c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011690:	9b05      	ldr	r3, [sp, #20]
 8011692:	3001      	adds	r0, #1
 8011694:	3301      	adds	r3, #1
 8011696:	9305      	str	r3, [sp, #20]
 8011698:	901b      	str	r0, [sp, #108]	; 0x6c
 801169a:	e7bf      	b.n	801161c <_strtod_l+0x144>
 801169c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801169e:	191a      	adds	r2, r3, r4
 80116a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80116a2:	9a05      	ldr	r2, [sp, #20]
 80116a4:	5d1b      	ldrb	r3, [r3, r4]
 80116a6:	2a00      	cmp	r2, #0
 80116a8:	d037      	beq.n	801171a <_strtod_l+0x242>
 80116aa:	9c05      	ldr	r4, [sp, #20]
 80116ac:	4602      	mov	r2, r0
 80116ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80116b2:	2909      	cmp	r1, #9
 80116b4:	d913      	bls.n	80116de <_strtod_l+0x206>
 80116b6:	2101      	movs	r1, #1
 80116b8:	9104      	str	r1, [sp, #16]
 80116ba:	e7c2      	b.n	8011642 <_strtod_l+0x16a>
 80116bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80116c2:	785b      	ldrb	r3, [r3, #1]
 80116c4:	3001      	adds	r0, #1
 80116c6:	2b30      	cmp	r3, #48	; 0x30
 80116c8:	d0f8      	beq.n	80116bc <_strtod_l+0x1e4>
 80116ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80116ce:	2a08      	cmp	r2, #8
 80116d0:	f200 84e4 	bhi.w	801209c <_strtod_l+0xbc4>
 80116d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80116d6:	9208      	str	r2, [sp, #32]
 80116d8:	4602      	mov	r2, r0
 80116da:	2000      	movs	r0, #0
 80116dc:	4604      	mov	r4, r0
 80116de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80116e2:	f100 0101 	add.w	r1, r0, #1
 80116e6:	d012      	beq.n	801170e <_strtod_l+0x236>
 80116e8:	440a      	add	r2, r1
 80116ea:	eb00 0c04 	add.w	ip, r0, r4
 80116ee:	4621      	mov	r1, r4
 80116f0:	270a      	movs	r7, #10
 80116f2:	458c      	cmp	ip, r1
 80116f4:	d113      	bne.n	801171e <_strtod_l+0x246>
 80116f6:	1821      	adds	r1, r4, r0
 80116f8:	2908      	cmp	r1, #8
 80116fa:	f104 0401 	add.w	r4, r4, #1
 80116fe:	4404      	add	r4, r0
 8011700:	dc19      	bgt.n	8011736 <_strtod_l+0x25e>
 8011702:	9b07      	ldr	r3, [sp, #28]
 8011704:	210a      	movs	r1, #10
 8011706:	fb01 e303 	mla	r3, r1, r3, lr
 801170a:	9307      	str	r3, [sp, #28]
 801170c:	2100      	movs	r1, #0
 801170e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011710:	1c58      	adds	r0, r3, #1
 8011712:	901b      	str	r0, [sp, #108]	; 0x6c
 8011714:	785b      	ldrb	r3, [r3, #1]
 8011716:	4608      	mov	r0, r1
 8011718:	e7c9      	b.n	80116ae <_strtod_l+0x1d6>
 801171a:	9805      	ldr	r0, [sp, #20]
 801171c:	e7d3      	b.n	80116c6 <_strtod_l+0x1ee>
 801171e:	2908      	cmp	r1, #8
 8011720:	f101 0101 	add.w	r1, r1, #1
 8011724:	dc03      	bgt.n	801172e <_strtod_l+0x256>
 8011726:	9b07      	ldr	r3, [sp, #28]
 8011728:	437b      	muls	r3, r7
 801172a:	9307      	str	r3, [sp, #28]
 801172c:	e7e1      	b.n	80116f2 <_strtod_l+0x21a>
 801172e:	2910      	cmp	r1, #16
 8011730:	bfd8      	it	le
 8011732:	437d      	mulle	r5, r7
 8011734:	e7dd      	b.n	80116f2 <_strtod_l+0x21a>
 8011736:	2c10      	cmp	r4, #16
 8011738:	bfdc      	itt	le
 801173a:	210a      	movle	r1, #10
 801173c:	fb01 e505 	mlale	r5, r1, r5, lr
 8011740:	e7e4      	b.n	801170c <_strtod_l+0x234>
 8011742:	2301      	movs	r3, #1
 8011744:	9304      	str	r3, [sp, #16]
 8011746:	e781      	b.n	801164c <_strtod_l+0x174>
 8011748:	f04f 0c01 	mov.w	ip, #1
 801174c:	1cb3      	adds	r3, r6, #2
 801174e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011750:	78b3      	ldrb	r3, [r6, #2]
 8011752:	e78a      	b.n	801166a <_strtod_l+0x192>
 8011754:	f04f 0c00 	mov.w	ip, #0
 8011758:	e7f8      	b.n	801174c <_strtod_l+0x274>
 801175a:	bf00      	nop
 801175c:	0814f778 	.word	0x0814f778
 8011760:	7ff00000 	.word	0x7ff00000
 8011764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011766:	1c5f      	adds	r7, r3, #1
 8011768:	971b      	str	r7, [sp, #108]	; 0x6c
 801176a:	785b      	ldrb	r3, [r3, #1]
 801176c:	2b30      	cmp	r3, #48	; 0x30
 801176e:	d0f9      	beq.n	8011764 <_strtod_l+0x28c>
 8011770:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011774:	2f08      	cmp	r7, #8
 8011776:	f63f af7d 	bhi.w	8011674 <_strtod_l+0x19c>
 801177a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801177e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011780:	930a      	str	r3, [sp, #40]	; 0x28
 8011782:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011784:	1c5f      	adds	r7, r3, #1
 8011786:	971b      	str	r7, [sp, #108]	; 0x6c
 8011788:	785b      	ldrb	r3, [r3, #1]
 801178a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801178e:	f1b8 0f09 	cmp.w	r8, #9
 8011792:	d937      	bls.n	8011804 <_strtod_l+0x32c>
 8011794:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011796:	1a7f      	subs	r7, r7, r1
 8011798:	2f08      	cmp	r7, #8
 801179a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801179e:	dc37      	bgt.n	8011810 <_strtod_l+0x338>
 80117a0:	45be      	cmp	lr, r7
 80117a2:	bfa8      	it	ge
 80117a4:	46be      	movge	lr, r7
 80117a6:	f1bc 0f00 	cmp.w	ip, #0
 80117aa:	d001      	beq.n	80117b0 <_strtod_l+0x2d8>
 80117ac:	f1ce 0e00 	rsb	lr, lr, #0
 80117b0:	2c00      	cmp	r4, #0
 80117b2:	d151      	bne.n	8011858 <_strtod_l+0x380>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f47f aece 	bne.w	8011556 <_strtod_l+0x7e>
 80117ba:	9a06      	ldr	r2, [sp, #24]
 80117bc:	2a00      	cmp	r2, #0
 80117be:	f47f aeca 	bne.w	8011556 <_strtod_l+0x7e>
 80117c2:	9a04      	ldr	r2, [sp, #16]
 80117c4:	2a00      	cmp	r2, #0
 80117c6:	f47f aee4 	bne.w	8011592 <_strtod_l+0xba>
 80117ca:	2b4e      	cmp	r3, #78	; 0x4e
 80117cc:	d027      	beq.n	801181e <_strtod_l+0x346>
 80117ce:	dc21      	bgt.n	8011814 <_strtod_l+0x33c>
 80117d0:	2b49      	cmp	r3, #73	; 0x49
 80117d2:	f47f aede 	bne.w	8011592 <_strtod_l+0xba>
 80117d6:	49a0      	ldr	r1, [pc, #640]	; (8011a58 <_strtod_l+0x580>)
 80117d8:	a81b      	add	r0, sp, #108	; 0x6c
 80117da:	f002 f811 	bl	8013800 <__match>
 80117de:	2800      	cmp	r0, #0
 80117e0:	f43f aed7 	beq.w	8011592 <_strtod_l+0xba>
 80117e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117e6:	499d      	ldr	r1, [pc, #628]	; (8011a5c <_strtod_l+0x584>)
 80117e8:	3b01      	subs	r3, #1
 80117ea:	a81b      	add	r0, sp, #108	; 0x6c
 80117ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80117ee:	f002 f807 	bl	8013800 <__match>
 80117f2:	b910      	cbnz	r0, 80117fa <_strtod_l+0x322>
 80117f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117f6:	3301      	adds	r3, #1
 80117f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80117fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011a70 <_strtod_l+0x598>
 80117fe:	f04f 0a00 	mov.w	sl, #0
 8011802:	e6a8      	b.n	8011556 <_strtod_l+0x7e>
 8011804:	210a      	movs	r1, #10
 8011806:	fb01 3e0e 	mla	lr, r1, lr, r3
 801180a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801180e:	e7b8      	b.n	8011782 <_strtod_l+0x2aa>
 8011810:	46be      	mov	lr, r7
 8011812:	e7c8      	b.n	80117a6 <_strtod_l+0x2ce>
 8011814:	2b69      	cmp	r3, #105	; 0x69
 8011816:	d0de      	beq.n	80117d6 <_strtod_l+0x2fe>
 8011818:	2b6e      	cmp	r3, #110	; 0x6e
 801181a:	f47f aeba 	bne.w	8011592 <_strtod_l+0xba>
 801181e:	4990      	ldr	r1, [pc, #576]	; (8011a60 <_strtod_l+0x588>)
 8011820:	a81b      	add	r0, sp, #108	; 0x6c
 8011822:	f001 ffed 	bl	8013800 <__match>
 8011826:	2800      	cmp	r0, #0
 8011828:	f43f aeb3 	beq.w	8011592 <_strtod_l+0xba>
 801182c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	2b28      	cmp	r3, #40	; 0x28
 8011832:	d10e      	bne.n	8011852 <_strtod_l+0x37a>
 8011834:	aa1e      	add	r2, sp, #120	; 0x78
 8011836:	498b      	ldr	r1, [pc, #556]	; (8011a64 <_strtod_l+0x58c>)
 8011838:	a81b      	add	r0, sp, #108	; 0x6c
 801183a:	f001 fff5 	bl	8013828 <__hexnan>
 801183e:	2805      	cmp	r0, #5
 8011840:	d107      	bne.n	8011852 <_strtod_l+0x37a>
 8011842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011844:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011848:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801184c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011850:	e681      	b.n	8011556 <_strtod_l+0x7e>
 8011852:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011a78 <_strtod_l+0x5a0>
 8011856:	e7d2      	b.n	80117fe <_strtod_l+0x326>
 8011858:	ebae 0302 	sub.w	r3, lr, r2
 801185c:	9306      	str	r3, [sp, #24]
 801185e:	9b05      	ldr	r3, [sp, #20]
 8011860:	9807      	ldr	r0, [sp, #28]
 8011862:	2b00      	cmp	r3, #0
 8011864:	bf08      	it	eq
 8011866:	4623      	moveq	r3, r4
 8011868:	2c10      	cmp	r4, #16
 801186a:	9305      	str	r3, [sp, #20]
 801186c:	46a0      	mov	r8, r4
 801186e:	bfa8      	it	ge
 8011870:	f04f 0810 	movge.w	r8, #16
 8011874:	f7f4 febe 	bl	80065f4 <__aeabi_ui2d>
 8011878:	2c09      	cmp	r4, #9
 801187a:	4682      	mov	sl, r0
 801187c:	468b      	mov	fp, r1
 801187e:	dc13      	bgt.n	80118a8 <_strtod_l+0x3d0>
 8011880:	9b06      	ldr	r3, [sp, #24]
 8011882:	2b00      	cmp	r3, #0
 8011884:	f43f ae67 	beq.w	8011556 <_strtod_l+0x7e>
 8011888:	9b06      	ldr	r3, [sp, #24]
 801188a:	dd7a      	ble.n	8011982 <_strtod_l+0x4aa>
 801188c:	2b16      	cmp	r3, #22
 801188e:	dc61      	bgt.n	8011954 <_strtod_l+0x47c>
 8011890:	4a75      	ldr	r2, [pc, #468]	; (8011a68 <_strtod_l+0x590>)
 8011892:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011896:	e9de 0100 	ldrd	r0, r1, [lr]
 801189a:	4652      	mov	r2, sl
 801189c:	465b      	mov	r3, fp
 801189e:	f7f4 ff23 	bl	80066e8 <__aeabi_dmul>
 80118a2:	4682      	mov	sl, r0
 80118a4:	468b      	mov	fp, r1
 80118a6:	e656      	b.n	8011556 <_strtod_l+0x7e>
 80118a8:	4b6f      	ldr	r3, [pc, #444]	; (8011a68 <_strtod_l+0x590>)
 80118aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80118ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80118b2:	f7f4 ff19 	bl	80066e8 <__aeabi_dmul>
 80118b6:	4606      	mov	r6, r0
 80118b8:	4628      	mov	r0, r5
 80118ba:	460f      	mov	r7, r1
 80118bc:	f7f4 fe9a 	bl	80065f4 <__aeabi_ui2d>
 80118c0:	4602      	mov	r2, r0
 80118c2:	460b      	mov	r3, r1
 80118c4:	4630      	mov	r0, r6
 80118c6:	4639      	mov	r1, r7
 80118c8:	f7f4 fd58 	bl	800637c <__adddf3>
 80118cc:	2c0f      	cmp	r4, #15
 80118ce:	4682      	mov	sl, r0
 80118d0:	468b      	mov	fp, r1
 80118d2:	ddd5      	ble.n	8011880 <_strtod_l+0x3a8>
 80118d4:	9b06      	ldr	r3, [sp, #24]
 80118d6:	eba4 0808 	sub.w	r8, r4, r8
 80118da:	4498      	add	r8, r3
 80118dc:	f1b8 0f00 	cmp.w	r8, #0
 80118e0:	f340 8096 	ble.w	8011a10 <_strtod_l+0x538>
 80118e4:	f018 030f 	ands.w	r3, r8, #15
 80118e8:	d00a      	beq.n	8011900 <_strtod_l+0x428>
 80118ea:	495f      	ldr	r1, [pc, #380]	; (8011a68 <_strtod_l+0x590>)
 80118ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80118f0:	4652      	mov	r2, sl
 80118f2:	465b      	mov	r3, fp
 80118f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118f8:	f7f4 fef6 	bl	80066e8 <__aeabi_dmul>
 80118fc:	4682      	mov	sl, r0
 80118fe:	468b      	mov	fp, r1
 8011900:	f038 080f 	bics.w	r8, r8, #15
 8011904:	d073      	beq.n	80119ee <_strtod_l+0x516>
 8011906:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801190a:	dd47      	ble.n	801199c <_strtod_l+0x4c4>
 801190c:	2400      	movs	r4, #0
 801190e:	46a0      	mov	r8, r4
 8011910:	9407      	str	r4, [sp, #28]
 8011912:	9405      	str	r4, [sp, #20]
 8011914:	2322      	movs	r3, #34	; 0x22
 8011916:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011a70 <_strtod_l+0x598>
 801191a:	f8c9 3000 	str.w	r3, [r9]
 801191e:	f04f 0a00 	mov.w	sl, #0
 8011922:	9b07      	ldr	r3, [sp, #28]
 8011924:	2b00      	cmp	r3, #0
 8011926:	f43f ae16 	beq.w	8011556 <_strtod_l+0x7e>
 801192a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801192c:	4648      	mov	r0, r9
 801192e:	f002 f8d1 	bl	8013ad4 <_Bfree>
 8011932:	9905      	ldr	r1, [sp, #20]
 8011934:	4648      	mov	r0, r9
 8011936:	f002 f8cd 	bl	8013ad4 <_Bfree>
 801193a:	4641      	mov	r1, r8
 801193c:	4648      	mov	r0, r9
 801193e:	f002 f8c9 	bl	8013ad4 <_Bfree>
 8011942:	9907      	ldr	r1, [sp, #28]
 8011944:	4648      	mov	r0, r9
 8011946:	f002 f8c5 	bl	8013ad4 <_Bfree>
 801194a:	4621      	mov	r1, r4
 801194c:	4648      	mov	r0, r9
 801194e:	f002 f8c1 	bl	8013ad4 <_Bfree>
 8011952:	e600      	b.n	8011556 <_strtod_l+0x7e>
 8011954:	9a06      	ldr	r2, [sp, #24]
 8011956:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801195a:	4293      	cmp	r3, r2
 801195c:	dbba      	blt.n	80118d4 <_strtod_l+0x3fc>
 801195e:	4d42      	ldr	r5, [pc, #264]	; (8011a68 <_strtod_l+0x590>)
 8011960:	f1c4 040f 	rsb	r4, r4, #15
 8011964:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011968:	4652      	mov	r2, sl
 801196a:	465b      	mov	r3, fp
 801196c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011970:	f7f4 feba 	bl	80066e8 <__aeabi_dmul>
 8011974:	9b06      	ldr	r3, [sp, #24]
 8011976:	1b1c      	subs	r4, r3, r4
 8011978:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801197c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011980:	e78d      	b.n	801189e <_strtod_l+0x3c6>
 8011982:	f113 0f16 	cmn.w	r3, #22
 8011986:	dba5      	blt.n	80118d4 <_strtod_l+0x3fc>
 8011988:	4a37      	ldr	r2, [pc, #220]	; (8011a68 <_strtod_l+0x590>)
 801198a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801198e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011992:	4650      	mov	r0, sl
 8011994:	4659      	mov	r1, fp
 8011996:	f7f4 ffd1 	bl	800693c <__aeabi_ddiv>
 801199a:	e782      	b.n	80118a2 <_strtod_l+0x3ca>
 801199c:	2300      	movs	r3, #0
 801199e:	4e33      	ldr	r6, [pc, #204]	; (8011a6c <_strtod_l+0x594>)
 80119a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80119a4:	4650      	mov	r0, sl
 80119a6:	4659      	mov	r1, fp
 80119a8:	461d      	mov	r5, r3
 80119aa:	f1b8 0f01 	cmp.w	r8, #1
 80119ae:	dc21      	bgt.n	80119f4 <_strtod_l+0x51c>
 80119b0:	b10b      	cbz	r3, 80119b6 <_strtod_l+0x4de>
 80119b2:	4682      	mov	sl, r0
 80119b4:	468b      	mov	fp, r1
 80119b6:	4b2d      	ldr	r3, [pc, #180]	; (8011a6c <_strtod_l+0x594>)
 80119b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80119bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80119c0:	4652      	mov	r2, sl
 80119c2:	465b      	mov	r3, fp
 80119c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80119c8:	f7f4 fe8e 	bl	80066e8 <__aeabi_dmul>
 80119cc:	4b28      	ldr	r3, [pc, #160]	; (8011a70 <_strtod_l+0x598>)
 80119ce:	460a      	mov	r2, r1
 80119d0:	400b      	ands	r3, r1
 80119d2:	4928      	ldr	r1, [pc, #160]	; (8011a74 <_strtod_l+0x59c>)
 80119d4:	428b      	cmp	r3, r1
 80119d6:	4682      	mov	sl, r0
 80119d8:	d898      	bhi.n	801190c <_strtod_l+0x434>
 80119da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80119de:	428b      	cmp	r3, r1
 80119e0:	bf86      	itte	hi
 80119e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011a7c <_strtod_l+0x5a4>
 80119e6:	f04f 3aff 	movhi.w	sl, #4294967295
 80119ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80119ee:	2300      	movs	r3, #0
 80119f0:	9304      	str	r3, [sp, #16]
 80119f2:	e077      	b.n	8011ae4 <_strtod_l+0x60c>
 80119f4:	f018 0f01 	tst.w	r8, #1
 80119f8:	d006      	beq.n	8011a08 <_strtod_l+0x530>
 80119fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80119fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a02:	f7f4 fe71 	bl	80066e8 <__aeabi_dmul>
 8011a06:	2301      	movs	r3, #1
 8011a08:	3501      	adds	r5, #1
 8011a0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011a0e:	e7cc      	b.n	80119aa <_strtod_l+0x4d2>
 8011a10:	d0ed      	beq.n	80119ee <_strtod_l+0x516>
 8011a12:	f1c8 0800 	rsb	r8, r8, #0
 8011a16:	f018 020f 	ands.w	r2, r8, #15
 8011a1a:	d00a      	beq.n	8011a32 <_strtod_l+0x55a>
 8011a1c:	4b12      	ldr	r3, [pc, #72]	; (8011a68 <_strtod_l+0x590>)
 8011a1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a22:	4650      	mov	r0, sl
 8011a24:	4659      	mov	r1, fp
 8011a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2a:	f7f4 ff87 	bl	800693c <__aeabi_ddiv>
 8011a2e:	4682      	mov	sl, r0
 8011a30:	468b      	mov	fp, r1
 8011a32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011a36:	d0da      	beq.n	80119ee <_strtod_l+0x516>
 8011a38:	f1b8 0f1f 	cmp.w	r8, #31
 8011a3c:	dd20      	ble.n	8011a80 <_strtod_l+0x5a8>
 8011a3e:	2400      	movs	r4, #0
 8011a40:	46a0      	mov	r8, r4
 8011a42:	9407      	str	r4, [sp, #28]
 8011a44:	9405      	str	r4, [sp, #20]
 8011a46:	2322      	movs	r3, #34	; 0x22
 8011a48:	f04f 0a00 	mov.w	sl, #0
 8011a4c:	f04f 0b00 	mov.w	fp, #0
 8011a50:	f8c9 3000 	str.w	r3, [r9]
 8011a54:	e765      	b.n	8011922 <_strtod_l+0x44a>
 8011a56:	bf00      	nop
 8011a58:	0814fa88 	.word	0x0814fa88
 8011a5c:	0814f7cb 	.word	0x0814f7cb
 8011a60:	0814f749 	.word	0x0814f749
 8011a64:	0814f78c 	.word	0x0814f78c
 8011a68:	0814f870 	.word	0x0814f870
 8011a6c:	0814f848 	.word	0x0814f848
 8011a70:	7ff00000 	.word	0x7ff00000
 8011a74:	7ca00000 	.word	0x7ca00000
 8011a78:	fff80000 	.word	0xfff80000
 8011a7c:	7fefffff 	.word	0x7fefffff
 8011a80:	f018 0310 	ands.w	r3, r8, #16
 8011a84:	bf18      	it	ne
 8011a86:	236a      	movne	r3, #106	; 0x6a
 8011a88:	4da0      	ldr	r5, [pc, #640]	; (8011d0c <_strtod_l+0x834>)
 8011a8a:	9304      	str	r3, [sp, #16]
 8011a8c:	4650      	mov	r0, sl
 8011a8e:	4659      	mov	r1, fp
 8011a90:	2300      	movs	r3, #0
 8011a92:	f1b8 0f00 	cmp.w	r8, #0
 8011a96:	f300 810a 	bgt.w	8011cae <_strtod_l+0x7d6>
 8011a9a:	b10b      	cbz	r3, 8011aa0 <_strtod_l+0x5c8>
 8011a9c:	4682      	mov	sl, r0
 8011a9e:	468b      	mov	fp, r1
 8011aa0:	9b04      	ldr	r3, [sp, #16]
 8011aa2:	b1bb      	cbz	r3, 8011ad4 <_strtod_l+0x5fc>
 8011aa4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	4659      	mov	r1, fp
 8011ab0:	dd10      	ble.n	8011ad4 <_strtod_l+0x5fc>
 8011ab2:	2b1f      	cmp	r3, #31
 8011ab4:	f340 8107 	ble.w	8011cc6 <_strtod_l+0x7ee>
 8011ab8:	2b34      	cmp	r3, #52	; 0x34
 8011aba:	bfde      	ittt	le
 8011abc:	3b20      	suble	r3, #32
 8011abe:	f04f 32ff 	movle.w	r2, #4294967295
 8011ac2:	fa02 f303 	lslle.w	r3, r2, r3
 8011ac6:	f04f 0a00 	mov.w	sl, #0
 8011aca:	bfcc      	ite	gt
 8011acc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011ad0:	ea03 0b01 	andle.w	fp, r3, r1
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	4650      	mov	r0, sl
 8011ada:	4659      	mov	r1, fp
 8011adc:	f7f5 f86c 	bl	8006bb8 <__aeabi_dcmpeq>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d1ac      	bne.n	8011a3e <_strtod_l+0x566>
 8011ae4:	9b07      	ldr	r3, [sp, #28]
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	9a05      	ldr	r2, [sp, #20]
 8011aea:	9908      	ldr	r1, [sp, #32]
 8011aec:	4623      	mov	r3, r4
 8011aee:	4648      	mov	r0, r9
 8011af0:	f002 f842 	bl	8013b78 <__s2b>
 8011af4:	9007      	str	r0, [sp, #28]
 8011af6:	2800      	cmp	r0, #0
 8011af8:	f43f af08 	beq.w	801190c <_strtod_l+0x434>
 8011afc:	9a06      	ldr	r2, [sp, #24]
 8011afe:	9b06      	ldr	r3, [sp, #24]
 8011b00:	2a00      	cmp	r2, #0
 8011b02:	f1c3 0300 	rsb	r3, r3, #0
 8011b06:	bfa8      	it	ge
 8011b08:	2300      	movge	r3, #0
 8011b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8011b0c:	2400      	movs	r4, #0
 8011b0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011b12:	9316      	str	r3, [sp, #88]	; 0x58
 8011b14:	46a0      	mov	r8, r4
 8011b16:	9b07      	ldr	r3, [sp, #28]
 8011b18:	4648      	mov	r0, r9
 8011b1a:	6859      	ldr	r1, [r3, #4]
 8011b1c:	f001 ffa6 	bl	8013a6c <_Balloc>
 8011b20:	9005      	str	r0, [sp, #20]
 8011b22:	2800      	cmp	r0, #0
 8011b24:	f43f aef6 	beq.w	8011914 <_strtod_l+0x43c>
 8011b28:	9b07      	ldr	r3, [sp, #28]
 8011b2a:	691a      	ldr	r2, [r3, #16]
 8011b2c:	3202      	adds	r2, #2
 8011b2e:	f103 010c 	add.w	r1, r3, #12
 8011b32:	0092      	lsls	r2, r2, #2
 8011b34:	300c      	adds	r0, #12
 8011b36:	f7fe fdbe 	bl	80106b6 <memcpy>
 8011b3a:	aa1e      	add	r2, sp, #120	; 0x78
 8011b3c:	a91d      	add	r1, sp, #116	; 0x74
 8011b3e:	ec4b ab10 	vmov	d0, sl, fp
 8011b42:	4648      	mov	r0, r9
 8011b44:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011b48:	f002 fad2 	bl	80140f0 <__d2b>
 8011b4c:	901c      	str	r0, [sp, #112]	; 0x70
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	f43f aee0 	beq.w	8011914 <_strtod_l+0x43c>
 8011b54:	2101      	movs	r1, #1
 8011b56:	4648      	mov	r0, r9
 8011b58:	f002 f89a 	bl	8013c90 <__i2b>
 8011b5c:	4680      	mov	r8, r0
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	f43f aed8 	beq.w	8011914 <_strtod_l+0x43c>
 8011b64:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011b66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011b68:	2e00      	cmp	r6, #0
 8011b6a:	bfab      	itete	ge
 8011b6c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011b6e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011b70:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011b72:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011b74:	bfac      	ite	ge
 8011b76:	18f7      	addge	r7, r6, r3
 8011b78:	1b9d      	sublt	r5, r3, r6
 8011b7a:	9b04      	ldr	r3, [sp, #16]
 8011b7c:	1af6      	subs	r6, r6, r3
 8011b7e:	4416      	add	r6, r2
 8011b80:	4b63      	ldr	r3, [pc, #396]	; (8011d10 <_strtod_l+0x838>)
 8011b82:	3e01      	subs	r6, #1
 8011b84:	429e      	cmp	r6, r3
 8011b86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011b8a:	f280 80af 	bge.w	8011cec <_strtod_l+0x814>
 8011b8e:	1b9b      	subs	r3, r3, r6
 8011b90:	2b1f      	cmp	r3, #31
 8011b92:	eba2 0203 	sub.w	r2, r2, r3
 8011b96:	f04f 0101 	mov.w	r1, #1
 8011b9a:	f300 809b 	bgt.w	8011cd4 <_strtod_l+0x7fc>
 8011b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8011ba2:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ba8:	18be      	adds	r6, r7, r2
 8011baa:	9b04      	ldr	r3, [sp, #16]
 8011bac:	42b7      	cmp	r7, r6
 8011bae:	4415      	add	r5, r2
 8011bb0:	441d      	add	r5, r3
 8011bb2:	463b      	mov	r3, r7
 8011bb4:	bfa8      	it	ge
 8011bb6:	4633      	movge	r3, r6
 8011bb8:	42ab      	cmp	r3, r5
 8011bba:	bfa8      	it	ge
 8011bbc:	462b      	movge	r3, r5
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	bfc2      	ittt	gt
 8011bc2:	1af6      	subgt	r6, r6, r3
 8011bc4:	1aed      	subgt	r5, r5, r3
 8011bc6:	1aff      	subgt	r7, r7, r3
 8011bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bca:	b1bb      	cbz	r3, 8011bfc <_strtod_l+0x724>
 8011bcc:	4641      	mov	r1, r8
 8011bce:	461a      	mov	r2, r3
 8011bd0:	4648      	mov	r0, r9
 8011bd2:	f002 f8fd 	bl	8013dd0 <__pow5mult>
 8011bd6:	4680      	mov	r8, r0
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	f43f ae9b 	beq.w	8011914 <_strtod_l+0x43c>
 8011bde:	4601      	mov	r1, r0
 8011be0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011be2:	4648      	mov	r0, r9
 8011be4:	f002 f85d 	bl	8013ca2 <__multiply>
 8011be8:	900c      	str	r0, [sp, #48]	; 0x30
 8011bea:	2800      	cmp	r0, #0
 8011bec:	f43f ae92 	beq.w	8011914 <_strtod_l+0x43c>
 8011bf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011bf2:	4648      	mov	r0, r9
 8011bf4:	f001 ff6e 	bl	8013ad4 <_Bfree>
 8011bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bfa:	931c      	str	r3, [sp, #112]	; 0x70
 8011bfc:	2e00      	cmp	r6, #0
 8011bfe:	dc7a      	bgt.n	8011cf6 <_strtod_l+0x81e>
 8011c00:	9b06      	ldr	r3, [sp, #24]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	dd08      	ble.n	8011c18 <_strtod_l+0x740>
 8011c06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c08:	9905      	ldr	r1, [sp, #20]
 8011c0a:	4648      	mov	r0, r9
 8011c0c:	f002 f8e0 	bl	8013dd0 <__pow5mult>
 8011c10:	9005      	str	r0, [sp, #20]
 8011c12:	2800      	cmp	r0, #0
 8011c14:	f43f ae7e 	beq.w	8011914 <_strtod_l+0x43c>
 8011c18:	2d00      	cmp	r5, #0
 8011c1a:	dd08      	ble.n	8011c2e <_strtod_l+0x756>
 8011c1c:	462a      	mov	r2, r5
 8011c1e:	9905      	ldr	r1, [sp, #20]
 8011c20:	4648      	mov	r0, r9
 8011c22:	f002 f923 	bl	8013e6c <__lshift>
 8011c26:	9005      	str	r0, [sp, #20]
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	f43f ae73 	beq.w	8011914 <_strtod_l+0x43c>
 8011c2e:	2f00      	cmp	r7, #0
 8011c30:	dd08      	ble.n	8011c44 <_strtod_l+0x76c>
 8011c32:	4641      	mov	r1, r8
 8011c34:	463a      	mov	r2, r7
 8011c36:	4648      	mov	r0, r9
 8011c38:	f002 f918 	bl	8013e6c <__lshift>
 8011c3c:	4680      	mov	r8, r0
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	f43f ae68 	beq.w	8011914 <_strtod_l+0x43c>
 8011c44:	9a05      	ldr	r2, [sp, #20]
 8011c46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c48:	4648      	mov	r0, r9
 8011c4a:	f002 f97d 	bl	8013f48 <__mdiff>
 8011c4e:	4604      	mov	r4, r0
 8011c50:	2800      	cmp	r0, #0
 8011c52:	f43f ae5f 	beq.w	8011914 <_strtod_l+0x43c>
 8011c56:	68c3      	ldr	r3, [r0, #12]
 8011c58:	930c      	str	r3, [sp, #48]	; 0x30
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	60c3      	str	r3, [r0, #12]
 8011c5e:	4641      	mov	r1, r8
 8011c60:	f002 f958 	bl	8013f14 <__mcmp>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	da55      	bge.n	8011d14 <_strtod_l+0x83c>
 8011c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c6a:	b9e3      	cbnz	r3, 8011ca6 <_strtod_l+0x7ce>
 8011c6c:	f1ba 0f00 	cmp.w	sl, #0
 8011c70:	d119      	bne.n	8011ca6 <_strtod_l+0x7ce>
 8011c72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c76:	b9b3      	cbnz	r3, 8011ca6 <_strtod_l+0x7ce>
 8011c78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c7c:	0d1b      	lsrs	r3, r3, #20
 8011c7e:	051b      	lsls	r3, r3, #20
 8011c80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011c84:	d90f      	bls.n	8011ca6 <_strtod_l+0x7ce>
 8011c86:	6963      	ldr	r3, [r4, #20]
 8011c88:	b913      	cbnz	r3, 8011c90 <_strtod_l+0x7b8>
 8011c8a:	6923      	ldr	r3, [r4, #16]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	dd0a      	ble.n	8011ca6 <_strtod_l+0x7ce>
 8011c90:	4621      	mov	r1, r4
 8011c92:	2201      	movs	r2, #1
 8011c94:	4648      	mov	r0, r9
 8011c96:	f002 f8e9 	bl	8013e6c <__lshift>
 8011c9a:	4641      	mov	r1, r8
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	f002 f939 	bl	8013f14 <__mcmp>
 8011ca2:	2800      	cmp	r0, #0
 8011ca4:	dc67      	bgt.n	8011d76 <_strtod_l+0x89e>
 8011ca6:	9b04      	ldr	r3, [sp, #16]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d171      	bne.n	8011d90 <_strtod_l+0x8b8>
 8011cac:	e63d      	b.n	801192a <_strtod_l+0x452>
 8011cae:	f018 0f01 	tst.w	r8, #1
 8011cb2:	d004      	beq.n	8011cbe <_strtod_l+0x7e6>
 8011cb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011cb8:	f7f4 fd16 	bl	80066e8 <__aeabi_dmul>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011cc2:	3508      	adds	r5, #8
 8011cc4:	e6e5      	b.n	8011a92 <_strtod_l+0x5ba>
 8011cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cca:	fa02 f303 	lsl.w	r3, r2, r3
 8011cce:	ea03 0a0a 	and.w	sl, r3, sl
 8011cd2:	e6ff      	b.n	8011ad4 <_strtod_l+0x5fc>
 8011cd4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011cd8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011cdc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011ce0:	36e2      	adds	r6, #226	; 0xe2
 8011ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8011ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ce8:	910f      	str	r1, [sp, #60]	; 0x3c
 8011cea:	e75d      	b.n	8011ba8 <_strtod_l+0x6d0>
 8011cec:	2300      	movs	r3, #0
 8011cee:	930a      	str	r3, [sp, #40]	; 0x28
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cf4:	e758      	b.n	8011ba8 <_strtod_l+0x6d0>
 8011cf6:	4632      	mov	r2, r6
 8011cf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011cfa:	4648      	mov	r0, r9
 8011cfc:	f002 f8b6 	bl	8013e6c <__lshift>
 8011d00:	901c      	str	r0, [sp, #112]	; 0x70
 8011d02:	2800      	cmp	r0, #0
 8011d04:	f47f af7c 	bne.w	8011c00 <_strtod_l+0x728>
 8011d08:	e604      	b.n	8011914 <_strtod_l+0x43c>
 8011d0a:	bf00      	nop
 8011d0c:	0814f7a0 	.word	0x0814f7a0
 8011d10:	fffffc02 	.word	0xfffffc02
 8011d14:	465d      	mov	r5, fp
 8011d16:	f040 8086 	bne.w	8011e26 <_strtod_l+0x94e>
 8011d1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d20:	b32a      	cbz	r2, 8011d6e <_strtod_l+0x896>
 8011d22:	4aaf      	ldr	r2, [pc, #700]	; (8011fe0 <_strtod_l+0xb08>)
 8011d24:	4293      	cmp	r3, r2
 8011d26:	d153      	bne.n	8011dd0 <_strtod_l+0x8f8>
 8011d28:	9b04      	ldr	r3, [sp, #16]
 8011d2a:	4650      	mov	r0, sl
 8011d2c:	b1d3      	cbz	r3, 8011d64 <_strtod_l+0x88c>
 8011d2e:	4aad      	ldr	r2, [pc, #692]	; (8011fe4 <_strtod_l+0xb0c>)
 8011d30:	402a      	ands	r2, r5
 8011d32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011d36:	f04f 31ff 	mov.w	r1, #4294967295
 8011d3a:	d816      	bhi.n	8011d6a <_strtod_l+0x892>
 8011d3c:	0d12      	lsrs	r2, r2, #20
 8011d3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011d42:	fa01 f303 	lsl.w	r3, r1, r3
 8011d46:	4298      	cmp	r0, r3
 8011d48:	d142      	bne.n	8011dd0 <_strtod_l+0x8f8>
 8011d4a:	4ba7      	ldr	r3, [pc, #668]	; (8011fe8 <_strtod_l+0xb10>)
 8011d4c:	429d      	cmp	r5, r3
 8011d4e:	d102      	bne.n	8011d56 <_strtod_l+0x87e>
 8011d50:	3001      	adds	r0, #1
 8011d52:	f43f addf 	beq.w	8011914 <_strtod_l+0x43c>
 8011d56:	4ba3      	ldr	r3, [pc, #652]	; (8011fe4 <_strtod_l+0xb0c>)
 8011d58:	402b      	ands	r3, r5
 8011d5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011d5e:	f04f 0a00 	mov.w	sl, #0
 8011d62:	e7a0      	b.n	8011ca6 <_strtod_l+0x7ce>
 8011d64:	f04f 33ff 	mov.w	r3, #4294967295
 8011d68:	e7ed      	b.n	8011d46 <_strtod_l+0x86e>
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	e7eb      	b.n	8011d46 <_strtod_l+0x86e>
 8011d6e:	bb7b      	cbnz	r3, 8011dd0 <_strtod_l+0x8f8>
 8011d70:	f1ba 0f00 	cmp.w	sl, #0
 8011d74:	d12c      	bne.n	8011dd0 <_strtod_l+0x8f8>
 8011d76:	9904      	ldr	r1, [sp, #16]
 8011d78:	4a9a      	ldr	r2, [pc, #616]	; (8011fe4 <_strtod_l+0xb0c>)
 8011d7a:	465b      	mov	r3, fp
 8011d7c:	b1f1      	cbz	r1, 8011dbc <_strtod_l+0x8e4>
 8011d7e:	ea02 010b 	and.w	r1, r2, fp
 8011d82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011d86:	dc19      	bgt.n	8011dbc <_strtod_l+0x8e4>
 8011d88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011d8c:	f77f ae5b 	ble.w	8011a46 <_strtod_l+0x56e>
 8011d90:	4a96      	ldr	r2, [pc, #600]	; (8011fec <_strtod_l+0xb14>)
 8011d92:	2300      	movs	r3, #0
 8011d94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011d98:	4650      	mov	r0, sl
 8011d9a:	4659      	mov	r1, fp
 8011d9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011da0:	f7f4 fca2 	bl	80066e8 <__aeabi_dmul>
 8011da4:	4682      	mov	sl, r0
 8011da6:	468b      	mov	fp, r1
 8011da8:	2900      	cmp	r1, #0
 8011daa:	f47f adbe 	bne.w	801192a <_strtod_l+0x452>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	f47f adbb 	bne.w	801192a <_strtod_l+0x452>
 8011db4:	2322      	movs	r3, #34	; 0x22
 8011db6:	f8c9 3000 	str.w	r3, [r9]
 8011dba:	e5b6      	b.n	801192a <_strtod_l+0x452>
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011dc2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011dc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011dca:	f04f 3aff 	mov.w	sl, #4294967295
 8011dce:	e76a      	b.n	8011ca6 <_strtod_l+0x7ce>
 8011dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dd2:	b193      	cbz	r3, 8011dfa <_strtod_l+0x922>
 8011dd4:	422b      	tst	r3, r5
 8011dd6:	f43f af66 	beq.w	8011ca6 <_strtod_l+0x7ce>
 8011dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ddc:	9a04      	ldr	r2, [sp, #16]
 8011dde:	4650      	mov	r0, sl
 8011de0:	4659      	mov	r1, fp
 8011de2:	b173      	cbz	r3, 8011e02 <_strtod_l+0x92a>
 8011de4:	f7ff fb5a 	bl	801149c <sulp>
 8011de8:	4602      	mov	r2, r0
 8011dea:	460b      	mov	r3, r1
 8011dec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011df0:	f7f4 fac4 	bl	800637c <__adddf3>
 8011df4:	4682      	mov	sl, r0
 8011df6:	468b      	mov	fp, r1
 8011df8:	e755      	b.n	8011ca6 <_strtod_l+0x7ce>
 8011dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011dfc:	ea13 0f0a 	tst.w	r3, sl
 8011e00:	e7e9      	b.n	8011dd6 <_strtod_l+0x8fe>
 8011e02:	f7ff fb4b 	bl	801149c <sulp>
 8011e06:	4602      	mov	r2, r0
 8011e08:	460b      	mov	r3, r1
 8011e0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011e0e:	f7f4 fab3 	bl	8006378 <__aeabi_dsub>
 8011e12:	2200      	movs	r2, #0
 8011e14:	2300      	movs	r3, #0
 8011e16:	4682      	mov	sl, r0
 8011e18:	468b      	mov	fp, r1
 8011e1a:	f7f4 fecd 	bl	8006bb8 <__aeabi_dcmpeq>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	f47f ae11 	bne.w	8011a46 <_strtod_l+0x56e>
 8011e24:	e73f      	b.n	8011ca6 <_strtod_l+0x7ce>
 8011e26:	4641      	mov	r1, r8
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f002 f9b0 	bl	801418e <__ratio>
 8011e2e:	ec57 6b10 	vmov	r6, r7, d0
 8011e32:	2200      	movs	r2, #0
 8011e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e38:	ee10 0a10 	vmov	r0, s0
 8011e3c:	4639      	mov	r1, r7
 8011e3e:	f7f4 fecf 	bl	8006be0 <__aeabi_dcmple>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d077      	beq.n	8011f36 <_strtod_l+0xa5e>
 8011e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d04a      	beq.n	8011ee2 <_strtod_l+0xa0a>
 8011e4c:	4b68      	ldr	r3, [pc, #416]	; (8011ff0 <_strtod_l+0xb18>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011e54:	4f66      	ldr	r7, [pc, #408]	; (8011ff0 <_strtod_l+0xb18>)
 8011e56:	2600      	movs	r6, #0
 8011e58:	4b62      	ldr	r3, [pc, #392]	; (8011fe4 <_strtod_l+0xb0c>)
 8011e5a:	402b      	ands	r3, r5
 8011e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e60:	4b64      	ldr	r3, [pc, #400]	; (8011ff4 <_strtod_l+0xb1c>)
 8011e62:	429a      	cmp	r2, r3
 8011e64:	f040 80ce 	bne.w	8012004 <_strtod_l+0xb2c>
 8011e68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011e6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011e70:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011e74:	ec4b ab10 	vmov	d0, sl, fp
 8011e78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011e7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011e80:	f002 f8c0 	bl	8014004 <__ulp>
 8011e84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011e88:	ec53 2b10 	vmov	r2, r3, d0
 8011e8c:	f7f4 fc2c 	bl	80066e8 <__aeabi_dmul>
 8011e90:	4652      	mov	r2, sl
 8011e92:	465b      	mov	r3, fp
 8011e94:	f7f4 fa72 	bl	800637c <__adddf3>
 8011e98:	460b      	mov	r3, r1
 8011e9a:	4952      	ldr	r1, [pc, #328]	; (8011fe4 <_strtod_l+0xb0c>)
 8011e9c:	4a56      	ldr	r2, [pc, #344]	; (8011ff8 <_strtod_l+0xb20>)
 8011e9e:	4019      	ands	r1, r3
 8011ea0:	4291      	cmp	r1, r2
 8011ea2:	4682      	mov	sl, r0
 8011ea4:	d95b      	bls.n	8011f5e <_strtod_l+0xa86>
 8011ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ea8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d103      	bne.n	8011eb8 <_strtod_l+0x9e0>
 8011eb0:	9b08      	ldr	r3, [sp, #32]
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	f43f ad2e 	beq.w	8011914 <_strtod_l+0x43c>
 8011eb8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011fe8 <_strtod_l+0xb10>
 8011ebc:	f04f 3aff 	mov.w	sl, #4294967295
 8011ec0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011ec2:	4648      	mov	r0, r9
 8011ec4:	f001 fe06 	bl	8013ad4 <_Bfree>
 8011ec8:	9905      	ldr	r1, [sp, #20]
 8011eca:	4648      	mov	r0, r9
 8011ecc:	f001 fe02 	bl	8013ad4 <_Bfree>
 8011ed0:	4641      	mov	r1, r8
 8011ed2:	4648      	mov	r0, r9
 8011ed4:	f001 fdfe 	bl	8013ad4 <_Bfree>
 8011ed8:	4621      	mov	r1, r4
 8011eda:	4648      	mov	r0, r9
 8011edc:	f001 fdfa 	bl	8013ad4 <_Bfree>
 8011ee0:	e619      	b.n	8011b16 <_strtod_l+0x63e>
 8011ee2:	f1ba 0f00 	cmp.w	sl, #0
 8011ee6:	d11a      	bne.n	8011f1e <_strtod_l+0xa46>
 8011ee8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011eec:	b9eb      	cbnz	r3, 8011f2a <_strtod_l+0xa52>
 8011eee:	2200      	movs	r2, #0
 8011ef0:	4b3f      	ldr	r3, [pc, #252]	; (8011ff0 <_strtod_l+0xb18>)
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	f7f4 fe69 	bl	8006bcc <__aeabi_dcmplt>
 8011efa:	b9c8      	cbnz	r0, 8011f30 <_strtod_l+0xa58>
 8011efc:	4630      	mov	r0, r6
 8011efe:	4639      	mov	r1, r7
 8011f00:	2200      	movs	r2, #0
 8011f02:	4b3e      	ldr	r3, [pc, #248]	; (8011ffc <_strtod_l+0xb24>)
 8011f04:	f7f4 fbf0 	bl	80066e8 <__aeabi_dmul>
 8011f08:	4606      	mov	r6, r0
 8011f0a:	460f      	mov	r7, r1
 8011f0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011f10:	9618      	str	r6, [sp, #96]	; 0x60
 8011f12:	9319      	str	r3, [sp, #100]	; 0x64
 8011f14:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011f18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011f1c:	e79c      	b.n	8011e58 <_strtod_l+0x980>
 8011f1e:	f1ba 0f01 	cmp.w	sl, #1
 8011f22:	d102      	bne.n	8011f2a <_strtod_l+0xa52>
 8011f24:	2d00      	cmp	r5, #0
 8011f26:	f43f ad8e 	beq.w	8011a46 <_strtod_l+0x56e>
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	4b34      	ldr	r3, [pc, #208]	; (8012000 <_strtod_l+0xb28>)
 8011f2e:	e78f      	b.n	8011e50 <_strtod_l+0x978>
 8011f30:	2600      	movs	r6, #0
 8011f32:	4f32      	ldr	r7, [pc, #200]	; (8011ffc <_strtod_l+0xb24>)
 8011f34:	e7ea      	b.n	8011f0c <_strtod_l+0xa34>
 8011f36:	4b31      	ldr	r3, [pc, #196]	; (8011ffc <_strtod_l+0xb24>)
 8011f38:	4630      	mov	r0, r6
 8011f3a:	4639      	mov	r1, r7
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f7f4 fbd3 	bl	80066e8 <__aeabi_dmul>
 8011f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f44:	4606      	mov	r6, r0
 8011f46:	460f      	mov	r7, r1
 8011f48:	b933      	cbnz	r3, 8011f58 <_strtod_l+0xa80>
 8011f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f4e:	9010      	str	r0, [sp, #64]	; 0x40
 8011f50:	9311      	str	r3, [sp, #68]	; 0x44
 8011f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011f56:	e7df      	b.n	8011f18 <_strtod_l+0xa40>
 8011f58:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011f5c:	e7f9      	b.n	8011f52 <_strtod_l+0xa7a>
 8011f5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011f62:	9b04      	ldr	r3, [sp, #16]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1ab      	bne.n	8011ec0 <_strtod_l+0x9e8>
 8011f68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f6c:	0d1b      	lsrs	r3, r3, #20
 8011f6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f70:	051b      	lsls	r3, r3, #20
 8011f72:	429a      	cmp	r2, r3
 8011f74:	465d      	mov	r5, fp
 8011f76:	d1a3      	bne.n	8011ec0 <_strtod_l+0x9e8>
 8011f78:	4639      	mov	r1, r7
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f7f4 fe64 	bl	8006c48 <__aeabi_d2iz>
 8011f80:	f7f4 fb48 	bl	8006614 <__aeabi_i2d>
 8011f84:	460b      	mov	r3, r1
 8011f86:	4602      	mov	r2, r0
 8011f88:	4639      	mov	r1, r7
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	f7f4 f9f4 	bl	8006378 <__aeabi_dsub>
 8011f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f92:	4606      	mov	r6, r0
 8011f94:	460f      	mov	r7, r1
 8011f96:	b933      	cbnz	r3, 8011fa6 <_strtod_l+0xace>
 8011f98:	f1ba 0f00 	cmp.w	sl, #0
 8011f9c:	d103      	bne.n	8011fa6 <_strtod_l+0xace>
 8011f9e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011fa2:	2d00      	cmp	r5, #0
 8011fa4:	d06d      	beq.n	8012082 <_strtod_l+0xbaa>
 8011fa6:	a30a      	add	r3, pc, #40	; (adr r3, 8011fd0 <_strtod_l+0xaf8>)
 8011fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fac:	4630      	mov	r0, r6
 8011fae:	4639      	mov	r1, r7
 8011fb0:	f7f4 fe0c 	bl	8006bcc <__aeabi_dcmplt>
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	f47f acb8 	bne.w	801192a <_strtod_l+0x452>
 8011fba:	a307      	add	r3, pc, #28	; (adr r3, 8011fd8 <_strtod_l+0xb00>)
 8011fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	f7f4 fe20 	bl	8006c08 <__aeabi_dcmpgt>
 8011fc8:	2800      	cmp	r0, #0
 8011fca:	f43f af79 	beq.w	8011ec0 <_strtod_l+0x9e8>
 8011fce:	e4ac      	b.n	801192a <_strtod_l+0x452>
 8011fd0:	94a03595 	.word	0x94a03595
 8011fd4:	3fdfffff 	.word	0x3fdfffff
 8011fd8:	35afe535 	.word	0x35afe535
 8011fdc:	3fe00000 	.word	0x3fe00000
 8011fe0:	000fffff 	.word	0x000fffff
 8011fe4:	7ff00000 	.word	0x7ff00000
 8011fe8:	7fefffff 	.word	0x7fefffff
 8011fec:	39500000 	.word	0x39500000
 8011ff0:	3ff00000 	.word	0x3ff00000
 8011ff4:	7fe00000 	.word	0x7fe00000
 8011ff8:	7c9fffff 	.word	0x7c9fffff
 8011ffc:	3fe00000 	.word	0x3fe00000
 8012000:	bff00000 	.word	0xbff00000
 8012004:	9b04      	ldr	r3, [sp, #16]
 8012006:	b333      	cbz	r3, 8012056 <_strtod_l+0xb7e>
 8012008:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801200a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801200e:	d822      	bhi.n	8012056 <_strtod_l+0xb7e>
 8012010:	a327      	add	r3, pc, #156	; (adr r3, 80120b0 <_strtod_l+0xbd8>)
 8012012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012016:	4630      	mov	r0, r6
 8012018:	4639      	mov	r1, r7
 801201a:	f7f4 fde1 	bl	8006be0 <__aeabi_dcmple>
 801201e:	b1a0      	cbz	r0, 801204a <_strtod_l+0xb72>
 8012020:	4639      	mov	r1, r7
 8012022:	4630      	mov	r0, r6
 8012024:	f7f4 fe38 	bl	8006c98 <__aeabi_d2uiz>
 8012028:	2800      	cmp	r0, #0
 801202a:	bf08      	it	eq
 801202c:	2001      	moveq	r0, #1
 801202e:	f7f4 fae1 	bl	80065f4 <__aeabi_ui2d>
 8012032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012034:	4606      	mov	r6, r0
 8012036:	460f      	mov	r7, r1
 8012038:	bb03      	cbnz	r3, 801207c <_strtod_l+0xba4>
 801203a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801203e:	9012      	str	r0, [sp, #72]	; 0x48
 8012040:	9313      	str	r3, [sp, #76]	; 0x4c
 8012042:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012046:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801204a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801204c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801204e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012052:	1a9b      	subs	r3, r3, r2
 8012054:	930b      	str	r3, [sp, #44]	; 0x2c
 8012056:	ed9d 0b08 	vldr	d0, [sp, #32]
 801205a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801205e:	f001 ffd1 	bl	8014004 <__ulp>
 8012062:	4650      	mov	r0, sl
 8012064:	ec53 2b10 	vmov	r2, r3, d0
 8012068:	4659      	mov	r1, fp
 801206a:	f7f4 fb3d 	bl	80066e8 <__aeabi_dmul>
 801206e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012072:	f7f4 f983 	bl	800637c <__adddf3>
 8012076:	4682      	mov	sl, r0
 8012078:	468b      	mov	fp, r1
 801207a:	e772      	b.n	8011f62 <_strtod_l+0xa8a>
 801207c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012080:	e7df      	b.n	8012042 <_strtod_l+0xb6a>
 8012082:	a30d      	add	r3, pc, #52	; (adr r3, 80120b8 <_strtod_l+0xbe0>)
 8012084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012088:	f7f4 fda0 	bl	8006bcc <__aeabi_dcmplt>
 801208c:	e79c      	b.n	8011fc8 <_strtod_l+0xaf0>
 801208e:	2300      	movs	r3, #0
 8012090:	930d      	str	r3, [sp, #52]	; 0x34
 8012092:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012096:	6013      	str	r3, [r2, #0]
 8012098:	f7ff ba61 	b.w	801155e <_strtod_l+0x86>
 801209c:	2b65      	cmp	r3, #101	; 0x65
 801209e:	f04f 0200 	mov.w	r2, #0
 80120a2:	f43f ab4e 	beq.w	8011742 <_strtod_l+0x26a>
 80120a6:	2101      	movs	r1, #1
 80120a8:	4614      	mov	r4, r2
 80120aa:	9104      	str	r1, [sp, #16]
 80120ac:	f7ff bacb 	b.w	8011646 <_strtod_l+0x16e>
 80120b0:	ffc00000 	.word	0xffc00000
 80120b4:	41dfffff 	.word	0x41dfffff
 80120b8:	94a03595 	.word	0x94a03595
 80120bc:	3fcfffff 	.word	0x3fcfffff

080120c0 <_strtod_r>:
 80120c0:	4b05      	ldr	r3, [pc, #20]	; (80120d8 <_strtod_r+0x18>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	b410      	push	{r4}
 80120c6:	6a1b      	ldr	r3, [r3, #32]
 80120c8:	4c04      	ldr	r4, [pc, #16]	; (80120dc <_strtod_r+0x1c>)
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	bf08      	it	eq
 80120ce:	4623      	moveq	r3, r4
 80120d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d4:	f7ff ba00 	b.w	80114d8 <_strtod_l>
 80120d8:	200008c8 	.word	0x200008c8
 80120dc:	2000092c 	.word	0x2000092c

080120e0 <_strtol_l.isra.0>:
 80120e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120e4:	4680      	mov	r8, r0
 80120e6:	4689      	mov	r9, r1
 80120e8:	4692      	mov	sl, r2
 80120ea:	461e      	mov	r6, r3
 80120ec:	460f      	mov	r7, r1
 80120ee:	463d      	mov	r5, r7
 80120f0:	9808      	ldr	r0, [sp, #32]
 80120f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120f6:	f001 fc27 	bl	8013948 <__locale_ctype_ptr_l>
 80120fa:	4420      	add	r0, r4
 80120fc:	7843      	ldrb	r3, [r0, #1]
 80120fe:	f013 0308 	ands.w	r3, r3, #8
 8012102:	d132      	bne.n	801216a <_strtol_l.isra.0+0x8a>
 8012104:	2c2d      	cmp	r4, #45	; 0x2d
 8012106:	d132      	bne.n	801216e <_strtol_l.isra.0+0x8e>
 8012108:	787c      	ldrb	r4, [r7, #1]
 801210a:	1cbd      	adds	r5, r7, #2
 801210c:	2201      	movs	r2, #1
 801210e:	2e00      	cmp	r6, #0
 8012110:	d05d      	beq.n	80121ce <_strtol_l.isra.0+0xee>
 8012112:	2e10      	cmp	r6, #16
 8012114:	d109      	bne.n	801212a <_strtol_l.isra.0+0x4a>
 8012116:	2c30      	cmp	r4, #48	; 0x30
 8012118:	d107      	bne.n	801212a <_strtol_l.isra.0+0x4a>
 801211a:	782b      	ldrb	r3, [r5, #0]
 801211c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012120:	2b58      	cmp	r3, #88	; 0x58
 8012122:	d14f      	bne.n	80121c4 <_strtol_l.isra.0+0xe4>
 8012124:	786c      	ldrb	r4, [r5, #1]
 8012126:	2610      	movs	r6, #16
 8012128:	3502      	adds	r5, #2
 801212a:	2a00      	cmp	r2, #0
 801212c:	bf14      	ite	ne
 801212e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012132:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012136:	2700      	movs	r7, #0
 8012138:	fbb1 fcf6 	udiv	ip, r1, r6
 801213c:	4638      	mov	r0, r7
 801213e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012142:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012146:	2b09      	cmp	r3, #9
 8012148:	d817      	bhi.n	801217a <_strtol_l.isra.0+0x9a>
 801214a:	461c      	mov	r4, r3
 801214c:	42a6      	cmp	r6, r4
 801214e:	dd23      	ble.n	8012198 <_strtol_l.isra.0+0xb8>
 8012150:	1c7b      	adds	r3, r7, #1
 8012152:	d007      	beq.n	8012164 <_strtol_l.isra.0+0x84>
 8012154:	4584      	cmp	ip, r0
 8012156:	d31c      	bcc.n	8012192 <_strtol_l.isra.0+0xb2>
 8012158:	d101      	bne.n	801215e <_strtol_l.isra.0+0x7e>
 801215a:	45a6      	cmp	lr, r4
 801215c:	db19      	blt.n	8012192 <_strtol_l.isra.0+0xb2>
 801215e:	fb00 4006 	mla	r0, r0, r6, r4
 8012162:	2701      	movs	r7, #1
 8012164:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012168:	e7eb      	b.n	8012142 <_strtol_l.isra.0+0x62>
 801216a:	462f      	mov	r7, r5
 801216c:	e7bf      	b.n	80120ee <_strtol_l.isra.0+0xe>
 801216e:	2c2b      	cmp	r4, #43	; 0x2b
 8012170:	bf04      	itt	eq
 8012172:	1cbd      	addeq	r5, r7, #2
 8012174:	787c      	ldrbeq	r4, [r7, #1]
 8012176:	461a      	mov	r2, r3
 8012178:	e7c9      	b.n	801210e <_strtol_l.isra.0+0x2e>
 801217a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801217e:	2b19      	cmp	r3, #25
 8012180:	d801      	bhi.n	8012186 <_strtol_l.isra.0+0xa6>
 8012182:	3c37      	subs	r4, #55	; 0x37
 8012184:	e7e2      	b.n	801214c <_strtol_l.isra.0+0x6c>
 8012186:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801218a:	2b19      	cmp	r3, #25
 801218c:	d804      	bhi.n	8012198 <_strtol_l.isra.0+0xb8>
 801218e:	3c57      	subs	r4, #87	; 0x57
 8012190:	e7dc      	b.n	801214c <_strtol_l.isra.0+0x6c>
 8012192:	f04f 37ff 	mov.w	r7, #4294967295
 8012196:	e7e5      	b.n	8012164 <_strtol_l.isra.0+0x84>
 8012198:	1c7b      	adds	r3, r7, #1
 801219a:	d108      	bne.n	80121ae <_strtol_l.isra.0+0xce>
 801219c:	2322      	movs	r3, #34	; 0x22
 801219e:	f8c8 3000 	str.w	r3, [r8]
 80121a2:	4608      	mov	r0, r1
 80121a4:	f1ba 0f00 	cmp.w	sl, #0
 80121a8:	d107      	bne.n	80121ba <_strtol_l.isra.0+0xda>
 80121aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121ae:	b102      	cbz	r2, 80121b2 <_strtol_l.isra.0+0xd2>
 80121b0:	4240      	negs	r0, r0
 80121b2:	f1ba 0f00 	cmp.w	sl, #0
 80121b6:	d0f8      	beq.n	80121aa <_strtol_l.isra.0+0xca>
 80121b8:	b10f      	cbz	r7, 80121be <_strtol_l.isra.0+0xde>
 80121ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80121be:	f8ca 9000 	str.w	r9, [sl]
 80121c2:	e7f2      	b.n	80121aa <_strtol_l.isra.0+0xca>
 80121c4:	2430      	movs	r4, #48	; 0x30
 80121c6:	2e00      	cmp	r6, #0
 80121c8:	d1af      	bne.n	801212a <_strtol_l.isra.0+0x4a>
 80121ca:	2608      	movs	r6, #8
 80121cc:	e7ad      	b.n	801212a <_strtol_l.isra.0+0x4a>
 80121ce:	2c30      	cmp	r4, #48	; 0x30
 80121d0:	d0a3      	beq.n	801211a <_strtol_l.isra.0+0x3a>
 80121d2:	260a      	movs	r6, #10
 80121d4:	e7a9      	b.n	801212a <_strtol_l.isra.0+0x4a>
	...

080121d8 <_strtol_r>:
 80121d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121da:	4c06      	ldr	r4, [pc, #24]	; (80121f4 <_strtol_r+0x1c>)
 80121dc:	4d06      	ldr	r5, [pc, #24]	; (80121f8 <_strtol_r+0x20>)
 80121de:	6824      	ldr	r4, [r4, #0]
 80121e0:	6a24      	ldr	r4, [r4, #32]
 80121e2:	2c00      	cmp	r4, #0
 80121e4:	bf08      	it	eq
 80121e6:	462c      	moveq	r4, r5
 80121e8:	9400      	str	r4, [sp, #0]
 80121ea:	f7ff ff79 	bl	80120e0 <_strtol_l.isra.0>
 80121ee:	b003      	add	sp, #12
 80121f0:	bd30      	pop	{r4, r5, pc}
 80121f2:	bf00      	nop
 80121f4:	200008c8 	.word	0x200008c8
 80121f8:	2000092c 	.word	0x2000092c

080121fc <__swbuf_r>:
 80121fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121fe:	460e      	mov	r6, r1
 8012200:	4614      	mov	r4, r2
 8012202:	4605      	mov	r5, r0
 8012204:	b118      	cbz	r0, 801220e <__swbuf_r+0x12>
 8012206:	6983      	ldr	r3, [r0, #24]
 8012208:	b90b      	cbnz	r3, 801220e <__swbuf_r+0x12>
 801220a:	f000 ffed 	bl	80131e8 <__sinit>
 801220e:	4b21      	ldr	r3, [pc, #132]	; (8012294 <__swbuf_r+0x98>)
 8012210:	429c      	cmp	r4, r3
 8012212:	d12a      	bne.n	801226a <__swbuf_r+0x6e>
 8012214:	686c      	ldr	r4, [r5, #4]
 8012216:	69a3      	ldr	r3, [r4, #24]
 8012218:	60a3      	str	r3, [r4, #8]
 801221a:	89a3      	ldrh	r3, [r4, #12]
 801221c:	071a      	lsls	r2, r3, #28
 801221e:	d52e      	bpl.n	801227e <__swbuf_r+0x82>
 8012220:	6923      	ldr	r3, [r4, #16]
 8012222:	b363      	cbz	r3, 801227e <__swbuf_r+0x82>
 8012224:	6923      	ldr	r3, [r4, #16]
 8012226:	6820      	ldr	r0, [r4, #0]
 8012228:	1ac0      	subs	r0, r0, r3
 801222a:	6963      	ldr	r3, [r4, #20]
 801222c:	b2f6      	uxtb	r6, r6
 801222e:	4283      	cmp	r3, r0
 8012230:	4637      	mov	r7, r6
 8012232:	dc04      	bgt.n	801223e <__swbuf_r+0x42>
 8012234:	4621      	mov	r1, r4
 8012236:	4628      	mov	r0, r5
 8012238:	f000 ff6c 	bl	8013114 <_fflush_r>
 801223c:	bb28      	cbnz	r0, 801228a <__swbuf_r+0x8e>
 801223e:	68a3      	ldr	r3, [r4, #8]
 8012240:	3b01      	subs	r3, #1
 8012242:	60a3      	str	r3, [r4, #8]
 8012244:	6823      	ldr	r3, [r4, #0]
 8012246:	1c5a      	adds	r2, r3, #1
 8012248:	6022      	str	r2, [r4, #0]
 801224a:	701e      	strb	r6, [r3, #0]
 801224c:	6963      	ldr	r3, [r4, #20]
 801224e:	3001      	adds	r0, #1
 8012250:	4283      	cmp	r3, r0
 8012252:	d004      	beq.n	801225e <__swbuf_r+0x62>
 8012254:	89a3      	ldrh	r3, [r4, #12]
 8012256:	07db      	lsls	r3, r3, #31
 8012258:	d519      	bpl.n	801228e <__swbuf_r+0x92>
 801225a:	2e0a      	cmp	r6, #10
 801225c:	d117      	bne.n	801228e <__swbuf_r+0x92>
 801225e:	4621      	mov	r1, r4
 8012260:	4628      	mov	r0, r5
 8012262:	f000 ff57 	bl	8013114 <_fflush_r>
 8012266:	b190      	cbz	r0, 801228e <__swbuf_r+0x92>
 8012268:	e00f      	b.n	801228a <__swbuf_r+0x8e>
 801226a:	4b0b      	ldr	r3, [pc, #44]	; (8012298 <__swbuf_r+0x9c>)
 801226c:	429c      	cmp	r4, r3
 801226e:	d101      	bne.n	8012274 <__swbuf_r+0x78>
 8012270:	68ac      	ldr	r4, [r5, #8]
 8012272:	e7d0      	b.n	8012216 <__swbuf_r+0x1a>
 8012274:	4b09      	ldr	r3, [pc, #36]	; (801229c <__swbuf_r+0xa0>)
 8012276:	429c      	cmp	r4, r3
 8012278:	bf08      	it	eq
 801227a:	68ec      	ldreq	r4, [r5, #12]
 801227c:	e7cb      	b.n	8012216 <__swbuf_r+0x1a>
 801227e:	4621      	mov	r1, r4
 8012280:	4628      	mov	r0, r5
 8012282:	f000 f80d 	bl	80122a0 <__swsetup_r>
 8012286:	2800      	cmp	r0, #0
 8012288:	d0cc      	beq.n	8012224 <__swbuf_r+0x28>
 801228a:	f04f 37ff 	mov.w	r7, #4294967295
 801228e:	4638      	mov	r0, r7
 8012290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012292:	bf00      	nop
 8012294:	0814f7f8 	.word	0x0814f7f8
 8012298:	0814f818 	.word	0x0814f818
 801229c:	0814f7d8 	.word	0x0814f7d8

080122a0 <__swsetup_r>:
 80122a0:	4b32      	ldr	r3, [pc, #200]	; (801236c <__swsetup_r+0xcc>)
 80122a2:	b570      	push	{r4, r5, r6, lr}
 80122a4:	681d      	ldr	r5, [r3, #0]
 80122a6:	4606      	mov	r6, r0
 80122a8:	460c      	mov	r4, r1
 80122aa:	b125      	cbz	r5, 80122b6 <__swsetup_r+0x16>
 80122ac:	69ab      	ldr	r3, [r5, #24]
 80122ae:	b913      	cbnz	r3, 80122b6 <__swsetup_r+0x16>
 80122b0:	4628      	mov	r0, r5
 80122b2:	f000 ff99 	bl	80131e8 <__sinit>
 80122b6:	4b2e      	ldr	r3, [pc, #184]	; (8012370 <__swsetup_r+0xd0>)
 80122b8:	429c      	cmp	r4, r3
 80122ba:	d10f      	bne.n	80122dc <__swsetup_r+0x3c>
 80122bc:	686c      	ldr	r4, [r5, #4]
 80122be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	0715      	lsls	r5, r2, #28
 80122c6:	d42c      	bmi.n	8012322 <__swsetup_r+0x82>
 80122c8:	06d0      	lsls	r0, r2, #27
 80122ca:	d411      	bmi.n	80122f0 <__swsetup_r+0x50>
 80122cc:	2209      	movs	r2, #9
 80122ce:	6032      	str	r2, [r6, #0]
 80122d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122d4:	81a3      	strh	r3, [r4, #12]
 80122d6:	f04f 30ff 	mov.w	r0, #4294967295
 80122da:	e03e      	b.n	801235a <__swsetup_r+0xba>
 80122dc:	4b25      	ldr	r3, [pc, #148]	; (8012374 <__swsetup_r+0xd4>)
 80122de:	429c      	cmp	r4, r3
 80122e0:	d101      	bne.n	80122e6 <__swsetup_r+0x46>
 80122e2:	68ac      	ldr	r4, [r5, #8]
 80122e4:	e7eb      	b.n	80122be <__swsetup_r+0x1e>
 80122e6:	4b24      	ldr	r3, [pc, #144]	; (8012378 <__swsetup_r+0xd8>)
 80122e8:	429c      	cmp	r4, r3
 80122ea:	bf08      	it	eq
 80122ec:	68ec      	ldreq	r4, [r5, #12]
 80122ee:	e7e6      	b.n	80122be <__swsetup_r+0x1e>
 80122f0:	0751      	lsls	r1, r2, #29
 80122f2:	d512      	bpl.n	801231a <__swsetup_r+0x7a>
 80122f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122f6:	b141      	cbz	r1, 801230a <__swsetup_r+0x6a>
 80122f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122fc:	4299      	cmp	r1, r3
 80122fe:	d002      	beq.n	8012306 <__swsetup_r+0x66>
 8012300:	4630      	mov	r0, r6
 8012302:	f001 ffc1 	bl	8014288 <_free_r>
 8012306:	2300      	movs	r3, #0
 8012308:	6363      	str	r3, [r4, #52]	; 0x34
 801230a:	89a3      	ldrh	r3, [r4, #12]
 801230c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012310:	81a3      	strh	r3, [r4, #12]
 8012312:	2300      	movs	r3, #0
 8012314:	6063      	str	r3, [r4, #4]
 8012316:	6923      	ldr	r3, [r4, #16]
 8012318:	6023      	str	r3, [r4, #0]
 801231a:	89a3      	ldrh	r3, [r4, #12]
 801231c:	f043 0308 	orr.w	r3, r3, #8
 8012320:	81a3      	strh	r3, [r4, #12]
 8012322:	6923      	ldr	r3, [r4, #16]
 8012324:	b94b      	cbnz	r3, 801233a <__swsetup_r+0x9a>
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801232c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012330:	d003      	beq.n	801233a <__swsetup_r+0x9a>
 8012332:	4621      	mov	r1, r4
 8012334:	4630      	mov	r0, r6
 8012336:	f001 fb3f 	bl	80139b8 <__smakebuf_r>
 801233a:	89a2      	ldrh	r2, [r4, #12]
 801233c:	f012 0301 	ands.w	r3, r2, #1
 8012340:	d00c      	beq.n	801235c <__swsetup_r+0xbc>
 8012342:	2300      	movs	r3, #0
 8012344:	60a3      	str	r3, [r4, #8]
 8012346:	6963      	ldr	r3, [r4, #20]
 8012348:	425b      	negs	r3, r3
 801234a:	61a3      	str	r3, [r4, #24]
 801234c:	6923      	ldr	r3, [r4, #16]
 801234e:	b953      	cbnz	r3, 8012366 <__swsetup_r+0xc6>
 8012350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012354:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012358:	d1ba      	bne.n	80122d0 <__swsetup_r+0x30>
 801235a:	bd70      	pop	{r4, r5, r6, pc}
 801235c:	0792      	lsls	r2, r2, #30
 801235e:	bf58      	it	pl
 8012360:	6963      	ldrpl	r3, [r4, #20]
 8012362:	60a3      	str	r3, [r4, #8]
 8012364:	e7f2      	b.n	801234c <__swsetup_r+0xac>
 8012366:	2000      	movs	r0, #0
 8012368:	e7f7      	b.n	801235a <__swsetup_r+0xba>
 801236a:	bf00      	nop
 801236c:	200008c8 	.word	0x200008c8
 8012370:	0814f7f8 	.word	0x0814f7f8
 8012374:	0814f818 	.word	0x0814f818
 8012378:	0814f7d8 	.word	0x0814f7d8

0801237c <quorem>:
 801237c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012380:	6903      	ldr	r3, [r0, #16]
 8012382:	690c      	ldr	r4, [r1, #16]
 8012384:	42a3      	cmp	r3, r4
 8012386:	4680      	mov	r8, r0
 8012388:	f2c0 8082 	blt.w	8012490 <quorem+0x114>
 801238c:	3c01      	subs	r4, #1
 801238e:	f101 0714 	add.w	r7, r1, #20
 8012392:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012396:	f100 0614 	add.w	r6, r0, #20
 801239a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801239e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80123a2:	eb06 030c 	add.w	r3, r6, ip
 80123a6:	3501      	adds	r5, #1
 80123a8:	eb07 090c 	add.w	r9, r7, ip
 80123ac:	9301      	str	r3, [sp, #4]
 80123ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80123b2:	b395      	cbz	r5, 801241a <quorem+0x9e>
 80123b4:	f04f 0a00 	mov.w	sl, #0
 80123b8:	4638      	mov	r0, r7
 80123ba:	46b6      	mov	lr, r6
 80123bc:	46d3      	mov	fp, sl
 80123be:	f850 2b04 	ldr.w	r2, [r0], #4
 80123c2:	b293      	uxth	r3, r2
 80123c4:	fb05 a303 	mla	r3, r5, r3, sl
 80123c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	ebab 0303 	sub.w	r3, fp, r3
 80123d2:	0c12      	lsrs	r2, r2, #16
 80123d4:	f8de b000 	ldr.w	fp, [lr]
 80123d8:	fb05 a202 	mla	r2, r5, r2, sl
 80123dc:	fa13 f38b 	uxtah	r3, r3, fp
 80123e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80123e4:	fa1f fb82 	uxth.w	fp, r2
 80123e8:	f8de 2000 	ldr.w	r2, [lr]
 80123ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80123f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123fa:	4581      	cmp	r9, r0
 80123fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012400:	f84e 3b04 	str.w	r3, [lr], #4
 8012404:	d2db      	bcs.n	80123be <quorem+0x42>
 8012406:	f856 300c 	ldr.w	r3, [r6, ip]
 801240a:	b933      	cbnz	r3, 801241a <quorem+0x9e>
 801240c:	9b01      	ldr	r3, [sp, #4]
 801240e:	3b04      	subs	r3, #4
 8012410:	429e      	cmp	r6, r3
 8012412:	461a      	mov	r2, r3
 8012414:	d330      	bcc.n	8012478 <quorem+0xfc>
 8012416:	f8c8 4010 	str.w	r4, [r8, #16]
 801241a:	4640      	mov	r0, r8
 801241c:	f001 fd7a 	bl	8013f14 <__mcmp>
 8012420:	2800      	cmp	r0, #0
 8012422:	db25      	blt.n	8012470 <quorem+0xf4>
 8012424:	3501      	adds	r5, #1
 8012426:	4630      	mov	r0, r6
 8012428:	f04f 0c00 	mov.w	ip, #0
 801242c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012430:	f8d0 e000 	ldr.w	lr, [r0]
 8012434:	b293      	uxth	r3, r2
 8012436:	ebac 0303 	sub.w	r3, ip, r3
 801243a:	0c12      	lsrs	r2, r2, #16
 801243c:	fa13 f38e 	uxtah	r3, r3, lr
 8012440:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012448:	b29b      	uxth	r3, r3
 801244a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801244e:	45b9      	cmp	r9, r7
 8012450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012454:	f840 3b04 	str.w	r3, [r0], #4
 8012458:	d2e8      	bcs.n	801242c <quorem+0xb0>
 801245a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801245e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012462:	b92a      	cbnz	r2, 8012470 <quorem+0xf4>
 8012464:	3b04      	subs	r3, #4
 8012466:	429e      	cmp	r6, r3
 8012468:	461a      	mov	r2, r3
 801246a:	d30b      	bcc.n	8012484 <quorem+0x108>
 801246c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012470:	4628      	mov	r0, r5
 8012472:	b003      	add	sp, #12
 8012474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012478:	6812      	ldr	r2, [r2, #0]
 801247a:	3b04      	subs	r3, #4
 801247c:	2a00      	cmp	r2, #0
 801247e:	d1ca      	bne.n	8012416 <quorem+0x9a>
 8012480:	3c01      	subs	r4, #1
 8012482:	e7c5      	b.n	8012410 <quorem+0x94>
 8012484:	6812      	ldr	r2, [r2, #0]
 8012486:	3b04      	subs	r3, #4
 8012488:	2a00      	cmp	r2, #0
 801248a:	d1ef      	bne.n	801246c <quorem+0xf0>
 801248c:	3c01      	subs	r4, #1
 801248e:	e7ea      	b.n	8012466 <quorem+0xea>
 8012490:	2000      	movs	r0, #0
 8012492:	e7ee      	b.n	8012472 <quorem+0xf6>
 8012494:	0000      	movs	r0, r0
	...

08012498 <_dtoa_r>:
 8012498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249c:	ec57 6b10 	vmov	r6, r7, d0
 80124a0:	b097      	sub	sp, #92	; 0x5c
 80124a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80124a4:	9106      	str	r1, [sp, #24]
 80124a6:	4604      	mov	r4, r0
 80124a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80124aa:	9312      	str	r3, [sp, #72]	; 0x48
 80124ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80124b0:	e9cd 6700 	strd	r6, r7, [sp]
 80124b4:	b93d      	cbnz	r5, 80124c6 <_dtoa_r+0x2e>
 80124b6:	2010      	movs	r0, #16
 80124b8:	f001 fabe 	bl	8013a38 <malloc>
 80124bc:	6260      	str	r0, [r4, #36]	; 0x24
 80124be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124c2:	6005      	str	r5, [r0, #0]
 80124c4:	60c5      	str	r5, [r0, #12]
 80124c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124c8:	6819      	ldr	r1, [r3, #0]
 80124ca:	b151      	cbz	r1, 80124e2 <_dtoa_r+0x4a>
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	604a      	str	r2, [r1, #4]
 80124d0:	2301      	movs	r3, #1
 80124d2:	4093      	lsls	r3, r2
 80124d4:	608b      	str	r3, [r1, #8]
 80124d6:	4620      	mov	r0, r4
 80124d8:	f001 fafc 	bl	8013ad4 <_Bfree>
 80124dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124de:	2200      	movs	r2, #0
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	1e3b      	subs	r3, r7, #0
 80124e4:	bfbb      	ittet	lt
 80124e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80124ea:	9301      	strlt	r3, [sp, #4]
 80124ec:	2300      	movge	r3, #0
 80124ee:	2201      	movlt	r2, #1
 80124f0:	bfac      	ite	ge
 80124f2:	f8c8 3000 	strge.w	r3, [r8]
 80124f6:	f8c8 2000 	strlt.w	r2, [r8]
 80124fa:	4baf      	ldr	r3, [pc, #700]	; (80127b8 <_dtoa_r+0x320>)
 80124fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012500:	ea33 0308 	bics.w	r3, r3, r8
 8012504:	d114      	bne.n	8012530 <_dtoa_r+0x98>
 8012506:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012508:	f242 730f 	movw	r3, #9999	; 0x270f
 801250c:	6013      	str	r3, [r2, #0]
 801250e:	9b00      	ldr	r3, [sp, #0]
 8012510:	b923      	cbnz	r3, 801251c <_dtoa_r+0x84>
 8012512:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012516:	2800      	cmp	r0, #0
 8012518:	f000 8542 	beq.w	8012fa0 <_dtoa_r+0xb08>
 801251c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801251e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80127cc <_dtoa_r+0x334>
 8012522:	2b00      	cmp	r3, #0
 8012524:	f000 8544 	beq.w	8012fb0 <_dtoa_r+0xb18>
 8012528:	f10b 0303 	add.w	r3, fp, #3
 801252c:	f000 bd3e 	b.w	8012fac <_dtoa_r+0xb14>
 8012530:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012534:	2200      	movs	r2, #0
 8012536:	2300      	movs	r3, #0
 8012538:	4630      	mov	r0, r6
 801253a:	4639      	mov	r1, r7
 801253c:	f7f4 fb3c 	bl	8006bb8 <__aeabi_dcmpeq>
 8012540:	4681      	mov	r9, r0
 8012542:	b168      	cbz	r0, 8012560 <_dtoa_r+0xc8>
 8012544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012546:	2301      	movs	r3, #1
 8012548:	6013      	str	r3, [r2, #0]
 801254a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801254c:	2b00      	cmp	r3, #0
 801254e:	f000 8524 	beq.w	8012f9a <_dtoa_r+0xb02>
 8012552:	4b9a      	ldr	r3, [pc, #616]	; (80127bc <_dtoa_r+0x324>)
 8012554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012556:	f103 3bff 	add.w	fp, r3, #4294967295
 801255a:	6013      	str	r3, [r2, #0]
 801255c:	f000 bd28 	b.w	8012fb0 <_dtoa_r+0xb18>
 8012560:	aa14      	add	r2, sp, #80	; 0x50
 8012562:	a915      	add	r1, sp, #84	; 0x54
 8012564:	ec47 6b10 	vmov	d0, r6, r7
 8012568:	4620      	mov	r0, r4
 801256a:	f001 fdc1 	bl	80140f0 <__d2b>
 801256e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012572:	9004      	str	r0, [sp, #16]
 8012574:	2d00      	cmp	r5, #0
 8012576:	d07c      	beq.n	8012672 <_dtoa_r+0x1da>
 8012578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801257c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012580:	46b2      	mov	sl, r6
 8012582:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801258a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801258e:	2200      	movs	r2, #0
 8012590:	4b8b      	ldr	r3, [pc, #556]	; (80127c0 <_dtoa_r+0x328>)
 8012592:	4650      	mov	r0, sl
 8012594:	4659      	mov	r1, fp
 8012596:	f7f3 feef 	bl	8006378 <__aeabi_dsub>
 801259a:	a381      	add	r3, pc, #516	; (adr r3, 80127a0 <_dtoa_r+0x308>)
 801259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a0:	f7f4 f8a2 	bl	80066e8 <__aeabi_dmul>
 80125a4:	a380      	add	r3, pc, #512	; (adr r3, 80127a8 <_dtoa_r+0x310>)
 80125a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125aa:	f7f3 fee7 	bl	800637c <__adddf3>
 80125ae:	4606      	mov	r6, r0
 80125b0:	4628      	mov	r0, r5
 80125b2:	460f      	mov	r7, r1
 80125b4:	f7f4 f82e 	bl	8006614 <__aeabi_i2d>
 80125b8:	a37d      	add	r3, pc, #500	; (adr r3, 80127b0 <_dtoa_r+0x318>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	f7f4 f893 	bl	80066e8 <__aeabi_dmul>
 80125c2:	4602      	mov	r2, r0
 80125c4:	460b      	mov	r3, r1
 80125c6:	4630      	mov	r0, r6
 80125c8:	4639      	mov	r1, r7
 80125ca:	f7f3 fed7 	bl	800637c <__adddf3>
 80125ce:	4606      	mov	r6, r0
 80125d0:	460f      	mov	r7, r1
 80125d2:	f7f4 fb39 	bl	8006c48 <__aeabi_d2iz>
 80125d6:	2200      	movs	r2, #0
 80125d8:	4682      	mov	sl, r0
 80125da:	2300      	movs	r3, #0
 80125dc:	4630      	mov	r0, r6
 80125de:	4639      	mov	r1, r7
 80125e0:	f7f4 faf4 	bl	8006bcc <__aeabi_dcmplt>
 80125e4:	b148      	cbz	r0, 80125fa <_dtoa_r+0x162>
 80125e6:	4650      	mov	r0, sl
 80125e8:	f7f4 f814 	bl	8006614 <__aeabi_i2d>
 80125ec:	4632      	mov	r2, r6
 80125ee:	463b      	mov	r3, r7
 80125f0:	f7f4 fae2 	bl	8006bb8 <__aeabi_dcmpeq>
 80125f4:	b908      	cbnz	r0, 80125fa <_dtoa_r+0x162>
 80125f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125fa:	f1ba 0f16 	cmp.w	sl, #22
 80125fe:	d859      	bhi.n	80126b4 <_dtoa_r+0x21c>
 8012600:	4970      	ldr	r1, [pc, #448]	; (80127c4 <_dtoa_r+0x32c>)
 8012602:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801260a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801260e:	f7f4 fafb 	bl	8006c08 <__aeabi_dcmpgt>
 8012612:	2800      	cmp	r0, #0
 8012614:	d050      	beq.n	80126b8 <_dtoa_r+0x220>
 8012616:	f10a 3aff 	add.w	sl, sl, #4294967295
 801261a:	2300      	movs	r3, #0
 801261c:	930f      	str	r3, [sp, #60]	; 0x3c
 801261e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012620:	1b5d      	subs	r5, r3, r5
 8012622:	f1b5 0801 	subs.w	r8, r5, #1
 8012626:	bf49      	itett	mi
 8012628:	f1c5 0301 	rsbmi	r3, r5, #1
 801262c:	2300      	movpl	r3, #0
 801262e:	9305      	strmi	r3, [sp, #20]
 8012630:	f04f 0800 	movmi.w	r8, #0
 8012634:	bf58      	it	pl
 8012636:	9305      	strpl	r3, [sp, #20]
 8012638:	f1ba 0f00 	cmp.w	sl, #0
 801263c:	db3e      	blt.n	80126bc <_dtoa_r+0x224>
 801263e:	2300      	movs	r3, #0
 8012640:	44d0      	add	r8, sl
 8012642:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012646:	9307      	str	r3, [sp, #28]
 8012648:	9b06      	ldr	r3, [sp, #24]
 801264a:	2b09      	cmp	r3, #9
 801264c:	f200 8090 	bhi.w	8012770 <_dtoa_r+0x2d8>
 8012650:	2b05      	cmp	r3, #5
 8012652:	bfc4      	itt	gt
 8012654:	3b04      	subgt	r3, #4
 8012656:	9306      	strgt	r3, [sp, #24]
 8012658:	9b06      	ldr	r3, [sp, #24]
 801265a:	f1a3 0302 	sub.w	r3, r3, #2
 801265e:	bfcc      	ite	gt
 8012660:	2500      	movgt	r5, #0
 8012662:	2501      	movle	r5, #1
 8012664:	2b03      	cmp	r3, #3
 8012666:	f200 808f 	bhi.w	8012788 <_dtoa_r+0x2f0>
 801266a:	e8df f003 	tbb	[pc, r3]
 801266e:	7f7d      	.short	0x7f7d
 8012670:	7131      	.short	0x7131
 8012672:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012676:	441d      	add	r5, r3
 8012678:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801267c:	2820      	cmp	r0, #32
 801267e:	dd13      	ble.n	80126a8 <_dtoa_r+0x210>
 8012680:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012684:	9b00      	ldr	r3, [sp, #0]
 8012686:	fa08 f800 	lsl.w	r8, r8, r0
 801268a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801268e:	fa23 f000 	lsr.w	r0, r3, r0
 8012692:	ea48 0000 	orr.w	r0, r8, r0
 8012696:	f7f3 ffad 	bl	80065f4 <__aeabi_ui2d>
 801269a:	2301      	movs	r3, #1
 801269c:	4682      	mov	sl, r0
 801269e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80126a2:	3d01      	subs	r5, #1
 80126a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80126a6:	e772      	b.n	801258e <_dtoa_r+0xf6>
 80126a8:	9b00      	ldr	r3, [sp, #0]
 80126aa:	f1c0 0020 	rsb	r0, r0, #32
 80126ae:	fa03 f000 	lsl.w	r0, r3, r0
 80126b2:	e7f0      	b.n	8012696 <_dtoa_r+0x1fe>
 80126b4:	2301      	movs	r3, #1
 80126b6:	e7b1      	b.n	801261c <_dtoa_r+0x184>
 80126b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80126ba:	e7b0      	b.n	801261e <_dtoa_r+0x186>
 80126bc:	9b05      	ldr	r3, [sp, #20]
 80126be:	eba3 030a 	sub.w	r3, r3, sl
 80126c2:	9305      	str	r3, [sp, #20]
 80126c4:	f1ca 0300 	rsb	r3, sl, #0
 80126c8:	9307      	str	r3, [sp, #28]
 80126ca:	2300      	movs	r3, #0
 80126cc:	930e      	str	r3, [sp, #56]	; 0x38
 80126ce:	e7bb      	b.n	8012648 <_dtoa_r+0x1b0>
 80126d0:	2301      	movs	r3, #1
 80126d2:	930a      	str	r3, [sp, #40]	; 0x28
 80126d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	dd59      	ble.n	801278e <_dtoa_r+0x2f6>
 80126da:	9302      	str	r3, [sp, #8]
 80126dc:	4699      	mov	r9, r3
 80126de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80126e0:	2200      	movs	r2, #0
 80126e2:	6072      	str	r2, [r6, #4]
 80126e4:	2204      	movs	r2, #4
 80126e6:	f102 0014 	add.w	r0, r2, #20
 80126ea:	4298      	cmp	r0, r3
 80126ec:	6871      	ldr	r1, [r6, #4]
 80126ee:	d953      	bls.n	8012798 <_dtoa_r+0x300>
 80126f0:	4620      	mov	r0, r4
 80126f2:	f001 f9bb 	bl	8013a6c <_Balloc>
 80126f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126f8:	6030      	str	r0, [r6, #0]
 80126fa:	f1b9 0f0e 	cmp.w	r9, #14
 80126fe:	f8d3 b000 	ldr.w	fp, [r3]
 8012702:	f200 80e6 	bhi.w	80128d2 <_dtoa_r+0x43a>
 8012706:	2d00      	cmp	r5, #0
 8012708:	f000 80e3 	beq.w	80128d2 <_dtoa_r+0x43a>
 801270c:	ed9d 7b00 	vldr	d7, [sp]
 8012710:	f1ba 0f00 	cmp.w	sl, #0
 8012714:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012718:	dd74      	ble.n	8012804 <_dtoa_r+0x36c>
 801271a:	4a2a      	ldr	r2, [pc, #168]	; (80127c4 <_dtoa_r+0x32c>)
 801271c:	f00a 030f 	and.w	r3, sl, #15
 8012720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012724:	ed93 7b00 	vldr	d7, [r3]
 8012728:	ea4f 162a 	mov.w	r6, sl, asr #4
 801272c:	06f0      	lsls	r0, r6, #27
 801272e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012732:	d565      	bpl.n	8012800 <_dtoa_r+0x368>
 8012734:	4b24      	ldr	r3, [pc, #144]	; (80127c8 <_dtoa_r+0x330>)
 8012736:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801273a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801273e:	f7f4 f8fd 	bl	800693c <__aeabi_ddiv>
 8012742:	e9cd 0100 	strd	r0, r1, [sp]
 8012746:	f006 060f 	and.w	r6, r6, #15
 801274a:	2503      	movs	r5, #3
 801274c:	4f1e      	ldr	r7, [pc, #120]	; (80127c8 <_dtoa_r+0x330>)
 801274e:	e04c      	b.n	80127ea <_dtoa_r+0x352>
 8012750:	2301      	movs	r3, #1
 8012752:	930a      	str	r3, [sp, #40]	; 0x28
 8012754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012756:	4453      	add	r3, sl
 8012758:	f103 0901 	add.w	r9, r3, #1
 801275c:	9302      	str	r3, [sp, #8]
 801275e:	464b      	mov	r3, r9
 8012760:	2b01      	cmp	r3, #1
 8012762:	bfb8      	it	lt
 8012764:	2301      	movlt	r3, #1
 8012766:	e7ba      	b.n	80126de <_dtoa_r+0x246>
 8012768:	2300      	movs	r3, #0
 801276a:	e7b2      	b.n	80126d2 <_dtoa_r+0x23a>
 801276c:	2300      	movs	r3, #0
 801276e:	e7f0      	b.n	8012752 <_dtoa_r+0x2ba>
 8012770:	2501      	movs	r5, #1
 8012772:	2300      	movs	r3, #0
 8012774:	9306      	str	r3, [sp, #24]
 8012776:	950a      	str	r5, [sp, #40]	; 0x28
 8012778:	f04f 33ff 	mov.w	r3, #4294967295
 801277c:	9302      	str	r3, [sp, #8]
 801277e:	4699      	mov	r9, r3
 8012780:	2200      	movs	r2, #0
 8012782:	2312      	movs	r3, #18
 8012784:	920b      	str	r2, [sp, #44]	; 0x2c
 8012786:	e7aa      	b.n	80126de <_dtoa_r+0x246>
 8012788:	2301      	movs	r3, #1
 801278a:	930a      	str	r3, [sp, #40]	; 0x28
 801278c:	e7f4      	b.n	8012778 <_dtoa_r+0x2e0>
 801278e:	2301      	movs	r3, #1
 8012790:	9302      	str	r3, [sp, #8]
 8012792:	4699      	mov	r9, r3
 8012794:	461a      	mov	r2, r3
 8012796:	e7f5      	b.n	8012784 <_dtoa_r+0x2ec>
 8012798:	3101      	adds	r1, #1
 801279a:	6071      	str	r1, [r6, #4]
 801279c:	0052      	lsls	r2, r2, #1
 801279e:	e7a2      	b.n	80126e6 <_dtoa_r+0x24e>
 80127a0:	636f4361 	.word	0x636f4361
 80127a4:	3fd287a7 	.word	0x3fd287a7
 80127a8:	8b60c8b3 	.word	0x8b60c8b3
 80127ac:	3fc68a28 	.word	0x3fc68a28
 80127b0:	509f79fb 	.word	0x509f79fb
 80127b4:	3fd34413 	.word	0x3fd34413
 80127b8:	7ff00000 	.word	0x7ff00000
 80127bc:	0814f74d 	.word	0x0814f74d
 80127c0:	3ff80000 	.word	0x3ff80000
 80127c4:	0814f870 	.word	0x0814f870
 80127c8:	0814f848 	.word	0x0814f848
 80127cc:	0814f7d1 	.word	0x0814f7d1
 80127d0:	07f1      	lsls	r1, r6, #31
 80127d2:	d508      	bpl.n	80127e6 <_dtoa_r+0x34e>
 80127d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80127d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80127dc:	f7f3 ff84 	bl	80066e8 <__aeabi_dmul>
 80127e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80127e4:	3501      	adds	r5, #1
 80127e6:	1076      	asrs	r6, r6, #1
 80127e8:	3708      	adds	r7, #8
 80127ea:	2e00      	cmp	r6, #0
 80127ec:	d1f0      	bne.n	80127d0 <_dtoa_r+0x338>
 80127ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80127f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127f6:	f7f4 f8a1 	bl	800693c <__aeabi_ddiv>
 80127fa:	e9cd 0100 	strd	r0, r1, [sp]
 80127fe:	e01a      	b.n	8012836 <_dtoa_r+0x39e>
 8012800:	2502      	movs	r5, #2
 8012802:	e7a3      	b.n	801274c <_dtoa_r+0x2b4>
 8012804:	f000 80a0 	beq.w	8012948 <_dtoa_r+0x4b0>
 8012808:	f1ca 0600 	rsb	r6, sl, #0
 801280c:	4b9f      	ldr	r3, [pc, #636]	; (8012a8c <_dtoa_r+0x5f4>)
 801280e:	4fa0      	ldr	r7, [pc, #640]	; (8012a90 <_dtoa_r+0x5f8>)
 8012810:	f006 020f 	and.w	r2, r6, #15
 8012814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012820:	f7f3 ff62 	bl	80066e8 <__aeabi_dmul>
 8012824:	e9cd 0100 	strd	r0, r1, [sp]
 8012828:	1136      	asrs	r6, r6, #4
 801282a:	2300      	movs	r3, #0
 801282c:	2502      	movs	r5, #2
 801282e:	2e00      	cmp	r6, #0
 8012830:	d17f      	bne.n	8012932 <_dtoa_r+0x49a>
 8012832:	2b00      	cmp	r3, #0
 8012834:	d1e1      	bne.n	80127fa <_dtoa_r+0x362>
 8012836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 8087 	beq.w	801294c <_dtoa_r+0x4b4>
 801283e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012842:	2200      	movs	r2, #0
 8012844:	4b93      	ldr	r3, [pc, #588]	; (8012a94 <_dtoa_r+0x5fc>)
 8012846:	4630      	mov	r0, r6
 8012848:	4639      	mov	r1, r7
 801284a:	f7f4 f9bf 	bl	8006bcc <__aeabi_dcmplt>
 801284e:	2800      	cmp	r0, #0
 8012850:	d07c      	beq.n	801294c <_dtoa_r+0x4b4>
 8012852:	f1b9 0f00 	cmp.w	r9, #0
 8012856:	d079      	beq.n	801294c <_dtoa_r+0x4b4>
 8012858:	9b02      	ldr	r3, [sp, #8]
 801285a:	2b00      	cmp	r3, #0
 801285c:	dd35      	ble.n	80128ca <_dtoa_r+0x432>
 801285e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012862:	9308      	str	r3, [sp, #32]
 8012864:	4639      	mov	r1, r7
 8012866:	2200      	movs	r2, #0
 8012868:	4b8b      	ldr	r3, [pc, #556]	; (8012a98 <_dtoa_r+0x600>)
 801286a:	4630      	mov	r0, r6
 801286c:	f7f3 ff3c 	bl	80066e8 <__aeabi_dmul>
 8012870:	e9cd 0100 	strd	r0, r1, [sp]
 8012874:	9f02      	ldr	r7, [sp, #8]
 8012876:	3501      	adds	r5, #1
 8012878:	4628      	mov	r0, r5
 801287a:	f7f3 fecb 	bl	8006614 <__aeabi_i2d>
 801287e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012882:	f7f3 ff31 	bl	80066e8 <__aeabi_dmul>
 8012886:	2200      	movs	r2, #0
 8012888:	4b84      	ldr	r3, [pc, #528]	; (8012a9c <_dtoa_r+0x604>)
 801288a:	f7f3 fd77 	bl	800637c <__adddf3>
 801288e:	4605      	mov	r5, r0
 8012890:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012894:	2f00      	cmp	r7, #0
 8012896:	d15d      	bne.n	8012954 <_dtoa_r+0x4bc>
 8012898:	2200      	movs	r2, #0
 801289a:	4b81      	ldr	r3, [pc, #516]	; (8012aa0 <_dtoa_r+0x608>)
 801289c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128a0:	f7f3 fd6a 	bl	8006378 <__aeabi_dsub>
 80128a4:	462a      	mov	r2, r5
 80128a6:	4633      	mov	r3, r6
 80128a8:	e9cd 0100 	strd	r0, r1, [sp]
 80128ac:	f7f4 f9ac 	bl	8006c08 <__aeabi_dcmpgt>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	f040 8288 	bne.w	8012dc6 <_dtoa_r+0x92e>
 80128b6:	462a      	mov	r2, r5
 80128b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80128bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128c0:	f7f4 f984 	bl	8006bcc <__aeabi_dcmplt>
 80128c4:	2800      	cmp	r0, #0
 80128c6:	f040 827c 	bne.w	8012dc2 <_dtoa_r+0x92a>
 80128ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80128ce:	e9cd 2300 	strd	r2, r3, [sp]
 80128d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	f2c0 8150 	blt.w	8012b7a <_dtoa_r+0x6e2>
 80128da:	f1ba 0f0e 	cmp.w	sl, #14
 80128de:	f300 814c 	bgt.w	8012b7a <_dtoa_r+0x6e2>
 80128e2:	4b6a      	ldr	r3, [pc, #424]	; (8012a8c <_dtoa_r+0x5f4>)
 80128e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80128e8:	ed93 7b00 	vldr	d7, [r3]
 80128ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128f4:	f280 80d8 	bge.w	8012aa8 <_dtoa_r+0x610>
 80128f8:	f1b9 0f00 	cmp.w	r9, #0
 80128fc:	f300 80d4 	bgt.w	8012aa8 <_dtoa_r+0x610>
 8012900:	f040 825e 	bne.w	8012dc0 <_dtoa_r+0x928>
 8012904:	2200      	movs	r2, #0
 8012906:	4b66      	ldr	r3, [pc, #408]	; (8012aa0 <_dtoa_r+0x608>)
 8012908:	ec51 0b17 	vmov	r0, r1, d7
 801290c:	f7f3 feec 	bl	80066e8 <__aeabi_dmul>
 8012910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012914:	f7f4 f96e 	bl	8006bf4 <__aeabi_dcmpge>
 8012918:	464f      	mov	r7, r9
 801291a:	464e      	mov	r6, r9
 801291c:	2800      	cmp	r0, #0
 801291e:	f040 8234 	bne.w	8012d8a <_dtoa_r+0x8f2>
 8012922:	2331      	movs	r3, #49	; 0x31
 8012924:	f10b 0501 	add.w	r5, fp, #1
 8012928:	f88b 3000 	strb.w	r3, [fp]
 801292c:	f10a 0a01 	add.w	sl, sl, #1
 8012930:	e22f      	b.n	8012d92 <_dtoa_r+0x8fa>
 8012932:	07f2      	lsls	r2, r6, #31
 8012934:	d505      	bpl.n	8012942 <_dtoa_r+0x4aa>
 8012936:	e9d7 2300 	ldrd	r2, r3, [r7]
 801293a:	f7f3 fed5 	bl	80066e8 <__aeabi_dmul>
 801293e:	3501      	adds	r5, #1
 8012940:	2301      	movs	r3, #1
 8012942:	1076      	asrs	r6, r6, #1
 8012944:	3708      	adds	r7, #8
 8012946:	e772      	b.n	801282e <_dtoa_r+0x396>
 8012948:	2502      	movs	r5, #2
 801294a:	e774      	b.n	8012836 <_dtoa_r+0x39e>
 801294c:	f8cd a020 	str.w	sl, [sp, #32]
 8012950:	464f      	mov	r7, r9
 8012952:	e791      	b.n	8012878 <_dtoa_r+0x3e0>
 8012954:	4b4d      	ldr	r3, [pc, #308]	; (8012a8c <_dtoa_r+0x5f4>)
 8012956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801295a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801295e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012960:	2b00      	cmp	r3, #0
 8012962:	d047      	beq.n	80129f4 <_dtoa_r+0x55c>
 8012964:	4602      	mov	r2, r0
 8012966:	460b      	mov	r3, r1
 8012968:	2000      	movs	r0, #0
 801296a:	494e      	ldr	r1, [pc, #312]	; (8012aa4 <_dtoa_r+0x60c>)
 801296c:	f7f3 ffe6 	bl	800693c <__aeabi_ddiv>
 8012970:	462a      	mov	r2, r5
 8012972:	4633      	mov	r3, r6
 8012974:	f7f3 fd00 	bl	8006378 <__aeabi_dsub>
 8012978:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801297c:	465d      	mov	r5, fp
 801297e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012982:	f7f4 f961 	bl	8006c48 <__aeabi_d2iz>
 8012986:	4606      	mov	r6, r0
 8012988:	f7f3 fe44 	bl	8006614 <__aeabi_i2d>
 801298c:	4602      	mov	r2, r0
 801298e:	460b      	mov	r3, r1
 8012990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012994:	f7f3 fcf0 	bl	8006378 <__aeabi_dsub>
 8012998:	3630      	adds	r6, #48	; 0x30
 801299a:	f805 6b01 	strb.w	r6, [r5], #1
 801299e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129a2:	e9cd 0100 	strd	r0, r1, [sp]
 80129a6:	f7f4 f911 	bl	8006bcc <__aeabi_dcmplt>
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d163      	bne.n	8012a76 <_dtoa_r+0x5de>
 80129ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129b2:	2000      	movs	r0, #0
 80129b4:	4937      	ldr	r1, [pc, #220]	; (8012a94 <_dtoa_r+0x5fc>)
 80129b6:	f7f3 fcdf 	bl	8006378 <__aeabi_dsub>
 80129ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129be:	f7f4 f905 	bl	8006bcc <__aeabi_dcmplt>
 80129c2:	2800      	cmp	r0, #0
 80129c4:	f040 80b7 	bne.w	8012b36 <_dtoa_r+0x69e>
 80129c8:	eba5 030b 	sub.w	r3, r5, fp
 80129cc:	429f      	cmp	r7, r3
 80129ce:	f77f af7c 	ble.w	80128ca <_dtoa_r+0x432>
 80129d2:	2200      	movs	r2, #0
 80129d4:	4b30      	ldr	r3, [pc, #192]	; (8012a98 <_dtoa_r+0x600>)
 80129d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129da:	f7f3 fe85 	bl	80066e8 <__aeabi_dmul>
 80129de:	2200      	movs	r2, #0
 80129e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80129e4:	4b2c      	ldr	r3, [pc, #176]	; (8012a98 <_dtoa_r+0x600>)
 80129e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ea:	f7f3 fe7d 	bl	80066e8 <__aeabi_dmul>
 80129ee:	e9cd 0100 	strd	r0, r1, [sp]
 80129f2:	e7c4      	b.n	801297e <_dtoa_r+0x4e6>
 80129f4:	462a      	mov	r2, r5
 80129f6:	4633      	mov	r3, r6
 80129f8:	f7f3 fe76 	bl	80066e8 <__aeabi_dmul>
 80129fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012a00:	eb0b 0507 	add.w	r5, fp, r7
 8012a04:	465e      	mov	r6, fp
 8012a06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a0a:	f7f4 f91d 	bl	8006c48 <__aeabi_d2iz>
 8012a0e:	4607      	mov	r7, r0
 8012a10:	f7f3 fe00 	bl	8006614 <__aeabi_i2d>
 8012a14:	3730      	adds	r7, #48	; 0x30
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a1e:	f7f3 fcab 	bl	8006378 <__aeabi_dsub>
 8012a22:	f806 7b01 	strb.w	r7, [r6], #1
 8012a26:	42ae      	cmp	r6, r5
 8012a28:	e9cd 0100 	strd	r0, r1, [sp]
 8012a2c:	f04f 0200 	mov.w	r2, #0
 8012a30:	d126      	bne.n	8012a80 <_dtoa_r+0x5e8>
 8012a32:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <_dtoa_r+0x60c>)
 8012a34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a38:	f7f3 fca0 	bl	800637c <__adddf3>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a44:	f7f4 f8e0 	bl	8006c08 <__aeabi_dcmpgt>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	d174      	bne.n	8012b36 <_dtoa_r+0x69e>
 8012a4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a50:	2000      	movs	r0, #0
 8012a52:	4914      	ldr	r1, [pc, #80]	; (8012aa4 <_dtoa_r+0x60c>)
 8012a54:	f7f3 fc90 	bl	8006378 <__aeabi_dsub>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a60:	f7f4 f8b4 	bl	8006bcc <__aeabi_dcmplt>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	f43f af30 	beq.w	80128ca <_dtoa_r+0x432>
 8012a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a6e:	2b30      	cmp	r3, #48	; 0x30
 8012a70:	f105 32ff 	add.w	r2, r5, #4294967295
 8012a74:	d002      	beq.n	8012a7c <_dtoa_r+0x5e4>
 8012a76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012a7a:	e04a      	b.n	8012b12 <_dtoa_r+0x67a>
 8012a7c:	4615      	mov	r5, r2
 8012a7e:	e7f4      	b.n	8012a6a <_dtoa_r+0x5d2>
 8012a80:	4b05      	ldr	r3, [pc, #20]	; (8012a98 <_dtoa_r+0x600>)
 8012a82:	f7f3 fe31 	bl	80066e8 <__aeabi_dmul>
 8012a86:	e9cd 0100 	strd	r0, r1, [sp]
 8012a8a:	e7bc      	b.n	8012a06 <_dtoa_r+0x56e>
 8012a8c:	0814f870 	.word	0x0814f870
 8012a90:	0814f848 	.word	0x0814f848
 8012a94:	3ff00000 	.word	0x3ff00000
 8012a98:	40240000 	.word	0x40240000
 8012a9c:	401c0000 	.word	0x401c0000
 8012aa0:	40140000 	.word	0x40140000
 8012aa4:	3fe00000 	.word	0x3fe00000
 8012aa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012aac:	465d      	mov	r5, fp
 8012aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	4639      	mov	r1, r7
 8012ab6:	f7f3 ff41 	bl	800693c <__aeabi_ddiv>
 8012aba:	f7f4 f8c5 	bl	8006c48 <__aeabi_d2iz>
 8012abe:	4680      	mov	r8, r0
 8012ac0:	f7f3 fda8 	bl	8006614 <__aeabi_i2d>
 8012ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ac8:	f7f3 fe0e 	bl	80066e8 <__aeabi_dmul>
 8012acc:	4602      	mov	r2, r0
 8012ace:	460b      	mov	r3, r1
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	4639      	mov	r1, r7
 8012ad4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012ad8:	f7f3 fc4e 	bl	8006378 <__aeabi_dsub>
 8012adc:	f805 6b01 	strb.w	r6, [r5], #1
 8012ae0:	eba5 060b 	sub.w	r6, r5, fp
 8012ae4:	45b1      	cmp	r9, r6
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	460b      	mov	r3, r1
 8012aea:	d139      	bne.n	8012b60 <_dtoa_r+0x6c8>
 8012aec:	f7f3 fc46 	bl	800637c <__adddf3>
 8012af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012af4:	4606      	mov	r6, r0
 8012af6:	460f      	mov	r7, r1
 8012af8:	f7f4 f886 	bl	8006c08 <__aeabi_dcmpgt>
 8012afc:	b9c8      	cbnz	r0, 8012b32 <_dtoa_r+0x69a>
 8012afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b02:	4630      	mov	r0, r6
 8012b04:	4639      	mov	r1, r7
 8012b06:	f7f4 f857 	bl	8006bb8 <__aeabi_dcmpeq>
 8012b0a:	b110      	cbz	r0, 8012b12 <_dtoa_r+0x67a>
 8012b0c:	f018 0f01 	tst.w	r8, #1
 8012b10:	d10f      	bne.n	8012b32 <_dtoa_r+0x69a>
 8012b12:	9904      	ldr	r1, [sp, #16]
 8012b14:	4620      	mov	r0, r4
 8012b16:	f000 ffdd 	bl	8013ad4 <_Bfree>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012b1e:	702b      	strb	r3, [r5, #0]
 8012b20:	f10a 0301 	add.w	r3, sl, #1
 8012b24:	6013      	str	r3, [r2, #0]
 8012b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	f000 8241 	beq.w	8012fb0 <_dtoa_r+0xb18>
 8012b2e:	601d      	str	r5, [r3, #0]
 8012b30:	e23e      	b.n	8012fb0 <_dtoa_r+0xb18>
 8012b32:	f8cd a020 	str.w	sl, [sp, #32]
 8012b36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012b3a:	2a39      	cmp	r2, #57	; 0x39
 8012b3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8012b40:	d108      	bne.n	8012b54 <_dtoa_r+0x6bc>
 8012b42:	459b      	cmp	fp, r3
 8012b44:	d10a      	bne.n	8012b5c <_dtoa_r+0x6c4>
 8012b46:	9b08      	ldr	r3, [sp, #32]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	9308      	str	r3, [sp, #32]
 8012b4c:	2330      	movs	r3, #48	; 0x30
 8012b4e:	f88b 3000 	strb.w	r3, [fp]
 8012b52:	465b      	mov	r3, fp
 8012b54:	781a      	ldrb	r2, [r3, #0]
 8012b56:	3201      	adds	r2, #1
 8012b58:	701a      	strb	r2, [r3, #0]
 8012b5a:	e78c      	b.n	8012a76 <_dtoa_r+0x5de>
 8012b5c:	461d      	mov	r5, r3
 8012b5e:	e7ea      	b.n	8012b36 <_dtoa_r+0x69e>
 8012b60:	2200      	movs	r2, #0
 8012b62:	4b9b      	ldr	r3, [pc, #620]	; (8012dd0 <_dtoa_r+0x938>)
 8012b64:	f7f3 fdc0 	bl	80066e8 <__aeabi_dmul>
 8012b68:	2200      	movs	r2, #0
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	4606      	mov	r6, r0
 8012b6e:	460f      	mov	r7, r1
 8012b70:	f7f4 f822 	bl	8006bb8 <__aeabi_dcmpeq>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d09a      	beq.n	8012aae <_dtoa_r+0x616>
 8012b78:	e7cb      	b.n	8012b12 <_dtoa_r+0x67a>
 8012b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b7c:	2a00      	cmp	r2, #0
 8012b7e:	f000 808b 	beq.w	8012c98 <_dtoa_r+0x800>
 8012b82:	9a06      	ldr	r2, [sp, #24]
 8012b84:	2a01      	cmp	r2, #1
 8012b86:	dc6e      	bgt.n	8012c66 <_dtoa_r+0x7ce>
 8012b88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b8a:	2a00      	cmp	r2, #0
 8012b8c:	d067      	beq.n	8012c5e <_dtoa_r+0x7c6>
 8012b8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b92:	9f07      	ldr	r7, [sp, #28]
 8012b94:	9d05      	ldr	r5, [sp, #20]
 8012b96:	9a05      	ldr	r2, [sp, #20]
 8012b98:	2101      	movs	r1, #1
 8012b9a:	441a      	add	r2, r3
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	9205      	str	r2, [sp, #20]
 8012ba0:	4498      	add	r8, r3
 8012ba2:	f001 f875 	bl	8013c90 <__i2b>
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	2d00      	cmp	r5, #0
 8012baa:	dd0c      	ble.n	8012bc6 <_dtoa_r+0x72e>
 8012bac:	f1b8 0f00 	cmp.w	r8, #0
 8012bb0:	dd09      	ble.n	8012bc6 <_dtoa_r+0x72e>
 8012bb2:	4545      	cmp	r5, r8
 8012bb4:	9a05      	ldr	r2, [sp, #20]
 8012bb6:	462b      	mov	r3, r5
 8012bb8:	bfa8      	it	ge
 8012bba:	4643      	movge	r3, r8
 8012bbc:	1ad2      	subs	r2, r2, r3
 8012bbe:	9205      	str	r2, [sp, #20]
 8012bc0:	1aed      	subs	r5, r5, r3
 8012bc2:	eba8 0803 	sub.w	r8, r8, r3
 8012bc6:	9b07      	ldr	r3, [sp, #28]
 8012bc8:	b1eb      	cbz	r3, 8012c06 <_dtoa_r+0x76e>
 8012bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d067      	beq.n	8012ca0 <_dtoa_r+0x808>
 8012bd0:	b18f      	cbz	r7, 8012bf6 <_dtoa_r+0x75e>
 8012bd2:	4631      	mov	r1, r6
 8012bd4:	463a      	mov	r2, r7
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f001 f8fa 	bl	8013dd0 <__pow5mult>
 8012bdc:	9a04      	ldr	r2, [sp, #16]
 8012bde:	4601      	mov	r1, r0
 8012be0:	4606      	mov	r6, r0
 8012be2:	4620      	mov	r0, r4
 8012be4:	f001 f85d 	bl	8013ca2 <__multiply>
 8012be8:	9904      	ldr	r1, [sp, #16]
 8012bea:	9008      	str	r0, [sp, #32]
 8012bec:	4620      	mov	r0, r4
 8012bee:	f000 ff71 	bl	8013ad4 <_Bfree>
 8012bf2:	9b08      	ldr	r3, [sp, #32]
 8012bf4:	9304      	str	r3, [sp, #16]
 8012bf6:	9b07      	ldr	r3, [sp, #28]
 8012bf8:	1bda      	subs	r2, r3, r7
 8012bfa:	d004      	beq.n	8012c06 <_dtoa_r+0x76e>
 8012bfc:	9904      	ldr	r1, [sp, #16]
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f001 f8e6 	bl	8013dd0 <__pow5mult>
 8012c04:	9004      	str	r0, [sp, #16]
 8012c06:	2101      	movs	r1, #1
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f001 f841 	bl	8013c90 <__i2b>
 8012c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c10:	4607      	mov	r7, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f000 81d0 	beq.w	8012fb8 <_dtoa_r+0xb20>
 8012c18:	461a      	mov	r2, r3
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f001 f8d7 	bl	8013dd0 <__pow5mult>
 8012c22:	9b06      	ldr	r3, [sp, #24]
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	4607      	mov	r7, r0
 8012c28:	dc40      	bgt.n	8012cac <_dtoa_r+0x814>
 8012c2a:	9b00      	ldr	r3, [sp, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d139      	bne.n	8012ca4 <_dtoa_r+0x80c>
 8012c30:	9b01      	ldr	r3, [sp, #4]
 8012c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d136      	bne.n	8012ca8 <_dtoa_r+0x810>
 8012c3a:	9b01      	ldr	r3, [sp, #4]
 8012c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c40:	0d1b      	lsrs	r3, r3, #20
 8012c42:	051b      	lsls	r3, r3, #20
 8012c44:	b12b      	cbz	r3, 8012c52 <_dtoa_r+0x7ba>
 8012c46:	9b05      	ldr	r3, [sp, #20]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	9305      	str	r3, [sp, #20]
 8012c4c:	f108 0801 	add.w	r8, r8, #1
 8012c50:	2301      	movs	r3, #1
 8012c52:	9307      	str	r3, [sp, #28]
 8012c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d12a      	bne.n	8012cb0 <_dtoa_r+0x818>
 8012c5a:	2001      	movs	r0, #1
 8012c5c:	e030      	b.n	8012cc0 <_dtoa_r+0x828>
 8012c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c64:	e795      	b.n	8012b92 <_dtoa_r+0x6fa>
 8012c66:	9b07      	ldr	r3, [sp, #28]
 8012c68:	f109 37ff 	add.w	r7, r9, #4294967295
 8012c6c:	42bb      	cmp	r3, r7
 8012c6e:	bfbf      	itttt	lt
 8012c70:	9b07      	ldrlt	r3, [sp, #28]
 8012c72:	9707      	strlt	r7, [sp, #28]
 8012c74:	1afa      	sublt	r2, r7, r3
 8012c76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012c78:	bfbb      	ittet	lt
 8012c7a:	189b      	addlt	r3, r3, r2
 8012c7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012c7e:	1bdf      	subge	r7, r3, r7
 8012c80:	2700      	movlt	r7, #0
 8012c82:	f1b9 0f00 	cmp.w	r9, #0
 8012c86:	bfb5      	itete	lt
 8012c88:	9b05      	ldrlt	r3, [sp, #20]
 8012c8a:	9d05      	ldrge	r5, [sp, #20]
 8012c8c:	eba3 0509 	sublt.w	r5, r3, r9
 8012c90:	464b      	movge	r3, r9
 8012c92:	bfb8      	it	lt
 8012c94:	2300      	movlt	r3, #0
 8012c96:	e77e      	b.n	8012b96 <_dtoa_r+0x6fe>
 8012c98:	9f07      	ldr	r7, [sp, #28]
 8012c9a:	9d05      	ldr	r5, [sp, #20]
 8012c9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012c9e:	e783      	b.n	8012ba8 <_dtoa_r+0x710>
 8012ca0:	9a07      	ldr	r2, [sp, #28]
 8012ca2:	e7ab      	b.n	8012bfc <_dtoa_r+0x764>
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	e7d4      	b.n	8012c52 <_dtoa_r+0x7ba>
 8012ca8:	9b00      	ldr	r3, [sp, #0]
 8012caa:	e7d2      	b.n	8012c52 <_dtoa_r+0x7ba>
 8012cac:	2300      	movs	r3, #0
 8012cae:	9307      	str	r3, [sp, #28]
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012cb6:	6918      	ldr	r0, [r3, #16]
 8012cb8:	f000 ff9c 	bl	8013bf4 <__hi0bits>
 8012cbc:	f1c0 0020 	rsb	r0, r0, #32
 8012cc0:	4440      	add	r0, r8
 8012cc2:	f010 001f 	ands.w	r0, r0, #31
 8012cc6:	d047      	beq.n	8012d58 <_dtoa_r+0x8c0>
 8012cc8:	f1c0 0320 	rsb	r3, r0, #32
 8012ccc:	2b04      	cmp	r3, #4
 8012cce:	dd3b      	ble.n	8012d48 <_dtoa_r+0x8b0>
 8012cd0:	9b05      	ldr	r3, [sp, #20]
 8012cd2:	f1c0 001c 	rsb	r0, r0, #28
 8012cd6:	4403      	add	r3, r0
 8012cd8:	9305      	str	r3, [sp, #20]
 8012cda:	4405      	add	r5, r0
 8012cdc:	4480      	add	r8, r0
 8012cde:	9b05      	ldr	r3, [sp, #20]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	dd05      	ble.n	8012cf0 <_dtoa_r+0x858>
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	9904      	ldr	r1, [sp, #16]
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f001 f8bf 	bl	8013e6c <__lshift>
 8012cee:	9004      	str	r0, [sp, #16]
 8012cf0:	f1b8 0f00 	cmp.w	r8, #0
 8012cf4:	dd05      	ble.n	8012d02 <_dtoa_r+0x86a>
 8012cf6:	4639      	mov	r1, r7
 8012cf8:	4642      	mov	r2, r8
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f001 f8b6 	bl	8013e6c <__lshift>
 8012d00:	4607      	mov	r7, r0
 8012d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d04:	b353      	cbz	r3, 8012d5c <_dtoa_r+0x8c4>
 8012d06:	4639      	mov	r1, r7
 8012d08:	9804      	ldr	r0, [sp, #16]
 8012d0a:	f001 f903 	bl	8013f14 <__mcmp>
 8012d0e:	2800      	cmp	r0, #0
 8012d10:	da24      	bge.n	8012d5c <_dtoa_r+0x8c4>
 8012d12:	2300      	movs	r3, #0
 8012d14:	220a      	movs	r2, #10
 8012d16:	9904      	ldr	r1, [sp, #16]
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f000 fef2 	bl	8013b02 <__multadd>
 8012d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d20:	9004      	str	r0, [sp, #16]
 8012d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f000 814d 	beq.w	8012fc6 <_dtoa_r+0xb2e>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	4631      	mov	r1, r6
 8012d30:	220a      	movs	r2, #10
 8012d32:	4620      	mov	r0, r4
 8012d34:	f000 fee5 	bl	8013b02 <__multadd>
 8012d38:	9b02      	ldr	r3, [sp, #8]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	4606      	mov	r6, r0
 8012d3e:	dc4f      	bgt.n	8012de0 <_dtoa_r+0x948>
 8012d40:	9b06      	ldr	r3, [sp, #24]
 8012d42:	2b02      	cmp	r3, #2
 8012d44:	dd4c      	ble.n	8012de0 <_dtoa_r+0x948>
 8012d46:	e011      	b.n	8012d6c <_dtoa_r+0x8d4>
 8012d48:	d0c9      	beq.n	8012cde <_dtoa_r+0x846>
 8012d4a:	9a05      	ldr	r2, [sp, #20]
 8012d4c:	331c      	adds	r3, #28
 8012d4e:	441a      	add	r2, r3
 8012d50:	9205      	str	r2, [sp, #20]
 8012d52:	441d      	add	r5, r3
 8012d54:	4498      	add	r8, r3
 8012d56:	e7c2      	b.n	8012cde <_dtoa_r+0x846>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	e7f6      	b.n	8012d4a <_dtoa_r+0x8b2>
 8012d5c:	f1b9 0f00 	cmp.w	r9, #0
 8012d60:	dc38      	bgt.n	8012dd4 <_dtoa_r+0x93c>
 8012d62:	9b06      	ldr	r3, [sp, #24]
 8012d64:	2b02      	cmp	r3, #2
 8012d66:	dd35      	ble.n	8012dd4 <_dtoa_r+0x93c>
 8012d68:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	b963      	cbnz	r3, 8012d8a <_dtoa_r+0x8f2>
 8012d70:	4639      	mov	r1, r7
 8012d72:	2205      	movs	r2, #5
 8012d74:	4620      	mov	r0, r4
 8012d76:	f000 fec4 	bl	8013b02 <__multadd>
 8012d7a:	4601      	mov	r1, r0
 8012d7c:	4607      	mov	r7, r0
 8012d7e:	9804      	ldr	r0, [sp, #16]
 8012d80:	f001 f8c8 	bl	8013f14 <__mcmp>
 8012d84:	2800      	cmp	r0, #0
 8012d86:	f73f adcc 	bgt.w	8012922 <_dtoa_r+0x48a>
 8012d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d8c:	465d      	mov	r5, fp
 8012d8e:	ea6f 0a03 	mvn.w	sl, r3
 8012d92:	f04f 0900 	mov.w	r9, #0
 8012d96:	4639      	mov	r1, r7
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f000 fe9b 	bl	8013ad4 <_Bfree>
 8012d9e:	2e00      	cmp	r6, #0
 8012da0:	f43f aeb7 	beq.w	8012b12 <_dtoa_r+0x67a>
 8012da4:	f1b9 0f00 	cmp.w	r9, #0
 8012da8:	d005      	beq.n	8012db6 <_dtoa_r+0x91e>
 8012daa:	45b1      	cmp	r9, r6
 8012dac:	d003      	beq.n	8012db6 <_dtoa_r+0x91e>
 8012dae:	4649      	mov	r1, r9
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 fe8f 	bl	8013ad4 <_Bfree>
 8012db6:	4631      	mov	r1, r6
 8012db8:	4620      	mov	r0, r4
 8012dba:	f000 fe8b 	bl	8013ad4 <_Bfree>
 8012dbe:	e6a8      	b.n	8012b12 <_dtoa_r+0x67a>
 8012dc0:	2700      	movs	r7, #0
 8012dc2:	463e      	mov	r6, r7
 8012dc4:	e7e1      	b.n	8012d8a <_dtoa_r+0x8f2>
 8012dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012dca:	463e      	mov	r6, r7
 8012dcc:	e5a9      	b.n	8012922 <_dtoa_r+0x48a>
 8012dce:	bf00      	nop
 8012dd0:	40240000 	.word	0x40240000
 8012dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f000 80fa 	beq.w	8012fd4 <_dtoa_r+0xb3c>
 8012de0:	2d00      	cmp	r5, #0
 8012de2:	dd05      	ble.n	8012df0 <_dtoa_r+0x958>
 8012de4:	4631      	mov	r1, r6
 8012de6:	462a      	mov	r2, r5
 8012de8:	4620      	mov	r0, r4
 8012dea:	f001 f83f 	bl	8013e6c <__lshift>
 8012dee:	4606      	mov	r6, r0
 8012df0:	9b07      	ldr	r3, [sp, #28]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d04c      	beq.n	8012e90 <_dtoa_r+0x9f8>
 8012df6:	6871      	ldr	r1, [r6, #4]
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f000 fe37 	bl	8013a6c <_Balloc>
 8012dfe:	6932      	ldr	r2, [r6, #16]
 8012e00:	3202      	adds	r2, #2
 8012e02:	4605      	mov	r5, r0
 8012e04:	0092      	lsls	r2, r2, #2
 8012e06:	f106 010c 	add.w	r1, r6, #12
 8012e0a:	300c      	adds	r0, #12
 8012e0c:	f7fd fc53 	bl	80106b6 <memcpy>
 8012e10:	2201      	movs	r2, #1
 8012e12:	4629      	mov	r1, r5
 8012e14:	4620      	mov	r0, r4
 8012e16:	f001 f829 	bl	8013e6c <__lshift>
 8012e1a:	9b00      	ldr	r3, [sp, #0]
 8012e1c:	f8cd b014 	str.w	fp, [sp, #20]
 8012e20:	f003 0301 	and.w	r3, r3, #1
 8012e24:	46b1      	mov	r9, r6
 8012e26:	9307      	str	r3, [sp, #28]
 8012e28:	4606      	mov	r6, r0
 8012e2a:	4639      	mov	r1, r7
 8012e2c:	9804      	ldr	r0, [sp, #16]
 8012e2e:	f7ff faa5 	bl	801237c <quorem>
 8012e32:	4649      	mov	r1, r9
 8012e34:	4605      	mov	r5, r0
 8012e36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012e3a:	9804      	ldr	r0, [sp, #16]
 8012e3c:	f001 f86a 	bl	8013f14 <__mcmp>
 8012e40:	4632      	mov	r2, r6
 8012e42:	9000      	str	r0, [sp, #0]
 8012e44:	4639      	mov	r1, r7
 8012e46:	4620      	mov	r0, r4
 8012e48:	f001 f87e 	bl	8013f48 <__mdiff>
 8012e4c:	68c3      	ldr	r3, [r0, #12]
 8012e4e:	4602      	mov	r2, r0
 8012e50:	bb03      	cbnz	r3, 8012e94 <_dtoa_r+0x9fc>
 8012e52:	4601      	mov	r1, r0
 8012e54:	9008      	str	r0, [sp, #32]
 8012e56:	9804      	ldr	r0, [sp, #16]
 8012e58:	f001 f85c 	bl	8013f14 <__mcmp>
 8012e5c:	9a08      	ldr	r2, [sp, #32]
 8012e5e:	4603      	mov	r3, r0
 8012e60:	4611      	mov	r1, r2
 8012e62:	4620      	mov	r0, r4
 8012e64:	9308      	str	r3, [sp, #32]
 8012e66:	f000 fe35 	bl	8013ad4 <_Bfree>
 8012e6a:	9b08      	ldr	r3, [sp, #32]
 8012e6c:	b9a3      	cbnz	r3, 8012e98 <_dtoa_r+0xa00>
 8012e6e:	9a06      	ldr	r2, [sp, #24]
 8012e70:	b992      	cbnz	r2, 8012e98 <_dtoa_r+0xa00>
 8012e72:	9a07      	ldr	r2, [sp, #28]
 8012e74:	b982      	cbnz	r2, 8012e98 <_dtoa_r+0xa00>
 8012e76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e7a:	d029      	beq.n	8012ed0 <_dtoa_r+0xa38>
 8012e7c:	9b00      	ldr	r3, [sp, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	dd01      	ble.n	8012e86 <_dtoa_r+0x9ee>
 8012e82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012e86:	9b05      	ldr	r3, [sp, #20]
 8012e88:	1c5d      	adds	r5, r3, #1
 8012e8a:	f883 8000 	strb.w	r8, [r3]
 8012e8e:	e782      	b.n	8012d96 <_dtoa_r+0x8fe>
 8012e90:	4630      	mov	r0, r6
 8012e92:	e7c2      	b.n	8012e1a <_dtoa_r+0x982>
 8012e94:	2301      	movs	r3, #1
 8012e96:	e7e3      	b.n	8012e60 <_dtoa_r+0x9c8>
 8012e98:	9a00      	ldr	r2, [sp, #0]
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	db04      	blt.n	8012ea8 <_dtoa_r+0xa10>
 8012e9e:	d125      	bne.n	8012eec <_dtoa_r+0xa54>
 8012ea0:	9a06      	ldr	r2, [sp, #24]
 8012ea2:	bb1a      	cbnz	r2, 8012eec <_dtoa_r+0xa54>
 8012ea4:	9a07      	ldr	r2, [sp, #28]
 8012ea6:	bb0a      	cbnz	r2, 8012eec <_dtoa_r+0xa54>
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	ddec      	ble.n	8012e86 <_dtoa_r+0x9ee>
 8012eac:	2201      	movs	r2, #1
 8012eae:	9904      	ldr	r1, [sp, #16]
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f000 ffdb 	bl	8013e6c <__lshift>
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	9004      	str	r0, [sp, #16]
 8012eba:	f001 f82b 	bl	8013f14 <__mcmp>
 8012ebe:	2800      	cmp	r0, #0
 8012ec0:	dc03      	bgt.n	8012eca <_dtoa_r+0xa32>
 8012ec2:	d1e0      	bne.n	8012e86 <_dtoa_r+0x9ee>
 8012ec4:	f018 0f01 	tst.w	r8, #1
 8012ec8:	d0dd      	beq.n	8012e86 <_dtoa_r+0x9ee>
 8012eca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012ece:	d1d8      	bne.n	8012e82 <_dtoa_r+0x9ea>
 8012ed0:	9b05      	ldr	r3, [sp, #20]
 8012ed2:	9a05      	ldr	r2, [sp, #20]
 8012ed4:	1c5d      	adds	r5, r3, #1
 8012ed6:	2339      	movs	r3, #57	; 0x39
 8012ed8:	7013      	strb	r3, [r2, #0]
 8012eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ede:	2b39      	cmp	r3, #57	; 0x39
 8012ee0:	f105 32ff 	add.w	r2, r5, #4294967295
 8012ee4:	d04f      	beq.n	8012f86 <_dtoa_r+0xaee>
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	7013      	strb	r3, [r2, #0]
 8012eea:	e754      	b.n	8012d96 <_dtoa_r+0x8fe>
 8012eec:	9a05      	ldr	r2, [sp, #20]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f102 0501 	add.w	r5, r2, #1
 8012ef4:	dd06      	ble.n	8012f04 <_dtoa_r+0xa6c>
 8012ef6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012efa:	d0e9      	beq.n	8012ed0 <_dtoa_r+0xa38>
 8012efc:	f108 0801 	add.w	r8, r8, #1
 8012f00:	9b05      	ldr	r3, [sp, #20]
 8012f02:	e7c2      	b.n	8012e8a <_dtoa_r+0x9f2>
 8012f04:	9a02      	ldr	r2, [sp, #8]
 8012f06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012f0a:	eba5 030b 	sub.w	r3, r5, fp
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d021      	beq.n	8012f56 <_dtoa_r+0xabe>
 8012f12:	2300      	movs	r3, #0
 8012f14:	220a      	movs	r2, #10
 8012f16:	9904      	ldr	r1, [sp, #16]
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f000 fdf2 	bl	8013b02 <__multadd>
 8012f1e:	45b1      	cmp	r9, r6
 8012f20:	9004      	str	r0, [sp, #16]
 8012f22:	f04f 0300 	mov.w	r3, #0
 8012f26:	f04f 020a 	mov.w	r2, #10
 8012f2a:	4649      	mov	r1, r9
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	d105      	bne.n	8012f3c <_dtoa_r+0xaa4>
 8012f30:	f000 fde7 	bl	8013b02 <__multadd>
 8012f34:	4681      	mov	r9, r0
 8012f36:	4606      	mov	r6, r0
 8012f38:	9505      	str	r5, [sp, #20]
 8012f3a:	e776      	b.n	8012e2a <_dtoa_r+0x992>
 8012f3c:	f000 fde1 	bl	8013b02 <__multadd>
 8012f40:	4631      	mov	r1, r6
 8012f42:	4681      	mov	r9, r0
 8012f44:	2300      	movs	r3, #0
 8012f46:	220a      	movs	r2, #10
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f000 fdda 	bl	8013b02 <__multadd>
 8012f4e:	4606      	mov	r6, r0
 8012f50:	e7f2      	b.n	8012f38 <_dtoa_r+0xaa0>
 8012f52:	f04f 0900 	mov.w	r9, #0
 8012f56:	2201      	movs	r2, #1
 8012f58:	9904      	ldr	r1, [sp, #16]
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f000 ff86 	bl	8013e6c <__lshift>
 8012f60:	4639      	mov	r1, r7
 8012f62:	9004      	str	r0, [sp, #16]
 8012f64:	f000 ffd6 	bl	8013f14 <__mcmp>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	dcb6      	bgt.n	8012eda <_dtoa_r+0xa42>
 8012f6c:	d102      	bne.n	8012f74 <_dtoa_r+0xadc>
 8012f6e:	f018 0f01 	tst.w	r8, #1
 8012f72:	d1b2      	bne.n	8012eda <_dtoa_r+0xa42>
 8012f74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f78:	2b30      	cmp	r3, #48	; 0x30
 8012f7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8012f7e:	f47f af0a 	bne.w	8012d96 <_dtoa_r+0x8fe>
 8012f82:	4615      	mov	r5, r2
 8012f84:	e7f6      	b.n	8012f74 <_dtoa_r+0xadc>
 8012f86:	4593      	cmp	fp, r2
 8012f88:	d105      	bne.n	8012f96 <_dtoa_r+0xafe>
 8012f8a:	2331      	movs	r3, #49	; 0x31
 8012f8c:	f10a 0a01 	add.w	sl, sl, #1
 8012f90:	f88b 3000 	strb.w	r3, [fp]
 8012f94:	e6ff      	b.n	8012d96 <_dtoa_r+0x8fe>
 8012f96:	4615      	mov	r5, r2
 8012f98:	e79f      	b.n	8012eda <_dtoa_r+0xa42>
 8012f9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013000 <_dtoa_r+0xb68>
 8012f9e:	e007      	b.n	8012fb0 <_dtoa_r+0xb18>
 8012fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fa2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013004 <_dtoa_r+0xb6c>
 8012fa6:	b11b      	cbz	r3, 8012fb0 <_dtoa_r+0xb18>
 8012fa8:	f10b 0308 	add.w	r3, fp, #8
 8012fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012fae:	6013      	str	r3, [r2, #0]
 8012fb0:	4658      	mov	r0, fp
 8012fb2:	b017      	add	sp, #92	; 0x5c
 8012fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb8:	9b06      	ldr	r3, [sp, #24]
 8012fba:	2b01      	cmp	r3, #1
 8012fbc:	f77f ae35 	ble.w	8012c2a <_dtoa_r+0x792>
 8012fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fc2:	9307      	str	r3, [sp, #28]
 8012fc4:	e649      	b.n	8012c5a <_dtoa_r+0x7c2>
 8012fc6:	9b02      	ldr	r3, [sp, #8]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	dc03      	bgt.n	8012fd4 <_dtoa_r+0xb3c>
 8012fcc:	9b06      	ldr	r3, [sp, #24]
 8012fce:	2b02      	cmp	r3, #2
 8012fd0:	f73f aecc 	bgt.w	8012d6c <_dtoa_r+0x8d4>
 8012fd4:	465d      	mov	r5, fp
 8012fd6:	4639      	mov	r1, r7
 8012fd8:	9804      	ldr	r0, [sp, #16]
 8012fda:	f7ff f9cf 	bl	801237c <quorem>
 8012fde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012fe2:	f805 8b01 	strb.w	r8, [r5], #1
 8012fe6:	9a02      	ldr	r2, [sp, #8]
 8012fe8:	eba5 030b 	sub.w	r3, r5, fp
 8012fec:	429a      	cmp	r2, r3
 8012fee:	ddb0      	ble.n	8012f52 <_dtoa_r+0xaba>
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	220a      	movs	r2, #10
 8012ff4:	9904      	ldr	r1, [sp, #16]
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f000 fd83 	bl	8013b02 <__multadd>
 8012ffc:	9004      	str	r0, [sp, #16]
 8012ffe:	e7ea      	b.n	8012fd6 <_dtoa_r+0xb3e>
 8013000:	0814f74c 	.word	0x0814f74c
 8013004:	0814f7c8 	.word	0x0814f7c8

08013008 <__sflush_r>:
 8013008:	898a      	ldrh	r2, [r1, #12]
 801300a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801300e:	4605      	mov	r5, r0
 8013010:	0710      	lsls	r0, r2, #28
 8013012:	460c      	mov	r4, r1
 8013014:	d458      	bmi.n	80130c8 <__sflush_r+0xc0>
 8013016:	684b      	ldr	r3, [r1, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	dc05      	bgt.n	8013028 <__sflush_r+0x20>
 801301c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801301e:	2b00      	cmp	r3, #0
 8013020:	dc02      	bgt.n	8013028 <__sflush_r+0x20>
 8013022:	2000      	movs	r0, #0
 8013024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801302a:	2e00      	cmp	r6, #0
 801302c:	d0f9      	beq.n	8013022 <__sflush_r+0x1a>
 801302e:	2300      	movs	r3, #0
 8013030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013034:	682f      	ldr	r7, [r5, #0]
 8013036:	6a21      	ldr	r1, [r4, #32]
 8013038:	602b      	str	r3, [r5, #0]
 801303a:	d032      	beq.n	80130a2 <__sflush_r+0x9a>
 801303c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801303e:	89a3      	ldrh	r3, [r4, #12]
 8013040:	075a      	lsls	r2, r3, #29
 8013042:	d505      	bpl.n	8013050 <__sflush_r+0x48>
 8013044:	6863      	ldr	r3, [r4, #4]
 8013046:	1ac0      	subs	r0, r0, r3
 8013048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801304a:	b10b      	cbz	r3, 8013050 <__sflush_r+0x48>
 801304c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801304e:	1ac0      	subs	r0, r0, r3
 8013050:	2300      	movs	r3, #0
 8013052:	4602      	mov	r2, r0
 8013054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013056:	6a21      	ldr	r1, [r4, #32]
 8013058:	4628      	mov	r0, r5
 801305a:	47b0      	blx	r6
 801305c:	1c43      	adds	r3, r0, #1
 801305e:	89a3      	ldrh	r3, [r4, #12]
 8013060:	d106      	bne.n	8013070 <__sflush_r+0x68>
 8013062:	6829      	ldr	r1, [r5, #0]
 8013064:	291d      	cmp	r1, #29
 8013066:	d848      	bhi.n	80130fa <__sflush_r+0xf2>
 8013068:	4a29      	ldr	r2, [pc, #164]	; (8013110 <__sflush_r+0x108>)
 801306a:	40ca      	lsrs	r2, r1
 801306c:	07d6      	lsls	r6, r2, #31
 801306e:	d544      	bpl.n	80130fa <__sflush_r+0xf2>
 8013070:	2200      	movs	r2, #0
 8013072:	6062      	str	r2, [r4, #4]
 8013074:	04d9      	lsls	r1, r3, #19
 8013076:	6922      	ldr	r2, [r4, #16]
 8013078:	6022      	str	r2, [r4, #0]
 801307a:	d504      	bpl.n	8013086 <__sflush_r+0x7e>
 801307c:	1c42      	adds	r2, r0, #1
 801307e:	d101      	bne.n	8013084 <__sflush_r+0x7c>
 8013080:	682b      	ldr	r3, [r5, #0]
 8013082:	b903      	cbnz	r3, 8013086 <__sflush_r+0x7e>
 8013084:	6560      	str	r0, [r4, #84]	; 0x54
 8013086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013088:	602f      	str	r7, [r5, #0]
 801308a:	2900      	cmp	r1, #0
 801308c:	d0c9      	beq.n	8013022 <__sflush_r+0x1a>
 801308e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013092:	4299      	cmp	r1, r3
 8013094:	d002      	beq.n	801309c <__sflush_r+0x94>
 8013096:	4628      	mov	r0, r5
 8013098:	f001 f8f6 	bl	8014288 <_free_r>
 801309c:	2000      	movs	r0, #0
 801309e:	6360      	str	r0, [r4, #52]	; 0x34
 80130a0:	e7c0      	b.n	8013024 <__sflush_r+0x1c>
 80130a2:	2301      	movs	r3, #1
 80130a4:	4628      	mov	r0, r5
 80130a6:	47b0      	blx	r6
 80130a8:	1c41      	adds	r1, r0, #1
 80130aa:	d1c8      	bne.n	801303e <__sflush_r+0x36>
 80130ac:	682b      	ldr	r3, [r5, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d0c5      	beq.n	801303e <__sflush_r+0x36>
 80130b2:	2b1d      	cmp	r3, #29
 80130b4:	d001      	beq.n	80130ba <__sflush_r+0xb2>
 80130b6:	2b16      	cmp	r3, #22
 80130b8:	d101      	bne.n	80130be <__sflush_r+0xb6>
 80130ba:	602f      	str	r7, [r5, #0]
 80130bc:	e7b1      	b.n	8013022 <__sflush_r+0x1a>
 80130be:	89a3      	ldrh	r3, [r4, #12]
 80130c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130c4:	81a3      	strh	r3, [r4, #12]
 80130c6:	e7ad      	b.n	8013024 <__sflush_r+0x1c>
 80130c8:	690f      	ldr	r7, [r1, #16]
 80130ca:	2f00      	cmp	r7, #0
 80130cc:	d0a9      	beq.n	8013022 <__sflush_r+0x1a>
 80130ce:	0793      	lsls	r3, r2, #30
 80130d0:	680e      	ldr	r6, [r1, #0]
 80130d2:	bf08      	it	eq
 80130d4:	694b      	ldreq	r3, [r1, #20]
 80130d6:	600f      	str	r7, [r1, #0]
 80130d8:	bf18      	it	ne
 80130da:	2300      	movne	r3, #0
 80130dc:	eba6 0807 	sub.w	r8, r6, r7
 80130e0:	608b      	str	r3, [r1, #8]
 80130e2:	f1b8 0f00 	cmp.w	r8, #0
 80130e6:	dd9c      	ble.n	8013022 <__sflush_r+0x1a>
 80130e8:	4643      	mov	r3, r8
 80130ea:	463a      	mov	r2, r7
 80130ec:	6a21      	ldr	r1, [r4, #32]
 80130ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80130f0:	4628      	mov	r0, r5
 80130f2:	47b0      	blx	r6
 80130f4:	2800      	cmp	r0, #0
 80130f6:	dc06      	bgt.n	8013106 <__sflush_r+0xfe>
 80130f8:	89a3      	ldrh	r3, [r4, #12]
 80130fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130fe:	81a3      	strh	r3, [r4, #12]
 8013100:	f04f 30ff 	mov.w	r0, #4294967295
 8013104:	e78e      	b.n	8013024 <__sflush_r+0x1c>
 8013106:	4407      	add	r7, r0
 8013108:	eba8 0800 	sub.w	r8, r8, r0
 801310c:	e7e9      	b.n	80130e2 <__sflush_r+0xda>
 801310e:	bf00      	nop
 8013110:	20400001 	.word	0x20400001

08013114 <_fflush_r>:
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	690b      	ldr	r3, [r1, #16]
 8013118:	4605      	mov	r5, r0
 801311a:	460c      	mov	r4, r1
 801311c:	b1db      	cbz	r3, 8013156 <_fflush_r+0x42>
 801311e:	b118      	cbz	r0, 8013128 <_fflush_r+0x14>
 8013120:	6983      	ldr	r3, [r0, #24]
 8013122:	b90b      	cbnz	r3, 8013128 <_fflush_r+0x14>
 8013124:	f000 f860 	bl	80131e8 <__sinit>
 8013128:	4b0c      	ldr	r3, [pc, #48]	; (801315c <_fflush_r+0x48>)
 801312a:	429c      	cmp	r4, r3
 801312c:	d109      	bne.n	8013142 <_fflush_r+0x2e>
 801312e:	686c      	ldr	r4, [r5, #4]
 8013130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013134:	b17b      	cbz	r3, 8013156 <_fflush_r+0x42>
 8013136:	4621      	mov	r1, r4
 8013138:	4628      	mov	r0, r5
 801313a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801313e:	f7ff bf63 	b.w	8013008 <__sflush_r>
 8013142:	4b07      	ldr	r3, [pc, #28]	; (8013160 <_fflush_r+0x4c>)
 8013144:	429c      	cmp	r4, r3
 8013146:	d101      	bne.n	801314c <_fflush_r+0x38>
 8013148:	68ac      	ldr	r4, [r5, #8]
 801314a:	e7f1      	b.n	8013130 <_fflush_r+0x1c>
 801314c:	4b05      	ldr	r3, [pc, #20]	; (8013164 <_fflush_r+0x50>)
 801314e:	429c      	cmp	r4, r3
 8013150:	bf08      	it	eq
 8013152:	68ec      	ldreq	r4, [r5, #12]
 8013154:	e7ec      	b.n	8013130 <_fflush_r+0x1c>
 8013156:	2000      	movs	r0, #0
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	bf00      	nop
 801315c:	0814f7f8 	.word	0x0814f7f8
 8013160:	0814f818 	.word	0x0814f818
 8013164:	0814f7d8 	.word	0x0814f7d8

08013168 <std>:
 8013168:	2300      	movs	r3, #0
 801316a:	b510      	push	{r4, lr}
 801316c:	4604      	mov	r4, r0
 801316e:	e9c0 3300 	strd	r3, r3, [r0]
 8013172:	6083      	str	r3, [r0, #8]
 8013174:	8181      	strh	r1, [r0, #12]
 8013176:	6643      	str	r3, [r0, #100]	; 0x64
 8013178:	81c2      	strh	r2, [r0, #14]
 801317a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801317e:	6183      	str	r3, [r0, #24]
 8013180:	4619      	mov	r1, r3
 8013182:	2208      	movs	r2, #8
 8013184:	305c      	adds	r0, #92	; 0x5c
 8013186:	f7fd faa1 	bl	80106cc <memset>
 801318a:	4b05      	ldr	r3, [pc, #20]	; (80131a0 <std+0x38>)
 801318c:	6263      	str	r3, [r4, #36]	; 0x24
 801318e:	4b05      	ldr	r3, [pc, #20]	; (80131a4 <std+0x3c>)
 8013190:	62a3      	str	r3, [r4, #40]	; 0x28
 8013192:	4b05      	ldr	r3, [pc, #20]	; (80131a8 <std+0x40>)
 8013194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013196:	4b05      	ldr	r3, [pc, #20]	; (80131ac <std+0x44>)
 8013198:	6224      	str	r4, [r4, #32]
 801319a:	6323      	str	r3, [r4, #48]	; 0x30
 801319c:	bd10      	pop	{r4, pc}
 801319e:	bf00      	nop
 80131a0:	0801491d 	.word	0x0801491d
 80131a4:	0801493f 	.word	0x0801493f
 80131a8:	08014977 	.word	0x08014977
 80131ac:	0801499b 	.word	0x0801499b

080131b0 <_cleanup_r>:
 80131b0:	4901      	ldr	r1, [pc, #4]	; (80131b8 <_cleanup_r+0x8>)
 80131b2:	f000 b885 	b.w	80132c0 <_fwalk_reent>
 80131b6:	bf00      	nop
 80131b8:	08013115 	.word	0x08013115

080131bc <__sfmoreglue>:
 80131bc:	b570      	push	{r4, r5, r6, lr}
 80131be:	1e4a      	subs	r2, r1, #1
 80131c0:	2568      	movs	r5, #104	; 0x68
 80131c2:	4355      	muls	r5, r2
 80131c4:	460e      	mov	r6, r1
 80131c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80131ca:	f001 f8ab 	bl	8014324 <_malloc_r>
 80131ce:	4604      	mov	r4, r0
 80131d0:	b140      	cbz	r0, 80131e4 <__sfmoreglue+0x28>
 80131d2:	2100      	movs	r1, #0
 80131d4:	e9c0 1600 	strd	r1, r6, [r0]
 80131d8:	300c      	adds	r0, #12
 80131da:	60a0      	str	r0, [r4, #8]
 80131dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80131e0:	f7fd fa74 	bl	80106cc <memset>
 80131e4:	4620      	mov	r0, r4
 80131e6:	bd70      	pop	{r4, r5, r6, pc}

080131e8 <__sinit>:
 80131e8:	6983      	ldr	r3, [r0, #24]
 80131ea:	b510      	push	{r4, lr}
 80131ec:	4604      	mov	r4, r0
 80131ee:	bb33      	cbnz	r3, 801323e <__sinit+0x56>
 80131f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80131f4:	6503      	str	r3, [r0, #80]	; 0x50
 80131f6:	4b12      	ldr	r3, [pc, #72]	; (8013240 <__sinit+0x58>)
 80131f8:	4a12      	ldr	r2, [pc, #72]	; (8013244 <__sinit+0x5c>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	6282      	str	r2, [r0, #40]	; 0x28
 80131fe:	4298      	cmp	r0, r3
 8013200:	bf04      	itt	eq
 8013202:	2301      	moveq	r3, #1
 8013204:	6183      	streq	r3, [r0, #24]
 8013206:	f000 f81f 	bl	8013248 <__sfp>
 801320a:	6060      	str	r0, [r4, #4]
 801320c:	4620      	mov	r0, r4
 801320e:	f000 f81b 	bl	8013248 <__sfp>
 8013212:	60a0      	str	r0, [r4, #8]
 8013214:	4620      	mov	r0, r4
 8013216:	f000 f817 	bl	8013248 <__sfp>
 801321a:	2200      	movs	r2, #0
 801321c:	60e0      	str	r0, [r4, #12]
 801321e:	2104      	movs	r1, #4
 8013220:	6860      	ldr	r0, [r4, #4]
 8013222:	f7ff ffa1 	bl	8013168 <std>
 8013226:	2201      	movs	r2, #1
 8013228:	2109      	movs	r1, #9
 801322a:	68a0      	ldr	r0, [r4, #8]
 801322c:	f7ff ff9c 	bl	8013168 <std>
 8013230:	2202      	movs	r2, #2
 8013232:	2112      	movs	r1, #18
 8013234:	68e0      	ldr	r0, [r4, #12]
 8013236:	f7ff ff97 	bl	8013168 <std>
 801323a:	2301      	movs	r3, #1
 801323c:	61a3      	str	r3, [r4, #24]
 801323e:	bd10      	pop	{r4, pc}
 8013240:	0814f73c 	.word	0x0814f73c
 8013244:	080131b1 	.word	0x080131b1

08013248 <__sfp>:
 8013248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801324a:	4b1b      	ldr	r3, [pc, #108]	; (80132b8 <__sfp+0x70>)
 801324c:	681e      	ldr	r6, [r3, #0]
 801324e:	69b3      	ldr	r3, [r6, #24]
 8013250:	4607      	mov	r7, r0
 8013252:	b913      	cbnz	r3, 801325a <__sfp+0x12>
 8013254:	4630      	mov	r0, r6
 8013256:	f7ff ffc7 	bl	80131e8 <__sinit>
 801325a:	3648      	adds	r6, #72	; 0x48
 801325c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013260:	3b01      	subs	r3, #1
 8013262:	d503      	bpl.n	801326c <__sfp+0x24>
 8013264:	6833      	ldr	r3, [r6, #0]
 8013266:	b133      	cbz	r3, 8013276 <__sfp+0x2e>
 8013268:	6836      	ldr	r6, [r6, #0]
 801326a:	e7f7      	b.n	801325c <__sfp+0x14>
 801326c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013270:	b16d      	cbz	r5, 801328e <__sfp+0x46>
 8013272:	3468      	adds	r4, #104	; 0x68
 8013274:	e7f4      	b.n	8013260 <__sfp+0x18>
 8013276:	2104      	movs	r1, #4
 8013278:	4638      	mov	r0, r7
 801327a:	f7ff ff9f 	bl	80131bc <__sfmoreglue>
 801327e:	6030      	str	r0, [r6, #0]
 8013280:	2800      	cmp	r0, #0
 8013282:	d1f1      	bne.n	8013268 <__sfp+0x20>
 8013284:	230c      	movs	r3, #12
 8013286:	603b      	str	r3, [r7, #0]
 8013288:	4604      	mov	r4, r0
 801328a:	4620      	mov	r0, r4
 801328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801328e:	4b0b      	ldr	r3, [pc, #44]	; (80132bc <__sfp+0x74>)
 8013290:	6665      	str	r5, [r4, #100]	; 0x64
 8013292:	e9c4 5500 	strd	r5, r5, [r4]
 8013296:	60a5      	str	r5, [r4, #8]
 8013298:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801329c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80132a0:	2208      	movs	r2, #8
 80132a2:	4629      	mov	r1, r5
 80132a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80132a8:	f7fd fa10 	bl	80106cc <memset>
 80132ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80132b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80132b4:	e7e9      	b.n	801328a <__sfp+0x42>
 80132b6:	bf00      	nop
 80132b8:	0814f73c 	.word	0x0814f73c
 80132bc:	ffff0001 	.word	0xffff0001

080132c0 <_fwalk_reent>:
 80132c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132c4:	4680      	mov	r8, r0
 80132c6:	4689      	mov	r9, r1
 80132c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132cc:	2600      	movs	r6, #0
 80132ce:	b914      	cbnz	r4, 80132d6 <_fwalk_reent+0x16>
 80132d0:	4630      	mov	r0, r6
 80132d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80132da:	3f01      	subs	r7, #1
 80132dc:	d501      	bpl.n	80132e2 <_fwalk_reent+0x22>
 80132de:	6824      	ldr	r4, [r4, #0]
 80132e0:	e7f5      	b.n	80132ce <_fwalk_reent+0xe>
 80132e2:	89ab      	ldrh	r3, [r5, #12]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d907      	bls.n	80132f8 <_fwalk_reent+0x38>
 80132e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80132ec:	3301      	adds	r3, #1
 80132ee:	d003      	beq.n	80132f8 <_fwalk_reent+0x38>
 80132f0:	4629      	mov	r1, r5
 80132f2:	4640      	mov	r0, r8
 80132f4:	47c8      	blx	r9
 80132f6:	4306      	orrs	r6, r0
 80132f8:	3568      	adds	r5, #104	; 0x68
 80132fa:	e7ee      	b.n	80132da <_fwalk_reent+0x1a>

080132fc <rshift>:
 80132fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fe:	6906      	ldr	r6, [r0, #16]
 8013300:	114b      	asrs	r3, r1, #5
 8013302:	429e      	cmp	r6, r3
 8013304:	f100 0414 	add.w	r4, r0, #20
 8013308:	dd30      	ble.n	801336c <rshift+0x70>
 801330a:	f011 011f 	ands.w	r1, r1, #31
 801330e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013312:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8013316:	d108      	bne.n	801332a <rshift+0x2e>
 8013318:	4621      	mov	r1, r4
 801331a:	42b2      	cmp	r2, r6
 801331c:	460b      	mov	r3, r1
 801331e:	d211      	bcs.n	8013344 <rshift+0x48>
 8013320:	f852 3b04 	ldr.w	r3, [r2], #4
 8013324:	f841 3b04 	str.w	r3, [r1], #4
 8013328:	e7f7      	b.n	801331a <rshift+0x1e>
 801332a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801332e:	f1c1 0c20 	rsb	ip, r1, #32
 8013332:	40cd      	lsrs	r5, r1
 8013334:	3204      	adds	r2, #4
 8013336:	4623      	mov	r3, r4
 8013338:	42b2      	cmp	r2, r6
 801333a:	4617      	mov	r7, r2
 801333c:	d30c      	bcc.n	8013358 <rshift+0x5c>
 801333e:	601d      	str	r5, [r3, #0]
 8013340:	b105      	cbz	r5, 8013344 <rshift+0x48>
 8013342:	3304      	adds	r3, #4
 8013344:	1b1a      	subs	r2, r3, r4
 8013346:	42a3      	cmp	r3, r4
 8013348:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801334c:	bf08      	it	eq
 801334e:	2300      	moveq	r3, #0
 8013350:	6102      	str	r2, [r0, #16]
 8013352:	bf08      	it	eq
 8013354:	6143      	streq	r3, [r0, #20]
 8013356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013358:	683f      	ldr	r7, [r7, #0]
 801335a:	fa07 f70c 	lsl.w	r7, r7, ip
 801335e:	433d      	orrs	r5, r7
 8013360:	f843 5b04 	str.w	r5, [r3], #4
 8013364:	f852 5b04 	ldr.w	r5, [r2], #4
 8013368:	40cd      	lsrs	r5, r1
 801336a:	e7e5      	b.n	8013338 <rshift+0x3c>
 801336c:	4623      	mov	r3, r4
 801336e:	e7e9      	b.n	8013344 <rshift+0x48>

08013370 <__hexdig_fun>:
 8013370:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013374:	2b09      	cmp	r3, #9
 8013376:	d802      	bhi.n	801337e <__hexdig_fun+0xe>
 8013378:	3820      	subs	r0, #32
 801337a:	b2c0      	uxtb	r0, r0
 801337c:	4770      	bx	lr
 801337e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013382:	2b05      	cmp	r3, #5
 8013384:	d801      	bhi.n	801338a <__hexdig_fun+0x1a>
 8013386:	3847      	subs	r0, #71	; 0x47
 8013388:	e7f7      	b.n	801337a <__hexdig_fun+0xa>
 801338a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801338e:	2b05      	cmp	r3, #5
 8013390:	d801      	bhi.n	8013396 <__hexdig_fun+0x26>
 8013392:	3827      	subs	r0, #39	; 0x27
 8013394:	e7f1      	b.n	801337a <__hexdig_fun+0xa>
 8013396:	2000      	movs	r0, #0
 8013398:	4770      	bx	lr

0801339a <__gethex>:
 801339a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801339e:	b08b      	sub	sp, #44	; 0x2c
 80133a0:	468a      	mov	sl, r1
 80133a2:	9002      	str	r0, [sp, #8]
 80133a4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80133a6:	9306      	str	r3, [sp, #24]
 80133a8:	4690      	mov	r8, r2
 80133aa:	f000 fad0 	bl	801394e <__localeconv_l>
 80133ae:	6803      	ldr	r3, [r0, #0]
 80133b0:	9303      	str	r3, [sp, #12]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7f2 ff7d 	bl	80062b2 <strlen>
 80133b8:	9b03      	ldr	r3, [sp, #12]
 80133ba:	9001      	str	r0, [sp, #4]
 80133bc:	4403      	add	r3, r0
 80133be:	f04f 0b00 	mov.w	fp, #0
 80133c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80133c6:	9307      	str	r3, [sp, #28]
 80133c8:	f8da 3000 	ldr.w	r3, [sl]
 80133cc:	3302      	adds	r3, #2
 80133ce:	461f      	mov	r7, r3
 80133d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80133d4:	2830      	cmp	r0, #48	; 0x30
 80133d6:	d06c      	beq.n	80134b2 <__gethex+0x118>
 80133d8:	f7ff ffca 	bl	8013370 <__hexdig_fun>
 80133dc:	4604      	mov	r4, r0
 80133de:	2800      	cmp	r0, #0
 80133e0:	d16a      	bne.n	80134b8 <__gethex+0x11e>
 80133e2:	9a01      	ldr	r2, [sp, #4]
 80133e4:	9903      	ldr	r1, [sp, #12]
 80133e6:	4638      	mov	r0, r7
 80133e8:	f001 fadb 	bl	80149a2 <strncmp>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	d166      	bne.n	80134be <__gethex+0x124>
 80133f0:	9b01      	ldr	r3, [sp, #4]
 80133f2:	5cf8      	ldrb	r0, [r7, r3]
 80133f4:	18fe      	adds	r6, r7, r3
 80133f6:	f7ff ffbb 	bl	8013370 <__hexdig_fun>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d062      	beq.n	80134c4 <__gethex+0x12a>
 80133fe:	4633      	mov	r3, r6
 8013400:	7818      	ldrb	r0, [r3, #0]
 8013402:	2830      	cmp	r0, #48	; 0x30
 8013404:	461f      	mov	r7, r3
 8013406:	f103 0301 	add.w	r3, r3, #1
 801340a:	d0f9      	beq.n	8013400 <__gethex+0x66>
 801340c:	f7ff ffb0 	bl	8013370 <__hexdig_fun>
 8013410:	fab0 f580 	clz	r5, r0
 8013414:	096d      	lsrs	r5, r5, #5
 8013416:	4634      	mov	r4, r6
 8013418:	f04f 0b01 	mov.w	fp, #1
 801341c:	463a      	mov	r2, r7
 801341e:	4616      	mov	r6, r2
 8013420:	3201      	adds	r2, #1
 8013422:	7830      	ldrb	r0, [r6, #0]
 8013424:	f7ff ffa4 	bl	8013370 <__hexdig_fun>
 8013428:	2800      	cmp	r0, #0
 801342a:	d1f8      	bne.n	801341e <__gethex+0x84>
 801342c:	9a01      	ldr	r2, [sp, #4]
 801342e:	9903      	ldr	r1, [sp, #12]
 8013430:	4630      	mov	r0, r6
 8013432:	f001 fab6 	bl	80149a2 <strncmp>
 8013436:	b950      	cbnz	r0, 801344e <__gethex+0xb4>
 8013438:	b954      	cbnz	r4, 8013450 <__gethex+0xb6>
 801343a:	9b01      	ldr	r3, [sp, #4]
 801343c:	18f4      	adds	r4, r6, r3
 801343e:	4622      	mov	r2, r4
 8013440:	4616      	mov	r6, r2
 8013442:	3201      	adds	r2, #1
 8013444:	7830      	ldrb	r0, [r6, #0]
 8013446:	f7ff ff93 	bl	8013370 <__hexdig_fun>
 801344a:	2800      	cmp	r0, #0
 801344c:	d1f8      	bne.n	8013440 <__gethex+0xa6>
 801344e:	b10c      	cbz	r4, 8013454 <__gethex+0xba>
 8013450:	1ba4      	subs	r4, r4, r6
 8013452:	00a4      	lsls	r4, r4, #2
 8013454:	7833      	ldrb	r3, [r6, #0]
 8013456:	2b50      	cmp	r3, #80	; 0x50
 8013458:	d001      	beq.n	801345e <__gethex+0xc4>
 801345a:	2b70      	cmp	r3, #112	; 0x70
 801345c:	d140      	bne.n	80134e0 <__gethex+0x146>
 801345e:	7873      	ldrb	r3, [r6, #1]
 8013460:	2b2b      	cmp	r3, #43	; 0x2b
 8013462:	d031      	beq.n	80134c8 <__gethex+0x12e>
 8013464:	2b2d      	cmp	r3, #45	; 0x2d
 8013466:	d033      	beq.n	80134d0 <__gethex+0x136>
 8013468:	1c71      	adds	r1, r6, #1
 801346a:	f04f 0900 	mov.w	r9, #0
 801346e:	7808      	ldrb	r0, [r1, #0]
 8013470:	f7ff ff7e 	bl	8013370 <__hexdig_fun>
 8013474:	1e43      	subs	r3, r0, #1
 8013476:	b2db      	uxtb	r3, r3
 8013478:	2b18      	cmp	r3, #24
 801347a:	d831      	bhi.n	80134e0 <__gethex+0x146>
 801347c:	f1a0 0210 	sub.w	r2, r0, #16
 8013480:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013484:	f7ff ff74 	bl	8013370 <__hexdig_fun>
 8013488:	1e43      	subs	r3, r0, #1
 801348a:	b2db      	uxtb	r3, r3
 801348c:	2b18      	cmp	r3, #24
 801348e:	d922      	bls.n	80134d6 <__gethex+0x13c>
 8013490:	f1b9 0f00 	cmp.w	r9, #0
 8013494:	d000      	beq.n	8013498 <__gethex+0xfe>
 8013496:	4252      	negs	r2, r2
 8013498:	4414      	add	r4, r2
 801349a:	f8ca 1000 	str.w	r1, [sl]
 801349e:	b30d      	cbz	r5, 80134e4 <__gethex+0x14a>
 80134a0:	f1bb 0f00 	cmp.w	fp, #0
 80134a4:	bf0c      	ite	eq
 80134a6:	2706      	moveq	r7, #6
 80134a8:	2700      	movne	r7, #0
 80134aa:	4638      	mov	r0, r7
 80134ac:	b00b      	add	sp, #44	; 0x2c
 80134ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b2:	f10b 0b01 	add.w	fp, fp, #1
 80134b6:	e78a      	b.n	80133ce <__gethex+0x34>
 80134b8:	2500      	movs	r5, #0
 80134ba:	462c      	mov	r4, r5
 80134bc:	e7ae      	b.n	801341c <__gethex+0x82>
 80134be:	463e      	mov	r6, r7
 80134c0:	2501      	movs	r5, #1
 80134c2:	e7c7      	b.n	8013454 <__gethex+0xba>
 80134c4:	4604      	mov	r4, r0
 80134c6:	e7fb      	b.n	80134c0 <__gethex+0x126>
 80134c8:	f04f 0900 	mov.w	r9, #0
 80134cc:	1cb1      	adds	r1, r6, #2
 80134ce:	e7ce      	b.n	801346e <__gethex+0xd4>
 80134d0:	f04f 0901 	mov.w	r9, #1
 80134d4:	e7fa      	b.n	80134cc <__gethex+0x132>
 80134d6:	230a      	movs	r3, #10
 80134d8:	fb03 0202 	mla	r2, r3, r2, r0
 80134dc:	3a10      	subs	r2, #16
 80134de:	e7cf      	b.n	8013480 <__gethex+0xe6>
 80134e0:	4631      	mov	r1, r6
 80134e2:	e7da      	b.n	801349a <__gethex+0x100>
 80134e4:	1bf3      	subs	r3, r6, r7
 80134e6:	3b01      	subs	r3, #1
 80134e8:	4629      	mov	r1, r5
 80134ea:	2b07      	cmp	r3, #7
 80134ec:	dc49      	bgt.n	8013582 <__gethex+0x1e8>
 80134ee:	9802      	ldr	r0, [sp, #8]
 80134f0:	f000 fabc 	bl	8013a6c <_Balloc>
 80134f4:	9b01      	ldr	r3, [sp, #4]
 80134f6:	f100 0914 	add.w	r9, r0, #20
 80134fa:	f04f 0b00 	mov.w	fp, #0
 80134fe:	f1c3 0301 	rsb	r3, r3, #1
 8013502:	4605      	mov	r5, r0
 8013504:	f8cd 9010 	str.w	r9, [sp, #16]
 8013508:	46da      	mov	sl, fp
 801350a:	9308      	str	r3, [sp, #32]
 801350c:	42b7      	cmp	r7, r6
 801350e:	d33b      	bcc.n	8013588 <__gethex+0x1ee>
 8013510:	9804      	ldr	r0, [sp, #16]
 8013512:	f840 ab04 	str.w	sl, [r0], #4
 8013516:	eba0 0009 	sub.w	r0, r0, r9
 801351a:	1080      	asrs	r0, r0, #2
 801351c:	6128      	str	r0, [r5, #16]
 801351e:	0147      	lsls	r7, r0, #5
 8013520:	4650      	mov	r0, sl
 8013522:	f000 fb67 	bl	8013bf4 <__hi0bits>
 8013526:	f8d8 6000 	ldr.w	r6, [r8]
 801352a:	1a3f      	subs	r7, r7, r0
 801352c:	42b7      	cmp	r7, r6
 801352e:	dd64      	ble.n	80135fa <__gethex+0x260>
 8013530:	1bbf      	subs	r7, r7, r6
 8013532:	4639      	mov	r1, r7
 8013534:	4628      	mov	r0, r5
 8013536:	f000 fe77 	bl	8014228 <__any_on>
 801353a:	4682      	mov	sl, r0
 801353c:	b178      	cbz	r0, 801355e <__gethex+0x1c4>
 801353e:	1e7b      	subs	r3, r7, #1
 8013540:	1159      	asrs	r1, r3, #5
 8013542:	f003 021f 	and.w	r2, r3, #31
 8013546:	f04f 0a01 	mov.w	sl, #1
 801354a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801354e:	fa0a f202 	lsl.w	r2, sl, r2
 8013552:	420a      	tst	r2, r1
 8013554:	d003      	beq.n	801355e <__gethex+0x1c4>
 8013556:	4553      	cmp	r3, sl
 8013558:	dc46      	bgt.n	80135e8 <__gethex+0x24e>
 801355a:	f04f 0a02 	mov.w	sl, #2
 801355e:	4639      	mov	r1, r7
 8013560:	4628      	mov	r0, r5
 8013562:	f7ff fecb 	bl	80132fc <rshift>
 8013566:	443c      	add	r4, r7
 8013568:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801356c:	42a3      	cmp	r3, r4
 801356e:	da52      	bge.n	8013616 <__gethex+0x27c>
 8013570:	4629      	mov	r1, r5
 8013572:	9802      	ldr	r0, [sp, #8]
 8013574:	f000 faae 	bl	8013ad4 <_Bfree>
 8013578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801357a:	2300      	movs	r3, #0
 801357c:	6013      	str	r3, [r2, #0]
 801357e:	27a3      	movs	r7, #163	; 0xa3
 8013580:	e793      	b.n	80134aa <__gethex+0x110>
 8013582:	3101      	adds	r1, #1
 8013584:	105b      	asrs	r3, r3, #1
 8013586:	e7b0      	b.n	80134ea <__gethex+0x150>
 8013588:	1e73      	subs	r3, r6, #1
 801358a:	9305      	str	r3, [sp, #20]
 801358c:	9a07      	ldr	r2, [sp, #28]
 801358e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013592:	4293      	cmp	r3, r2
 8013594:	d018      	beq.n	80135c8 <__gethex+0x22e>
 8013596:	f1bb 0f20 	cmp.w	fp, #32
 801359a:	d107      	bne.n	80135ac <__gethex+0x212>
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	f8c3 a000 	str.w	sl, [r3]
 80135a2:	3304      	adds	r3, #4
 80135a4:	f04f 0a00 	mov.w	sl, #0
 80135a8:	9304      	str	r3, [sp, #16]
 80135aa:	46d3      	mov	fp, sl
 80135ac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80135b0:	f7ff fede 	bl	8013370 <__hexdig_fun>
 80135b4:	f000 000f 	and.w	r0, r0, #15
 80135b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80135bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80135c0:	f10b 0b04 	add.w	fp, fp, #4
 80135c4:	9b05      	ldr	r3, [sp, #20]
 80135c6:	e00d      	b.n	80135e4 <__gethex+0x24a>
 80135c8:	9b05      	ldr	r3, [sp, #20]
 80135ca:	9a08      	ldr	r2, [sp, #32]
 80135cc:	4413      	add	r3, r2
 80135ce:	42bb      	cmp	r3, r7
 80135d0:	d3e1      	bcc.n	8013596 <__gethex+0x1fc>
 80135d2:	4618      	mov	r0, r3
 80135d4:	9a01      	ldr	r2, [sp, #4]
 80135d6:	9903      	ldr	r1, [sp, #12]
 80135d8:	9309      	str	r3, [sp, #36]	; 0x24
 80135da:	f001 f9e2 	bl	80149a2 <strncmp>
 80135de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e0:	2800      	cmp	r0, #0
 80135e2:	d1d8      	bne.n	8013596 <__gethex+0x1fc>
 80135e4:	461e      	mov	r6, r3
 80135e6:	e791      	b.n	801350c <__gethex+0x172>
 80135e8:	1eb9      	subs	r1, r7, #2
 80135ea:	4628      	mov	r0, r5
 80135ec:	f000 fe1c 	bl	8014228 <__any_on>
 80135f0:	2800      	cmp	r0, #0
 80135f2:	d0b2      	beq.n	801355a <__gethex+0x1c0>
 80135f4:	f04f 0a03 	mov.w	sl, #3
 80135f8:	e7b1      	b.n	801355e <__gethex+0x1c4>
 80135fa:	da09      	bge.n	8013610 <__gethex+0x276>
 80135fc:	1bf7      	subs	r7, r6, r7
 80135fe:	4629      	mov	r1, r5
 8013600:	463a      	mov	r2, r7
 8013602:	9802      	ldr	r0, [sp, #8]
 8013604:	f000 fc32 	bl	8013e6c <__lshift>
 8013608:	1be4      	subs	r4, r4, r7
 801360a:	4605      	mov	r5, r0
 801360c:	f100 0914 	add.w	r9, r0, #20
 8013610:	f04f 0a00 	mov.w	sl, #0
 8013614:	e7a8      	b.n	8013568 <__gethex+0x1ce>
 8013616:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801361a:	42a0      	cmp	r0, r4
 801361c:	dd6a      	ble.n	80136f4 <__gethex+0x35a>
 801361e:	1b04      	subs	r4, r0, r4
 8013620:	42a6      	cmp	r6, r4
 8013622:	dc2e      	bgt.n	8013682 <__gethex+0x2e8>
 8013624:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013628:	2b02      	cmp	r3, #2
 801362a:	d022      	beq.n	8013672 <__gethex+0x2d8>
 801362c:	2b03      	cmp	r3, #3
 801362e:	d024      	beq.n	801367a <__gethex+0x2e0>
 8013630:	2b01      	cmp	r3, #1
 8013632:	d115      	bne.n	8013660 <__gethex+0x2c6>
 8013634:	42a6      	cmp	r6, r4
 8013636:	d113      	bne.n	8013660 <__gethex+0x2c6>
 8013638:	2e01      	cmp	r6, #1
 801363a:	dc0b      	bgt.n	8013654 <__gethex+0x2ba>
 801363c:	9a06      	ldr	r2, [sp, #24]
 801363e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013642:	6013      	str	r3, [r2, #0]
 8013644:	2301      	movs	r3, #1
 8013646:	612b      	str	r3, [r5, #16]
 8013648:	f8c9 3000 	str.w	r3, [r9]
 801364c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801364e:	2762      	movs	r7, #98	; 0x62
 8013650:	601d      	str	r5, [r3, #0]
 8013652:	e72a      	b.n	80134aa <__gethex+0x110>
 8013654:	1e71      	subs	r1, r6, #1
 8013656:	4628      	mov	r0, r5
 8013658:	f000 fde6 	bl	8014228 <__any_on>
 801365c:	2800      	cmp	r0, #0
 801365e:	d1ed      	bne.n	801363c <__gethex+0x2a2>
 8013660:	4629      	mov	r1, r5
 8013662:	9802      	ldr	r0, [sp, #8]
 8013664:	f000 fa36 	bl	8013ad4 <_Bfree>
 8013668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801366a:	2300      	movs	r3, #0
 801366c:	6013      	str	r3, [r2, #0]
 801366e:	2750      	movs	r7, #80	; 0x50
 8013670:	e71b      	b.n	80134aa <__gethex+0x110>
 8013672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013674:	2b00      	cmp	r3, #0
 8013676:	d0e1      	beq.n	801363c <__gethex+0x2a2>
 8013678:	e7f2      	b.n	8013660 <__gethex+0x2c6>
 801367a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801367c:	2b00      	cmp	r3, #0
 801367e:	d1dd      	bne.n	801363c <__gethex+0x2a2>
 8013680:	e7ee      	b.n	8013660 <__gethex+0x2c6>
 8013682:	1e67      	subs	r7, r4, #1
 8013684:	f1ba 0f00 	cmp.w	sl, #0
 8013688:	d131      	bne.n	80136ee <__gethex+0x354>
 801368a:	b127      	cbz	r7, 8013696 <__gethex+0x2fc>
 801368c:	4639      	mov	r1, r7
 801368e:	4628      	mov	r0, r5
 8013690:	f000 fdca 	bl	8014228 <__any_on>
 8013694:	4682      	mov	sl, r0
 8013696:	117a      	asrs	r2, r7, #5
 8013698:	2301      	movs	r3, #1
 801369a:	f007 071f 	and.w	r7, r7, #31
 801369e:	fa03 f707 	lsl.w	r7, r3, r7
 80136a2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80136a6:	4621      	mov	r1, r4
 80136a8:	421f      	tst	r7, r3
 80136aa:	4628      	mov	r0, r5
 80136ac:	bf18      	it	ne
 80136ae:	f04a 0a02 	orrne.w	sl, sl, #2
 80136b2:	1b36      	subs	r6, r6, r4
 80136b4:	f7ff fe22 	bl	80132fc <rshift>
 80136b8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80136bc:	2702      	movs	r7, #2
 80136be:	f1ba 0f00 	cmp.w	sl, #0
 80136c2:	d048      	beq.n	8013756 <__gethex+0x3bc>
 80136c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80136c8:	2b02      	cmp	r3, #2
 80136ca:	d015      	beq.n	80136f8 <__gethex+0x35e>
 80136cc:	2b03      	cmp	r3, #3
 80136ce:	d017      	beq.n	8013700 <__gethex+0x366>
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d109      	bne.n	80136e8 <__gethex+0x34e>
 80136d4:	f01a 0f02 	tst.w	sl, #2
 80136d8:	d006      	beq.n	80136e8 <__gethex+0x34e>
 80136da:	f8d9 3000 	ldr.w	r3, [r9]
 80136de:	ea4a 0a03 	orr.w	sl, sl, r3
 80136e2:	f01a 0f01 	tst.w	sl, #1
 80136e6:	d10e      	bne.n	8013706 <__gethex+0x36c>
 80136e8:	f047 0710 	orr.w	r7, r7, #16
 80136ec:	e033      	b.n	8013756 <__gethex+0x3bc>
 80136ee:	f04f 0a01 	mov.w	sl, #1
 80136f2:	e7d0      	b.n	8013696 <__gethex+0x2fc>
 80136f4:	2701      	movs	r7, #1
 80136f6:	e7e2      	b.n	80136be <__gethex+0x324>
 80136f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136fa:	f1c3 0301 	rsb	r3, r3, #1
 80136fe:	9315      	str	r3, [sp, #84]	; 0x54
 8013700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013702:	2b00      	cmp	r3, #0
 8013704:	d0f0      	beq.n	80136e8 <__gethex+0x34e>
 8013706:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801370a:	f105 0314 	add.w	r3, r5, #20
 801370e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013712:	eb03 010a 	add.w	r1, r3, sl
 8013716:	f04f 0c00 	mov.w	ip, #0
 801371a:	4618      	mov	r0, r3
 801371c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013720:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013724:	d01c      	beq.n	8013760 <__gethex+0x3c6>
 8013726:	3201      	adds	r2, #1
 8013728:	6002      	str	r2, [r0, #0]
 801372a:	2f02      	cmp	r7, #2
 801372c:	f105 0314 	add.w	r3, r5, #20
 8013730:	d138      	bne.n	80137a4 <__gethex+0x40a>
 8013732:	f8d8 2000 	ldr.w	r2, [r8]
 8013736:	3a01      	subs	r2, #1
 8013738:	42b2      	cmp	r2, r6
 801373a:	d10a      	bne.n	8013752 <__gethex+0x3b8>
 801373c:	1171      	asrs	r1, r6, #5
 801373e:	2201      	movs	r2, #1
 8013740:	f006 061f 	and.w	r6, r6, #31
 8013744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013748:	fa02 f606 	lsl.w	r6, r2, r6
 801374c:	421e      	tst	r6, r3
 801374e:	bf18      	it	ne
 8013750:	4617      	movne	r7, r2
 8013752:	f047 0720 	orr.w	r7, r7, #32
 8013756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013758:	601d      	str	r5, [r3, #0]
 801375a:	9b06      	ldr	r3, [sp, #24]
 801375c:	601c      	str	r4, [r3, #0]
 801375e:	e6a4      	b.n	80134aa <__gethex+0x110>
 8013760:	4299      	cmp	r1, r3
 8013762:	f843 cc04 	str.w	ip, [r3, #-4]
 8013766:	d8d8      	bhi.n	801371a <__gethex+0x380>
 8013768:	68ab      	ldr	r3, [r5, #8]
 801376a:	4599      	cmp	r9, r3
 801376c:	db12      	blt.n	8013794 <__gethex+0x3fa>
 801376e:	6869      	ldr	r1, [r5, #4]
 8013770:	9802      	ldr	r0, [sp, #8]
 8013772:	3101      	adds	r1, #1
 8013774:	f000 f97a 	bl	8013a6c <_Balloc>
 8013778:	692a      	ldr	r2, [r5, #16]
 801377a:	3202      	adds	r2, #2
 801377c:	f105 010c 	add.w	r1, r5, #12
 8013780:	4683      	mov	fp, r0
 8013782:	0092      	lsls	r2, r2, #2
 8013784:	300c      	adds	r0, #12
 8013786:	f7fc ff96 	bl	80106b6 <memcpy>
 801378a:	4629      	mov	r1, r5
 801378c:	9802      	ldr	r0, [sp, #8]
 801378e:	f000 f9a1 	bl	8013ad4 <_Bfree>
 8013792:	465d      	mov	r5, fp
 8013794:	692b      	ldr	r3, [r5, #16]
 8013796:	1c5a      	adds	r2, r3, #1
 8013798:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801379c:	612a      	str	r2, [r5, #16]
 801379e:	2201      	movs	r2, #1
 80137a0:	615a      	str	r2, [r3, #20]
 80137a2:	e7c2      	b.n	801372a <__gethex+0x390>
 80137a4:	692a      	ldr	r2, [r5, #16]
 80137a6:	454a      	cmp	r2, r9
 80137a8:	dd0b      	ble.n	80137c2 <__gethex+0x428>
 80137aa:	2101      	movs	r1, #1
 80137ac:	4628      	mov	r0, r5
 80137ae:	f7ff fda5 	bl	80132fc <rshift>
 80137b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80137b6:	3401      	adds	r4, #1
 80137b8:	42a3      	cmp	r3, r4
 80137ba:	f6ff aed9 	blt.w	8013570 <__gethex+0x1d6>
 80137be:	2701      	movs	r7, #1
 80137c0:	e7c7      	b.n	8013752 <__gethex+0x3b8>
 80137c2:	f016 061f 	ands.w	r6, r6, #31
 80137c6:	d0fa      	beq.n	80137be <__gethex+0x424>
 80137c8:	449a      	add	sl, r3
 80137ca:	f1c6 0620 	rsb	r6, r6, #32
 80137ce:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80137d2:	f000 fa0f 	bl	8013bf4 <__hi0bits>
 80137d6:	42b0      	cmp	r0, r6
 80137d8:	dbe7      	blt.n	80137aa <__gethex+0x410>
 80137da:	e7f0      	b.n	80137be <__gethex+0x424>

080137dc <L_shift>:
 80137dc:	f1c2 0208 	rsb	r2, r2, #8
 80137e0:	0092      	lsls	r2, r2, #2
 80137e2:	b570      	push	{r4, r5, r6, lr}
 80137e4:	f1c2 0620 	rsb	r6, r2, #32
 80137e8:	6843      	ldr	r3, [r0, #4]
 80137ea:	6804      	ldr	r4, [r0, #0]
 80137ec:	fa03 f506 	lsl.w	r5, r3, r6
 80137f0:	432c      	orrs	r4, r5
 80137f2:	40d3      	lsrs	r3, r2
 80137f4:	6004      	str	r4, [r0, #0]
 80137f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80137fa:	4288      	cmp	r0, r1
 80137fc:	d3f4      	bcc.n	80137e8 <L_shift+0xc>
 80137fe:	bd70      	pop	{r4, r5, r6, pc}

08013800 <__match>:
 8013800:	b530      	push	{r4, r5, lr}
 8013802:	6803      	ldr	r3, [r0, #0]
 8013804:	3301      	adds	r3, #1
 8013806:	f811 4b01 	ldrb.w	r4, [r1], #1
 801380a:	b914      	cbnz	r4, 8013812 <__match+0x12>
 801380c:	6003      	str	r3, [r0, #0]
 801380e:	2001      	movs	r0, #1
 8013810:	bd30      	pop	{r4, r5, pc}
 8013812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013816:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801381a:	2d19      	cmp	r5, #25
 801381c:	bf98      	it	ls
 801381e:	3220      	addls	r2, #32
 8013820:	42a2      	cmp	r2, r4
 8013822:	d0f0      	beq.n	8013806 <__match+0x6>
 8013824:	2000      	movs	r0, #0
 8013826:	e7f3      	b.n	8013810 <__match+0x10>

08013828 <__hexnan>:
 8013828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	680b      	ldr	r3, [r1, #0]
 801382e:	6801      	ldr	r1, [r0, #0]
 8013830:	115f      	asrs	r7, r3, #5
 8013832:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013836:	f013 031f 	ands.w	r3, r3, #31
 801383a:	b087      	sub	sp, #28
 801383c:	bf18      	it	ne
 801383e:	3704      	addne	r7, #4
 8013840:	2500      	movs	r5, #0
 8013842:	1f3e      	subs	r6, r7, #4
 8013844:	4682      	mov	sl, r0
 8013846:	4690      	mov	r8, r2
 8013848:	9301      	str	r3, [sp, #4]
 801384a:	f847 5c04 	str.w	r5, [r7, #-4]
 801384e:	46b1      	mov	r9, r6
 8013850:	4634      	mov	r4, r6
 8013852:	9502      	str	r5, [sp, #8]
 8013854:	46ab      	mov	fp, r5
 8013856:	784a      	ldrb	r2, [r1, #1]
 8013858:	1c4b      	adds	r3, r1, #1
 801385a:	9303      	str	r3, [sp, #12]
 801385c:	b342      	cbz	r2, 80138b0 <__hexnan+0x88>
 801385e:	4610      	mov	r0, r2
 8013860:	9105      	str	r1, [sp, #20]
 8013862:	9204      	str	r2, [sp, #16]
 8013864:	f7ff fd84 	bl	8013370 <__hexdig_fun>
 8013868:	2800      	cmp	r0, #0
 801386a:	d143      	bne.n	80138f4 <__hexnan+0xcc>
 801386c:	9a04      	ldr	r2, [sp, #16]
 801386e:	9905      	ldr	r1, [sp, #20]
 8013870:	2a20      	cmp	r2, #32
 8013872:	d818      	bhi.n	80138a6 <__hexnan+0x7e>
 8013874:	9b02      	ldr	r3, [sp, #8]
 8013876:	459b      	cmp	fp, r3
 8013878:	dd13      	ble.n	80138a2 <__hexnan+0x7a>
 801387a:	454c      	cmp	r4, r9
 801387c:	d206      	bcs.n	801388c <__hexnan+0x64>
 801387e:	2d07      	cmp	r5, #7
 8013880:	dc04      	bgt.n	801388c <__hexnan+0x64>
 8013882:	462a      	mov	r2, r5
 8013884:	4649      	mov	r1, r9
 8013886:	4620      	mov	r0, r4
 8013888:	f7ff ffa8 	bl	80137dc <L_shift>
 801388c:	4544      	cmp	r4, r8
 801388e:	d944      	bls.n	801391a <__hexnan+0xf2>
 8013890:	2300      	movs	r3, #0
 8013892:	f1a4 0904 	sub.w	r9, r4, #4
 8013896:	f844 3c04 	str.w	r3, [r4, #-4]
 801389a:	f8cd b008 	str.w	fp, [sp, #8]
 801389e:	464c      	mov	r4, r9
 80138a0:	461d      	mov	r5, r3
 80138a2:	9903      	ldr	r1, [sp, #12]
 80138a4:	e7d7      	b.n	8013856 <__hexnan+0x2e>
 80138a6:	2a29      	cmp	r2, #41	; 0x29
 80138a8:	d14a      	bne.n	8013940 <__hexnan+0x118>
 80138aa:	3102      	adds	r1, #2
 80138ac:	f8ca 1000 	str.w	r1, [sl]
 80138b0:	f1bb 0f00 	cmp.w	fp, #0
 80138b4:	d044      	beq.n	8013940 <__hexnan+0x118>
 80138b6:	454c      	cmp	r4, r9
 80138b8:	d206      	bcs.n	80138c8 <__hexnan+0xa0>
 80138ba:	2d07      	cmp	r5, #7
 80138bc:	dc04      	bgt.n	80138c8 <__hexnan+0xa0>
 80138be:	462a      	mov	r2, r5
 80138c0:	4649      	mov	r1, r9
 80138c2:	4620      	mov	r0, r4
 80138c4:	f7ff ff8a 	bl	80137dc <L_shift>
 80138c8:	4544      	cmp	r4, r8
 80138ca:	d928      	bls.n	801391e <__hexnan+0xf6>
 80138cc:	4643      	mov	r3, r8
 80138ce:	f854 2b04 	ldr.w	r2, [r4], #4
 80138d2:	f843 2b04 	str.w	r2, [r3], #4
 80138d6:	42a6      	cmp	r6, r4
 80138d8:	d2f9      	bcs.n	80138ce <__hexnan+0xa6>
 80138da:	2200      	movs	r2, #0
 80138dc:	f843 2b04 	str.w	r2, [r3], #4
 80138e0:	429e      	cmp	r6, r3
 80138e2:	d2fb      	bcs.n	80138dc <__hexnan+0xb4>
 80138e4:	6833      	ldr	r3, [r6, #0]
 80138e6:	b91b      	cbnz	r3, 80138f0 <__hexnan+0xc8>
 80138e8:	4546      	cmp	r6, r8
 80138ea:	d127      	bne.n	801393c <__hexnan+0x114>
 80138ec:	2301      	movs	r3, #1
 80138ee:	6033      	str	r3, [r6, #0]
 80138f0:	2005      	movs	r0, #5
 80138f2:	e026      	b.n	8013942 <__hexnan+0x11a>
 80138f4:	3501      	adds	r5, #1
 80138f6:	2d08      	cmp	r5, #8
 80138f8:	f10b 0b01 	add.w	fp, fp, #1
 80138fc:	dd06      	ble.n	801390c <__hexnan+0xe4>
 80138fe:	4544      	cmp	r4, r8
 8013900:	d9cf      	bls.n	80138a2 <__hexnan+0x7a>
 8013902:	2300      	movs	r3, #0
 8013904:	f844 3c04 	str.w	r3, [r4, #-4]
 8013908:	2501      	movs	r5, #1
 801390a:	3c04      	subs	r4, #4
 801390c:	6822      	ldr	r2, [r4, #0]
 801390e:	f000 000f 	and.w	r0, r0, #15
 8013912:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013916:	6020      	str	r0, [r4, #0]
 8013918:	e7c3      	b.n	80138a2 <__hexnan+0x7a>
 801391a:	2508      	movs	r5, #8
 801391c:	e7c1      	b.n	80138a2 <__hexnan+0x7a>
 801391e:	9b01      	ldr	r3, [sp, #4]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d0df      	beq.n	80138e4 <__hexnan+0xbc>
 8013924:	f04f 32ff 	mov.w	r2, #4294967295
 8013928:	f1c3 0320 	rsb	r3, r3, #32
 801392c:	fa22 f303 	lsr.w	r3, r2, r3
 8013930:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013934:	401a      	ands	r2, r3
 8013936:	f847 2c04 	str.w	r2, [r7, #-4]
 801393a:	e7d3      	b.n	80138e4 <__hexnan+0xbc>
 801393c:	3e04      	subs	r6, #4
 801393e:	e7d1      	b.n	80138e4 <__hexnan+0xbc>
 8013940:	2004      	movs	r0, #4
 8013942:	b007      	add	sp, #28
 8013944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013948 <__locale_ctype_ptr_l>:
 8013948:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801394c:	4770      	bx	lr

0801394e <__localeconv_l>:
 801394e:	30f0      	adds	r0, #240	; 0xf0
 8013950:	4770      	bx	lr
	...

08013954 <_localeconv_r>:
 8013954:	4b04      	ldr	r3, [pc, #16]	; (8013968 <_localeconv_r+0x14>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	6a18      	ldr	r0, [r3, #32]
 801395a:	4b04      	ldr	r3, [pc, #16]	; (801396c <_localeconv_r+0x18>)
 801395c:	2800      	cmp	r0, #0
 801395e:	bf08      	it	eq
 8013960:	4618      	moveq	r0, r3
 8013962:	30f0      	adds	r0, #240	; 0xf0
 8013964:	4770      	bx	lr
 8013966:	bf00      	nop
 8013968:	200008c8 	.word	0x200008c8
 801396c:	2000092c 	.word	0x2000092c

08013970 <__swhatbuf_r>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	460e      	mov	r6, r1
 8013974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013978:	2900      	cmp	r1, #0
 801397a:	b096      	sub	sp, #88	; 0x58
 801397c:	4614      	mov	r4, r2
 801397e:	461d      	mov	r5, r3
 8013980:	da07      	bge.n	8013992 <__swhatbuf_r+0x22>
 8013982:	2300      	movs	r3, #0
 8013984:	602b      	str	r3, [r5, #0]
 8013986:	89b3      	ldrh	r3, [r6, #12]
 8013988:	061a      	lsls	r2, r3, #24
 801398a:	d410      	bmi.n	80139ae <__swhatbuf_r+0x3e>
 801398c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013990:	e00e      	b.n	80139b0 <__swhatbuf_r+0x40>
 8013992:	466a      	mov	r2, sp
 8013994:	f001 f846 	bl	8014a24 <_fstat_r>
 8013998:	2800      	cmp	r0, #0
 801399a:	dbf2      	blt.n	8013982 <__swhatbuf_r+0x12>
 801399c:	9a01      	ldr	r2, [sp, #4]
 801399e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80139a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80139a6:	425a      	negs	r2, r3
 80139a8:	415a      	adcs	r2, r3
 80139aa:	602a      	str	r2, [r5, #0]
 80139ac:	e7ee      	b.n	801398c <__swhatbuf_r+0x1c>
 80139ae:	2340      	movs	r3, #64	; 0x40
 80139b0:	2000      	movs	r0, #0
 80139b2:	6023      	str	r3, [r4, #0]
 80139b4:	b016      	add	sp, #88	; 0x58
 80139b6:	bd70      	pop	{r4, r5, r6, pc}

080139b8 <__smakebuf_r>:
 80139b8:	898b      	ldrh	r3, [r1, #12]
 80139ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139bc:	079d      	lsls	r5, r3, #30
 80139be:	4606      	mov	r6, r0
 80139c0:	460c      	mov	r4, r1
 80139c2:	d507      	bpl.n	80139d4 <__smakebuf_r+0x1c>
 80139c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	6123      	str	r3, [r4, #16]
 80139cc:	2301      	movs	r3, #1
 80139ce:	6163      	str	r3, [r4, #20]
 80139d0:	b002      	add	sp, #8
 80139d2:	bd70      	pop	{r4, r5, r6, pc}
 80139d4:	ab01      	add	r3, sp, #4
 80139d6:	466a      	mov	r2, sp
 80139d8:	f7ff ffca 	bl	8013970 <__swhatbuf_r>
 80139dc:	9900      	ldr	r1, [sp, #0]
 80139de:	4605      	mov	r5, r0
 80139e0:	4630      	mov	r0, r6
 80139e2:	f000 fc9f 	bl	8014324 <_malloc_r>
 80139e6:	b948      	cbnz	r0, 80139fc <__smakebuf_r+0x44>
 80139e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139ec:	059a      	lsls	r2, r3, #22
 80139ee:	d4ef      	bmi.n	80139d0 <__smakebuf_r+0x18>
 80139f0:	f023 0303 	bic.w	r3, r3, #3
 80139f4:	f043 0302 	orr.w	r3, r3, #2
 80139f8:	81a3      	strh	r3, [r4, #12]
 80139fa:	e7e3      	b.n	80139c4 <__smakebuf_r+0xc>
 80139fc:	4b0d      	ldr	r3, [pc, #52]	; (8013a34 <__smakebuf_r+0x7c>)
 80139fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a00:	89a3      	ldrh	r3, [r4, #12]
 8013a02:	6020      	str	r0, [r4, #0]
 8013a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a08:	81a3      	strh	r3, [r4, #12]
 8013a0a:	9b00      	ldr	r3, [sp, #0]
 8013a0c:	6163      	str	r3, [r4, #20]
 8013a0e:	9b01      	ldr	r3, [sp, #4]
 8013a10:	6120      	str	r0, [r4, #16]
 8013a12:	b15b      	cbz	r3, 8013a2c <__smakebuf_r+0x74>
 8013a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a18:	4630      	mov	r0, r6
 8013a1a:	f001 f815 	bl	8014a48 <_isatty_r>
 8013a1e:	b128      	cbz	r0, 8013a2c <__smakebuf_r+0x74>
 8013a20:	89a3      	ldrh	r3, [r4, #12]
 8013a22:	f023 0303 	bic.w	r3, r3, #3
 8013a26:	f043 0301 	orr.w	r3, r3, #1
 8013a2a:	81a3      	strh	r3, [r4, #12]
 8013a2c:	89a3      	ldrh	r3, [r4, #12]
 8013a2e:	431d      	orrs	r5, r3
 8013a30:	81a5      	strh	r5, [r4, #12]
 8013a32:	e7cd      	b.n	80139d0 <__smakebuf_r+0x18>
 8013a34:	080131b1 	.word	0x080131b1

08013a38 <malloc>:
 8013a38:	4b02      	ldr	r3, [pc, #8]	; (8013a44 <malloc+0xc>)
 8013a3a:	4601      	mov	r1, r0
 8013a3c:	6818      	ldr	r0, [r3, #0]
 8013a3e:	f000 bc71 	b.w	8014324 <_malloc_r>
 8013a42:	bf00      	nop
 8013a44:	200008c8 	.word	0x200008c8

08013a48 <__ascii_mbtowc>:
 8013a48:	b082      	sub	sp, #8
 8013a4a:	b901      	cbnz	r1, 8013a4e <__ascii_mbtowc+0x6>
 8013a4c:	a901      	add	r1, sp, #4
 8013a4e:	b142      	cbz	r2, 8013a62 <__ascii_mbtowc+0x1a>
 8013a50:	b14b      	cbz	r3, 8013a66 <__ascii_mbtowc+0x1e>
 8013a52:	7813      	ldrb	r3, [r2, #0]
 8013a54:	600b      	str	r3, [r1, #0]
 8013a56:	7812      	ldrb	r2, [r2, #0]
 8013a58:	1c10      	adds	r0, r2, #0
 8013a5a:	bf18      	it	ne
 8013a5c:	2001      	movne	r0, #1
 8013a5e:	b002      	add	sp, #8
 8013a60:	4770      	bx	lr
 8013a62:	4610      	mov	r0, r2
 8013a64:	e7fb      	b.n	8013a5e <__ascii_mbtowc+0x16>
 8013a66:	f06f 0001 	mvn.w	r0, #1
 8013a6a:	e7f8      	b.n	8013a5e <__ascii_mbtowc+0x16>

08013a6c <_Balloc>:
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013a70:	4604      	mov	r4, r0
 8013a72:	460e      	mov	r6, r1
 8013a74:	b93d      	cbnz	r5, 8013a86 <_Balloc+0x1a>
 8013a76:	2010      	movs	r0, #16
 8013a78:	f7ff ffde 	bl	8013a38 <malloc>
 8013a7c:	6260      	str	r0, [r4, #36]	; 0x24
 8013a7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013a82:	6005      	str	r5, [r0, #0]
 8013a84:	60c5      	str	r5, [r0, #12]
 8013a86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013a88:	68eb      	ldr	r3, [r5, #12]
 8013a8a:	b183      	cbz	r3, 8013aae <_Balloc+0x42>
 8013a8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013a94:	b9b8      	cbnz	r0, 8013ac6 <_Balloc+0x5a>
 8013a96:	2101      	movs	r1, #1
 8013a98:	fa01 f506 	lsl.w	r5, r1, r6
 8013a9c:	1d6a      	adds	r2, r5, #5
 8013a9e:	0092      	lsls	r2, r2, #2
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f000 fbe2 	bl	801426a <_calloc_r>
 8013aa6:	b160      	cbz	r0, 8013ac2 <_Balloc+0x56>
 8013aa8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013aac:	e00e      	b.n	8013acc <_Balloc+0x60>
 8013aae:	2221      	movs	r2, #33	; 0x21
 8013ab0:	2104      	movs	r1, #4
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f000 fbd9 	bl	801426a <_calloc_r>
 8013ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aba:	60e8      	str	r0, [r5, #12]
 8013abc:	68db      	ldr	r3, [r3, #12]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1e4      	bne.n	8013a8c <_Balloc+0x20>
 8013ac2:	2000      	movs	r0, #0
 8013ac4:	bd70      	pop	{r4, r5, r6, pc}
 8013ac6:	6802      	ldr	r2, [r0, #0]
 8013ac8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013acc:	2300      	movs	r3, #0
 8013ace:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ad2:	e7f7      	b.n	8013ac4 <_Balloc+0x58>

08013ad4 <_Bfree>:
 8013ad4:	b570      	push	{r4, r5, r6, lr}
 8013ad6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013ad8:	4606      	mov	r6, r0
 8013ada:	460d      	mov	r5, r1
 8013adc:	b93c      	cbnz	r4, 8013aee <_Bfree+0x1a>
 8013ade:	2010      	movs	r0, #16
 8013ae0:	f7ff ffaa 	bl	8013a38 <malloc>
 8013ae4:	6270      	str	r0, [r6, #36]	; 0x24
 8013ae6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013aea:	6004      	str	r4, [r0, #0]
 8013aec:	60c4      	str	r4, [r0, #12]
 8013aee:	b13d      	cbz	r5, 8013b00 <_Bfree+0x2c>
 8013af0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013af2:	686a      	ldr	r2, [r5, #4]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013afa:	6029      	str	r1, [r5, #0]
 8013afc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013b00:	bd70      	pop	{r4, r5, r6, pc}

08013b02 <__multadd>:
 8013b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b06:	690d      	ldr	r5, [r1, #16]
 8013b08:	461f      	mov	r7, r3
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	460c      	mov	r4, r1
 8013b0e:	f101 0c14 	add.w	ip, r1, #20
 8013b12:	2300      	movs	r3, #0
 8013b14:	f8dc 0000 	ldr.w	r0, [ip]
 8013b18:	b281      	uxth	r1, r0
 8013b1a:	fb02 7101 	mla	r1, r2, r1, r7
 8013b1e:	0c0f      	lsrs	r7, r1, #16
 8013b20:	0c00      	lsrs	r0, r0, #16
 8013b22:	fb02 7000 	mla	r0, r2, r0, r7
 8013b26:	b289      	uxth	r1, r1
 8013b28:	3301      	adds	r3, #1
 8013b2a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013b2e:	429d      	cmp	r5, r3
 8013b30:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013b34:	f84c 1b04 	str.w	r1, [ip], #4
 8013b38:	dcec      	bgt.n	8013b14 <__multadd+0x12>
 8013b3a:	b1d7      	cbz	r7, 8013b72 <__multadd+0x70>
 8013b3c:	68a3      	ldr	r3, [r4, #8]
 8013b3e:	42ab      	cmp	r3, r5
 8013b40:	dc12      	bgt.n	8013b68 <__multadd+0x66>
 8013b42:	6861      	ldr	r1, [r4, #4]
 8013b44:	4630      	mov	r0, r6
 8013b46:	3101      	adds	r1, #1
 8013b48:	f7ff ff90 	bl	8013a6c <_Balloc>
 8013b4c:	6922      	ldr	r2, [r4, #16]
 8013b4e:	3202      	adds	r2, #2
 8013b50:	f104 010c 	add.w	r1, r4, #12
 8013b54:	4680      	mov	r8, r0
 8013b56:	0092      	lsls	r2, r2, #2
 8013b58:	300c      	adds	r0, #12
 8013b5a:	f7fc fdac 	bl	80106b6 <memcpy>
 8013b5e:	4621      	mov	r1, r4
 8013b60:	4630      	mov	r0, r6
 8013b62:	f7ff ffb7 	bl	8013ad4 <_Bfree>
 8013b66:	4644      	mov	r4, r8
 8013b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b6c:	3501      	adds	r5, #1
 8013b6e:	615f      	str	r7, [r3, #20]
 8013b70:	6125      	str	r5, [r4, #16]
 8013b72:	4620      	mov	r0, r4
 8013b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b78 <__s2b>:
 8013b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b7c:	460c      	mov	r4, r1
 8013b7e:	4615      	mov	r5, r2
 8013b80:	461f      	mov	r7, r3
 8013b82:	2209      	movs	r2, #9
 8013b84:	3308      	adds	r3, #8
 8013b86:	4606      	mov	r6, r0
 8013b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	2201      	movs	r2, #1
 8013b90:	429a      	cmp	r2, r3
 8013b92:	db20      	blt.n	8013bd6 <__s2b+0x5e>
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7ff ff69 	bl	8013a6c <_Balloc>
 8013b9a:	9b08      	ldr	r3, [sp, #32]
 8013b9c:	6143      	str	r3, [r0, #20]
 8013b9e:	2d09      	cmp	r5, #9
 8013ba0:	f04f 0301 	mov.w	r3, #1
 8013ba4:	6103      	str	r3, [r0, #16]
 8013ba6:	dd19      	ble.n	8013bdc <__s2b+0x64>
 8013ba8:	f104 0809 	add.w	r8, r4, #9
 8013bac:	46c1      	mov	r9, r8
 8013bae:	442c      	add	r4, r5
 8013bb0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013bb4:	4601      	mov	r1, r0
 8013bb6:	3b30      	subs	r3, #48	; 0x30
 8013bb8:	220a      	movs	r2, #10
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f7ff ffa1 	bl	8013b02 <__multadd>
 8013bc0:	45a1      	cmp	r9, r4
 8013bc2:	d1f5      	bne.n	8013bb0 <__s2b+0x38>
 8013bc4:	eb08 0405 	add.w	r4, r8, r5
 8013bc8:	3c08      	subs	r4, #8
 8013bca:	1b2d      	subs	r5, r5, r4
 8013bcc:	1963      	adds	r3, r4, r5
 8013bce:	42bb      	cmp	r3, r7
 8013bd0:	db07      	blt.n	8013be2 <__s2b+0x6a>
 8013bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bd6:	0052      	lsls	r2, r2, #1
 8013bd8:	3101      	adds	r1, #1
 8013bda:	e7d9      	b.n	8013b90 <__s2b+0x18>
 8013bdc:	340a      	adds	r4, #10
 8013bde:	2509      	movs	r5, #9
 8013be0:	e7f3      	b.n	8013bca <__s2b+0x52>
 8013be2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013be6:	4601      	mov	r1, r0
 8013be8:	3b30      	subs	r3, #48	; 0x30
 8013bea:	220a      	movs	r2, #10
 8013bec:	4630      	mov	r0, r6
 8013bee:	f7ff ff88 	bl	8013b02 <__multadd>
 8013bf2:	e7eb      	b.n	8013bcc <__s2b+0x54>

08013bf4 <__hi0bits>:
 8013bf4:	0c02      	lsrs	r2, r0, #16
 8013bf6:	0412      	lsls	r2, r2, #16
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	b9b2      	cbnz	r2, 8013c2a <__hi0bits+0x36>
 8013bfc:	0403      	lsls	r3, r0, #16
 8013bfe:	2010      	movs	r0, #16
 8013c00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013c04:	bf04      	itt	eq
 8013c06:	021b      	lsleq	r3, r3, #8
 8013c08:	3008      	addeq	r0, #8
 8013c0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013c0e:	bf04      	itt	eq
 8013c10:	011b      	lsleq	r3, r3, #4
 8013c12:	3004      	addeq	r0, #4
 8013c14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013c18:	bf04      	itt	eq
 8013c1a:	009b      	lsleq	r3, r3, #2
 8013c1c:	3002      	addeq	r0, #2
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	db06      	blt.n	8013c30 <__hi0bits+0x3c>
 8013c22:	005b      	lsls	r3, r3, #1
 8013c24:	d503      	bpl.n	8013c2e <__hi0bits+0x3a>
 8013c26:	3001      	adds	r0, #1
 8013c28:	4770      	bx	lr
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	e7e8      	b.n	8013c00 <__hi0bits+0xc>
 8013c2e:	2020      	movs	r0, #32
 8013c30:	4770      	bx	lr

08013c32 <__lo0bits>:
 8013c32:	6803      	ldr	r3, [r0, #0]
 8013c34:	f013 0207 	ands.w	r2, r3, #7
 8013c38:	4601      	mov	r1, r0
 8013c3a:	d00b      	beq.n	8013c54 <__lo0bits+0x22>
 8013c3c:	07da      	lsls	r2, r3, #31
 8013c3e:	d423      	bmi.n	8013c88 <__lo0bits+0x56>
 8013c40:	0798      	lsls	r0, r3, #30
 8013c42:	bf49      	itett	mi
 8013c44:	085b      	lsrmi	r3, r3, #1
 8013c46:	089b      	lsrpl	r3, r3, #2
 8013c48:	2001      	movmi	r0, #1
 8013c4a:	600b      	strmi	r3, [r1, #0]
 8013c4c:	bf5c      	itt	pl
 8013c4e:	600b      	strpl	r3, [r1, #0]
 8013c50:	2002      	movpl	r0, #2
 8013c52:	4770      	bx	lr
 8013c54:	b298      	uxth	r0, r3
 8013c56:	b9a8      	cbnz	r0, 8013c84 <__lo0bits+0x52>
 8013c58:	0c1b      	lsrs	r3, r3, #16
 8013c5a:	2010      	movs	r0, #16
 8013c5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013c60:	bf04      	itt	eq
 8013c62:	0a1b      	lsreq	r3, r3, #8
 8013c64:	3008      	addeq	r0, #8
 8013c66:	071a      	lsls	r2, r3, #28
 8013c68:	bf04      	itt	eq
 8013c6a:	091b      	lsreq	r3, r3, #4
 8013c6c:	3004      	addeq	r0, #4
 8013c6e:	079a      	lsls	r2, r3, #30
 8013c70:	bf04      	itt	eq
 8013c72:	089b      	lsreq	r3, r3, #2
 8013c74:	3002      	addeq	r0, #2
 8013c76:	07da      	lsls	r2, r3, #31
 8013c78:	d402      	bmi.n	8013c80 <__lo0bits+0x4e>
 8013c7a:	085b      	lsrs	r3, r3, #1
 8013c7c:	d006      	beq.n	8013c8c <__lo0bits+0x5a>
 8013c7e:	3001      	adds	r0, #1
 8013c80:	600b      	str	r3, [r1, #0]
 8013c82:	4770      	bx	lr
 8013c84:	4610      	mov	r0, r2
 8013c86:	e7e9      	b.n	8013c5c <__lo0bits+0x2a>
 8013c88:	2000      	movs	r0, #0
 8013c8a:	4770      	bx	lr
 8013c8c:	2020      	movs	r0, #32
 8013c8e:	4770      	bx	lr

08013c90 <__i2b>:
 8013c90:	b510      	push	{r4, lr}
 8013c92:	460c      	mov	r4, r1
 8013c94:	2101      	movs	r1, #1
 8013c96:	f7ff fee9 	bl	8013a6c <_Balloc>
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	6144      	str	r4, [r0, #20]
 8013c9e:	6102      	str	r2, [r0, #16]
 8013ca0:	bd10      	pop	{r4, pc}

08013ca2 <__multiply>:
 8013ca2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca6:	4614      	mov	r4, r2
 8013ca8:	690a      	ldr	r2, [r1, #16]
 8013caa:	6923      	ldr	r3, [r4, #16]
 8013cac:	429a      	cmp	r2, r3
 8013cae:	bfb8      	it	lt
 8013cb0:	460b      	movlt	r3, r1
 8013cb2:	4688      	mov	r8, r1
 8013cb4:	bfbc      	itt	lt
 8013cb6:	46a0      	movlt	r8, r4
 8013cb8:	461c      	movlt	r4, r3
 8013cba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013cbe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013cc6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013cca:	eb07 0609 	add.w	r6, r7, r9
 8013cce:	42b3      	cmp	r3, r6
 8013cd0:	bfb8      	it	lt
 8013cd2:	3101      	addlt	r1, #1
 8013cd4:	f7ff feca 	bl	8013a6c <_Balloc>
 8013cd8:	f100 0514 	add.w	r5, r0, #20
 8013cdc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013ce0:	462b      	mov	r3, r5
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	4573      	cmp	r3, lr
 8013ce6:	d316      	bcc.n	8013d16 <__multiply+0x74>
 8013ce8:	f104 0214 	add.w	r2, r4, #20
 8013cec:	f108 0114 	add.w	r1, r8, #20
 8013cf0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013cf4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013cf8:	9300      	str	r3, [sp, #0]
 8013cfa:	9b00      	ldr	r3, [sp, #0]
 8013cfc:	9201      	str	r2, [sp, #4]
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d80c      	bhi.n	8013d1c <__multiply+0x7a>
 8013d02:	2e00      	cmp	r6, #0
 8013d04:	dd03      	ble.n	8013d0e <__multiply+0x6c>
 8013d06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d05d      	beq.n	8013dca <__multiply+0x128>
 8013d0e:	6106      	str	r6, [r0, #16]
 8013d10:	b003      	add	sp, #12
 8013d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d16:	f843 2b04 	str.w	r2, [r3], #4
 8013d1a:	e7e3      	b.n	8013ce4 <__multiply+0x42>
 8013d1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013d20:	f1bb 0f00 	cmp.w	fp, #0
 8013d24:	d023      	beq.n	8013d6e <__multiply+0xcc>
 8013d26:	4689      	mov	r9, r1
 8013d28:	46ac      	mov	ip, r5
 8013d2a:	f04f 0800 	mov.w	r8, #0
 8013d2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013d32:	f8dc a000 	ldr.w	sl, [ip]
 8013d36:	b2a3      	uxth	r3, r4
 8013d38:	fa1f fa8a 	uxth.w	sl, sl
 8013d3c:	fb0b a303 	mla	r3, fp, r3, sl
 8013d40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013d44:	f8dc 4000 	ldr.w	r4, [ip]
 8013d48:	4443      	add	r3, r8
 8013d4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013d4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013d52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013d56:	46e2      	mov	sl, ip
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013d5e:	454f      	cmp	r7, r9
 8013d60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013d64:	f84a 3b04 	str.w	r3, [sl], #4
 8013d68:	d82b      	bhi.n	8013dc2 <__multiply+0x120>
 8013d6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8013d6e:	9b01      	ldr	r3, [sp, #4]
 8013d70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013d74:	3204      	adds	r2, #4
 8013d76:	f1ba 0f00 	cmp.w	sl, #0
 8013d7a:	d020      	beq.n	8013dbe <__multiply+0x11c>
 8013d7c:	682b      	ldr	r3, [r5, #0]
 8013d7e:	4689      	mov	r9, r1
 8013d80:	46a8      	mov	r8, r5
 8013d82:	f04f 0b00 	mov.w	fp, #0
 8013d86:	f8b9 c000 	ldrh.w	ip, [r9]
 8013d8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013d8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8013d92:	445c      	add	r4, fp
 8013d94:	46c4      	mov	ip, r8
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013d9c:	f84c 3b04 	str.w	r3, [ip], #4
 8013da0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013da4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013da8:	0c1b      	lsrs	r3, r3, #16
 8013daa:	fb0a b303 	mla	r3, sl, r3, fp
 8013dae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013db2:	454f      	cmp	r7, r9
 8013db4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013db8:	d805      	bhi.n	8013dc6 <__multiply+0x124>
 8013dba:	f8c8 3004 	str.w	r3, [r8, #4]
 8013dbe:	3504      	adds	r5, #4
 8013dc0:	e79b      	b.n	8013cfa <__multiply+0x58>
 8013dc2:	46d4      	mov	ip, sl
 8013dc4:	e7b3      	b.n	8013d2e <__multiply+0x8c>
 8013dc6:	46e0      	mov	r8, ip
 8013dc8:	e7dd      	b.n	8013d86 <__multiply+0xe4>
 8013dca:	3e01      	subs	r6, #1
 8013dcc:	e799      	b.n	8013d02 <__multiply+0x60>
	...

08013dd0 <__pow5mult>:
 8013dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dd4:	4615      	mov	r5, r2
 8013dd6:	f012 0203 	ands.w	r2, r2, #3
 8013dda:	4606      	mov	r6, r0
 8013ddc:	460f      	mov	r7, r1
 8013dde:	d007      	beq.n	8013df0 <__pow5mult+0x20>
 8013de0:	3a01      	subs	r2, #1
 8013de2:	4c21      	ldr	r4, [pc, #132]	; (8013e68 <__pow5mult+0x98>)
 8013de4:	2300      	movs	r3, #0
 8013de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013dea:	f7ff fe8a 	bl	8013b02 <__multadd>
 8013dee:	4607      	mov	r7, r0
 8013df0:	10ad      	asrs	r5, r5, #2
 8013df2:	d035      	beq.n	8013e60 <__pow5mult+0x90>
 8013df4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013df6:	b93c      	cbnz	r4, 8013e08 <__pow5mult+0x38>
 8013df8:	2010      	movs	r0, #16
 8013dfa:	f7ff fe1d 	bl	8013a38 <malloc>
 8013dfe:	6270      	str	r0, [r6, #36]	; 0x24
 8013e00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e04:	6004      	str	r4, [r0, #0]
 8013e06:	60c4      	str	r4, [r0, #12]
 8013e08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013e0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e10:	b94c      	cbnz	r4, 8013e26 <__pow5mult+0x56>
 8013e12:	f240 2171 	movw	r1, #625	; 0x271
 8013e16:	4630      	mov	r0, r6
 8013e18:	f7ff ff3a 	bl	8013c90 <__i2b>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e22:	4604      	mov	r4, r0
 8013e24:	6003      	str	r3, [r0, #0]
 8013e26:	f04f 0800 	mov.w	r8, #0
 8013e2a:	07eb      	lsls	r3, r5, #31
 8013e2c:	d50a      	bpl.n	8013e44 <__pow5mult+0x74>
 8013e2e:	4639      	mov	r1, r7
 8013e30:	4622      	mov	r2, r4
 8013e32:	4630      	mov	r0, r6
 8013e34:	f7ff ff35 	bl	8013ca2 <__multiply>
 8013e38:	4639      	mov	r1, r7
 8013e3a:	4681      	mov	r9, r0
 8013e3c:	4630      	mov	r0, r6
 8013e3e:	f7ff fe49 	bl	8013ad4 <_Bfree>
 8013e42:	464f      	mov	r7, r9
 8013e44:	106d      	asrs	r5, r5, #1
 8013e46:	d00b      	beq.n	8013e60 <__pow5mult+0x90>
 8013e48:	6820      	ldr	r0, [r4, #0]
 8013e4a:	b938      	cbnz	r0, 8013e5c <__pow5mult+0x8c>
 8013e4c:	4622      	mov	r2, r4
 8013e4e:	4621      	mov	r1, r4
 8013e50:	4630      	mov	r0, r6
 8013e52:	f7ff ff26 	bl	8013ca2 <__multiply>
 8013e56:	6020      	str	r0, [r4, #0]
 8013e58:	f8c0 8000 	str.w	r8, [r0]
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	e7e4      	b.n	8013e2a <__pow5mult+0x5a>
 8013e60:	4638      	mov	r0, r7
 8013e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e66:	bf00      	nop
 8013e68:	0814f938 	.word	0x0814f938

08013e6c <__lshift>:
 8013e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e70:	460c      	mov	r4, r1
 8013e72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013e76:	6923      	ldr	r3, [r4, #16]
 8013e78:	6849      	ldr	r1, [r1, #4]
 8013e7a:	eb0a 0903 	add.w	r9, sl, r3
 8013e7e:	68a3      	ldr	r3, [r4, #8]
 8013e80:	4607      	mov	r7, r0
 8013e82:	4616      	mov	r6, r2
 8013e84:	f109 0501 	add.w	r5, r9, #1
 8013e88:	42ab      	cmp	r3, r5
 8013e8a:	db32      	blt.n	8013ef2 <__lshift+0x86>
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f7ff fded 	bl	8013a6c <_Balloc>
 8013e92:	2300      	movs	r3, #0
 8013e94:	4680      	mov	r8, r0
 8013e96:	f100 0114 	add.w	r1, r0, #20
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	4553      	cmp	r3, sl
 8013e9e:	db2b      	blt.n	8013ef8 <__lshift+0x8c>
 8013ea0:	6920      	ldr	r0, [r4, #16]
 8013ea2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ea6:	f104 0314 	add.w	r3, r4, #20
 8013eaa:	f016 021f 	ands.w	r2, r6, #31
 8013eae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013eb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013eb6:	d025      	beq.n	8013f04 <__lshift+0x98>
 8013eb8:	f1c2 0e20 	rsb	lr, r2, #32
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	681e      	ldr	r6, [r3, #0]
 8013ec0:	468a      	mov	sl, r1
 8013ec2:	4096      	lsls	r6, r2
 8013ec4:	4330      	orrs	r0, r6
 8013ec6:	f84a 0b04 	str.w	r0, [sl], #4
 8013eca:	f853 0b04 	ldr.w	r0, [r3], #4
 8013ece:	459c      	cmp	ip, r3
 8013ed0:	fa20 f00e 	lsr.w	r0, r0, lr
 8013ed4:	d814      	bhi.n	8013f00 <__lshift+0x94>
 8013ed6:	6048      	str	r0, [r1, #4]
 8013ed8:	b108      	cbz	r0, 8013ede <__lshift+0x72>
 8013eda:	f109 0502 	add.w	r5, r9, #2
 8013ede:	3d01      	subs	r5, #1
 8013ee0:	4638      	mov	r0, r7
 8013ee2:	f8c8 5010 	str.w	r5, [r8, #16]
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	f7ff fdf4 	bl	8013ad4 <_Bfree>
 8013eec:	4640      	mov	r0, r8
 8013eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ef2:	3101      	adds	r1, #1
 8013ef4:	005b      	lsls	r3, r3, #1
 8013ef6:	e7c7      	b.n	8013e88 <__lshift+0x1c>
 8013ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013efc:	3301      	adds	r3, #1
 8013efe:	e7cd      	b.n	8013e9c <__lshift+0x30>
 8013f00:	4651      	mov	r1, sl
 8013f02:	e7dc      	b.n	8013ebe <__lshift+0x52>
 8013f04:	3904      	subs	r1, #4
 8013f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f0e:	459c      	cmp	ip, r3
 8013f10:	d8f9      	bhi.n	8013f06 <__lshift+0x9a>
 8013f12:	e7e4      	b.n	8013ede <__lshift+0x72>

08013f14 <__mcmp>:
 8013f14:	6903      	ldr	r3, [r0, #16]
 8013f16:	690a      	ldr	r2, [r1, #16]
 8013f18:	1a9b      	subs	r3, r3, r2
 8013f1a:	b530      	push	{r4, r5, lr}
 8013f1c:	d10c      	bne.n	8013f38 <__mcmp+0x24>
 8013f1e:	0092      	lsls	r2, r2, #2
 8013f20:	3014      	adds	r0, #20
 8013f22:	3114      	adds	r1, #20
 8013f24:	1884      	adds	r4, r0, r2
 8013f26:	4411      	add	r1, r2
 8013f28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f30:	4295      	cmp	r5, r2
 8013f32:	d003      	beq.n	8013f3c <__mcmp+0x28>
 8013f34:	d305      	bcc.n	8013f42 <__mcmp+0x2e>
 8013f36:	2301      	movs	r3, #1
 8013f38:	4618      	mov	r0, r3
 8013f3a:	bd30      	pop	{r4, r5, pc}
 8013f3c:	42a0      	cmp	r0, r4
 8013f3e:	d3f3      	bcc.n	8013f28 <__mcmp+0x14>
 8013f40:	e7fa      	b.n	8013f38 <__mcmp+0x24>
 8013f42:	f04f 33ff 	mov.w	r3, #4294967295
 8013f46:	e7f7      	b.n	8013f38 <__mcmp+0x24>

08013f48 <__mdiff>:
 8013f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f4c:	460d      	mov	r5, r1
 8013f4e:	4607      	mov	r7, r0
 8013f50:	4611      	mov	r1, r2
 8013f52:	4628      	mov	r0, r5
 8013f54:	4614      	mov	r4, r2
 8013f56:	f7ff ffdd 	bl	8013f14 <__mcmp>
 8013f5a:	1e06      	subs	r6, r0, #0
 8013f5c:	d108      	bne.n	8013f70 <__mdiff+0x28>
 8013f5e:	4631      	mov	r1, r6
 8013f60:	4638      	mov	r0, r7
 8013f62:	f7ff fd83 	bl	8013a6c <_Balloc>
 8013f66:	2301      	movs	r3, #1
 8013f68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f70:	bfa4      	itt	ge
 8013f72:	4623      	movge	r3, r4
 8013f74:	462c      	movge	r4, r5
 8013f76:	4638      	mov	r0, r7
 8013f78:	6861      	ldr	r1, [r4, #4]
 8013f7a:	bfa6      	itte	ge
 8013f7c:	461d      	movge	r5, r3
 8013f7e:	2600      	movge	r6, #0
 8013f80:	2601      	movlt	r6, #1
 8013f82:	f7ff fd73 	bl	8013a6c <_Balloc>
 8013f86:	692b      	ldr	r3, [r5, #16]
 8013f88:	60c6      	str	r6, [r0, #12]
 8013f8a:	6926      	ldr	r6, [r4, #16]
 8013f8c:	f105 0914 	add.w	r9, r5, #20
 8013f90:	f104 0214 	add.w	r2, r4, #20
 8013f94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013f98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013f9c:	f100 0514 	add.w	r5, r0, #20
 8013fa0:	f04f 0e00 	mov.w	lr, #0
 8013fa4:	f852 ab04 	ldr.w	sl, [r2], #4
 8013fa8:	f859 4b04 	ldr.w	r4, [r9], #4
 8013fac:	fa1e f18a 	uxtah	r1, lr, sl
 8013fb0:	b2a3      	uxth	r3, r4
 8013fb2:	1ac9      	subs	r1, r1, r3
 8013fb4:	0c23      	lsrs	r3, r4, #16
 8013fb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013fba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013fbe:	b289      	uxth	r1, r1
 8013fc0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013fc4:	45c8      	cmp	r8, r9
 8013fc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013fca:	4694      	mov	ip, r2
 8013fcc:	f845 3b04 	str.w	r3, [r5], #4
 8013fd0:	d8e8      	bhi.n	8013fa4 <__mdiff+0x5c>
 8013fd2:	45bc      	cmp	ip, r7
 8013fd4:	d304      	bcc.n	8013fe0 <__mdiff+0x98>
 8013fd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013fda:	b183      	cbz	r3, 8013ffe <__mdiff+0xb6>
 8013fdc:	6106      	str	r6, [r0, #16]
 8013fde:	e7c5      	b.n	8013f6c <__mdiff+0x24>
 8013fe0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013fe4:	fa1e f381 	uxtah	r3, lr, r1
 8013fe8:	141a      	asrs	r2, r3, #16
 8013fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ff4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013ff8:	f845 3b04 	str.w	r3, [r5], #4
 8013ffc:	e7e9      	b.n	8013fd2 <__mdiff+0x8a>
 8013ffe:	3e01      	subs	r6, #1
 8014000:	e7e9      	b.n	8013fd6 <__mdiff+0x8e>
	...

08014004 <__ulp>:
 8014004:	4b12      	ldr	r3, [pc, #72]	; (8014050 <__ulp+0x4c>)
 8014006:	ee10 2a90 	vmov	r2, s1
 801400a:	401a      	ands	r2, r3
 801400c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014010:	2b00      	cmp	r3, #0
 8014012:	dd04      	ble.n	801401e <__ulp+0x1a>
 8014014:	2000      	movs	r0, #0
 8014016:	4619      	mov	r1, r3
 8014018:	ec41 0b10 	vmov	d0, r0, r1
 801401c:	4770      	bx	lr
 801401e:	425b      	negs	r3, r3
 8014020:	151b      	asrs	r3, r3, #20
 8014022:	2b13      	cmp	r3, #19
 8014024:	f04f 0000 	mov.w	r0, #0
 8014028:	f04f 0100 	mov.w	r1, #0
 801402c:	dc04      	bgt.n	8014038 <__ulp+0x34>
 801402e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014032:	fa42 f103 	asr.w	r1, r2, r3
 8014036:	e7ef      	b.n	8014018 <__ulp+0x14>
 8014038:	3b14      	subs	r3, #20
 801403a:	2b1e      	cmp	r3, #30
 801403c:	f04f 0201 	mov.w	r2, #1
 8014040:	bfda      	itte	le
 8014042:	f1c3 031f 	rsble	r3, r3, #31
 8014046:	fa02 f303 	lslle.w	r3, r2, r3
 801404a:	4613      	movgt	r3, r2
 801404c:	4618      	mov	r0, r3
 801404e:	e7e3      	b.n	8014018 <__ulp+0x14>
 8014050:	7ff00000 	.word	0x7ff00000

08014054 <__b2d>:
 8014054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014056:	6905      	ldr	r5, [r0, #16]
 8014058:	f100 0714 	add.w	r7, r0, #20
 801405c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014060:	1f2e      	subs	r6, r5, #4
 8014062:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014066:	4620      	mov	r0, r4
 8014068:	f7ff fdc4 	bl	8013bf4 <__hi0bits>
 801406c:	f1c0 0320 	rsb	r3, r0, #32
 8014070:	280a      	cmp	r0, #10
 8014072:	600b      	str	r3, [r1, #0]
 8014074:	f8df c074 	ldr.w	ip, [pc, #116]	; 80140ec <__b2d+0x98>
 8014078:	dc14      	bgt.n	80140a4 <__b2d+0x50>
 801407a:	f1c0 0e0b 	rsb	lr, r0, #11
 801407e:	fa24 f10e 	lsr.w	r1, r4, lr
 8014082:	42b7      	cmp	r7, r6
 8014084:	ea41 030c 	orr.w	r3, r1, ip
 8014088:	bf34      	ite	cc
 801408a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801408e:	2100      	movcs	r1, #0
 8014090:	3015      	adds	r0, #21
 8014092:	fa04 f000 	lsl.w	r0, r4, r0
 8014096:	fa21 f10e 	lsr.w	r1, r1, lr
 801409a:	ea40 0201 	orr.w	r2, r0, r1
 801409e:	ec43 2b10 	vmov	d0, r2, r3
 80140a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a4:	42b7      	cmp	r7, r6
 80140a6:	bf3a      	itte	cc
 80140a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80140ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80140b0:	2100      	movcs	r1, #0
 80140b2:	380b      	subs	r0, #11
 80140b4:	d015      	beq.n	80140e2 <__b2d+0x8e>
 80140b6:	4084      	lsls	r4, r0
 80140b8:	f1c0 0520 	rsb	r5, r0, #32
 80140bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80140c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80140c4:	42be      	cmp	r6, r7
 80140c6:	fa21 fc05 	lsr.w	ip, r1, r5
 80140ca:	ea44 030c 	orr.w	r3, r4, ip
 80140ce:	bf8c      	ite	hi
 80140d0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80140d4:	2400      	movls	r4, #0
 80140d6:	fa01 f000 	lsl.w	r0, r1, r0
 80140da:	40ec      	lsrs	r4, r5
 80140dc:	ea40 0204 	orr.w	r2, r0, r4
 80140e0:	e7dd      	b.n	801409e <__b2d+0x4a>
 80140e2:	ea44 030c 	orr.w	r3, r4, ip
 80140e6:	460a      	mov	r2, r1
 80140e8:	e7d9      	b.n	801409e <__b2d+0x4a>
 80140ea:	bf00      	nop
 80140ec:	3ff00000 	.word	0x3ff00000

080140f0 <__d2b>:
 80140f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80140f4:	460e      	mov	r6, r1
 80140f6:	2101      	movs	r1, #1
 80140f8:	ec59 8b10 	vmov	r8, r9, d0
 80140fc:	4615      	mov	r5, r2
 80140fe:	f7ff fcb5 	bl	8013a6c <_Balloc>
 8014102:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014106:	4607      	mov	r7, r0
 8014108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801410c:	bb34      	cbnz	r4, 801415c <__d2b+0x6c>
 801410e:	9301      	str	r3, [sp, #4]
 8014110:	f1b8 0300 	subs.w	r3, r8, #0
 8014114:	d027      	beq.n	8014166 <__d2b+0x76>
 8014116:	a802      	add	r0, sp, #8
 8014118:	f840 3d08 	str.w	r3, [r0, #-8]!
 801411c:	f7ff fd89 	bl	8013c32 <__lo0bits>
 8014120:	9900      	ldr	r1, [sp, #0]
 8014122:	b1f0      	cbz	r0, 8014162 <__d2b+0x72>
 8014124:	9a01      	ldr	r2, [sp, #4]
 8014126:	f1c0 0320 	rsb	r3, r0, #32
 801412a:	fa02 f303 	lsl.w	r3, r2, r3
 801412e:	430b      	orrs	r3, r1
 8014130:	40c2      	lsrs	r2, r0
 8014132:	617b      	str	r3, [r7, #20]
 8014134:	9201      	str	r2, [sp, #4]
 8014136:	9b01      	ldr	r3, [sp, #4]
 8014138:	61bb      	str	r3, [r7, #24]
 801413a:	2b00      	cmp	r3, #0
 801413c:	bf14      	ite	ne
 801413e:	2102      	movne	r1, #2
 8014140:	2101      	moveq	r1, #1
 8014142:	6139      	str	r1, [r7, #16]
 8014144:	b1c4      	cbz	r4, 8014178 <__d2b+0x88>
 8014146:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801414a:	4404      	add	r4, r0
 801414c:	6034      	str	r4, [r6, #0]
 801414e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014152:	6028      	str	r0, [r5, #0]
 8014154:	4638      	mov	r0, r7
 8014156:	b003      	add	sp, #12
 8014158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801415c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014160:	e7d5      	b.n	801410e <__d2b+0x1e>
 8014162:	6179      	str	r1, [r7, #20]
 8014164:	e7e7      	b.n	8014136 <__d2b+0x46>
 8014166:	a801      	add	r0, sp, #4
 8014168:	f7ff fd63 	bl	8013c32 <__lo0bits>
 801416c:	9b01      	ldr	r3, [sp, #4]
 801416e:	617b      	str	r3, [r7, #20]
 8014170:	2101      	movs	r1, #1
 8014172:	6139      	str	r1, [r7, #16]
 8014174:	3020      	adds	r0, #32
 8014176:	e7e5      	b.n	8014144 <__d2b+0x54>
 8014178:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801417c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014180:	6030      	str	r0, [r6, #0]
 8014182:	6918      	ldr	r0, [r3, #16]
 8014184:	f7ff fd36 	bl	8013bf4 <__hi0bits>
 8014188:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801418c:	e7e1      	b.n	8014152 <__d2b+0x62>

0801418e <__ratio>:
 801418e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014192:	4688      	mov	r8, r1
 8014194:	4669      	mov	r1, sp
 8014196:	4681      	mov	r9, r0
 8014198:	f7ff ff5c 	bl	8014054 <__b2d>
 801419c:	a901      	add	r1, sp, #4
 801419e:	4640      	mov	r0, r8
 80141a0:	ec57 6b10 	vmov	r6, r7, d0
 80141a4:	f7ff ff56 	bl	8014054 <__b2d>
 80141a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80141b0:	eba3 0c02 	sub.w	ip, r3, r2
 80141b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80141b8:	1a9b      	subs	r3, r3, r2
 80141ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80141be:	ec5b ab10 	vmov	sl, fp, d0
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	bfce      	itee	gt
 80141c6:	463a      	movgt	r2, r7
 80141c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80141cc:	465a      	movle	r2, fp
 80141ce:	4659      	mov	r1, fp
 80141d0:	463d      	mov	r5, r7
 80141d2:	bfd4      	ite	le
 80141d4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80141d8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80141dc:	4630      	mov	r0, r6
 80141de:	ee10 2a10 	vmov	r2, s0
 80141e2:	460b      	mov	r3, r1
 80141e4:	4629      	mov	r1, r5
 80141e6:	f7f2 fba9 	bl	800693c <__aeabi_ddiv>
 80141ea:	ec41 0b10 	vmov	d0, r0, r1
 80141ee:	b003      	add	sp, #12
 80141f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141f4 <__copybits>:
 80141f4:	3901      	subs	r1, #1
 80141f6:	b510      	push	{r4, lr}
 80141f8:	1149      	asrs	r1, r1, #5
 80141fa:	6914      	ldr	r4, [r2, #16]
 80141fc:	3101      	adds	r1, #1
 80141fe:	f102 0314 	add.w	r3, r2, #20
 8014202:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014206:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801420a:	42a3      	cmp	r3, r4
 801420c:	4602      	mov	r2, r0
 801420e:	d303      	bcc.n	8014218 <__copybits+0x24>
 8014210:	2300      	movs	r3, #0
 8014212:	428a      	cmp	r2, r1
 8014214:	d305      	bcc.n	8014222 <__copybits+0x2e>
 8014216:	bd10      	pop	{r4, pc}
 8014218:	f853 2b04 	ldr.w	r2, [r3], #4
 801421c:	f840 2b04 	str.w	r2, [r0], #4
 8014220:	e7f3      	b.n	801420a <__copybits+0x16>
 8014222:	f842 3b04 	str.w	r3, [r2], #4
 8014226:	e7f4      	b.n	8014212 <__copybits+0x1e>

08014228 <__any_on>:
 8014228:	f100 0214 	add.w	r2, r0, #20
 801422c:	6900      	ldr	r0, [r0, #16]
 801422e:	114b      	asrs	r3, r1, #5
 8014230:	4298      	cmp	r0, r3
 8014232:	b510      	push	{r4, lr}
 8014234:	db11      	blt.n	801425a <__any_on+0x32>
 8014236:	dd0a      	ble.n	801424e <__any_on+0x26>
 8014238:	f011 011f 	ands.w	r1, r1, #31
 801423c:	d007      	beq.n	801424e <__any_on+0x26>
 801423e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014242:	fa24 f001 	lsr.w	r0, r4, r1
 8014246:	fa00 f101 	lsl.w	r1, r0, r1
 801424a:	428c      	cmp	r4, r1
 801424c:	d10b      	bne.n	8014266 <__any_on+0x3e>
 801424e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014252:	4293      	cmp	r3, r2
 8014254:	d803      	bhi.n	801425e <__any_on+0x36>
 8014256:	2000      	movs	r0, #0
 8014258:	bd10      	pop	{r4, pc}
 801425a:	4603      	mov	r3, r0
 801425c:	e7f7      	b.n	801424e <__any_on+0x26>
 801425e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014262:	2900      	cmp	r1, #0
 8014264:	d0f5      	beq.n	8014252 <__any_on+0x2a>
 8014266:	2001      	movs	r0, #1
 8014268:	e7f6      	b.n	8014258 <__any_on+0x30>

0801426a <_calloc_r>:
 801426a:	b538      	push	{r3, r4, r5, lr}
 801426c:	fb02 f401 	mul.w	r4, r2, r1
 8014270:	4621      	mov	r1, r4
 8014272:	f000 f857 	bl	8014324 <_malloc_r>
 8014276:	4605      	mov	r5, r0
 8014278:	b118      	cbz	r0, 8014282 <_calloc_r+0x18>
 801427a:	4622      	mov	r2, r4
 801427c:	2100      	movs	r1, #0
 801427e:	f7fc fa25 	bl	80106cc <memset>
 8014282:	4628      	mov	r0, r5
 8014284:	bd38      	pop	{r3, r4, r5, pc}
	...

08014288 <_free_r>:
 8014288:	b538      	push	{r3, r4, r5, lr}
 801428a:	4605      	mov	r5, r0
 801428c:	2900      	cmp	r1, #0
 801428e:	d045      	beq.n	801431c <_free_r+0x94>
 8014290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014294:	1f0c      	subs	r4, r1, #4
 8014296:	2b00      	cmp	r3, #0
 8014298:	bfb8      	it	lt
 801429a:	18e4      	addlt	r4, r4, r3
 801429c:	f000 fc0f 	bl	8014abe <__malloc_lock>
 80142a0:	4a1f      	ldr	r2, [pc, #124]	; (8014320 <_free_r+0x98>)
 80142a2:	6813      	ldr	r3, [r2, #0]
 80142a4:	4610      	mov	r0, r2
 80142a6:	b933      	cbnz	r3, 80142b6 <_free_r+0x2e>
 80142a8:	6063      	str	r3, [r4, #4]
 80142aa:	6014      	str	r4, [r2, #0]
 80142ac:	4628      	mov	r0, r5
 80142ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142b2:	f000 bc05 	b.w	8014ac0 <__malloc_unlock>
 80142b6:	42a3      	cmp	r3, r4
 80142b8:	d90c      	bls.n	80142d4 <_free_r+0x4c>
 80142ba:	6821      	ldr	r1, [r4, #0]
 80142bc:	1862      	adds	r2, r4, r1
 80142be:	4293      	cmp	r3, r2
 80142c0:	bf04      	itt	eq
 80142c2:	681a      	ldreq	r2, [r3, #0]
 80142c4:	685b      	ldreq	r3, [r3, #4]
 80142c6:	6063      	str	r3, [r4, #4]
 80142c8:	bf04      	itt	eq
 80142ca:	1852      	addeq	r2, r2, r1
 80142cc:	6022      	streq	r2, [r4, #0]
 80142ce:	6004      	str	r4, [r0, #0]
 80142d0:	e7ec      	b.n	80142ac <_free_r+0x24>
 80142d2:	4613      	mov	r3, r2
 80142d4:	685a      	ldr	r2, [r3, #4]
 80142d6:	b10a      	cbz	r2, 80142dc <_free_r+0x54>
 80142d8:	42a2      	cmp	r2, r4
 80142da:	d9fa      	bls.n	80142d2 <_free_r+0x4a>
 80142dc:	6819      	ldr	r1, [r3, #0]
 80142de:	1858      	adds	r0, r3, r1
 80142e0:	42a0      	cmp	r0, r4
 80142e2:	d10b      	bne.n	80142fc <_free_r+0x74>
 80142e4:	6820      	ldr	r0, [r4, #0]
 80142e6:	4401      	add	r1, r0
 80142e8:	1858      	adds	r0, r3, r1
 80142ea:	4282      	cmp	r2, r0
 80142ec:	6019      	str	r1, [r3, #0]
 80142ee:	d1dd      	bne.n	80142ac <_free_r+0x24>
 80142f0:	6810      	ldr	r0, [r2, #0]
 80142f2:	6852      	ldr	r2, [r2, #4]
 80142f4:	605a      	str	r2, [r3, #4]
 80142f6:	4401      	add	r1, r0
 80142f8:	6019      	str	r1, [r3, #0]
 80142fa:	e7d7      	b.n	80142ac <_free_r+0x24>
 80142fc:	d902      	bls.n	8014304 <_free_r+0x7c>
 80142fe:	230c      	movs	r3, #12
 8014300:	602b      	str	r3, [r5, #0]
 8014302:	e7d3      	b.n	80142ac <_free_r+0x24>
 8014304:	6820      	ldr	r0, [r4, #0]
 8014306:	1821      	adds	r1, r4, r0
 8014308:	428a      	cmp	r2, r1
 801430a:	bf04      	itt	eq
 801430c:	6811      	ldreq	r1, [r2, #0]
 801430e:	6852      	ldreq	r2, [r2, #4]
 8014310:	6062      	str	r2, [r4, #4]
 8014312:	bf04      	itt	eq
 8014314:	1809      	addeq	r1, r1, r0
 8014316:	6021      	streq	r1, [r4, #0]
 8014318:	605c      	str	r4, [r3, #4]
 801431a:	e7c7      	b.n	80142ac <_free_r+0x24>
 801431c:	bd38      	pop	{r3, r4, r5, pc}
 801431e:	bf00      	nop
 8014320:	20019c2c 	.word	0x20019c2c

08014324 <_malloc_r>:
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	1ccd      	adds	r5, r1, #3
 8014328:	f025 0503 	bic.w	r5, r5, #3
 801432c:	3508      	adds	r5, #8
 801432e:	2d0c      	cmp	r5, #12
 8014330:	bf38      	it	cc
 8014332:	250c      	movcc	r5, #12
 8014334:	2d00      	cmp	r5, #0
 8014336:	4606      	mov	r6, r0
 8014338:	db01      	blt.n	801433e <_malloc_r+0x1a>
 801433a:	42a9      	cmp	r1, r5
 801433c:	d903      	bls.n	8014346 <_malloc_r+0x22>
 801433e:	230c      	movs	r3, #12
 8014340:	6033      	str	r3, [r6, #0]
 8014342:	2000      	movs	r0, #0
 8014344:	bd70      	pop	{r4, r5, r6, pc}
 8014346:	f000 fbba 	bl	8014abe <__malloc_lock>
 801434a:	4a21      	ldr	r2, [pc, #132]	; (80143d0 <_malloc_r+0xac>)
 801434c:	6814      	ldr	r4, [r2, #0]
 801434e:	4621      	mov	r1, r4
 8014350:	b991      	cbnz	r1, 8014378 <_malloc_r+0x54>
 8014352:	4c20      	ldr	r4, [pc, #128]	; (80143d4 <_malloc_r+0xb0>)
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	b91b      	cbnz	r3, 8014360 <_malloc_r+0x3c>
 8014358:	4630      	mov	r0, r6
 801435a:	f000 facf 	bl	80148fc <_sbrk_r>
 801435e:	6020      	str	r0, [r4, #0]
 8014360:	4629      	mov	r1, r5
 8014362:	4630      	mov	r0, r6
 8014364:	f000 faca 	bl	80148fc <_sbrk_r>
 8014368:	1c43      	adds	r3, r0, #1
 801436a:	d124      	bne.n	80143b6 <_malloc_r+0x92>
 801436c:	230c      	movs	r3, #12
 801436e:	6033      	str	r3, [r6, #0]
 8014370:	4630      	mov	r0, r6
 8014372:	f000 fba5 	bl	8014ac0 <__malloc_unlock>
 8014376:	e7e4      	b.n	8014342 <_malloc_r+0x1e>
 8014378:	680b      	ldr	r3, [r1, #0]
 801437a:	1b5b      	subs	r3, r3, r5
 801437c:	d418      	bmi.n	80143b0 <_malloc_r+0x8c>
 801437e:	2b0b      	cmp	r3, #11
 8014380:	d90f      	bls.n	80143a2 <_malloc_r+0x7e>
 8014382:	600b      	str	r3, [r1, #0]
 8014384:	50cd      	str	r5, [r1, r3]
 8014386:	18cc      	adds	r4, r1, r3
 8014388:	4630      	mov	r0, r6
 801438a:	f000 fb99 	bl	8014ac0 <__malloc_unlock>
 801438e:	f104 000b 	add.w	r0, r4, #11
 8014392:	1d23      	adds	r3, r4, #4
 8014394:	f020 0007 	bic.w	r0, r0, #7
 8014398:	1ac3      	subs	r3, r0, r3
 801439a:	d0d3      	beq.n	8014344 <_malloc_r+0x20>
 801439c:	425a      	negs	r2, r3
 801439e:	50e2      	str	r2, [r4, r3]
 80143a0:	e7d0      	b.n	8014344 <_malloc_r+0x20>
 80143a2:	428c      	cmp	r4, r1
 80143a4:	684b      	ldr	r3, [r1, #4]
 80143a6:	bf16      	itet	ne
 80143a8:	6063      	strne	r3, [r4, #4]
 80143aa:	6013      	streq	r3, [r2, #0]
 80143ac:	460c      	movne	r4, r1
 80143ae:	e7eb      	b.n	8014388 <_malloc_r+0x64>
 80143b0:	460c      	mov	r4, r1
 80143b2:	6849      	ldr	r1, [r1, #4]
 80143b4:	e7cc      	b.n	8014350 <_malloc_r+0x2c>
 80143b6:	1cc4      	adds	r4, r0, #3
 80143b8:	f024 0403 	bic.w	r4, r4, #3
 80143bc:	42a0      	cmp	r0, r4
 80143be:	d005      	beq.n	80143cc <_malloc_r+0xa8>
 80143c0:	1a21      	subs	r1, r4, r0
 80143c2:	4630      	mov	r0, r6
 80143c4:	f000 fa9a 	bl	80148fc <_sbrk_r>
 80143c8:	3001      	adds	r0, #1
 80143ca:	d0cf      	beq.n	801436c <_malloc_r+0x48>
 80143cc:	6025      	str	r5, [r4, #0]
 80143ce:	e7db      	b.n	8014388 <_malloc_r+0x64>
 80143d0:	20019c2c 	.word	0x20019c2c
 80143d4:	20019c30 	.word	0x20019c30

080143d8 <__ssputs_r>:
 80143d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143dc:	688e      	ldr	r6, [r1, #8]
 80143de:	429e      	cmp	r6, r3
 80143e0:	4682      	mov	sl, r0
 80143e2:	460c      	mov	r4, r1
 80143e4:	4690      	mov	r8, r2
 80143e6:	4699      	mov	r9, r3
 80143e8:	d837      	bhi.n	801445a <__ssputs_r+0x82>
 80143ea:	898a      	ldrh	r2, [r1, #12]
 80143ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143f0:	d031      	beq.n	8014456 <__ssputs_r+0x7e>
 80143f2:	6825      	ldr	r5, [r4, #0]
 80143f4:	6909      	ldr	r1, [r1, #16]
 80143f6:	1a6f      	subs	r7, r5, r1
 80143f8:	6965      	ldr	r5, [r4, #20]
 80143fa:	2302      	movs	r3, #2
 80143fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014400:	fb95 f5f3 	sdiv	r5, r5, r3
 8014404:	f109 0301 	add.w	r3, r9, #1
 8014408:	443b      	add	r3, r7
 801440a:	429d      	cmp	r5, r3
 801440c:	bf38      	it	cc
 801440e:	461d      	movcc	r5, r3
 8014410:	0553      	lsls	r3, r2, #21
 8014412:	d530      	bpl.n	8014476 <__ssputs_r+0x9e>
 8014414:	4629      	mov	r1, r5
 8014416:	f7ff ff85 	bl	8014324 <_malloc_r>
 801441a:	4606      	mov	r6, r0
 801441c:	b950      	cbnz	r0, 8014434 <__ssputs_r+0x5c>
 801441e:	230c      	movs	r3, #12
 8014420:	f8ca 3000 	str.w	r3, [sl]
 8014424:	89a3      	ldrh	r3, [r4, #12]
 8014426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801442a:	81a3      	strh	r3, [r4, #12]
 801442c:	f04f 30ff 	mov.w	r0, #4294967295
 8014430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014434:	463a      	mov	r2, r7
 8014436:	6921      	ldr	r1, [r4, #16]
 8014438:	f7fc f93d 	bl	80106b6 <memcpy>
 801443c:	89a3      	ldrh	r3, [r4, #12]
 801443e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014446:	81a3      	strh	r3, [r4, #12]
 8014448:	6126      	str	r6, [r4, #16]
 801444a:	6165      	str	r5, [r4, #20]
 801444c:	443e      	add	r6, r7
 801444e:	1bed      	subs	r5, r5, r7
 8014450:	6026      	str	r6, [r4, #0]
 8014452:	60a5      	str	r5, [r4, #8]
 8014454:	464e      	mov	r6, r9
 8014456:	454e      	cmp	r6, r9
 8014458:	d900      	bls.n	801445c <__ssputs_r+0x84>
 801445a:	464e      	mov	r6, r9
 801445c:	4632      	mov	r2, r6
 801445e:	4641      	mov	r1, r8
 8014460:	6820      	ldr	r0, [r4, #0]
 8014462:	f000 fb13 	bl	8014a8c <memmove>
 8014466:	68a3      	ldr	r3, [r4, #8]
 8014468:	1b9b      	subs	r3, r3, r6
 801446a:	60a3      	str	r3, [r4, #8]
 801446c:	6823      	ldr	r3, [r4, #0]
 801446e:	441e      	add	r6, r3
 8014470:	6026      	str	r6, [r4, #0]
 8014472:	2000      	movs	r0, #0
 8014474:	e7dc      	b.n	8014430 <__ssputs_r+0x58>
 8014476:	462a      	mov	r2, r5
 8014478:	f000 fb23 	bl	8014ac2 <_realloc_r>
 801447c:	4606      	mov	r6, r0
 801447e:	2800      	cmp	r0, #0
 8014480:	d1e2      	bne.n	8014448 <__ssputs_r+0x70>
 8014482:	6921      	ldr	r1, [r4, #16]
 8014484:	4650      	mov	r0, sl
 8014486:	f7ff feff 	bl	8014288 <_free_r>
 801448a:	e7c8      	b.n	801441e <__ssputs_r+0x46>

0801448c <_svfiprintf_r>:
 801448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014490:	461d      	mov	r5, r3
 8014492:	898b      	ldrh	r3, [r1, #12]
 8014494:	061f      	lsls	r7, r3, #24
 8014496:	b09d      	sub	sp, #116	; 0x74
 8014498:	4680      	mov	r8, r0
 801449a:	460c      	mov	r4, r1
 801449c:	4616      	mov	r6, r2
 801449e:	d50f      	bpl.n	80144c0 <_svfiprintf_r+0x34>
 80144a0:	690b      	ldr	r3, [r1, #16]
 80144a2:	b96b      	cbnz	r3, 80144c0 <_svfiprintf_r+0x34>
 80144a4:	2140      	movs	r1, #64	; 0x40
 80144a6:	f7ff ff3d 	bl	8014324 <_malloc_r>
 80144aa:	6020      	str	r0, [r4, #0]
 80144ac:	6120      	str	r0, [r4, #16]
 80144ae:	b928      	cbnz	r0, 80144bc <_svfiprintf_r+0x30>
 80144b0:	230c      	movs	r3, #12
 80144b2:	f8c8 3000 	str.w	r3, [r8]
 80144b6:	f04f 30ff 	mov.w	r0, #4294967295
 80144ba:	e0c8      	b.n	801464e <_svfiprintf_r+0x1c2>
 80144bc:	2340      	movs	r3, #64	; 0x40
 80144be:	6163      	str	r3, [r4, #20]
 80144c0:	2300      	movs	r3, #0
 80144c2:	9309      	str	r3, [sp, #36]	; 0x24
 80144c4:	2320      	movs	r3, #32
 80144c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144ca:	2330      	movs	r3, #48	; 0x30
 80144cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144d0:	9503      	str	r5, [sp, #12]
 80144d2:	f04f 0b01 	mov.w	fp, #1
 80144d6:	4637      	mov	r7, r6
 80144d8:	463d      	mov	r5, r7
 80144da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80144de:	b10b      	cbz	r3, 80144e4 <_svfiprintf_r+0x58>
 80144e0:	2b25      	cmp	r3, #37	; 0x25
 80144e2:	d13e      	bne.n	8014562 <_svfiprintf_r+0xd6>
 80144e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80144e8:	d00b      	beq.n	8014502 <_svfiprintf_r+0x76>
 80144ea:	4653      	mov	r3, sl
 80144ec:	4632      	mov	r2, r6
 80144ee:	4621      	mov	r1, r4
 80144f0:	4640      	mov	r0, r8
 80144f2:	f7ff ff71 	bl	80143d8 <__ssputs_r>
 80144f6:	3001      	adds	r0, #1
 80144f8:	f000 80a4 	beq.w	8014644 <_svfiprintf_r+0x1b8>
 80144fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144fe:	4453      	add	r3, sl
 8014500:	9309      	str	r3, [sp, #36]	; 0x24
 8014502:	783b      	ldrb	r3, [r7, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	f000 809d 	beq.w	8014644 <_svfiprintf_r+0x1b8>
 801450a:	2300      	movs	r3, #0
 801450c:	f04f 32ff 	mov.w	r2, #4294967295
 8014510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014514:	9304      	str	r3, [sp, #16]
 8014516:	9307      	str	r3, [sp, #28]
 8014518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801451c:	931a      	str	r3, [sp, #104]	; 0x68
 801451e:	462f      	mov	r7, r5
 8014520:	2205      	movs	r2, #5
 8014522:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014526:	4850      	ldr	r0, [pc, #320]	; (8014668 <_svfiprintf_r+0x1dc>)
 8014528:	f7f1 fed2 	bl	80062d0 <memchr>
 801452c:	9b04      	ldr	r3, [sp, #16]
 801452e:	b9d0      	cbnz	r0, 8014566 <_svfiprintf_r+0xda>
 8014530:	06d9      	lsls	r1, r3, #27
 8014532:	bf44      	itt	mi
 8014534:	2220      	movmi	r2, #32
 8014536:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801453a:	071a      	lsls	r2, r3, #28
 801453c:	bf44      	itt	mi
 801453e:	222b      	movmi	r2, #43	; 0x2b
 8014540:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014544:	782a      	ldrb	r2, [r5, #0]
 8014546:	2a2a      	cmp	r2, #42	; 0x2a
 8014548:	d015      	beq.n	8014576 <_svfiprintf_r+0xea>
 801454a:	9a07      	ldr	r2, [sp, #28]
 801454c:	462f      	mov	r7, r5
 801454e:	2000      	movs	r0, #0
 8014550:	250a      	movs	r5, #10
 8014552:	4639      	mov	r1, r7
 8014554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014558:	3b30      	subs	r3, #48	; 0x30
 801455a:	2b09      	cmp	r3, #9
 801455c:	d94d      	bls.n	80145fa <_svfiprintf_r+0x16e>
 801455e:	b1b8      	cbz	r0, 8014590 <_svfiprintf_r+0x104>
 8014560:	e00f      	b.n	8014582 <_svfiprintf_r+0xf6>
 8014562:	462f      	mov	r7, r5
 8014564:	e7b8      	b.n	80144d8 <_svfiprintf_r+0x4c>
 8014566:	4a40      	ldr	r2, [pc, #256]	; (8014668 <_svfiprintf_r+0x1dc>)
 8014568:	1a80      	subs	r0, r0, r2
 801456a:	fa0b f000 	lsl.w	r0, fp, r0
 801456e:	4318      	orrs	r0, r3
 8014570:	9004      	str	r0, [sp, #16]
 8014572:	463d      	mov	r5, r7
 8014574:	e7d3      	b.n	801451e <_svfiprintf_r+0x92>
 8014576:	9a03      	ldr	r2, [sp, #12]
 8014578:	1d11      	adds	r1, r2, #4
 801457a:	6812      	ldr	r2, [r2, #0]
 801457c:	9103      	str	r1, [sp, #12]
 801457e:	2a00      	cmp	r2, #0
 8014580:	db01      	blt.n	8014586 <_svfiprintf_r+0xfa>
 8014582:	9207      	str	r2, [sp, #28]
 8014584:	e004      	b.n	8014590 <_svfiprintf_r+0x104>
 8014586:	4252      	negs	r2, r2
 8014588:	f043 0302 	orr.w	r3, r3, #2
 801458c:	9207      	str	r2, [sp, #28]
 801458e:	9304      	str	r3, [sp, #16]
 8014590:	783b      	ldrb	r3, [r7, #0]
 8014592:	2b2e      	cmp	r3, #46	; 0x2e
 8014594:	d10c      	bne.n	80145b0 <_svfiprintf_r+0x124>
 8014596:	787b      	ldrb	r3, [r7, #1]
 8014598:	2b2a      	cmp	r3, #42	; 0x2a
 801459a:	d133      	bne.n	8014604 <_svfiprintf_r+0x178>
 801459c:	9b03      	ldr	r3, [sp, #12]
 801459e:	1d1a      	adds	r2, r3, #4
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	9203      	str	r2, [sp, #12]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	bfb8      	it	lt
 80145a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80145ac:	3702      	adds	r7, #2
 80145ae:	9305      	str	r3, [sp, #20]
 80145b0:	4d2e      	ldr	r5, [pc, #184]	; (801466c <_svfiprintf_r+0x1e0>)
 80145b2:	7839      	ldrb	r1, [r7, #0]
 80145b4:	2203      	movs	r2, #3
 80145b6:	4628      	mov	r0, r5
 80145b8:	f7f1 fe8a 	bl	80062d0 <memchr>
 80145bc:	b138      	cbz	r0, 80145ce <_svfiprintf_r+0x142>
 80145be:	2340      	movs	r3, #64	; 0x40
 80145c0:	1b40      	subs	r0, r0, r5
 80145c2:	fa03 f000 	lsl.w	r0, r3, r0
 80145c6:	9b04      	ldr	r3, [sp, #16]
 80145c8:	4303      	orrs	r3, r0
 80145ca:	3701      	adds	r7, #1
 80145cc:	9304      	str	r3, [sp, #16]
 80145ce:	7839      	ldrb	r1, [r7, #0]
 80145d0:	4827      	ldr	r0, [pc, #156]	; (8014670 <_svfiprintf_r+0x1e4>)
 80145d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145d6:	2206      	movs	r2, #6
 80145d8:	1c7e      	adds	r6, r7, #1
 80145da:	f7f1 fe79 	bl	80062d0 <memchr>
 80145de:	2800      	cmp	r0, #0
 80145e0:	d038      	beq.n	8014654 <_svfiprintf_r+0x1c8>
 80145e2:	4b24      	ldr	r3, [pc, #144]	; (8014674 <_svfiprintf_r+0x1e8>)
 80145e4:	bb13      	cbnz	r3, 801462c <_svfiprintf_r+0x1a0>
 80145e6:	9b03      	ldr	r3, [sp, #12]
 80145e8:	3307      	adds	r3, #7
 80145ea:	f023 0307 	bic.w	r3, r3, #7
 80145ee:	3308      	adds	r3, #8
 80145f0:	9303      	str	r3, [sp, #12]
 80145f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145f4:	444b      	add	r3, r9
 80145f6:	9309      	str	r3, [sp, #36]	; 0x24
 80145f8:	e76d      	b.n	80144d6 <_svfiprintf_r+0x4a>
 80145fa:	fb05 3202 	mla	r2, r5, r2, r3
 80145fe:	2001      	movs	r0, #1
 8014600:	460f      	mov	r7, r1
 8014602:	e7a6      	b.n	8014552 <_svfiprintf_r+0xc6>
 8014604:	2300      	movs	r3, #0
 8014606:	3701      	adds	r7, #1
 8014608:	9305      	str	r3, [sp, #20]
 801460a:	4619      	mov	r1, r3
 801460c:	250a      	movs	r5, #10
 801460e:	4638      	mov	r0, r7
 8014610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014614:	3a30      	subs	r2, #48	; 0x30
 8014616:	2a09      	cmp	r2, #9
 8014618:	d903      	bls.n	8014622 <_svfiprintf_r+0x196>
 801461a:	2b00      	cmp	r3, #0
 801461c:	d0c8      	beq.n	80145b0 <_svfiprintf_r+0x124>
 801461e:	9105      	str	r1, [sp, #20]
 8014620:	e7c6      	b.n	80145b0 <_svfiprintf_r+0x124>
 8014622:	fb05 2101 	mla	r1, r5, r1, r2
 8014626:	2301      	movs	r3, #1
 8014628:	4607      	mov	r7, r0
 801462a:	e7f0      	b.n	801460e <_svfiprintf_r+0x182>
 801462c:	ab03      	add	r3, sp, #12
 801462e:	9300      	str	r3, [sp, #0]
 8014630:	4622      	mov	r2, r4
 8014632:	4b11      	ldr	r3, [pc, #68]	; (8014678 <_svfiprintf_r+0x1ec>)
 8014634:	a904      	add	r1, sp, #16
 8014636:	4640      	mov	r0, r8
 8014638:	f7fc f8e4 	bl	8010804 <_printf_float>
 801463c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014640:	4681      	mov	r9, r0
 8014642:	d1d6      	bne.n	80145f2 <_svfiprintf_r+0x166>
 8014644:	89a3      	ldrh	r3, [r4, #12]
 8014646:	065b      	lsls	r3, r3, #25
 8014648:	f53f af35 	bmi.w	80144b6 <_svfiprintf_r+0x2a>
 801464c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801464e:	b01d      	add	sp, #116	; 0x74
 8014650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014654:	ab03      	add	r3, sp, #12
 8014656:	9300      	str	r3, [sp, #0]
 8014658:	4622      	mov	r2, r4
 801465a:	4b07      	ldr	r3, [pc, #28]	; (8014678 <_svfiprintf_r+0x1ec>)
 801465c:	a904      	add	r1, sp, #16
 801465e:	4640      	mov	r0, r8
 8014660:	f7fc fb86 	bl	8010d70 <_printf_i>
 8014664:	e7ea      	b.n	801463c <_svfiprintf_r+0x1b0>
 8014666:	bf00      	nop
 8014668:	0814f944 	.word	0x0814f944
 801466c:	0814f94a 	.word	0x0814f94a
 8014670:	0814f94e 	.word	0x0814f94e
 8014674:	08010805 	.word	0x08010805
 8014678:	080143d9 	.word	0x080143d9

0801467c <__sfputc_r>:
 801467c:	6893      	ldr	r3, [r2, #8]
 801467e:	3b01      	subs	r3, #1
 8014680:	2b00      	cmp	r3, #0
 8014682:	b410      	push	{r4}
 8014684:	6093      	str	r3, [r2, #8]
 8014686:	da08      	bge.n	801469a <__sfputc_r+0x1e>
 8014688:	6994      	ldr	r4, [r2, #24]
 801468a:	42a3      	cmp	r3, r4
 801468c:	db01      	blt.n	8014692 <__sfputc_r+0x16>
 801468e:	290a      	cmp	r1, #10
 8014690:	d103      	bne.n	801469a <__sfputc_r+0x1e>
 8014692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014696:	f7fd bdb1 	b.w	80121fc <__swbuf_r>
 801469a:	6813      	ldr	r3, [r2, #0]
 801469c:	1c58      	adds	r0, r3, #1
 801469e:	6010      	str	r0, [r2, #0]
 80146a0:	7019      	strb	r1, [r3, #0]
 80146a2:	4608      	mov	r0, r1
 80146a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146a8:	4770      	bx	lr

080146aa <__sfputs_r>:
 80146aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ac:	4606      	mov	r6, r0
 80146ae:	460f      	mov	r7, r1
 80146b0:	4614      	mov	r4, r2
 80146b2:	18d5      	adds	r5, r2, r3
 80146b4:	42ac      	cmp	r4, r5
 80146b6:	d101      	bne.n	80146bc <__sfputs_r+0x12>
 80146b8:	2000      	movs	r0, #0
 80146ba:	e007      	b.n	80146cc <__sfputs_r+0x22>
 80146bc:	463a      	mov	r2, r7
 80146be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146c2:	4630      	mov	r0, r6
 80146c4:	f7ff ffda 	bl	801467c <__sfputc_r>
 80146c8:	1c43      	adds	r3, r0, #1
 80146ca:	d1f3      	bne.n	80146b4 <__sfputs_r+0xa>
 80146cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080146d0 <_vfiprintf_r>:
 80146d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d4:	460c      	mov	r4, r1
 80146d6:	b09d      	sub	sp, #116	; 0x74
 80146d8:	4617      	mov	r7, r2
 80146da:	461d      	mov	r5, r3
 80146dc:	4606      	mov	r6, r0
 80146de:	b118      	cbz	r0, 80146e8 <_vfiprintf_r+0x18>
 80146e0:	6983      	ldr	r3, [r0, #24]
 80146e2:	b90b      	cbnz	r3, 80146e8 <_vfiprintf_r+0x18>
 80146e4:	f7fe fd80 	bl	80131e8 <__sinit>
 80146e8:	4b7c      	ldr	r3, [pc, #496]	; (80148dc <_vfiprintf_r+0x20c>)
 80146ea:	429c      	cmp	r4, r3
 80146ec:	d158      	bne.n	80147a0 <_vfiprintf_r+0xd0>
 80146ee:	6874      	ldr	r4, [r6, #4]
 80146f0:	89a3      	ldrh	r3, [r4, #12]
 80146f2:	0718      	lsls	r0, r3, #28
 80146f4:	d55e      	bpl.n	80147b4 <_vfiprintf_r+0xe4>
 80146f6:	6923      	ldr	r3, [r4, #16]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d05b      	beq.n	80147b4 <_vfiprintf_r+0xe4>
 80146fc:	2300      	movs	r3, #0
 80146fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014700:	2320      	movs	r3, #32
 8014702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014706:	2330      	movs	r3, #48	; 0x30
 8014708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801470c:	9503      	str	r5, [sp, #12]
 801470e:	f04f 0b01 	mov.w	fp, #1
 8014712:	46b8      	mov	r8, r7
 8014714:	4645      	mov	r5, r8
 8014716:	f815 3b01 	ldrb.w	r3, [r5], #1
 801471a:	b10b      	cbz	r3, 8014720 <_vfiprintf_r+0x50>
 801471c:	2b25      	cmp	r3, #37	; 0x25
 801471e:	d154      	bne.n	80147ca <_vfiprintf_r+0xfa>
 8014720:	ebb8 0a07 	subs.w	sl, r8, r7
 8014724:	d00b      	beq.n	801473e <_vfiprintf_r+0x6e>
 8014726:	4653      	mov	r3, sl
 8014728:	463a      	mov	r2, r7
 801472a:	4621      	mov	r1, r4
 801472c:	4630      	mov	r0, r6
 801472e:	f7ff ffbc 	bl	80146aa <__sfputs_r>
 8014732:	3001      	adds	r0, #1
 8014734:	f000 80c2 	beq.w	80148bc <_vfiprintf_r+0x1ec>
 8014738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801473a:	4453      	add	r3, sl
 801473c:	9309      	str	r3, [sp, #36]	; 0x24
 801473e:	f898 3000 	ldrb.w	r3, [r8]
 8014742:	2b00      	cmp	r3, #0
 8014744:	f000 80ba 	beq.w	80148bc <_vfiprintf_r+0x1ec>
 8014748:	2300      	movs	r3, #0
 801474a:	f04f 32ff 	mov.w	r2, #4294967295
 801474e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014752:	9304      	str	r3, [sp, #16]
 8014754:	9307      	str	r3, [sp, #28]
 8014756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801475a:	931a      	str	r3, [sp, #104]	; 0x68
 801475c:	46a8      	mov	r8, r5
 801475e:	2205      	movs	r2, #5
 8014760:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014764:	485e      	ldr	r0, [pc, #376]	; (80148e0 <_vfiprintf_r+0x210>)
 8014766:	f7f1 fdb3 	bl	80062d0 <memchr>
 801476a:	9b04      	ldr	r3, [sp, #16]
 801476c:	bb78      	cbnz	r0, 80147ce <_vfiprintf_r+0xfe>
 801476e:	06d9      	lsls	r1, r3, #27
 8014770:	bf44      	itt	mi
 8014772:	2220      	movmi	r2, #32
 8014774:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014778:	071a      	lsls	r2, r3, #28
 801477a:	bf44      	itt	mi
 801477c:	222b      	movmi	r2, #43	; 0x2b
 801477e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014782:	782a      	ldrb	r2, [r5, #0]
 8014784:	2a2a      	cmp	r2, #42	; 0x2a
 8014786:	d02a      	beq.n	80147de <_vfiprintf_r+0x10e>
 8014788:	9a07      	ldr	r2, [sp, #28]
 801478a:	46a8      	mov	r8, r5
 801478c:	2000      	movs	r0, #0
 801478e:	250a      	movs	r5, #10
 8014790:	4641      	mov	r1, r8
 8014792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014796:	3b30      	subs	r3, #48	; 0x30
 8014798:	2b09      	cmp	r3, #9
 801479a:	d969      	bls.n	8014870 <_vfiprintf_r+0x1a0>
 801479c:	b360      	cbz	r0, 80147f8 <_vfiprintf_r+0x128>
 801479e:	e024      	b.n	80147ea <_vfiprintf_r+0x11a>
 80147a0:	4b50      	ldr	r3, [pc, #320]	; (80148e4 <_vfiprintf_r+0x214>)
 80147a2:	429c      	cmp	r4, r3
 80147a4:	d101      	bne.n	80147aa <_vfiprintf_r+0xda>
 80147a6:	68b4      	ldr	r4, [r6, #8]
 80147a8:	e7a2      	b.n	80146f0 <_vfiprintf_r+0x20>
 80147aa:	4b4f      	ldr	r3, [pc, #316]	; (80148e8 <_vfiprintf_r+0x218>)
 80147ac:	429c      	cmp	r4, r3
 80147ae:	bf08      	it	eq
 80147b0:	68f4      	ldreq	r4, [r6, #12]
 80147b2:	e79d      	b.n	80146f0 <_vfiprintf_r+0x20>
 80147b4:	4621      	mov	r1, r4
 80147b6:	4630      	mov	r0, r6
 80147b8:	f7fd fd72 	bl	80122a0 <__swsetup_r>
 80147bc:	2800      	cmp	r0, #0
 80147be:	d09d      	beq.n	80146fc <_vfiprintf_r+0x2c>
 80147c0:	f04f 30ff 	mov.w	r0, #4294967295
 80147c4:	b01d      	add	sp, #116	; 0x74
 80147c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ca:	46a8      	mov	r8, r5
 80147cc:	e7a2      	b.n	8014714 <_vfiprintf_r+0x44>
 80147ce:	4a44      	ldr	r2, [pc, #272]	; (80148e0 <_vfiprintf_r+0x210>)
 80147d0:	1a80      	subs	r0, r0, r2
 80147d2:	fa0b f000 	lsl.w	r0, fp, r0
 80147d6:	4318      	orrs	r0, r3
 80147d8:	9004      	str	r0, [sp, #16]
 80147da:	4645      	mov	r5, r8
 80147dc:	e7be      	b.n	801475c <_vfiprintf_r+0x8c>
 80147de:	9a03      	ldr	r2, [sp, #12]
 80147e0:	1d11      	adds	r1, r2, #4
 80147e2:	6812      	ldr	r2, [r2, #0]
 80147e4:	9103      	str	r1, [sp, #12]
 80147e6:	2a00      	cmp	r2, #0
 80147e8:	db01      	blt.n	80147ee <_vfiprintf_r+0x11e>
 80147ea:	9207      	str	r2, [sp, #28]
 80147ec:	e004      	b.n	80147f8 <_vfiprintf_r+0x128>
 80147ee:	4252      	negs	r2, r2
 80147f0:	f043 0302 	orr.w	r3, r3, #2
 80147f4:	9207      	str	r2, [sp, #28]
 80147f6:	9304      	str	r3, [sp, #16]
 80147f8:	f898 3000 	ldrb.w	r3, [r8]
 80147fc:	2b2e      	cmp	r3, #46	; 0x2e
 80147fe:	d10e      	bne.n	801481e <_vfiprintf_r+0x14e>
 8014800:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014804:	2b2a      	cmp	r3, #42	; 0x2a
 8014806:	d138      	bne.n	801487a <_vfiprintf_r+0x1aa>
 8014808:	9b03      	ldr	r3, [sp, #12]
 801480a:	1d1a      	adds	r2, r3, #4
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	9203      	str	r2, [sp, #12]
 8014810:	2b00      	cmp	r3, #0
 8014812:	bfb8      	it	lt
 8014814:	f04f 33ff 	movlt.w	r3, #4294967295
 8014818:	f108 0802 	add.w	r8, r8, #2
 801481c:	9305      	str	r3, [sp, #20]
 801481e:	4d33      	ldr	r5, [pc, #204]	; (80148ec <_vfiprintf_r+0x21c>)
 8014820:	f898 1000 	ldrb.w	r1, [r8]
 8014824:	2203      	movs	r2, #3
 8014826:	4628      	mov	r0, r5
 8014828:	f7f1 fd52 	bl	80062d0 <memchr>
 801482c:	b140      	cbz	r0, 8014840 <_vfiprintf_r+0x170>
 801482e:	2340      	movs	r3, #64	; 0x40
 8014830:	1b40      	subs	r0, r0, r5
 8014832:	fa03 f000 	lsl.w	r0, r3, r0
 8014836:	9b04      	ldr	r3, [sp, #16]
 8014838:	4303      	orrs	r3, r0
 801483a:	f108 0801 	add.w	r8, r8, #1
 801483e:	9304      	str	r3, [sp, #16]
 8014840:	f898 1000 	ldrb.w	r1, [r8]
 8014844:	482a      	ldr	r0, [pc, #168]	; (80148f0 <_vfiprintf_r+0x220>)
 8014846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801484a:	2206      	movs	r2, #6
 801484c:	f108 0701 	add.w	r7, r8, #1
 8014850:	f7f1 fd3e 	bl	80062d0 <memchr>
 8014854:	2800      	cmp	r0, #0
 8014856:	d037      	beq.n	80148c8 <_vfiprintf_r+0x1f8>
 8014858:	4b26      	ldr	r3, [pc, #152]	; (80148f4 <_vfiprintf_r+0x224>)
 801485a:	bb1b      	cbnz	r3, 80148a4 <_vfiprintf_r+0x1d4>
 801485c:	9b03      	ldr	r3, [sp, #12]
 801485e:	3307      	adds	r3, #7
 8014860:	f023 0307 	bic.w	r3, r3, #7
 8014864:	3308      	adds	r3, #8
 8014866:	9303      	str	r3, [sp, #12]
 8014868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801486a:	444b      	add	r3, r9
 801486c:	9309      	str	r3, [sp, #36]	; 0x24
 801486e:	e750      	b.n	8014712 <_vfiprintf_r+0x42>
 8014870:	fb05 3202 	mla	r2, r5, r2, r3
 8014874:	2001      	movs	r0, #1
 8014876:	4688      	mov	r8, r1
 8014878:	e78a      	b.n	8014790 <_vfiprintf_r+0xc0>
 801487a:	2300      	movs	r3, #0
 801487c:	f108 0801 	add.w	r8, r8, #1
 8014880:	9305      	str	r3, [sp, #20]
 8014882:	4619      	mov	r1, r3
 8014884:	250a      	movs	r5, #10
 8014886:	4640      	mov	r0, r8
 8014888:	f810 2b01 	ldrb.w	r2, [r0], #1
 801488c:	3a30      	subs	r2, #48	; 0x30
 801488e:	2a09      	cmp	r2, #9
 8014890:	d903      	bls.n	801489a <_vfiprintf_r+0x1ca>
 8014892:	2b00      	cmp	r3, #0
 8014894:	d0c3      	beq.n	801481e <_vfiprintf_r+0x14e>
 8014896:	9105      	str	r1, [sp, #20]
 8014898:	e7c1      	b.n	801481e <_vfiprintf_r+0x14e>
 801489a:	fb05 2101 	mla	r1, r5, r1, r2
 801489e:	2301      	movs	r3, #1
 80148a0:	4680      	mov	r8, r0
 80148a2:	e7f0      	b.n	8014886 <_vfiprintf_r+0x1b6>
 80148a4:	ab03      	add	r3, sp, #12
 80148a6:	9300      	str	r3, [sp, #0]
 80148a8:	4622      	mov	r2, r4
 80148aa:	4b13      	ldr	r3, [pc, #76]	; (80148f8 <_vfiprintf_r+0x228>)
 80148ac:	a904      	add	r1, sp, #16
 80148ae:	4630      	mov	r0, r6
 80148b0:	f7fb ffa8 	bl	8010804 <_printf_float>
 80148b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80148b8:	4681      	mov	r9, r0
 80148ba:	d1d5      	bne.n	8014868 <_vfiprintf_r+0x198>
 80148bc:	89a3      	ldrh	r3, [r4, #12]
 80148be:	065b      	lsls	r3, r3, #25
 80148c0:	f53f af7e 	bmi.w	80147c0 <_vfiprintf_r+0xf0>
 80148c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148c6:	e77d      	b.n	80147c4 <_vfiprintf_r+0xf4>
 80148c8:	ab03      	add	r3, sp, #12
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	4622      	mov	r2, r4
 80148ce:	4b0a      	ldr	r3, [pc, #40]	; (80148f8 <_vfiprintf_r+0x228>)
 80148d0:	a904      	add	r1, sp, #16
 80148d2:	4630      	mov	r0, r6
 80148d4:	f7fc fa4c 	bl	8010d70 <_printf_i>
 80148d8:	e7ec      	b.n	80148b4 <_vfiprintf_r+0x1e4>
 80148da:	bf00      	nop
 80148dc:	0814f7f8 	.word	0x0814f7f8
 80148e0:	0814f944 	.word	0x0814f944
 80148e4:	0814f818 	.word	0x0814f818
 80148e8:	0814f7d8 	.word	0x0814f7d8
 80148ec:	0814f94a 	.word	0x0814f94a
 80148f0:	0814f94e 	.word	0x0814f94e
 80148f4:	08010805 	.word	0x08010805
 80148f8:	080146ab 	.word	0x080146ab

080148fc <_sbrk_r>:
 80148fc:	b538      	push	{r3, r4, r5, lr}
 80148fe:	4c06      	ldr	r4, [pc, #24]	; (8014918 <_sbrk_r+0x1c>)
 8014900:	2300      	movs	r3, #0
 8014902:	4605      	mov	r5, r0
 8014904:	4608      	mov	r0, r1
 8014906:	6023      	str	r3, [r4, #0]
 8014908:	f7f4 f8ce 	bl	8008aa8 <_sbrk>
 801490c:	1c43      	adds	r3, r0, #1
 801490e:	d102      	bne.n	8014916 <_sbrk_r+0x1a>
 8014910:	6823      	ldr	r3, [r4, #0]
 8014912:	b103      	cbz	r3, 8014916 <_sbrk_r+0x1a>
 8014914:	602b      	str	r3, [r5, #0]
 8014916:	bd38      	pop	{r3, r4, r5, pc}
 8014918:	20019fd8 	.word	0x20019fd8

0801491c <__sread>:
 801491c:	b510      	push	{r4, lr}
 801491e:	460c      	mov	r4, r1
 8014920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014924:	f000 f8f4 	bl	8014b10 <_read_r>
 8014928:	2800      	cmp	r0, #0
 801492a:	bfab      	itete	ge
 801492c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801492e:	89a3      	ldrhlt	r3, [r4, #12]
 8014930:	181b      	addge	r3, r3, r0
 8014932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014936:	bfac      	ite	ge
 8014938:	6563      	strge	r3, [r4, #84]	; 0x54
 801493a:	81a3      	strhlt	r3, [r4, #12]
 801493c:	bd10      	pop	{r4, pc}

0801493e <__swrite>:
 801493e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014942:	461f      	mov	r7, r3
 8014944:	898b      	ldrh	r3, [r1, #12]
 8014946:	05db      	lsls	r3, r3, #23
 8014948:	4605      	mov	r5, r0
 801494a:	460c      	mov	r4, r1
 801494c:	4616      	mov	r6, r2
 801494e:	d505      	bpl.n	801495c <__swrite+0x1e>
 8014950:	2302      	movs	r3, #2
 8014952:	2200      	movs	r2, #0
 8014954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014958:	f000 f886 	bl	8014a68 <_lseek_r>
 801495c:	89a3      	ldrh	r3, [r4, #12]
 801495e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014966:	81a3      	strh	r3, [r4, #12]
 8014968:	4632      	mov	r2, r6
 801496a:	463b      	mov	r3, r7
 801496c:	4628      	mov	r0, r5
 801496e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014972:	f000 b835 	b.w	80149e0 <_write_r>

08014976 <__sseek>:
 8014976:	b510      	push	{r4, lr}
 8014978:	460c      	mov	r4, r1
 801497a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801497e:	f000 f873 	bl	8014a68 <_lseek_r>
 8014982:	1c43      	adds	r3, r0, #1
 8014984:	89a3      	ldrh	r3, [r4, #12]
 8014986:	bf15      	itete	ne
 8014988:	6560      	strne	r0, [r4, #84]	; 0x54
 801498a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801498e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014992:	81a3      	strheq	r3, [r4, #12]
 8014994:	bf18      	it	ne
 8014996:	81a3      	strhne	r3, [r4, #12]
 8014998:	bd10      	pop	{r4, pc}

0801499a <__sclose>:
 801499a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801499e:	f000 b831 	b.w	8014a04 <_close_r>

080149a2 <strncmp>:
 80149a2:	b510      	push	{r4, lr}
 80149a4:	b16a      	cbz	r2, 80149c2 <strncmp+0x20>
 80149a6:	3901      	subs	r1, #1
 80149a8:	1884      	adds	r4, r0, r2
 80149aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80149ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80149b2:	4293      	cmp	r3, r2
 80149b4:	d103      	bne.n	80149be <strncmp+0x1c>
 80149b6:	42a0      	cmp	r0, r4
 80149b8:	d001      	beq.n	80149be <strncmp+0x1c>
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d1f5      	bne.n	80149aa <strncmp+0x8>
 80149be:	1a98      	subs	r0, r3, r2
 80149c0:	bd10      	pop	{r4, pc}
 80149c2:	4610      	mov	r0, r2
 80149c4:	e7fc      	b.n	80149c0 <strncmp+0x1e>

080149c6 <__ascii_wctomb>:
 80149c6:	b149      	cbz	r1, 80149dc <__ascii_wctomb+0x16>
 80149c8:	2aff      	cmp	r2, #255	; 0xff
 80149ca:	bf85      	ittet	hi
 80149cc:	238a      	movhi	r3, #138	; 0x8a
 80149ce:	6003      	strhi	r3, [r0, #0]
 80149d0:	700a      	strbls	r2, [r1, #0]
 80149d2:	f04f 30ff 	movhi.w	r0, #4294967295
 80149d6:	bf98      	it	ls
 80149d8:	2001      	movls	r0, #1
 80149da:	4770      	bx	lr
 80149dc:	4608      	mov	r0, r1
 80149de:	4770      	bx	lr

080149e0 <_write_r>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	4c07      	ldr	r4, [pc, #28]	; (8014a00 <_write_r+0x20>)
 80149e4:	4605      	mov	r5, r0
 80149e6:	4608      	mov	r0, r1
 80149e8:	4611      	mov	r1, r2
 80149ea:	2200      	movs	r2, #0
 80149ec:	6022      	str	r2, [r4, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	f7f3 fbd4 	bl	800819c <_write>
 80149f4:	1c43      	adds	r3, r0, #1
 80149f6:	d102      	bne.n	80149fe <_write_r+0x1e>
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	b103      	cbz	r3, 80149fe <_write_r+0x1e>
 80149fc:	602b      	str	r3, [r5, #0]
 80149fe:	bd38      	pop	{r3, r4, r5, pc}
 8014a00:	20019fd8 	.word	0x20019fd8

08014a04 <_close_r>:
 8014a04:	b538      	push	{r3, r4, r5, lr}
 8014a06:	4c06      	ldr	r4, [pc, #24]	; (8014a20 <_close_r+0x1c>)
 8014a08:	2300      	movs	r3, #0
 8014a0a:	4605      	mov	r5, r0
 8014a0c:	4608      	mov	r0, r1
 8014a0e:	6023      	str	r3, [r4, #0]
 8014a10:	f7f4 f815 	bl	8008a3e <_close>
 8014a14:	1c43      	adds	r3, r0, #1
 8014a16:	d102      	bne.n	8014a1e <_close_r+0x1a>
 8014a18:	6823      	ldr	r3, [r4, #0]
 8014a1a:	b103      	cbz	r3, 8014a1e <_close_r+0x1a>
 8014a1c:	602b      	str	r3, [r5, #0]
 8014a1e:	bd38      	pop	{r3, r4, r5, pc}
 8014a20:	20019fd8 	.word	0x20019fd8

08014a24 <_fstat_r>:
 8014a24:	b538      	push	{r3, r4, r5, lr}
 8014a26:	4c07      	ldr	r4, [pc, #28]	; (8014a44 <_fstat_r+0x20>)
 8014a28:	2300      	movs	r3, #0
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	4608      	mov	r0, r1
 8014a2e:	4611      	mov	r1, r2
 8014a30:	6023      	str	r3, [r4, #0]
 8014a32:	f7f4 f810 	bl	8008a56 <_fstat>
 8014a36:	1c43      	adds	r3, r0, #1
 8014a38:	d102      	bne.n	8014a40 <_fstat_r+0x1c>
 8014a3a:	6823      	ldr	r3, [r4, #0]
 8014a3c:	b103      	cbz	r3, 8014a40 <_fstat_r+0x1c>
 8014a3e:	602b      	str	r3, [r5, #0]
 8014a40:	bd38      	pop	{r3, r4, r5, pc}
 8014a42:	bf00      	nop
 8014a44:	20019fd8 	.word	0x20019fd8

08014a48 <_isatty_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	4c06      	ldr	r4, [pc, #24]	; (8014a64 <_isatty_r+0x1c>)
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	4605      	mov	r5, r0
 8014a50:	4608      	mov	r0, r1
 8014a52:	6023      	str	r3, [r4, #0]
 8014a54:	f7f4 f80f 	bl	8008a76 <_isatty>
 8014a58:	1c43      	adds	r3, r0, #1
 8014a5a:	d102      	bne.n	8014a62 <_isatty_r+0x1a>
 8014a5c:	6823      	ldr	r3, [r4, #0]
 8014a5e:	b103      	cbz	r3, 8014a62 <_isatty_r+0x1a>
 8014a60:	602b      	str	r3, [r5, #0]
 8014a62:	bd38      	pop	{r3, r4, r5, pc}
 8014a64:	20019fd8 	.word	0x20019fd8

08014a68 <_lseek_r>:
 8014a68:	b538      	push	{r3, r4, r5, lr}
 8014a6a:	4c07      	ldr	r4, [pc, #28]	; (8014a88 <_lseek_r+0x20>)
 8014a6c:	4605      	mov	r5, r0
 8014a6e:	4608      	mov	r0, r1
 8014a70:	4611      	mov	r1, r2
 8014a72:	2200      	movs	r2, #0
 8014a74:	6022      	str	r2, [r4, #0]
 8014a76:	461a      	mov	r2, r3
 8014a78:	f7f4 f808 	bl	8008a8c <_lseek>
 8014a7c:	1c43      	adds	r3, r0, #1
 8014a7e:	d102      	bne.n	8014a86 <_lseek_r+0x1e>
 8014a80:	6823      	ldr	r3, [r4, #0]
 8014a82:	b103      	cbz	r3, 8014a86 <_lseek_r+0x1e>
 8014a84:	602b      	str	r3, [r5, #0]
 8014a86:	bd38      	pop	{r3, r4, r5, pc}
 8014a88:	20019fd8 	.word	0x20019fd8

08014a8c <memmove>:
 8014a8c:	4288      	cmp	r0, r1
 8014a8e:	b510      	push	{r4, lr}
 8014a90:	eb01 0302 	add.w	r3, r1, r2
 8014a94:	d807      	bhi.n	8014aa6 <memmove+0x1a>
 8014a96:	1e42      	subs	r2, r0, #1
 8014a98:	4299      	cmp	r1, r3
 8014a9a:	d00a      	beq.n	8014ab2 <memmove+0x26>
 8014a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aa0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014aa4:	e7f8      	b.n	8014a98 <memmove+0xc>
 8014aa6:	4283      	cmp	r3, r0
 8014aa8:	d9f5      	bls.n	8014a96 <memmove+0xa>
 8014aaa:	1881      	adds	r1, r0, r2
 8014aac:	1ad2      	subs	r2, r2, r3
 8014aae:	42d3      	cmn	r3, r2
 8014ab0:	d100      	bne.n	8014ab4 <memmove+0x28>
 8014ab2:	bd10      	pop	{r4, pc}
 8014ab4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ab8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014abc:	e7f7      	b.n	8014aae <memmove+0x22>

08014abe <__malloc_lock>:
 8014abe:	4770      	bx	lr

08014ac0 <__malloc_unlock>:
 8014ac0:	4770      	bx	lr

08014ac2 <_realloc_r>:
 8014ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac4:	4607      	mov	r7, r0
 8014ac6:	4614      	mov	r4, r2
 8014ac8:	460e      	mov	r6, r1
 8014aca:	b921      	cbnz	r1, 8014ad6 <_realloc_r+0x14>
 8014acc:	4611      	mov	r1, r2
 8014ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ad2:	f7ff bc27 	b.w	8014324 <_malloc_r>
 8014ad6:	b922      	cbnz	r2, 8014ae2 <_realloc_r+0x20>
 8014ad8:	f7ff fbd6 	bl	8014288 <_free_r>
 8014adc:	4625      	mov	r5, r4
 8014ade:	4628      	mov	r0, r5
 8014ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ae2:	f000 f827 	bl	8014b34 <_malloc_usable_size_r>
 8014ae6:	42a0      	cmp	r0, r4
 8014ae8:	d20f      	bcs.n	8014b0a <_realloc_r+0x48>
 8014aea:	4621      	mov	r1, r4
 8014aec:	4638      	mov	r0, r7
 8014aee:	f7ff fc19 	bl	8014324 <_malloc_r>
 8014af2:	4605      	mov	r5, r0
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d0f2      	beq.n	8014ade <_realloc_r+0x1c>
 8014af8:	4631      	mov	r1, r6
 8014afa:	4622      	mov	r2, r4
 8014afc:	f7fb fddb 	bl	80106b6 <memcpy>
 8014b00:	4631      	mov	r1, r6
 8014b02:	4638      	mov	r0, r7
 8014b04:	f7ff fbc0 	bl	8014288 <_free_r>
 8014b08:	e7e9      	b.n	8014ade <_realloc_r+0x1c>
 8014b0a:	4635      	mov	r5, r6
 8014b0c:	e7e7      	b.n	8014ade <_realloc_r+0x1c>
	...

08014b10 <_read_r>:
 8014b10:	b538      	push	{r3, r4, r5, lr}
 8014b12:	4c07      	ldr	r4, [pc, #28]	; (8014b30 <_read_r+0x20>)
 8014b14:	4605      	mov	r5, r0
 8014b16:	4608      	mov	r0, r1
 8014b18:	4611      	mov	r1, r2
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	6022      	str	r2, [r4, #0]
 8014b1e:	461a      	mov	r2, r3
 8014b20:	f7f3 ff70 	bl	8008a04 <_read>
 8014b24:	1c43      	adds	r3, r0, #1
 8014b26:	d102      	bne.n	8014b2e <_read_r+0x1e>
 8014b28:	6823      	ldr	r3, [r4, #0]
 8014b2a:	b103      	cbz	r3, 8014b2e <_read_r+0x1e>
 8014b2c:	602b      	str	r3, [r5, #0]
 8014b2e:	bd38      	pop	{r3, r4, r5, pc}
 8014b30:	20019fd8 	.word	0x20019fd8

08014b34 <_malloc_usable_size_r>:
 8014b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b38:	1f18      	subs	r0, r3, #4
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	bfbc      	itt	lt
 8014b3e:	580b      	ldrlt	r3, [r1, r0]
 8014b40:	18c0      	addlt	r0, r0, r3
 8014b42:	4770      	bx	lr

08014b44 <asinhf>:
 8014b44:	b510      	push	{r4, lr}
 8014b46:	ee10 4a10 	vmov	r4, s0
 8014b4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014b4e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b52:	ed2d 8b04 	vpush	{d8-d9}
 8014b56:	eeb0 8a40 	vmov.f32	s16, s0
 8014b5a:	db06      	blt.n	8014b6a <asinhf+0x26>
 8014b5c:	ee30 8a00 	vadd.f32	s16, s0, s0
 8014b60:	eeb0 0a48 	vmov.f32	s0, s16
 8014b64:	ecbd 8b04 	vpop	{d8-d9}
 8014b68:	bd10      	pop	{r4, pc}
 8014b6a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8014b6e:	da21      	bge.n	8014bb4 <asinhf+0x70>
 8014b70:	eddf 7a26 	vldr	s15, [pc, #152]	; 8014c0c <asinhf+0xc8>
 8014b74:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b84:	dcec      	bgt.n	8014b60 <asinhf+0x1c>
 8014b86:	eeb0 0a48 	vmov.f32	s0, s16
 8014b8a:	f000 fb77 	bl	801527c <fabsf>
 8014b8e:	ee68 8a08 	vmul.f32	s17, s16, s16
 8014b92:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014b96:	eeb0 9a40 	vmov.f32	s18, s0
 8014b9a:	ee38 0a88 	vadd.f32	s0, s17, s16
 8014b9e:	f002 fc11 	bl	80173c4 <__ieee754_sqrtf>
 8014ba2:	ee30 8a08 	vadd.f32	s16, s0, s16
 8014ba6:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8014baa:	ee30 0a09 	vadd.f32	s0, s0, s18
 8014bae:	f000 fbaf 	bl	8015310 <log1pf>
 8014bb2:	e028      	b.n	8014c06 <asinhf+0xc2>
 8014bb4:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8014bb8:	dd0c      	ble.n	8014bd4 <asinhf+0x90>
 8014bba:	f000 fb5f 	bl	801527c <fabsf>
 8014bbe:	f001 feb9 	bl	8016934 <__ieee754_logf>
 8014bc2:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8014c10 <asinhf+0xcc>
 8014bc6:	ee30 8a08 	vadd.f32	s16, s0, s16
 8014bca:	2c00      	cmp	r4, #0
 8014bcc:	bfd8      	it	le
 8014bce:	eeb1 8a48 	vnegle.f32	s16, s16
 8014bd2:	e7c5      	b.n	8014b60 <asinhf+0x1c>
 8014bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014bd8:	ddd5      	ble.n	8014b86 <asinhf+0x42>
 8014bda:	f000 fb4f 	bl	801527c <fabsf>
 8014bde:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014be2:	eef0 8a40 	vmov.f32	s17, s0
 8014be6:	eeb0 0a49 	vmov.f32	s0, s18
 8014bea:	eea8 0a08 	vfma.f32	s0, s16, s16
 8014bee:	f002 fbe9 	bl	80173c4 <__ieee754_sqrtf>
 8014bf2:	ee70 7a28 	vadd.f32	s15, s0, s17
 8014bf6:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8014bfa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014bfe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8014c02:	f001 fe97 	bl	8016934 <__ieee754_logf>
 8014c06:	eeb0 8a40 	vmov.f32	s16, s0
 8014c0a:	e7de      	b.n	8014bca <asinhf+0x86>
 8014c0c:	7149f2ca 	.word	0x7149f2ca
 8014c10:	3f317218 	.word	0x3f317218

08014c14 <atanf>:
 8014c14:	b538      	push	{r3, r4, r5, lr}
 8014c16:	ee10 5a10 	vmov	r5, s0
 8014c1a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014c1e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014c22:	eef0 7a40 	vmov.f32	s15, s0
 8014c26:	db10      	blt.n	8014c4a <atanf+0x36>
 8014c28:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014c2c:	dd04      	ble.n	8014c38 <atanf+0x24>
 8014c2e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014c32:	eeb0 0a67 	vmov.f32	s0, s15
 8014c36:	bd38      	pop	{r3, r4, r5, pc}
 8014c38:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014d70 <atanf+0x15c>
 8014c3c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014d74 <atanf+0x160>
 8014c40:	2d00      	cmp	r5, #0
 8014c42:	bfd8      	it	le
 8014c44:	eef0 7a47 	vmovle.f32	s15, s14
 8014c48:	e7f3      	b.n	8014c32 <atanf+0x1e>
 8014c4a:	4b4b      	ldr	r3, [pc, #300]	; (8014d78 <atanf+0x164>)
 8014c4c:	429c      	cmp	r4, r3
 8014c4e:	dc10      	bgt.n	8014c72 <atanf+0x5e>
 8014c50:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014c54:	da0a      	bge.n	8014c6c <atanf+0x58>
 8014c56:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014d7c <atanf+0x168>
 8014c5a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c62:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6a:	dce2      	bgt.n	8014c32 <atanf+0x1e>
 8014c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c70:	e013      	b.n	8014c9a <atanf+0x86>
 8014c72:	f000 fb03 	bl	801527c <fabsf>
 8014c76:	4b42      	ldr	r3, [pc, #264]	; (8014d80 <atanf+0x16c>)
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	dc4f      	bgt.n	8014d1c <atanf+0x108>
 8014c7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014c80:	429c      	cmp	r4, r3
 8014c82:	dc41      	bgt.n	8014d08 <atanf+0xf4>
 8014c84:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014c88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014c8c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014c90:	2300      	movs	r3, #0
 8014c92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014c96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014ca0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014d84 <atanf+0x170>
 8014ca4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014d88 <atanf+0x174>
 8014ca8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014d8c <atanf+0x178>
 8014cac:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014cb0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014cb4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014d90 <atanf+0x17c>
 8014cb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014cbc:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014d94 <atanf+0x180>
 8014cc0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014cc4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014d98 <atanf+0x184>
 8014cc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014ccc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014d9c <atanf+0x188>
 8014cd0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014cd4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014da0 <atanf+0x18c>
 8014cd8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014cdc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014da4 <atanf+0x190>
 8014ce0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014ce4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014da8 <atanf+0x194>
 8014ce8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014cec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014dac <atanf+0x198>
 8014cf0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014cf8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014d00:	d121      	bne.n	8014d46 <atanf+0x132>
 8014d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d06:	e794      	b.n	8014c32 <atanf+0x1e>
 8014d08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014d10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d14:	2301      	movs	r3, #1
 8014d16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d1a:	e7be      	b.n	8014c9a <atanf+0x86>
 8014d1c:	4b24      	ldr	r3, [pc, #144]	; (8014db0 <atanf+0x19c>)
 8014d1e:	429c      	cmp	r4, r3
 8014d20:	dc0b      	bgt.n	8014d3a <atanf+0x126>
 8014d22:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d2a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014d2e:	2302      	movs	r3, #2
 8014d30:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d38:	e7af      	b.n	8014c9a <atanf+0x86>
 8014d3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d42:	2303      	movs	r3, #3
 8014d44:	e7a9      	b.n	8014c9a <atanf+0x86>
 8014d46:	4a1b      	ldr	r2, [pc, #108]	; (8014db4 <atanf+0x1a0>)
 8014d48:	491b      	ldr	r1, [pc, #108]	; (8014db8 <atanf+0x1a4>)
 8014d4a:	009b      	lsls	r3, r3, #2
 8014d4c:	441a      	add	r2, r3
 8014d4e:	440b      	add	r3, r1
 8014d50:	edd3 6a00 	vldr	s13, [r3]
 8014d54:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014d58:	2d00      	cmp	r5, #0
 8014d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d5e:	ed92 7a00 	vldr	s14, [r2]
 8014d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d66:	bfb8      	it	lt
 8014d68:	eef1 7a67 	vneglt.f32	s15, s15
 8014d6c:	e761      	b.n	8014c32 <atanf+0x1e>
 8014d6e:	bf00      	nop
 8014d70:	bfc90fdb 	.word	0xbfc90fdb
 8014d74:	3fc90fdb 	.word	0x3fc90fdb
 8014d78:	3edfffff 	.word	0x3edfffff
 8014d7c:	7149f2ca 	.word	0x7149f2ca
 8014d80:	3f97ffff 	.word	0x3f97ffff
 8014d84:	3c8569d7 	.word	0x3c8569d7
 8014d88:	3d4bda59 	.word	0x3d4bda59
 8014d8c:	bd6ef16b 	.word	0xbd6ef16b
 8014d90:	3d886b35 	.word	0x3d886b35
 8014d94:	3dba2e6e 	.word	0x3dba2e6e
 8014d98:	3e124925 	.word	0x3e124925
 8014d9c:	3eaaaaab 	.word	0x3eaaaaab
 8014da0:	bd15a221 	.word	0xbd15a221
 8014da4:	bd9d8795 	.word	0xbd9d8795
 8014da8:	bde38e38 	.word	0xbde38e38
 8014dac:	be4ccccd 	.word	0xbe4ccccd
 8014db0:	401bffff 	.word	0x401bffff
 8014db4:	0814fa58 	.word	0x0814fa58
 8014db8:	0814fa68 	.word	0x0814fa68

08014dbc <ceilf>:
 8014dbc:	ee10 3a10 	vmov	r3, s0
 8014dc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014dc4:	0dca      	lsrs	r2, r1, #23
 8014dc6:	3a7f      	subs	r2, #127	; 0x7f
 8014dc8:	2a16      	cmp	r2, #22
 8014dca:	dc2a      	bgt.n	8014e22 <ceilf+0x66>
 8014dcc:	2a00      	cmp	r2, #0
 8014dce:	da11      	bge.n	8014df4 <ceilf+0x38>
 8014dd0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014e34 <ceilf+0x78>
 8014dd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de0:	dd05      	ble.n	8014dee <ceilf+0x32>
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	db23      	blt.n	8014e2e <ceilf+0x72>
 8014de6:	2900      	cmp	r1, #0
 8014de8:	bf18      	it	ne
 8014dea:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8014dee:	ee00 3a10 	vmov	s0, r3
 8014df2:	4770      	bx	lr
 8014df4:	4910      	ldr	r1, [pc, #64]	; (8014e38 <ceilf+0x7c>)
 8014df6:	4111      	asrs	r1, r2
 8014df8:	420b      	tst	r3, r1
 8014dfa:	d0fa      	beq.n	8014df2 <ceilf+0x36>
 8014dfc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014e34 <ceilf+0x78>
 8014e00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e0c:	ddef      	ble.n	8014dee <ceilf+0x32>
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	bfc2      	ittt	gt
 8014e12:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8014e16:	fa40 f202 	asrgt.w	r2, r0, r2
 8014e1a:	189b      	addgt	r3, r3, r2
 8014e1c:	ea23 0301 	bic.w	r3, r3, r1
 8014e20:	e7e5      	b.n	8014dee <ceilf+0x32>
 8014e22:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014e26:	d3e4      	bcc.n	8014df2 <ceilf+0x36>
 8014e28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e2c:	4770      	bx	lr
 8014e2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014e32:	e7dc      	b.n	8014dee <ceilf+0x32>
 8014e34:	7149f2ca 	.word	0x7149f2ca
 8014e38:	007fffff 	.word	0x007fffff

08014e3c <cosf>:
 8014e3c:	ee10 3a10 	vmov	r3, s0
 8014e40:	b507      	push	{r0, r1, r2, lr}
 8014e42:	4a1c      	ldr	r2, [pc, #112]	; (8014eb4 <cosf+0x78>)
 8014e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	dc04      	bgt.n	8014e56 <cosf+0x1a>
 8014e4c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8014eb8 <cosf+0x7c>
 8014e50:	f002 fabc 	bl	80173cc <__kernel_cosf>
 8014e54:	e004      	b.n	8014e60 <cosf+0x24>
 8014e56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014e5a:	db04      	blt.n	8014e66 <cosf+0x2a>
 8014e5c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8014e60:	b003      	add	sp, #12
 8014e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e66:	4668      	mov	r0, sp
 8014e68:	f002 f912 	bl	8017090 <__ieee754_rem_pio2f>
 8014e6c:	f000 0003 	and.w	r0, r0, #3
 8014e70:	2801      	cmp	r0, #1
 8014e72:	d007      	beq.n	8014e84 <cosf+0x48>
 8014e74:	2802      	cmp	r0, #2
 8014e76:	d00e      	beq.n	8014e96 <cosf+0x5a>
 8014e78:	b9a0      	cbnz	r0, 8014ea4 <cosf+0x68>
 8014e7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8014e7e:	ed9d 0a00 	vldr	s0, [sp]
 8014e82:	e7e5      	b.n	8014e50 <cosf+0x14>
 8014e84:	eddd 0a01 	vldr	s1, [sp, #4]
 8014e88:	ed9d 0a00 	vldr	s0, [sp]
 8014e8c:	f002 fd7e 	bl	801798c <__kernel_sinf>
 8014e90:	eeb1 0a40 	vneg.f32	s0, s0
 8014e94:	e7e4      	b.n	8014e60 <cosf+0x24>
 8014e96:	eddd 0a01 	vldr	s1, [sp, #4]
 8014e9a:	ed9d 0a00 	vldr	s0, [sp]
 8014e9e:	f002 fa95 	bl	80173cc <__kernel_cosf>
 8014ea2:	e7f5      	b.n	8014e90 <cosf+0x54>
 8014ea4:	2001      	movs	r0, #1
 8014ea6:	eddd 0a01 	vldr	s1, [sp, #4]
 8014eaa:	ed9d 0a00 	vldr	s0, [sp]
 8014eae:	f002 fd6d 	bl	801798c <__kernel_sinf>
 8014eb2:	e7d5      	b.n	8014e60 <cosf+0x24>
 8014eb4:	3f490fd8 	.word	0x3f490fd8
 8014eb8:	00000000 	.word	0x00000000

08014ebc <erff>:
 8014ebc:	b538      	push	{r3, r4, r5, lr}
 8014ebe:	ee10 4a10 	vmov	r4, s0
 8014ec2:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 8014ec6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014eca:	ed2d 8b06 	vpush	{d8-d10}
 8014ece:	eef0 7a40 	vmov.f32	s15, s0
 8014ed2:	db12      	blt.n	8014efa <erff+0x3e>
 8014ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014edc:	0fe4      	lsrs	r4, r4, #31
 8014ede:	0064      	lsls	r4, r4, #1
 8014ee0:	f1c4 0301 	rsb	r3, r4, #1
 8014ee4:	ee00 3a10 	vmov	s0, r3
 8014ee8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8014eec:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014ef0:	ecbd 8b06 	vpop	{d8-d10}
 8014ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8014ef8:	bd38      	pop	{r3, r4, r5, pc}
 8014efa:	4ba4      	ldr	r3, [pc, #656]	; (801518c <erff+0x2d0>)
 8014efc:	429d      	cmp	r5, r3
 8014efe:	dc4a      	bgt.n	8014f96 <erff+0xda>
 8014f00:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 8014f04:	da16      	bge.n	8014f34 <erff+0x78>
 8014f06:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 8014f0a:	da0e      	bge.n	8014f2a <erff+0x6e>
 8014f0c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015190 <erff+0x2d4>
 8014f10:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014f14:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8014f18:	eea7 0a87 	vfma.f32	s0, s15, s14
 8014f1c:	eef0 7a40 	vmov.f32	s15, s0
 8014f20:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014f24:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f28:	e7e2      	b.n	8014ef0 <erff+0x34>
 8014f2a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8015194 <erff+0x2d8>
 8014f2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014f32:	e7dd      	b.n	8014ef0 <erff+0x34>
 8014f34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014f38:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8015198 <erff+0x2dc>
 8014f3c:	eddf 6a97 	vldr	s13, [pc, #604]	; 801519c <erff+0x2e0>
 8014f40:	eddf 5a97 	vldr	s11, [pc, #604]	; 80151a0 <erff+0x2e4>
 8014f44:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014f48:	ed9f 6a96 	vldr	s12, [pc, #600]	; 80151a4 <erff+0x2e8>
 8014f4c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014f50:	eddf 6a95 	vldr	s13, [pc, #596]	; 80151a8 <erff+0x2ec>
 8014f54:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014f58:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 8015194 <erff+0x2d8>
 8014f5c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014f60:	eddf 6a92 	vldr	s13, [pc, #584]	; 80151ac <erff+0x2f0>
 8014f64:	eee7 6a25 	vfma.f32	s13, s14, s11
 8014f68:	eddf 5a91 	vldr	s11, [pc, #580]	; 80151b0 <erff+0x2f4>
 8014f6c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014f70:	eddf 6a90 	vldr	s13, [pc, #576]	; 80151b4 <erff+0x2f8>
 8014f74:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014f78:	eddf 5a8f 	vldr	s11, [pc, #572]	; 80151b8 <erff+0x2fc>
 8014f7c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014f84:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014f88:	eeb0 7a66 	vmov.f32	s14, s13
 8014f8c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8014f90:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014f94:	e7ac      	b.n	8014ef0 <erff+0x34>
 8014f96:	4b89      	ldr	r3, [pc, #548]	; (80151bc <erff+0x300>)
 8014f98:	429d      	cmp	r5, r3
 8014f9a:	dc44      	bgt.n	8015026 <erff+0x16a>
 8014f9c:	f000 f96e 	bl	801527c <fabsf>
 8014fa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014fa4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014fa8:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80151c0 <erff+0x304>
 8014fac:	eddf 6a85 	vldr	s13, [pc, #532]	; 80151c4 <erff+0x308>
 8014fb0:	ed9f 6a85 	vldr	s12, [pc, #532]	; 80151c8 <erff+0x30c>
 8014fb4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014fb8:	2c00      	cmp	r4, #0
 8014fba:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80151cc <erff+0x310>
 8014fbe:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014fc2:	eddf 6a83 	vldr	s13, [pc, #524]	; 80151d0 <erff+0x314>
 8014fc6:	eee7 6a00 	vfma.f32	s13, s14, s0
 8014fca:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80151d4 <erff+0x318>
 8014fce:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014fd2:	eddf 6a81 	vldr	s13, [pc, #516]	; 80151d8 <erff+0x31c>
 8014fd6:	eee7 6a00 	vfma.f32	s13, s14, s0
 8014fda:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80151dc <erff+0x320>
 8014fde:	eea6 7a80 	vfma.f32	s14, s13, s0
 8014fe2:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80151e0 <erff+0x324>
 8014fe6:	eee0 6a06 	vfma.f32	s13, s0, s12
 8014fea:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80151e4 <erff+0x328>
 8014fee:	eea6 6a80 	vfma.f32	s12, s13, s0
 8014ff2:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80151e8 <erff+0x32c>
 8014ff6:	eee6 6a00 	vfma.f32	s13, s12, s0
 8014ffa:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80151ec <erff+0x330>
 8014ffe:	eea6 6a80 	vfma.f32	s12, s13, s0
 8015002:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80151f0 <erff+0x334>
 8015006:	eee6 6a00 	vfma.f32	s13, s12, s0
 801500a:	eee6 7a80 	vfma.f32	s15, s13, s0
 801500e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015012:	bfab      	itete	ge
 8015014:	eddf 7a77 	vldrge	s15, [pc, #476]	; 80151f4 <erff+0x338>
 8015018:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 80151f8 <erff+0x33c>
 801501c:	ee70 7a27 	vaddge.f32	s15, s0, s15
 8015020:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 8015024:	e764      	b.n	8014ef0 <erff+0x34>
 8015026:	4b75      	ldr	r3, [pc, #468]	; (80151fc <erff+0x340>)
 8015028:	429d      	cmp	r5, r3
 801502a:	dd08      	ble.n	801503e <erff+0x182>
 801502c:	2c00      	cmp	r4, #0
 801502e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015032:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015036:	bfa8      	it	ge
 8015038:	eef0 7a40 	vmovge.f32	s15, s0
 801503c:	e758      	b.n	8014ef0 <erff+0x34>
 801503e:	f000 f91d 	bl	801527c <fabsf>
 8015042:	4b6f      	ldr	r3, [pc, #444]	; (8015200 <erff+0x344>)
 8015044:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015048:	eeb0 9a40 	vmov.f32	s18, s0
 801504c:	429d      	cmp	r5, r3
 801504e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015052:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8015056:	eef0 8a40 	vmov.f32	s17, s0
 801505a:	dc64      	bgt.n	8015126 <erff+0x26a>
 801505c:	eddf 7a69 	vldr	s15, [pc, #420]	; 8015204 <erff+0x348>
 8015060:	eddf 6a69 	vldr	s13, [pc, #420]	; 8015208 <erff+0x34c>
 8015064:	eddf 9a69 	vldr	s19, [pc, #420]	; 801520c <erff+0x350>
 8015068:	eee7 6a27 	vfma.f32	s13, s14, s15
 801506c:	eddf 7a68 	vldr	s15, [pc, #416]	; 8015210 <erff+0x354>
 8015070:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015074:	eddf 6a67 	vldr	s13, [pc, #412]	; 8015214 <erff+0x358>
 8015078:	eee7 6a87 	vfma.f32	s13, s15, s14
 801507c:	eddf 7a66 	vldr	s15, [pc, #408]	; 8015218 <erff+0x35c>
 8015080:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015084:	eddf 6a65 	vldr	s13, [pc, #404]	; 801521c <erff+0x360>
 8015088:	eee7 6a87 	vfma.f32	s13, s15, s14
 801508c:	eddf 7a64 	vldr	s15, [pc, #400]	; 8015220 <erff+0x364>
 8015090:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015094:	eddf 6a63 	vldr	s13, [pc, #396]	; 8015224 <erff+0x368>
 8015098:	eee7 9a87 	vfma.f32	s19, s15, s14
 801509c:	eddf 7a62 	vldr	s15, [pc, #392]	; 8015228 <erff+0x36c>
 80150a0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80150a4:	eddf 6a61 	vldr	s13, [pc, #388]	; 801522c <erff+0x370>
 80150a8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80150ac:	eddf 7a60 	vldr	s15, [pc, #384]	; 8015230 <erff+0x374>
 80150b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80150b4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8015234 <erff+0x378>
 80150b8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80150bc:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8015238 <erff+0x37c>
 80150c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80150c4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801523c <erff+0x380>
 80150c8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80150cc:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015240 <erff+0x384>
 80150d0:	ee19 3a10 	vmov	r3, s18
 80150d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80150d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80150dc:	f023 030f 	bic.w	r3, r3, #15
 80150e0:	ee08 3a10 	vmov	s16, r3
 80150e4:	eef0 aa68 	vmov.f32	s21, s17
 80150e8:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 80150ec:	eee7 aa87 	vfma.f32	s21, s15, s14
 80150f0:	eea8 0a48 	vfms.f32	s0, s16, s16
 80150f4:	f001 fac2 	bl	801667c <__ieee754_expf>
 80150f8:	eeb0 aa40 	vmov.f32	s20, s0
 80150fc:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 8015100:	ee78 7a49 	vsub.f32	s15, s16, s18
 8015104:	ee38 8a09 	vadd.f32	s16, s16, s18
 8015108:	eea7 0a88 	vfma.f32	s0, s15, s16
 801510c:	f001 fab6 	bl	801667c <__ieee754_expf>
 8015110:	ee2a 0a00 	vmul.f32	s0, s20, s0
 8015114:	2c00      	cmp	r4, #0
 8015116:	eec0 7a09 	vdiv.f32	s15, s0, s18
 801511a:	bfac      	ite	ge
 801511c:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 8015120:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 8015124:	e6e4      	b.n	8014ef0 <erff+0x34>
 8015126:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015244 <erff+0x388>
 801512a:	eddf 7a47 	vldr	s15, [pc, #284]	; 8015248 <erff+0x38c>
 801512e:	eddf 9a47 	vldr	s19, [pc, #284]	; 801524c <erff+0x390>
 8015132:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015136:	eddf 6a46 	vldr	s13, [pc, #280]	; 8015250 <erff+0x394>
 801513a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801513e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015254 <erff+0x398>
 8015142:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015146:	eddf 6a44 	vldr	s13, [pc, #272]	; 8015258 <erff+0x39c>
 801514a:	eee7 6a87 	vfma.f32	s13, s15, s14
 801514e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801525c <erff+0x3a0>
 8015152:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015156:	eddf 6a42 	vldr	s13, [pc, #264]	; 8015260 <erff+0x3a4>
 801515a:	eee7 9a87 	vfma.f32	s19, s15, s14
 801515e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8015264 <erff+0x3a8>
 8015162:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015166:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015268 <erff+0x3ac>
 801516a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801516e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 801526c <erff+0x3b0>
 8015172:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015176:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8015270 <erff+0x3b4>
 801517a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801517e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015274 <erff+0x3b8>
 8015182:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015186:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8015278 <erff+0x3bc>
 801518a:	e7a1      	b.n	80150d0 <erff+0x214>
 801518c:	3f57ffff 	.word	0x3f57ffff
 8015190:	3f8375d4 	.word	0x3f8375d4
 8015194:	3e0375d4 	.word	0x3e0375d4
 8015198:	b7c756b1 	.word	0xb7c756b1
 801519c:	bbbd1489 	.word	0xbbbd1489
 80151a0:	b684e21a 	.word	0xb684e21a
 80151a4:	bce9528f 	.word	0xbce9528f
 80151a8:	bea66beb 	.word	0xbea66beb
 80151ac:	390aee49 	.word	0x390aee49
 80151b0:	3ba68116 	.word	0x3ba68116
 80151b4:	3d852a63 	.word	0x3d852a63
 80151b8:	3ecbbbce 	.word	0x3ecbbbce
 80151bc:	3f9fffff 	.word	0x3f9fffff
 80151c0:	bb0df9c0 	.word	0xbb0df9c0
 80151c4:	3d1151b3 	.word	0x3d1151b3
 80151c8:	3c445aa3 	.word	0x3c445aa3
 80151cc:	bde31cc2 	.word	0xbde31cc2
 80151d0:	3ea2fe54 	.word	0x3ea2fe54
 80151d4:	bebe9208 	.word	0xbebe9208
 80151d8:	3ed46805 	.word	0x3ed46805
 80151dc:	bb1acdc6 	.word	0xbb1acdc6
 80151e0:	3c5f6e13 	.word	0x3c5f6e13
 80151e4:	3e013307 	.word	0x3e013307
 80151e8:	3d931ae7 	.word	0x3d931ae7
 80151ec:	3f0a5785 	.word	0x3f0a5785
 80151f0:	3dd9f331 	.word	0x3dd9f331
 80151f4:	3f58560b 	.word	0x3f58560b
 80151f8:	bf58560b 	.word	0xbf58560b
 80151fc:	40bfffff 	.word	0x40bfffff
 8015200:	4036db6d 	.word	0x4036db6d
 8015204:	c11d077e 	.word	0xc11d077e
 8015208:	c2a2932b 	.word	0xc2a2932b
 801520c:	bc21a093 	.word	0xbc21a093
 8015210:	c3389ae7 	.word	0xc3389ae7
 8015214:	c322658c 	.word	0xc322658c
 8015218:	c2798057 	.word	0xc2798057
 801521c:	c128f022 	.word	0xc128f022
 8015220:	bf31a0b7 	.word	0xbf31a0b7
 8015224:	bd777f97 	.word	0xbd777f97
 8015228:	40d23f7c 	.word	0x40d23f7c
 801522c:	42d9451f 	.word	0x42d9451f
 8015230:	43d6810b 	.word	0x43d6810b
 8015234:	442158c9 	.word	0x442158c9
 8015238:	43d9486f 	.word	0x43d9486f
 801523c:	4309a863 	.word	0x4309a863
 8015240:	419d35ce 	.word	0x419d35ce
 8015244:	c3f1c275 	.word	0xc3f1c275
 8015248:	c480230b 	.word	0xc480230b
 801524c:	bc21a092 	.word	0xbc21a092
 8015250:	c41f6441 	.word	0xc41f6441
 8015254:	c320a2ea 	.word	0xc320a2ea
 8015258:	c18e104b 	.word	0xc18e104b
 801525c:	bf4c9dd4 	.word	0xbf4c9dd4
 8015260:	43ed43a7 	.word	0x43ed43a7
 8015264:	c1b38712 	.word	0xc1b38712
 8015268:	451f90ce 	.word	0x451f90ce
 801526c:	4547fdbb 	.word	0x4547fdbb
 8015270:	44c01759 	.word	0x44c01759
 8015274:	43a2e571 	.word	0x43a2e571
 8015278:	41f2b459 	.word	0x41f2b459

0801527c <fabsf>:
 801527c:	ee10 3a10 	vmov	r3, s0
 8015280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015284:	ee00 3a10 	vmov	s0, r3
 8015288:	4770      	bx	lr
	...

0801528c <floorf>:
 801528c:	ee10 3a10 	vmov	r3, s0
 8015290:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015294:	0dca      	lsrs	r2, r1, #23
 8015296:	3a7f      	subs	r2, #127	; 0x7f
 8015298:	2a16      	cmp	r2, #22
 801529a:	dc2a      	bgt.n	80152f2 <floorf+0x66>
 801529c:	2a00      	cmp	r2, #0
 801529e:	da11      	bge.n	80152c4 <floorf+0x38>
 80152a0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015304 <floorf+0x78>
 80152a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80152a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80152ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152b0:	dd05      	ble.n	80152be <floorf+0x32>
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	da23      	bge.n	80152fe <floorf+0x72>
 80152b6:	4a14      	ldr	r2, [pc, #80]	; (8015308 <floorf+0x7c>)
 80152b8:	2900      	cmp	r1, #0
 80152ba:	bf18      	it	ne
 80152bc:	4613      	movne	r3, r2
 80152be:	ee00 3a10 	vmov	s0, r3
 80152c2:	4770      	bx	lr
 80152c4:	4911      	ldr	r1, [pc, #68]	; (801530c <floorf+0x80>)
 80152c6:	4111      	asrs	r1, r2
 80152c8:	420b      	tst	r3, r1
 80152ca:	d0fa      	beq.n	80152c2 <floorf+0x36>
 80152cc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015304 <floorf+0x78>
 80152d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80152d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80152d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152dc:	ddef      	ble.n	80152be <floorf+0x32>
 80152de:	2b00      	cmp	r3, #0
 80152e0:	bfbe      	ittt	lt
 80152e2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80152e6:	fa40 f202 	asrlt.w	r2, r0, r2
 80152ea:	189b      	addlt	r3, r3, r2
 80152ec:	ea23 0301 	bic.w	r3, r3, r1
 80152f0:	e7e5      	b.n	80152be <floorf+0x32>
 80152f2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80152f6:	d3e4      	bcc.n	80152c2 <floorf+0x36>
 80152f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80152fc:	4770      	bx	lr
 80152fe:	2300      	movs	r3, #0
 8015300:	e7dd      	b.n	80152be <floorf+0x32>
 8015302:	bf00      	nop
 8015304:	7149f2ca 	.word	0x7149f2ca
 8015308:	bf800000 	.word	0xbf800000
 801530c:	007fffff 	.word	0x007fffff

08015310 <log1pf>:
 8015310:	ee10 2a10 	vmov	r2, s0
 8015314:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015318:	db02      	blt.n	8015320 <log1pf+0x10>
 801531a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801531e:	4770      	bx	lr
 8015320:	4b70      	ldr	r3, [pc, #448]	; (80154e4 <log1pf+0x1d4>)
 8015322:	429a      	cmp	r2, r3
 8015324:	dc78      	bgt.n	8015418 <log1pf+0x108>
 8015326:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801532a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801532e:	db12      	blt.n	8015356 <log1pf+0x46>
 8015330:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015334:	eeb4 0a67 	vcmp.f32	s0, s15
 8015338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801533c:	bf05      	ittet	eq
 801533e:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 80154e8 <log1pf+0x1d8>
 8015342:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 80154ec <log1pf+0x1dc>
 8015346:	ee70 7a40 	vsubne.f32	s15, s0, s0
 801534a:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 801534e:	bf18      	it	ne
 8015350:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 8015354:	4770      	bx	lr
 8015356:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 801535a:	da13      	bge.n	8015384 <log1pf+0x74>
 801535c:	eddf 7a64 	vldr	s15, [pc, #400]	; 80154f0 <log1pf+0x1e0>
 8015360:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801536c:	dd03      	ble.n	8015376 <log1pf+0x66>
 801536e:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 8015372:	f2c0 80b6 	blt.w	80154e2 <log1pf+0x1d2>
 8015376:	ee20 7a40 	vnmul.f32	s14, s0, s0
 801537a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801537e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015382:	4770      	bx	lr
 8015384:	4b5b      	ldr	r3, [pc, #364]	; (80154f4 <log1pf+0x1e4>)
 8015386:	441a      	add	r2, r3
 8015388:	429a      	cmp	r2, r3
 801538a:	d84d      	bhi.n	8015428 <log1pf+0x118>
 801538c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015390:	ee30 7a27 	vadd.f32	s14, s0, s15
 8015394:	ee17 2a10 	vmov	r2, s14
 8015398:	15d3      	asrs	r3, r2, #23
 801539a:	3b7f      	subs	r3, #127	; 0x7f
 801539c:	2b00      	cmp	r3, #0
 801539e:	bfcb      	itete	gt
 80153a0:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 80153a4:	ee77 7a67 	vsuble.f32	s15, s14, s15
 80153a8:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 80153ac:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80153b0:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80153b4:	4950      	ldr	r1, [pc, #320]	; (80154f8 <log1pf+0x1e8>)
 80153b6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80153ba:	428a      	cmp	r2, r1
 80153bc:	bfc9      	itett	gt
 80153be:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 80153c2:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 80153c6:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 80153ca:	3301      	addgt	r3, #1
 80153cc:	bfc8      	it	gt
 80153ce:	1092      	asrgt	r2, r2, #2
 80153d0:	ee07 1a90 	vmov	s15, r1
 80153d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80153d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80153dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80153e0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80153e4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80153e8:	2a00      	cmp	r2, #0
 80153ea:	d13d      	bne.n	8015468 <log1pf+0x158>
 80153ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80153f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f4:	d11b      	bne.n	801542e <log1pf+0x11e>
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d071      	beq.n	80154de <log1pf+0x1ce>
 80153fa:	ee07 3a90 	vmov	s15, r3
 80153fe:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80154fc <log1pf+0x1ec>
 8015402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015406:	eee7 6a87 	vfma.f32	s13, s15, s14
 801540a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8015500 <log1pf+0x1f0>
 801540e:	eeb0 0a66 	vmov.f32	s0, s13
 8015412:	eea7 0a87 	vfma.f32	s0, s15, s14
 8015416:	4770      	bx	lr
 8015418:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 801541c:	dbb6      	blt.n	801538c <log1pf+0x7c>
 801541e:	15d3      	asrs	r3, r2, #23
 8015420:	3b7f      	subs	r3, #127	; 0x7f
 8015422:	eddf 6a32 	vldr	s13, [pc, #200]	; 80154ec <log1pf+0x1dc>
 8015426:	e7c5      	b.n	80153b4 <log1pf+0xa4>
 8015428:	2201      	movs	r2, #1
 801542a:	2300      	movs	r3, #0
 801542c:	e7d6      	b.n	80153dc <log1pf+0xcc>
 801542e:	eddf 7a35 	vldr	s15, [pc, #212]	; 8015504 <log1pf+0x1f4>
 8015432:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015436:	eea0 6a67 	vfms.f32	s12, s0, s15
 801543a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801543e:	b913      	cbnz	r3, 8015446 <log1pf+0x136>
 8015440:	ee30 0a46 	vsub.f32	s0, s0, s12
 8015444:	4770      	bx	lr
 8015446:	ee07 3a90 	vmov	s15, r3
 801544a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80154fc <log1pf+0x1ec>
 801544e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015452:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015456:	ee36 7a66 	vsub.f32	s14, s12, s13
 801545a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801545e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8015500 <log1pf+0x1f0>
 8015462:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8015466:	4770      	bx	lr
 8015468:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801546c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015470:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8015508 <log1pf+0x1f8>
 8015474:	ed9f 5a25 	vldr	s10, [pc, #148]	; 801550c <log1pf+0x1fc>
 8015478:	eec0 5a27 	vdiv.f32	s11, s0, s15
 801547c:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8015480:	eea7 5a86 	vfma.f32	s10, s15, s12
 8015484:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8015510 <log1pf+0x200>
 8015488:	eea5 6a27 	vfma.f32	s12, s10, s15
 801548c:	ed9f 5a21 	vldr	s10, [pc, #132]	; 8015514 <log1pf+0x204>
 8015490:	eea6 5a27 	vfma.f32	s10, s12, s15
 8015494:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8015518 <log1pf+0x208>
 8015498:	eea5 6a27 	vfma.f32	s12, s10, s15
 801549c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 801551c <log1pf+0x20c>
 80154a0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80154a4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8015504 <log1pf+0x1f4>
 80154a8:	eea5 6a27 	vfma.f32	s12, s10, s15
 80154ac:	eeb0 5a47 	vmov.f32	s10, s14
 80154b0:	eea6 5a27 	vfma.f32	s10, s12, s15
 80154b4:	ee25 6a25 	vmul.f32	s12, s10, s11
 80154b8:	b923      	cbnz	r3, 80154c4 <log1pf+0x1b4>
 80154ba:	ee37 7a46 	vsub.f32	s14, s14, s12
 80154be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80154c2:	4770      	bx	lr
 80154c4:	ee07 3a90 	vmov	s15, r3
 80154c8:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80154fc <log1pf+0x1ec>
 80154cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154d0:	eee7 6aa5 	vfma.f32	s13, s15, s11
 80154d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80154d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80154dc:	e7bd      	b.n	801545a <log1pf+0x14a>
 80154de:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80154ec <log1pf+0x1dc>
 80154e2:	4770      	bx	lr
 80154e4:	3ed413d6 	.word	0x3ed413d6
 80154e8:	cc000000 	.word	0xcc000000
 80154ec:	00000000 	.word	0x00000000
 80154f0:	4c000000 	.word	0x4c000000
 80154f4:	416a09e0 	.word	0x416a09e0
 80154f8:	003504f6 	.word	0x003504f6
 80154fc:	3717f7d1 	.word	0x3717f7d1
 8015500:	3f317180 	.word	0x3f317180
 8015504:	3f2aaaab 	.word	0x3f2aaaab
 8015508:	3e178897 	.word	0x3e178897
 801550c:	3e1cd04f 	.word	0x3e1cd04f
 8015510:	3e3a3325 	.word	0x3e3a3325
 8015514:	3e638e29 	.word	0x3e638e29
 8015518:	3e924925 	.word	0x3e924925
 801551c:	3ecccccd 	.word	0x3ecccccd

08015520 <roundf>:
 8015520:	ee10 0a10 	vmov	r0, s0
 8015524:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015528:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801552c:	2a16      	cmp	r2, #22
 801552e:	dc15      	bgt.n	801555c <roundf+0x3c>
 8015530:	2a00      	cmp	r2, #0
 8015532:	da08      	bge.n	8015546 <roundf+0x26>
 8015534:	3201      	adds	r2, #1
 8015536:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801553a:	d101      	bne.n	8015540 <roundf+0x20>
 801553c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015540:	ee00 3a10 	vmov	s0, r3
 8015544:	4770      	bx	lr
 8015546:	4908      	ldr	r1, [pc, #32]	; (8015568 <roundf+0x48>)
 8015548:	4111      	asrs	r1, r2
 801554a:	4208      	tst	r0, r1
 801554c:	d0fa      	beq.n	8015544 <roundf+0x24>
 801554e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015552:	4113      	asrs	r3, r2
 8015554:	4403      	add	r3, r0
 8015556:	ea23 0301 	bic.w	r3, r3, r1
 801555a:	e7f1      	b.n	8015540 <roundf+0x20>
 801555c:	2a80      	cmp	r2, #128	; 0x80
 801555e:	d1f1      	bne.n	8015544 <roundf+0x24>
 8015560:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015564:	4770      	bx	lr
 8015566:	bf00      	nop
 8015568:	007fffff 	.word	0x007fffff

0801556c <sinf>:
 801556c:	ee10 3a10 	vmov	r3, s0
 8015570:	b507      	push	{r0, r1, r2, lr}
 8015572:	4a1d      	ldr	r2, [pc, #116]	; (80155e8 <sinf+0x7c>)
 8015574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015578:	4293      	cmp	r3, r2
 801557a:	dc05      	bgt.n	8015588 <sinf+0x1c>
 801557c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80155ec <sinf+0x80>
 8015580:	2000      	movs	r0, #0
 8015582:	f002 fa03 	bl	801798c <__kernel_sinf>
 8015586:	e004      	b.n	8015592 <sinf+0x26>
 8015588:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801558c:	db04      	blt.n	8015598 <sinf+0x2c>
 801558e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015592:	b003      	add	sp, #12
 8015594:	f85d fb04 	ldr.w	pc, [sp], #4
 8015598:	4668      	mov	r0, sp
 801559a:	f001 fd79 	bl	8017090 <__ieee754_rem_pio2f>
 801559e:	f000 0003 	and.w	r0, r0, #3
 80155a2:	2801      	cmp	r0, #1
 80155a4:	d008      	beq.n	80155b8 <sinf+0x4c>
 80155a6:	2802      	cmp	r0, #2
 80155a8:	d00d      	beq.n	80155c6 <sinf+0x5a>
 80155aa:	b9b0      	cbnz	r0, 80155da <sinf+0x6e>
 80155ac:	2001      	movs	r0, #1
 80155ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80155b2:	ed9d 0a00 	vldr	s0, [sp]
 80155b6:	e7e4      	b.n	8015582 <sinf+0x16>
 80155b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80155bc:	ed9d 0a00 	vldr	s0, [sp]
 80155c0:	f001 ff04 	bl	80173cc <__kernel_cosf>
 80155c4:	e7e5      	b.n	8015592 <sinf+0x26>
 80155c6:	2001      	movs	r0, #1
 80155c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80155cc:	ed9d 0a00 	vldr	s0, [sp]
 80155d0:	f002 f9dc 	bl	801798c <__kernel_sinf>
 80155d4:	eeb1 0a40 	vneg.f32	s0, s0
 80155d8:	e7db      	b.n	8015592 <sinf+0x26>
 80155da:	eddd 0a01 	vldr	s1, [sp, #4]
 80155de:	ed9d 0a00 	vldr	s0, [sp]
 80155e2:	f001 fef3 	bl	80173cc <__kernel_cosf>
 80155e6:	e7f5      	b.n	80155d4 <sinf+0x68>
 80155e8:	3f490fd8 	.word	0x3f490fd8
 80155ec:	00000000 	.word	0x00000000

080155f0 <tanf>:
 80155f0:	ee10 3a10 	vmov	r3, s0
 80155f4:	b507      	push	{r0, r1, r2, lr}
 80155f6:	4a10      	ldr	r2, [pc, #64]	; (8015638 <tanf+0x48>)
 80155f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155fc:	4293      	cmp	r3, r2
 80155fe:	dc05      	bgt.n	801560c <tanf+0x1c>
 8015600:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801563c <tanf+0x4c>
 8015604:	2001      	movs	r0, #1
 8015606:	f002 fa09 	bl	8017a1c <__kernel_tanf>
 801560a:	e004      	b.n	8015616 <tanf+0x26>
 801560c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015610:	db04      	blt.n	801561c <tanf+0x2c>
 8015612:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015616:	b003      	add	sp, #12
 8015618:	f85d fb04 	ldr.w	pc, [sp], #4
 801561c:	4668      	mov	r0, sp
 801561e:	f001 fd37 	bl	8017090 <__ieee754_rem_pio2f>
 8015622:	0040      	lsls	r0, r0, #1
 8015624:	f000 0002 	and.w	r0, r0, #2
 8015628:	f1c0 0001 	rsb	r0, r0, #1
 801562c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015630:	ed9d 0a00 	vldr	s0, [sp]
 8015634:	e7e7      	b.n	8015606 <tanf+0x16>
 8015636:	bf00      	nop
 8015638:	3f490fda 	.word	0x3f490fda
 801563c:	00000000 	.word	0x00000000

08015640 <tanhf>:
 8015640:	b510      	push	{r4, lr}
 8015642:	ee10 4a10 	vmov	r4, s0
 8015646:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801564a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801564e:	ed2d 8b02 	vpush	{d8}
 8015652:	eef0 7a40 	vmov.f32	s15, s0
 8015656:	db0c      	blt.n	8015672 <tanhf+0x32>
 8015658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801565c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015660:	2c00      	cmp	r4, #0
 8015662:	bfac      	ite	ge
 8015664:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8015668:	ee30 0a47 	vsublt.f32	s0, s0, s14
 801566c:	ecbd 8b02 	vpop	{d8}
 8015670:	bd10      	pop	{r4, pc}
 8015672:	4a1b      	ldr	r2, [pc, #108]	; (80156e0 <tanhf+0xa0>)
 8015674:	4293      	cmp	r3, r2
 8015676:	dc30      	bgt.n	80156da <tanhf+0x9a>
 8015678:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801567c:	da06      	bge.n	801568c <tanhf+0x4c>
 801567e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015682:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015686:	ee20 0a27 	vmul.f32	s0, s0, s15
 801568a:	e7ef      	b.n	801566c <tanhf+0x2c>
 801568c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015690:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015694:	db12      	blt.n	80156bc <tanhf+0x7c>
 8015696:	f7ff fdf1 	bl	801527c <fabsf>
 801569a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801569e:	f002 faab 	bl	8017bf8 <expm1f>
 80156a2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80156a6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80156aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80156ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80156b2:	2c00      	cmp	r4, #0
 80156b4:	bfb8      	it	lt
 80156b6:	eeb1 0a40 	vneglt.f32	s0, s0
 80156ba:	e7d7      	b.n	801566c <tanhf+0x2c>
 80156bc:	f7ff fdde 	bl	801527c <fabsf>
 80156c0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80156c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80156c8:	f002 fa96 	bl	8017bf8 <expm1f>
 80156cc:	ee70 7a08 	vadd.f32	s15, s0, s16
 80156d0:	eeb1 7a40 	vneg.f32	s14, s0
 80156d4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80156d8:	e7eb      	b.n	80156b2 <tanhf+0x72>
 80156da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80156de:	e7e8      	b.n	80156b2 <tanhf+0x72>
 80156e0:	41afffff 	.word	0x41afffff

080156e4 <acosf>:
 80156e4:	b510      	push	{r4, lr}
 80156e6:	ed2d 8b02 	vpush	{d8}
 80156ea:	4c27      	ldr	r4, [pc, #156]	; (8015788 <acosf+0xa4>)
 80156ec:	b08a      	sub	sp, #40	; 0x28
 80156ee:	eeb0 8a40 	vmov.f32	s16, s0
 80156f2:	f000 fce1 	bl	80160b8 <__ieee754_acosf>
 80156f6:	f994 3000 	ldrsb.w	r3, [r4]
 80156fa:	3301      	adds	r3, #1
 80156fc:	eef0 8a40 	vmov.f32	s17, s0
 8015700:	d03c      	beq.n	801577c <acosf+0x98>
 8015702:	eeb4 8a48 	vcmp.f32	s16, s16
 8015706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801570a:	d637      	bvs.n	801577c <acosf+0x98>
 801570c:	eeb0 0a48 	vmov.f32	s0, s16
 8015710:	f7ff fdb4 	bl	801527c <fabsf>
 8015714:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015718:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015720:	dd2c      	ble.n	801577c <acosf+0x98>
 8015722:	2301      	movs	r3, #1
 8015724:	9300      	str	r3, [sp, #0]
 8015726:	4b19      	ldr	r3, [pc, #100]	; (801578c <acosf+0xa8>)
 8015728:	9301      	str	r3, [sp, #4]
 801572a:	ee18 0a10 	vmov	r0, s16
 801572e:	2300      	movs	r3, #0
 8015730:	9308      	str	r3, [sp, #32]
 8015732:	f7f0 ff81 	bl	8006638 <__aeabi_f2d>
 8015736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801573a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801573e:	4814      	ldr	r0, [pc, #80]	; (8015790 <acosf+0xac>)
 8015740:	f002 fa52 	bl	8017be8 <nan>
 8015744:	f994 3000 	ldrsb.w	r3, [r4]
 8015748:	2b02      	cmp	r3, #2
 801574a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801574e:	d104      	bne.n	801575a <acosf+0x76>
 8015750:	f7fa ff78 	bl	8010644 <__errno>
 8015754:	2321      	movs	r3, #33	; 0x21
 8015756:	6003      	str	r3, [r0, #0]
 8015758:	e004      	b.n	8015764 <acosf+0x80>
 801575a:	4668      	mov	r0, sp
 801575c:	f002 fa42 	bl	8017be4 <matherr>
 8015760:	2800      	cmp	r0, #0
 8015762:	d0f5      	beq.n	8015750 <acosf+0x6c>
 8015764:	9b08      	ldr	r3, [sp, #32]
 8015766:	b11b      	cbz	r3, 8015770 <acosf+0x8c>
 8015768:	f7fa ff6c 	bl	8010644 <__errno>
 801576c:	9b08      	ldr	r3, [sp, #32]
 801576e:	6003      	str	r3, [r0, #0]
 8015770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015774:	f7f1 fab0 	bl	8006cd8 <__aeabi_d2f>
 8015778:	ee08 0a90 	vmov	s17, r0
 801577c:	eeb0 0a68 	vmov.f32	s0, s17
 8015780:	b00a      	add	sp, #40	; 0x28
 8015782:	ecbd 8b02 	vpop	{d8}
 8015786:	bd10      	pop	{r4, pc}
 8015788:	20000a98 	.word	0x20000a98
 801578c:	0814fa78 	.word	0x0814fa78
 8015790:	0814f949 	.word	0x0814f949

08015794 <acoshf>:
 8015794:	b510      	push	{r4, lr}
 8015796:	ed2d 8b02 	vpush	{d8}
 801579a:	b08a      	sub	sp, #40	; 0x28
 801579c:	eeb0 8a40 	vmov.f32	s16, s0
 80157a0:	f000 fd86 	bl	80162b0 <__ieee754_acoshf>
 80157a4:	4b21      	ldr	r3, [pc, #132]	; (801582c <acoshf+0x98>)
 80157a6:	f993 4000 	ldrsb.w	r4, [r3]
 80157aa:	1c63      	adds	r3, r4, #1
 80157ac:	d039      	beq.n	8015822 <acoshf+0x8e>
 80157ae:	eeb4 8a48 	vcmp.f32	s16, s16
 80157b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b6:	d634      	bvs.n	8015822 <acoshf+0x8e>
 80157b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80157bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80157c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c4:	d52d      	bpl.n	8015822 <acoshf+0x8e>
 80157c6:	2301      	movs	r3, #1
 80157c8:	9300      	str	r3, [sp, #0]
 80157ca:	4b19      	ldr	r3, [pc, #100]	; (8015830 <acoshf+0x9c>)
 80157cc:	9301      	str	r3, [sp, #4]
 80157ce:	ee18 0a10 	vmov	r0, s16
 80157d2:	2300      	movs	r3, #0
 80157d4:	9308      	str	r3, [sp, #32]
 80157d6:	f7f0 ff2f 	bl	8006638 <__aeabi_f2d>
 80157da:	2200      	movs	r2, #0
 80157dc:	2300      	movs	r3, #0
 80157de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80157e6:	4610      	mov	r0, r2
 80157e8:	4619      	mov	r1, r3
 80157ea:	f7f1 f8a7 	bl	800693c <__aeabi_ddiv>
 80157ee:	2c02      	cmp	r4, #2
 80157f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80157f4:	d104      	bne.n	8015800 <acoshf+0x6c>
 80157f6:	f7fa ff25 	bl	8010644 <__errno>
 80157fa:	2321      	movs	r3, #33	; 0x21
 80157fc:	6003      	str	r3, [r0, #0]
 80157fe:	e004      	b.n	801580a <acoshf+0x76>
 8015800:	4668      	mov	r0, sp
 8015802:	f002 f9ef 	bl	8017be4 <matherr>
 8015806:	2800      	cmp	r0, #0
 8015808:	d0f5      	beq.n	80157f6 <acoshf+0x62>
 801580a:	9b08      	ldr	r3, [sp, #32]
 801580c:	b11b      	cbz	r3, 8015816 <acoshf+0x82>
 801580e:	f7fa ff19 	bl	8010644 <__errno>
 8015812:	9b08      	ldr	r3, [sp, #32]
 8015814:	6003      	str	r3, [r0, #0]
 8015816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801581a:	f7f1 fa5d 	bl	8006cd8 <__aeabi_d2f>
 801581e:	ee00 0a10 	vmov	s0, r0
 8015822:	b00a      	add	sp, #40	; 0x28
 8015824:	ecbd 8b02 	vpop	{d8}
 8015828:	bd10      	pop	{r4, pc}
 801582a:	bf00      	nop
 801582c:	20000a98 	.word	0x20000a98
 8015830:	0814fa7e 	.word	0x0814fa7e

08015834 <asinf>:
 8015834:	b510      	push	{r4, lr}
 8015836:	ed2d 8b02 	vpush	{d8}
 801583a:	4c27      	ldr	r4, [pc, #156]	; (80158d8 <asinf+0xa4>)
 801583c:	b08a      	sub	sp, #40	; 0x28
 801583e:	eeb0 8a40 	vmov.f32	s16, s0
 8015842:	f000 fd89 	bl	8016358 <__ieee754_asinf>
 8015846:	f994 3000 	ldrsb.w	r3, [r4]
 801584a:	3301      	adds	r3, #1
 801584c:	eef0 8a40 	vmov.f32	s17, s0
 8015850:	d03c      	beq.n	80158cc <asinf+0x98>
 8015852:	eeb4 8a48 	vcmp.f32	s16, s16
 8015856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801585a:	d637      	bvs.n	80158cc <asinf+0x98>
 801585c:	eeb0 0a48 	vmov.f32	s0, s16
 8015860:	f7ff fd0c 	bl	801527c <fabsf>
 8015864:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015868:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015870:	dd2c      	ble.n	80158cc <asinf+0x98>
 8015872:	2301      	movs	r3, #1
 8015874:	9300      	str	r3, [sp, #0]
 8015876:	4b19      	ldr	r3, [pc, #100]	; (80158dc <asinf+0xa8>)
 8015878:	9301      	str	r3, [sp, #4]
 801587a:	ee18 0a10 	vmov	r0, s16
 801587e:	2300      	movs	r3, #0
 8015880:	9308      	str	r3, [sp, #32]
 8015882:	f7f0 fed9 	bl	8006638 <__aeabi_f2d>
 8015886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801588a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801588e:	4814      	ldr	r0, [pc, #80]	; (80158e0 <asinf+0xac>)
 8015890:	f002 f9aa 	bl	8017be8 <nan>
 8015894:	f994 3000 	ldrsb.w	r3, [r4]
 8015898:	2b02      	cmp	r3, #2
 801589a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801589e:	d104      	bne.n	80158aa <asinf+0x76>
 80158a0:	f7fa fed0 	bl	8010644 <__errno>
 80158a4:	2321      	movs	r3, #33	; 0x21
 80158a6:	6003      	str	r3, [r0, #0]
 80158a8:	e004      	b.n	80158b4 <asinf+0x80>
 80158aa:	4668      	mov	r0, sp
 80158ac:	f002 f99a 	bl	8017be4 <matherr>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d0f5      	beq.n	80158a0 <asinf+0x6c>
 80158b4:	9b08      	ldr	r3, [sp, #32]
 80158b6:	b11b      	cbz	r3, 80158c0 <asinf+0x8c>
 80158b8:	f7fa fec4 	bl	8010644 <__errno>
 80158bc:	9b08      	ldr	r3, [sp, #32]
 80158be:	6003      	str	r3, [r0, #0]
 80158c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80158c4:	f7f1 fa08 	bl	8006cd8 <__aeabi_d2f>
 80158c8:	ee08 0a90 	vmov	s17, r0
 80158cc:	eeb0 0a68 	vmov.f32	s0, s17
 80158d0:	b00a      	add	sp, #40	; 0x28
 80158d2:	ecbd 8b02 	vpop	{d8}
 80158d6:	bd10      	pop	{r4, pc}
 80158d8:	20000a98 	.word	0x20000a98
 80158dc:	0814fa85 	.word	0x0814fa85
 80158e0:	0814f949 	.word	0x0814f949

080158e4 <atanhf>:
 80158e4:	b570      	push	{r4, r5, r6, lr}
 80158e6:	ed2d 8b04 	vpush	{d8-d9}
 80158ea:	4c36      	ldr	r4, [pc, #216]	; (80159c4 <atanhf+0xe0>)
 80158ec:	b08a      	sub	sp, #40	; 0x28
 80158ee:	eeb0 8a40 	vmov.f32	s16, s0
 80158f2:	f000 fe19 	bl	8016528 <__ieee754_atanhf>
 80158f6:	f994 3000 	ldrsb.w	r3, [r4]
 80158fa:	3301      	adds	r3, #1
 80158fc:	eef0 8a40 	vmov.f32	s17, s0
 8015900:	d059      	beq.n	80159b6 <atanhf+0xd2>
 8015902:	eeb4 8a48 	vcmp.f32	s16, s16
 8015906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590a:	d654      	bvs.n	80159b6 <atanhf+0xd2>
 801590c:	eeb0 0a48 	vmov.f32	s0, s16
 8015910:	f7ff fcb4 	bl	801527c <fabsf>
 8015914:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015918:	eeb4 0ac9 	vcmpe.f32	s0, s18
 801591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015920:	eef0 9a40 	vmov.f32	s19, s0
 8015924:	db47      	blt.n	80159b6 <atanhf+0xd2>
 8015926:	ee18 0a10 	vmov	r0, s16
 801592a:	f7f0 fe85 	bl	8006638 <__aeabi_f2d>
 801592e:	eef4 9ac9 	vcmpe.f32	s19, s18
 8015932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015936:	4602      	mov	r2, r0
 8015938:	460b      	mov	r3, r1
 801593a:	f994 4000 	ldrsb.w	r4, [r4]
 801593e:	4d22      	ldr	r5, [pc, #136]	; (80159c8 <atanhf+0xe4>)
 8015940:	dd17      	ble.n	8015972 <atanhf+0x8e>
 8015942:	2101      	movs	r1, #1
 8015944:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015948:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801594c:	e9cd 1500 	strd	r1, r5, [sp]
 8015950:	2200      	movs	r2, #0
 8015952:	2100      	movs	r1, #0
 8015954:	2300      	movs	r3, #0
 8015956:	9108      	str	r1, [sp, #32]
 8015958:	4610      	mov	r0, r2
 801595a:	4619      	mov	r1, r3
 801595c:	f7f0 ffee 	bl	800693c <__aeabi_ddiv>
 8015960:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015964:	2c02      	cmp	r4, #2
 8015966:	d115      	bne.n	8015994 <atanhf+0xb0>
 8015968:	f7fa fe6c 	bl	8010644 <__errno>
 801596c:	2321      	movs	r3, #33	; 0x21
 801596e:	6003      	str	r3, [r0, #0]
 8015970:	e015      	b.n	801599e <atanhf+0xba>
 8015972:	2602      	movs	r6, #2
 8015974:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015978:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801597c:	e9cd 6500 	strd	r6, r5, [sp]
 8015980:	2200      	movs	r2, #0
 8015982:	2500      	movs	r5, #0
 8015984:	2300      	movs	r3, #0
 8015986:	9508      	str	r5, [sp, #32]
 8015988:	f7f0 ffd8 	bl	800693c <__aeabi_ddiv>
 801598c:	42b4      	cmp	r4, r6
 801598e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015992:	e7e8      	b.n	8015966 <atanhf+0x82>
 8015994:	4668      	mov	r0, sp
 8015996:	f002 f925 	bl	8017be4 <matherr>
 801599a:	2800      	cmp	r0, #0
 801599c:	d0e4      	beq.n	8015968 <atanhf+0x84>
 801599e:	9b08      	ldr	r3, [sp, #32]
 80159a0:	b11b      	cbz	r3, 80159aa <atanhf+0xc6>
 80159a2:	f7fa fe4f 	bl	8010644 <__errno>
 80159a6:	9b08      	ldr	r3, [sp, #32]
 80159a8:	6003      	str	r3, [r0, #0]
 80159aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159ae:	f7f1 f993 	bl	8006cd8 <__aeabi_d2f>
 80159b2:	ee08 0a90 	vmov	s17, r0
 80159b6:	eeb0 0a68 	vmov.f32	s0, s17
 80159ba:	b00a      	add	sp, #40	; 0x28
 80159bc:	ecbd 8b04 	vpop	{d8-d9}
 80159c0:	bd70      	pop	{r4, r5, r6, pc}
 80159c2:	bf00      	nop
 80159c4:	20000a98 	.word	0x20000a98
 80159c8:	0814fa8b 	.word	0x0814fa8b

080159cc <coshf>:
 80159cc:	b510      	push	{r4, lr}
 80159ce:	ed2d 8b02 	vpush	{d8}
 80159d2:	4c29      	ldr	r4, [pc, #164]	; (8015a78 <coshf+0xac>)
 80159d4:	b08a      	sub	sp, #40	; 0x28
 80159d6:	eeb0 8a40 	vmov.f32	s16, s0
 80159da:	f000 fdeb 	bl	80165b4 <__ieee754_coshf>
 80159de:	f994 3000 	ldrsb.w	r3, [r4]
 80159e2:	3301      	adds	r3, #1
 80159e4:	eef0 8a40 	vmov.f32	s17, s0
 80159e8:	d035      	beq.n	8015a56 <coshf+0x8a>
 80159ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80159ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f2:	d630      	bvs.n	8015a56 <coshf+0x8a>
 80159f4:	eeb0 0a48 	vmov.f32	s0, s16
 80159f8:	f7ff fc40 	bl	801527c <fabsf>
 80159fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015a7c <coshf+0xb0>
 8015a00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a08:	dd25      	ble.n	8015a56 <coshf+0x8a>
 8015a0a:	2303      	movs	r3, #3
 8015a0c:	9300      	str	r3, [sp, #0]
 8015a0e:	4b1c      	ldr	r3, [pc, #112]	; (8015a80 <coshf+0xb4>)
 8015a10:	9301      	str	r3, [sp, #4]
 8015a12:	ee18 0a10 	vmov	r0, s16
 8015a16:	2300      	movs	r3, #0
 8015a18:	9308      	str	r3, [sp, #32]
 8015a1a:	f7f0 fe0d 	bl	8006638 <__aeabi_f2d>
 8015a1e:	f994 3000 	ldrsb.w	r3, [r4]
 8015a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015a2a:	b9d3      	cbnz	r3, 8015a62 <coshf+0x96>
 8015a2c:	4b15      	ldr	r3, [pc, #84]	; (8015a84 <coshf+0xb8>)
 8015a2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015a32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a36:	4668      	mov	r0, sp
 8015a38:	f002 f8d4 	bl	8017be4 <matherr>
 8015a3c:	b1b8      	cbz	r0, 8015a6e <coshf+0xa2>
 8015a3e:	9b08      	ldr	r3, [sp, #32]
 8015a40:	b11b      	cbz	r3, 8015a4a <coshf+0x7e>
 8015a42:	f7fa fdff 	bl	8010644 <__errno>
 8015a46:	9b08      	ldr	r3, [sp, #32]
 8015a48:	6003      	str	r3, [r0, #0]
 8015a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a4e:	f7f1 f943 	bl	8006cd8 <__aeabi_d2f>
 8015a52:	ee08 0a90 	vmov	s17, r0
 8015a56:	eeb0 0a68 	vmov.f32	s0, s17
 8015a5a:	b00a      	add	sp, #40	; 0x28
 8015a5c:	ecbd 8b02 	vpop	{d8}
 8015a60:	bd10      	pop	{r4, pc}
 8015a62:	4909      	ldr	r1, [pc, #36]	; (8015a88 <coshf+0xbc>)
 8015a64:	2000      	movs	r0, #0
 8015a66:	2b02      	cmp	r3, #2
 8015a68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015a6c:	d1e3      	bne.n	8015a36 <coshf+0x6a>
 8015a6e:	f7fa fde9 	bl	8010644 <__errno>
 8015a72:	2322      	movs	r3, #34	; 0x22
 8015a74:	6003      	str	r3, [r0, #0]
 8015a76:	e7e2      	b.n	8015a3e <coshf+0x72>
 8015a78:	20000a98 	.word	0x20000a98
 8015a7c:	42b2d4fc 	.word	0x42b2d4fc
 8015a80:	0814fa7f 	.word	0x0814fa7f
 8015a84:	47efffff 	.word	0x47efffff
 8015a88:	7ff00000 	.word	0x7ff00000

08015a8c <expf>:
 8015a8c:	b530      	push	{r4, r5, lr}
 8015a8e:	ed2d 8b02 	vpush	{d8}
 8015a92:	4d35      	ldr	r5, [pc, #212]	; (8015b68 <expf+0xdc>)
 8015a94:	b08b      	sub	sp, #44	; 0x2c
 8015a96:	eeb0 8a40 	vmov.f32	s16, s0
 8015a9a:	f000 fdef 	bl	801667c <__ieee754_expf>
 8015a9e:	f995 3000 	ldrsb.w	r3, [r5]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	ee10 4a10 	vmov	r4, s0
 8015aa8:	d030      	beq.n	8015b0c <expf+0x80>
 8015aaa:	eeb0 0a48 	vmov.f32	s0, s16
 8015aae:	f002 f9cf 	bl	8017e50 <finitef>
 8015ab2:	b358      	cbz	r0, 8015b0c <expf+0x80>
 8015ab4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8015b6c <expf+0xe0>
 8015ab8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac0:	dd35      	ble.n	8015b2e <expf+0xa2>
 8015ac2:	2303      	movs	r3, #3
 8015ac4:	9300      	str	r3, [sp, #0]
 8015ac6:	4b2a      	ldr	r3, [pc, #168]	; (8015b70 <expf+0xe4>)
 8015ac8:	9301      	str	r3, [sp, #4]
 8015aca:	ee18 0a10 	vmov	r0, s16
 8015ace:	2300      	movs	r3, #0
 8015ad0:	9308      	str	r3, [sp, #32]
 8015ad2:	f7f0 fdb1 	bl	8006638 <__aeabi_f2d>
 8015ad6:	f995 3000 	ldrsb.w	r3, [r5]
 8015ada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ae2:	b9cb      	cbnz	r3, 8015b18 <expf+0x8c>
 8015ae4:	4b23      	ldr	r3, [pc, #140]	; (8015b74 <expf+0xe8>)
 8015ae6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015aea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015aee:	4668      	mov	r0, sp
 8015af0:	f002 f878 	bl	8017be4 <matherr>
 8015af4:	b1b0      	cbz	r0, 8015b24 <expf+0x98>
 8015af6:	9b08      	ldr	r3, [sp, #32]
 8015af8:	b11b      	cbz	r3, 8015b02 <expf+0x76>
 8015afa:	f7fa fda3 	bl	8010644 <__errno>
 8015afe:	9b08      	ldr	r3, [sp, #32]
 8015b00:	6003      	str	r3, [r0, #0]
 8015b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b06:	f7f1 f8e7 	bl	8006cd8 <__aeabi_d2f>
 8015b0a:	4604      	mov	r4, r0
 8015b0c:	ee00 4a10 	vmov	s0, r4
 8015b10:	b00b      	add	sp, #44	; 0x2c
 8015b12:	ecbd 8b02 	vpop	{d8}
 8015b16:	bd30      	pop	{r4, r5, pc}
 8015b18:	4917      	ldr	r1, [pc, #92]	; (8015b78 <expf+0xec>)
 8015b1a:	2000      	movs	r0, #0
 8015b1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015b20:	2b02      	cmp	r3, #2
 8015b22:	d1e4      	bne.n	8015aee <expf+0x62>
 8015b24:	f7fa fd8e 	bl	8010644 <__errno>
 8015b28:	2322      	movs	r3, #34	; 0x22
 8015b2a:	6003      	str	r3, [r0, #0]
 8015b2c:	e7e3      	b.n	8015af6 <expf+0x6a>
 8015b2e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015b7c <expf+0xf0>
 8015b32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b3a:	d5e7      	bpl.n	8015b0c <expf+0x80>
 8015b3c:	2304      	movs	r3, #4
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	4b0b      	ldr	r3, [pc, #44]	; (8015b70 <expf+0xe4>)
 8015b42:	9301      	str	r3, [sp, #4]
 8015b44:	ee18 0a10 	vmov	r0, s16
 8015b48:	2300      	movs	r3, #0
 8015b4a:	9308      	str	r3, [sp, #32]
 8015b4c:	f7f0 fd74 	bl	8006638 <__aeabi_f2d>
 8015b50:	2300      	movs	r3, #0
 8015b52:	2200      	movs	r2, #0
 8015b54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b60:	f995 3000 	ldrsb.w	r3, [r5]
 8015b64:	e7dc      	b.n	8015b20 <expf+0x94>
 8015b66:	bf00      	nop
 8015b68:	20000a98 	.word	0x20000a98
 8015b6c:	42b17180 	.word	0x42b17180
 8015b70:	0814fa92 	.word	0x0814fa92
 8015b74:	47efffff 	.word	0x47efffff
 8015b78:	7ff00000 	.word	0x7ff00000
 8015b7c:	c2cff1b5 	.word	0xc2cff1b5

08015b80 <fmodf>:
 8015b80:	b5d0      	push	{r4, r6, r7, lr}
 8015b82:	ed2d 8b02 	vpush	{d8}
 8015b86:	b08a      	sub	sp, #40	; 0x28
 8015b88:	eef0 8a40 	vmov.f32	s17, s0
 8015b8c:	eeb0 8a60 	vmov.f32	s16, s1
 8015b90:	f000 fe48 	bl	8016824 <__ieee754_fmodf>
 8015b94:	4b26      	ldr	r3, [pc, #152]	; (8015c30 <fmodf+0xb0>)
 8015b96:	f993 4000 	ldrsb.w	r4, [r3]
 8015b9a:	1c63      	adds	r3, r4, #1
 8015b9c:	d035      	beq.n	8015c0a <fmodf+0x8a>
 8015b9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba6:	d630      	bvs.n	8015c0a <fmodf+0x8a>
 8015ba8:	eef4 8a68 	vcmp.f32	s17, s17
 8015bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bb0:	d62b      	bvs.n	8015c0a <fmodf+0x8a>
 8015bb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bba:	d126      	bne.n	8015c0a <fmodf+0x8a>
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	9300      	str	r3, [sp, #0]
 8015bc0:	4b1c      	ldr	r3, [pc, #112]	; (8015c34 <fmodf+0xb4>)
 8015bc2:	9301      	str	r3, [sp, #4]
 8015bc4:	ee18 0a90 	vmov	r0, s17
 8015bc8:	2300      	movs	r3, #0
 8015bca:	9308      	str	r3, [sp, #32]
 8015bcc:	f7f0 fd34 	bl	8006638 <__aeabi_f2d>
 8015bd0:	4606      	mov	r6, r0
 8015bd2:	460f      	mov	r7, r1
 8015bd4:	ee18 0a10 	vmov	r0, s16
 8015bd8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015bdc:	f7f0 fd2c 	bl	8006638 <__aeabi_f2d>
 8015be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015be4:	b9ac      	cbnz	r4, 8015c12 <fmodf+0x92>
 8015be6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015bea:	4668      	mov	r0, sp
 8015bec:	f001 fffa 	bl	8017be4 <matherr>
 8015bf0:	b1c8      	cbz	r0, 8015c26 <fmodf+0xa6>
 8015bf2:	9b08      	ldr	r3, [sp, #32]
 8015bf4:	b11b      	cbz	r3, 8015bfe <fmodf+0x7e>
 8015bf6:	f7fa fd25 	bl	8010644 <__errno>
 8015bfa:	9b08      	ldr	r3, [sp, #32]
 8015bfc:	6003      	str	r3, [r0, #0]
 8015bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c02:	f7f1 f869 	bl	8006cd8 <__aeabi_d2f>
 8015c06:	ee00 0a10 	vmov	s0, r0
 8015c0a:	b00a      	add	sp, #40	; 0x28
 8015c0c:	ecbd 8b02 	vpop	{d8}
 8015c10:	bdd0      	pop	{r4, r6, r7, pc}
 8015c12:	2200      	movs	r2, #0
 8015c14:	2300      	movs	r3, #0
 8015c16:	4610      	mov	r0, r2
 8015c18:	4619      	mov	r1, r3
 8015c1a:	f7f0 fe8f 	bl	800693c <__aeabi_ddiv>
 8015c1e:	2c02      	cmp	r4, #2
 8015c20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015c24:	d1e1      	bne.n	8015bea <fmodf+0x6a>
 8015c26:	f7fa fd0d 	bl	8010644 <__errno>
 8015c2a:	2321      	movs	r3, #33	; 0x21
 8015c2c:	6003      	str	r3, [r0, #0]
 8015c2e:	e7e0      	b.n	8015bf2 <fmodf+0x72>
 8015c30:	20000a98 	.word	0x20000a98
 8015c34:	0814fa97 	.word	0x0814fa97

08015c38 <logf>:
 8015c38:	b510      	push	{r4, lr}
 8015c3a:	ed2d 8b02 	vpush	{d8}
 8015c3e:	b08a      	sub	sp, #40	; 0x28
 8015c40:	eeb0 8a40 	vmov.f32	s16, s0
 8015c44:	f000 fe76 	bl	8016934 <__ieee754_logf>
 8015c48:	4b31      	ldr	r3, [pc, #196]	; (8015d10 <logf+0xd8>)
 8015c4a:	f993 4000 	ldrsb.w	r4, [r3]
 8015c4e:	1c63      	adds	r3, r4, #1
 8015c50:	d059      	beq.n	8015d06 <logf+0xce>
 8015c52:	eeb4 8a48 	vcmp.f32	s16, s16
 8015c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5a:	d654      	bvs.n	8015d06 <logf+0xce>
 8015c5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c64:	dc4f      	bgt.n	8015d06 <logf+0xce>
 8015c66:	4b2b      	ldr	r3, [pc, #172]	; (8015d14 <logf+0xdc>)
 8015c68:	9301      	str	r3, [sp, #4]
 8015c6a:	ee18 0a10 	vmov	r0, s16
 8015c6e:	2300      	movs	r3, #0
 8015c70:	9308      	str	r3, [sp, #32]
 8015c72:	f7f0 fce1 	bl	8006638 <__aeabi_f2d>
 8015c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c7e:	b994      	cbnz	r4, 8015ca6 <logf+0x6e>
 8015c80:	4b25      	ldr	r3, [pc, #148]	; (8015d18 <logf+0xe0>)
 8015c82:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015c86:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015c92:	d025      	beq.n	8015ce0 <logf+0xa8>
 8015c94:	2301      	movs	r3, #1
 8015c96:	2c02      	cmp	r4, #2
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	d116      	bne.n	8015cca <logf+0x92>
 8015c9c:	f7fa fcd2 	bl	8010644 <__errno>
 8015ca0:	2321      	movs	r3, #33	; 0x21
 8015ca2:	6003      	str	r3, [r0, #0]
 8015ca4:	e016      	b.n	8015cd4 <logf+0x9c>
 8015ca6:	4b1d      	ldr	r3, [pc, #116]	; (8015d1c <logf+0xe4>)
 8015ca8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015cac:	2200      	movs	r2, #0
 8015cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015cb6:	d1ed      	bne.n	8015c94 <logf+0x5c>
 8015cb8:	2302      	movs	r3, #2
 8015cba:	429c      	cmp	r4, r3
 8015cbc:	9300      	str	r3, [sp, #0]
 8015cbe:	d111      	bne.n	8015ce4 <logf+0xac>
 8015cc0:	f7fa fcc0 	bl	8010644 <__errno>
 8015cc4:	2322      	movs	r3, #34	; 0x22
 8015cc6:	6003      	str	r3, [r0, #0]
 8015cc8:	e011      	b.n	8015cee <logf+0xb6>
 8015cca:	4668      	mov	r0, sp
 8015ccc:	f001 ff8a 	bl	8017be4 <matherr>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d0e3      	beq.n	8015c9c <logf+0x64>
 8015cd4:	4812      	ldr	r0, [pc, #72]	; (8015d20 <logf+0xe8>)
 8015cd6:	f001 ff87 	bl	8017be8 <nan>
 8015cda:	ed8d 0b06 	vstr	d0, [sp, #24]
 8015cde:	e006      	b.n	8015cee <logf+0xb6>
 8015ce0:	2302      	movs	r3, #2
 8015ce2:	9300      	str	r3, [sp, #0]
 8015ce4:	4668      	mov	r0, sp
 8015ce6:	f001 ff7d 	bl	8017be4 <matherr>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d0e8      	beq.n	8015cc0 <logf+0x88>
 8015cee:	9b08      	ldr	r3, [sp, #32]
 8015cf0:	b11b      	cbz	r3, 8015cfa <logf+0xc2>
 8015cf2:	f7fa fca7 	bl	8010644 <__errno>
 8015cf6:	9b08      	ldr	r3, [sp, #32]
 8015cf8:	6003      	str	r3, [r0, #0]
 8015cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015cfe:	f7f0 ffeb 	bl	8006cd8 <__aeabi_d2f>
 8015d02:	ee00 0a10 	vmov	s0, r0
 8015d06:	b00a      	add	sp, #40	; 0x28
 8015d08:	ecbd 8b02 	vpop	{d8}
 8015d0c:	bd10      	pop	{r4, pc}
 8015d0e:	bf00      	nop
 8015d10:	20000a98 	.word	0x20000a98
 8015d14:	0814fa9d 	.word	0x0814fa9d
 8015d18:	c7efffff 	.word	0xc7efffff
 8015d1c:	fff00000 	.word	0xfff00000
 8015d20:	0814f949 	.word	0x0814f949

08015d24 <powf>:
 8015d24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015d28:	ed2d 8b04 	vpush	{d8-d9}
 8015d2c:	4ca7      	ldr	r4, [pc, #668]	; (8015fcc <powf+0x2a8>)
 8015d2e:	b08a      	sub	sp, #40	; 0x28
 8015d30:	eef0 8a40 	vmov.f32	s17, s0
 8015d34:	eeb0 8a60 	vmov.f32	s16, s1
 8015d38:	f000 feea 	bl	8016b10 <__ieee754_powf>
 8015d3c:	f994 5000 	ldrsb.w	r5, [r4]
 8015d40:	1c6b      	adds	r3, r5, #1
 8015d42:	eeb0 9a40 	vmov.f32	s18, s0
 8015d46:	4626      	mov	r6, r4
 8015d48:	d05f      	beq.n	8015e0a <powf+0xe6>
 8015d4a:	eeb4 8a48 	vcmp.f32	s16, s16
 8015d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d52:	d65a      	bvs.n	8015e0a <powf+0xe6>
 8015d54:	eef4 8a68 	vcmp.f32	s17, s17
 8015d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d5c:	d721      	bvc.n	8015da2 <powf+0x7e>
 8015d5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d66:	d150      	bne.n	8015e0a <powf+0xe6>
 8015d68:	2301      	movs	r3, #1
 8015d6a:	9300      	str	r3, [sp, #0]
 8015d6c:	4b98      	ldr	r3, [pc, #608]	; (8015fd0 <powf+0x2ac>)
 8015d6e:	9301      	str	r3, [sp, #4]
 8015d70:	ee18 0a90 	vmov	r0, s17
 8015d74:	2300      	movs	r3, #0
 8015d76:	9308      	str	r3, [sp, #32]
 8015d78:	f7f0 fc5e 	bl	8006638 <__aeabi_f2d>
 8015d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d80:	ee18 0a10 	vmov	r0, s16
 8015d84:	f7f0 fc58 	bl	8006638 <__aeabi_f2d>
 8015d88:	4b92      	ldr	r3, [pc, #584]	; (8015fd4 <powf+0x2b0>)
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	2d02      	cmp	r5, #2
 8015d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015d96:	d032      	beq.n	8015dfe <powf+0xda>
 8015d98:	4668      	mov	r0, sp
 8015d9a:	f001 ff23 	bl	8017be4 <matherr>
 8015d9e:	bb40      	cbnz	r0, 8015df2 <powf+0xce>
 8015da0:	e065      	b.n	8015e6e <powf+0x14a>
 8015da2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8015fd8 <powf+0x2b4>
 8015da6:	eef4 8a69 	vcmp.f32	s17, s19
 8015daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dae:	d163      	bne.n	8015e78 <powf+0x154>
 8015db0:	eeb4 8a69 	vcmp.f32	s16, s19
 8015db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db8:	d12e      	bne.n	8015e18 <powf+0xf4>
 8015dba:	2301      	movs	r3, #1
 8015dbc:	9300      	str	r3, [sp, #0]
 8015dbe:	4b84      	ldr	r3, [pc, #528]	; (8015fd0 <powf+0x2ac>)
 8015dc0:	9301      	str	r3, [sp, #4]
 8015dc2:	ee18 0a90 	vmov	r0, s17
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	9308      	str	r3, [sp, #32]
 8015dca:	f7f0 fc35 	bl	8006638 <__aeabi_f2d>
 8015dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015dd2:	ee18 0a10 	vmov	r0, s16
 8015dd6:	f7f0 fc2f 	bl	8006638 <__aeabi_f2d>
 8015dda:	2200      	movs	r2, #0
 8015ddc:	2300      	movs	r3, #0
 8015dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015de2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015de6:	2d00      	cmp	r5, #0
 8015de8:	d0d6      	beq.n	8015d98 <powf+0x74>
 8015dea:	4b7a      	ldr	r3, [pc, #488]	; (8015fd4 <powf+0x2b0>)
 8015dec:	2200      	movs	r2, #0
 8015dee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015df2:	9b08      	ldr	r3, [sp, #32]
 8015df4:	b11b      	cbz	r3, 8015dfe <powf+0xda>
 8015df6:	f7fa fc25 	bl	8010644 <__errno>
 8015dfa:	9b08      	ldr	r3, [sp, #32]
 8015dfc:	6003      	str	r3, [r0, #0]
 8015dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015e02:	f7f0 ff69 	bl	8006cd8 <__aeabi_d2f>
 8015e06:	ee09 0a10 	vmov	s18, r0
 8015e0a:	eeb0 0a49 	vmov.f32	s0, s18
 8015e0e:	b00a      	add	sp, #40	; 0x28
 8015e10:	ecbd 8b04 	vpop	{d8-d9}
 8015e14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8015e18:	eeb0 0a48 	vmov.f32	s0, s16
 8015e1c:	f002 f818 	bl	8017e50 <finitef>
 8015e20:	2800      	cmp	r0, #0
 8015e22:	d0f2      	beq.n	8015e0a <powf+0xe6>
 8015e24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2c:	d5ed      	bpl.n	8015e0a <powf+0xe6>
 8015e2e:	2301      	movs	r3, #1
 8015e30:	9300      	str	r3, [sp, #0]
 8015e32:	4b67      	ldr	r3, [pc, #412]	; (8015fd0 <powf+0x2ac>)
 8015e34:	9301      	str	r3, [sp, #4]
 8015e36:	ee18 0a90 	vmov	r0, s17
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	9308      	str	r3, [sp, #32]
 8015e3e:	f7f0 fbfb 	bl	8006638 <__aeabi_f2d>
 8015e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e46:	ee18 0a10 	vmov	r0, s16
 8015e4a:	f7f0 fbf5 	bl	8006638 <__aeabi_f2d>
 8015e4e:	f994 3000 	ldrsb.w	r3, [r4]
 8015e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e56:	b923      	cbnz	r3, 8015e62 <powf+0x13e>
 8015e58:	2200      	movs	r2, #0
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015e60:	e79a      	b.n	8015d98 <powf+0x74>
 8015e62:	495e      	ldr	r1, [pc, #376]	; (8015fdc <powf+0x2b8>)
 8015e64:	2000      	movs	r0, #0
 8015e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015e6a:	2b02      	cmp	r3, #2
 8015e6c:	d194      	bne.n	8015d98 <powf+0x74>
 8015e6e:	f7fa fbe9 	bl	8010644 <__errno>
 8015e72:	2321      	movs	r3, #33	; 0x21
 8015e74:	6003      	str	r3, [r0, #0]
 8015e76:	e7bc      	b.n	8015df2 <powf+0xce>
 8015e78:	f001 ffea 	bl	8017e50 <finitef>
 8015e7c:	4605      	mov	r5, r0
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	d173      	bne.n	8015f6a <powf+0x246>
 8015e82:	eeb0 0a68 	vmov.f32	s0, s17
 8015e86:	f001 ffe3 	bl	8017e50 <finitef>
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	d06d      	beq.n	8015f6a <powf+0x246>
 8015e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8015e92:	f001 ffdd 	bl	8017e50 <finitef>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d067      	beq.n	8015f6a <powf+0x246>
 8015e9a:	ee18 0a90 	vmov	r0, s17
 8015e9e:	f7f0 fbcb 	bl	8006638 <__aeabi_f2d>
 8015ea2:	4680      	mov	r8, r0
 8015ea4:	ee18 0a10 	vmov	r0, s16
 8015ea8:	4689      	mov	r9, r1
 8015eaa:	f7f0 fbc5 	bl	8006638 <__aeabi_f2d>
 8015eae:	eeb4 9a49 	vcmp.f32	s18, s18
 8015eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb6:	f994 4000 	ldrsb.w	r4, [r4]
 8015eba:	4b45      	ldr	r3, [pc, #276]	; (8015fd0 <powf+0x2ac>)
 8015ebc:	d713      	bvc.n	8015ee6 <powf+0x1c2>
 8015ebe:	2201      	movs	r2, #1
 8015ec0:	e9cd 2300 	strd	r2, r3, [sp]
 8015ec4:	9508      	str	r5, [sp, #32]
 8015ec6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015eca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015ece:	2c00      	cmp	r4, #0
 8015ed0:	d0c2      	beq.n	8015e58 <powf+0x134>
 8015ed2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8015ed6:	ee17 0a90 	vmov	r0, s15
 8015eda:	f7f0 fbad 	bl	8006638 <__aeabi_f2d>
 8015ede:	2c02      	cmp	r4, #2
 8015ee0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015ee4:	e7c2      	b.n	8015e6c <powf+0x148>
 8015ee6:	2203      	movs	r2, #3
 8015ee8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015eec:	e9cd 2300 	strd	r2, r3, [sp]
 8015ef0:	9508      	str	r5, [sp, #32]
 8015ef2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015efa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015efe:	b9fc      	cbnz	r4, 8015f40 <powf+0x21c>
 8015f00:	4b37      	ldr	r3, [pc, #220]	; (8015fe0 <powf+0x2bc>)
 8015f02:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015f06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f12:	d553      	bpl.n	8015fbc <powf+0x298>
 8015f14:	eeb0 0a48 	vmov.f32	s0, s16
 8015f18:	f001 ffa4 	bl	8017e64 <rintf>
 8015f1c:	eeb4 0a48 	vcmp.f32	s0, s16
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	d004      	beq.n	8015f30 <powf+0x20c>
 8015f26:	4b2f      	ldr	r3, [pc, #188]	; (8015fe4 <powf+0x2c0>)
 8015f28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015f2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f30:	f996 3000 	ldrsb.w	r3, [r6]
 8015f34:	2b02      	cmp	r3, #2
 8015f36:	d141      	bne.n	8015fbc <powf+0x298>
 8015f38:	f7fa fb84 	bl	8010644 <__errno>
 8015f3c:	2322      	movs	r3, #34	; 0x22
 8015f3e:	e799      	b.n	8015e74 <powf+0x150>
 8015f40:	4b29      	ldr	r3, [pc, #164]	; (8015fe8 <powf+0x2c4>)
 8015f42:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8015f46:	2200      	movs	r2, #0
 8015f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015f50:	d5ee      	bpl.n	8015f30 <powf+0x20c>
 8015f52:	eeb0 0a48 	vmov.f32	s0, s16
 8015f56:	f001 ff85 	bl	8017e64 <rintf>
 8015f5a:	eeb4 0a48 	vcmp.f32	s0, s16
 8015f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f62:	d0e5      	beq.n	8015f30 <powf+0x20c>
 8015f64:	2200      	movs	r2, #0
 8015f66:	4b1d      	ldr	r3, [pc, #116]	; (8015fdc <powf+0x2b8>)
 8015f68:	e7e0      	b.n	8015f2c <powf+0x208>
 8015f6a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f72:	f47f af4a 	bne.w	8015e0a <powf+0xe6>
 8015f76:	eeb0 0a68 	vmov.f32	s0, s17
 8015f7a:	f001 ff69 	bl	8017e50 <finitef>
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	f43f af43 	beq.w	8015e0a <powf+0xe6>
 8015f84:	eeb0 0a48 	vmov.f32	s0, s16
 8015f88:	f001 ff62 	bl	8017e50 <finitef>
 8015f8c:	2800      	cmp	r0, #0
 8015f8e:	f43f af3c 	beq.w	8015e0a <powf+0xe6>
 8015f92:	2304      	movs	r3, #4
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	4b0e      	ldr	r3, [pc, #56]	; (8015fd0 <powf+0x2ac>)
 8015f98:	9301      	str	r3, [sp, #4]
 8015f9a:	ee18 0a90 	vmov	r0, s17
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	9308      	str	r3, [sp, #32]
 8015fa2:	f7f0 fb49 	bl	8006638 <__aeabi_f2d>
 8015fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015faa:	ee18 0a10 	vmov	r0, s16
 8015fae:	f7f0 fb43 	bl	8006638 <__aeabi_f2d>
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015fb8:	2300      	movs	r3, #0
 8015fba:	e7b7      	b.n	8015f2c <powf+0x208>
 8015fbc:	4668      	mov	r0, sp
 8015fbe:	f001 fe11 	bl	8017be4 <matherr>
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	f47f af15 	bne.w	8015df2 <powf+0xce>
 8015fc8:	e7b6      	b.n	8015f38 <powf+0x214>
 8015fca:	bf00      	nop
 8015fcc:	20000a98 	.word	0x20000a98
 8015fd0:	0814faa2 	.word	0x0814faa2
 8015fd4:	3ff00000 	.word	0x3ff00000
 8015fd8:	00000000 	.word	0x00000000
 8015fdc:	fff00000 	.word	0xfff00000
 8015fe0:	47efffff 	.word	0x47efffff
 8015fe4:	c7efffff 	.word	0xc7efffff
 8015fe8:	7ff00000 	.word	0x7ff00000

08015fec <sinhf>:
 8015fec:	b530      	push	{r4, r5, lr}
 8015fee:	ed2d 8b02 	vpush	{d8}
 8015ff2:	4c2b      	ldr	r4, [pc, #172]	; (80160a0 <sinhf+0xb4>)
 8015ff4:	b08b      	sub	sp, #44	; 0x2c
 8015ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8015ffa:	f001 f975 	bl	80172e8 <__ieee754_sinhf>
 8015ffe:	f994 3000 	ldrsb.w	r3, [r4]
 8016002:	3301      	adds	r3, #1
 8016004:	eef0 8a40 	vmov.f32	s17, s0
 8016008:	d034      	beq.n	8016074 <sinhf+0x88>
 801600a:	f001 ff21 	bl	8017e50 <finitef>
 801600e:	4605      	mov	r5, r0
 8016010:	2800      	cmp	r0, #0
 8016012:	d12f      	bne.n	8016074 <sinhf+0x88>
 8016014:	eeb0 0a48 	vmov.f32	s0, s16
 8016018:	f001 ff1a 	bl	8017e50 <finitef>
 801601c:	b350      	cbz	r0, 8016074 <sinhf+0x88>
 801601e:	2303      	movs	r3, #3
 8016020:	9300      	str	r3, [sp, #0]
 8016022:	ee18 0a10 	vmov	r0, s16
 8016026:	4b1f      	ldr	r3, [pc, #124]	; (80160a4 <sinhf+0xb8>)
 8016028:	9301      	str	r3, [sp, #4]
 801602a:	9508      	str	r5, [sp, #32]
 801602c:	f7f0 fb04 	bl	8006638 <__aeabi_f2d>
 8016030:	f994 3000 	ldrsb.w	r3, [r4]
 8016034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801603c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016040:	b9f3      	cbnz	r3, 8016080 <sinhf+0x94>
 8016042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016046:	bfd4      	ite	le
 8016048:	4b17      	ldrle	r3, [pc, #92]	; (80160a8 <sinhf+0xbc>)
 801604a:	4b18      	ldrgt	r3, [pc, #96]	; (80160ac <sinhf+0xc0>)
 801604c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016050:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016054:	4668      	mov	r0, sp
 8016056:	f001 fdc5 	bl	8017be4 <matherr>
 801605a:	b1d8      	cbz	r0, 8016094 <sinhf+0xa8>
 801605c:	9b08      	ldr	r3, [sp, #32]
 801605e:	b11b      	cbz	r3, 8016068 <sinhf+0x7c>
 8016060:	f7fa faf0 	bl	8010644 <__errno>
 8016064:	9b08      	ldr	r3, [sp, #32]
 8016066:	6003      	str	r3, [r0, #0]
 8016068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801606c:	f7f0 fe34 	bl	8006cd8 <__aeabi_d2f>
 8016070:	ee08 0a90 	vmov	s17, r0
 8016074:	eeb0 0a68 	vmov.f32	s0, s17
 8016078:	b00b      	add	sp, #44	; 0x2c
 801607a:	ecbd 8b02 	vpop	{d8}
 801607e:	bd30      	pop	{r4, r5, pc}
 8016080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016084:	bfd4      	ite	le
 8016086:	490a      	ldrle	r1, [pc, #40]	; (80160b0 <sinhf+0xc4>)
 8016088:	490a      	ldrgt	r1, [pc, #40]	; (80160b4 <sinhf+0xc8>)
 801608a:	2000      	movs	r0, #0
 801608c:	2b02      	cmp	r3, #2
 801608e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016092:	d1df      	bne.n	8016054 <sinhf+0x68>
 8016094:	f7fa fad6 	bl	8010644 <__errno>
 8016098:	2322      	movs	r3, #34	; 0x22
 801609a:	6003      	str	r3, [r0, #0]
 801609c:	e7de      	b.n	801605c <sinhf+0x70>
 801609e:	bf00      	nop
 80160a0:	20000a98 	.word	0x20000a98
 80160a4:	0814faa7 	.word	0x0814faa7
 80160a8:	c7efffff 	.word	0xc7efffff
 80160ac:	47efffff 	.word	0x47efffff
 80160b0:	fff00000 	.word	0xfff00000
 80160b4:	7ff00000 	.word	0x7ff00000

080160b8 <__ieee754_acosf>:
 80160b8:	b508      	push	{r3, lr}
 80160ba:	ee10 3a10 	vmov	r3, s0
 80160be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80160c2:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80160c6:	ed2d 8b0c 	vpush	{d8-d13}
 80160ca:	d10a      	bne.n	80160e2 <__ieee754_acosf+0x2a>
 80160cc:	ed9f 0a67 	vldr	s0, [pc, #412]	; 801626c <__ieee754_acosf+0x1b4>
 80160d0:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8016270 <__ieee754_acosf+0x1b8>
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	bfd8      	it	le
 80160d8:	eeb0 0a48 	vmovle.f32	s0, s16
 80160dc:	ecbd 8b0c 	vpop	{d8-d13}
 80160e0:	bd08      	pop	{r3, pc}
 80160e2:	dd04      	ble.n	80160ee <__ieee754_acosf+0x36>
 80160e4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80160e8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80160ec:	e7f6      	b.n	80160dc <__ieee754_acosf+0x24>
 80160ee:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80160f2:	da3e      	bge.n	8016172 <__ieee754_acosf+0xba>
 80160f4:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80160f8:	f340 80b5 	ble.w	8016266 <__ieee754_acosf+0x1ae>
 80160fc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016100:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8016274 <__ieee754_acosf+0x1bc>
 8016104:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8016278 <__ieee754_acosf+0x1c0>
 8016108:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 801627c <__ieee754_acosf+0x1c4>
 801610c:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8016280 <__ieee754_acosf+0x1c8>
 8016110:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016114:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8016284 <__ieee754_acosf+0x1cc>
 8016118:	eee7 6a27 	vfma.f32	s13, s14, s15
 801611c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8016288 <__ieee754_acosf+0x1d0>
 8016120:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016124:	eddf 6a59 	vldr	s13, [pc, #356]	; 801628c <__ieee754_acosf+0x1d4>
 8016128:	eee7 6a27 	vfma.f32	s13, s14, s15
 801612c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8016290 <__ieee754_acosf+0x1d8>
 8016130:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016134:	eddf 6a57 	vldr	s13, [pc, #348]	; 8016294 <__ieee754_acosf+0x1dc>
 8016138:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801613c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8016298 <__ieee754_acosf+0x1e0>
 8016140:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016144:	ed9f 6a55 	vldr	s12, [pc, #340]	; 801629c <__ieee754_acosf+0x1e4>
 8016148:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801614c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016150:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016158:	eef0 7a66 	vmov.f32	s15, s13
 801615c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016160:	eea0 8a66 	vfms.f32	s16, s0, s13
 8016164:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016168:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80162a0 <__ieee754_acosf+0x1e8>
 801616c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8016170:	e7b4      	b.n	80160dc <__ieee754_acosf+0x24>
 8016172:	2b00      	cmp	r3, #0
 8016174:	eddf da3f 	vldr	s27, [pc, #252]	; 8016274 <__ieee754_acosf+0x1bc>
 8016178:	eddf ca3f 	vldr	s25, [pc, #252]	; 8016278 <__ieee754_acosf+0x1c0>
 801617c:	ed9f ca41 	vldr	s24, [pc, #260]	; 8016284 <__ieee754_acosf+0x1cc>
 8016180:	eddf ba41 	vldr	s23, [pc, #260]	; 8016288 <__ieee754_acosf+0x1d0>
 8016184:	ed9f ba41 	vldr	s22, [pc, #260]	; 801628c <__ieee754_acosf+0x1d4>
 8016188:	eddf 8a41 	vldr	s17, [pc, #260]	; 8016290 <__ieee754_acosf+0x1d8>
 801618c:	ed9f da41 	vldr	s26, [pc, #260]	; 8016294 <__ieee754_acosf+0x1dc>
 8016190:	eddf aa3a 	vldr	s21, [pc, #232]	; 801627c <__ieee754_acosf+0x1c4>
 8016194:	ed9f aa40 	vldr	s20, [pc, #256]	; 8016298 <__ieee754_acosf+0x1e0>
 8016198:	eddf 9a40 	vldr	s19, [pc, #256]	; 801629c <__ieee754_acosf+0x1e4>
 801619c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80161a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80161a4:	da28      	bge.n	80161f8 <__ieee754_acosf+0x140>
 80161a6:	ee30 0a09 	vadd.f32	s0, s0, s18
 80161aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80161ae:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80161b2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80161b6:	eeac ca80 	vfma.f32	s24, s25, s0
 80161ba:	eeaa aa80 	vfma.f32	s20, s21, s0
 80161be:	eeec ba00 	vfma.f32	s23, s24, s0
 80161c2:	eeea 9a00 	vfma.f32	s19, s20, s0
 80161c6:	eeab ba80 	vfma.f32	s22, s23, s0
 80161ca:	eea9 9a80 	vfma.f32	s18, s19, s0
 80161ce:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80161d2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80161d6:	f001 f8f5 	bl	80173c4 <__ieee754_sqrtf>
 80161da:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80161de:	eddf 7a31 	vldr	s15, [pc, #196]	; 80162a4 <__ieee754_acosf+0x1ec>
 80161e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80161e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80161ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80161ee:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80162a8 <__ieee754_acosf+0x1f0>
 80161f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80161f6:	e771      	b.n	80160dc <__ieee754_acosf+0x24>
 80161f8:	ee39 8a40 	vsub.f32	s16, s18, s0
 80161fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016200:	eeb0 0a48 	vmov.f32	s0, s16
 8016204:	f001 f8de 	bl	80173c4 <__ieee754_sqrtf>
 8016208:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801620c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8016210:	eeac ca88 	vfma.f32	s24, s25, s16
 8016214:	eeaa aa88 	vfma.f32	s20, s21, s16
 8016218:	eeec ba08 	vfma.f32	s23, s24, s16
 801621c:	ee10 3a10 	vmov	r3, s0
 8016220:	eeab ba88 	vfma.f32	s22, s23, s16
 8016224:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016228:	f023 030f 	bic.w	r3, r3, #15
 801622c:	eeea 9a08 	vfma.f32	s19, s20, s16
 8016230:	ee07 3a90 	vmov	s15, r3
 8016234:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8016238:	eeb0 6a48 	vmov.f32	s12, s16
 801623c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016240:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016244:	ee70 6a27 	vadd.f32	s13, s0, s15
 8016248:	ee68 8a88 	vmul.f32	s17, s17, s16
 801624c:	eeb0 7a40 	vmov.f32	s14, s0
 8016250:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8016254:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016258:	eea7 0a26 	vfma.f32	s0, s14, s13
 801625c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016260:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016264:	e73a      	b.n	80160dc <__ieee754_acosf+0x24>
 8016266:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80162ac <__ieee754_acosf+0x1f4>
 801626a:	e737      	b.n	80160dc <__ieee754_acosf+0x24>
 801626c:	00000000 	.word	0x00000000
 8016270:	40490fdb 	.word	0x40490fdb
 8016274:	3811ef08 	.word	0x3811ef08
 8016278:	3a4f7f04 	.word	0x3a4f7f04
 801627c:	bf303361 	.word	0xbf303361
 8016280:	33a22168 	.word	0x33a22168
 8016284:	bd241146 	.word	0xbd241146
 8016288:	3e4e0aa8 	.word	0x3e4e0aa8
 801628c:	bea6b090 	.word	0xbea6b090
 8016290:	3e2aaaab 	.word	0x3e2aaaab
 8016294:	3d9dc62e 	.word	0x3d9dc62e
 8016298:	4001572d 	.word	0x4001572d
 801629c:	c019d139 	.word	0xc019d139
 80162a0:	3fc90fda 	.word	0x3fc90fda
 80162a4:	b3a22168 	.word	0xb3a22168
 80162a8:	40490fda 	.word	0x40490fda
 80162ac:	3fc90fdb 	.word	0x3fc90fdb

080162b0 <__ieee754_acoshf>:
 80162b0:	b508      	push	{r3, lr}
 80162b2:	ee10 3a10 	vmov	r3, s0
 80162b6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80162ba:	ed2d 8b04 	vpush	{d8-d9}
 80162be:	eeb0 8a40 	vmov.f32	s16, s0
 80162c2:	da06      	bge.n	80162d2 <__ieee754_acoshf+0x22>
 80162c4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80162c8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80162cc:	ecbd 8b04 	vpop	{d8-d9}
 80162d0:	bd08      	pop	{r3, pc}
 80162d2:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 80162d6:	db0c      	blt.n	80162f2 <__ieee754_acoshf+0x42>
 80162d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80162dc:	db02      	blt.n	80162e4 <__ieee754_acoshf+0x34>
 80162de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80162e2:	e7f3      	b.n	80162cc <__ieee754_acoshf+0x1c>
 80162e4:	f000 fb26 	bl	8016934 <__ieee754_logf>
 80162e8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016350 <__ieee754_acoshf+0xa0>
 80162ec:	ee30 0a08 	vadd.f32	s0, s0, s16
 80162f0:	e7ec      	b.n	80162cc <__ieee754_acoshf+0x1c>
 80162f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80162f6:	d028      	beq.n	801634a <__ieee754_acoshf+0x9a>
 80162f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80162fc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016300:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8016304:	dd11      	ble.n	801632a <__ieee754_acoshf+0x7a>
 8016306:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801630a:	eea8 0a08 	vfma.f32	s0, s16, s16
 801630e:	f001 f859 	bl	80173c4 <__ieee754_sqrtf>
 8016312:	ee70 7a08 	vadd.f32	s15, s0, s16
 8016316:	ee89 0a27 	vdiv.f32	s0, s18, s15
 801631a:	ee98 0a28 	vfnms.f32	s0, s16, s17
 801631e:	ecbd 8b04 	vpop	{d8-d9}
 8016322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016326:	f000 bb05 	b.w	8016934 <__ieee754_logf>
 801632a:	ee30 8a49 	vsub.f32	s16, s0, s18
 801632e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016332:	eea8 0a28 	vfma.f32	s0, s16, s17
 8016336:	f001 f845 	bl	80173c4 <__ieee754_sqrtf>
 801633a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801633e:	ecbd 8b04 	vpop	{d8-d9}
 8016342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016346:	f7fe bfe3 	b.w	8015310 <log1pf>
 801634a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016354 <__ieee754_acoshf+0xa4>
 801634e:	e7bd      	b.n	80162cc <__ieee754_acoshf+0x1c>
 8016350:	3f317218 	.word	0x3f317218
 8016354:	00000000 	.word	0x00000000

08016358 <__ieee754_asinf>:
 8016358:	b538      	push	{r3, r4, r5, lr}
 801635a:	ee10 5a10 	vmov	r5, s0
 801635e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016362:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016366:	ed2d 8b04 	vpush	{d8-d9}
 801636a:	d10c      	bne.n	8016386 <__ieee754_asinf+0x2e>
 801636c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 80164e8 <__ieee754_asinf+0x190>
 8016370:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80164ec <__ieee754_asinf+0x194>
 8016374:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016378:	eee0 7a07 	vfma.f32	s15, s0, s14
 801637c:	eeb0 0a67 	vmov.f32	s0, s15
 8016380:	ecbd 8b04 	vpop	{d8-d9}
 8016384:	bd38      	pop	{r3, r4, r5, pc}
 8016386:	dd04      	ble.n	8016392 <__ieee754_asinf+0x3a>
 8016388:	ee70 7a40 	vsub.f32	s15, s0, s0
 801638c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016390:	e7f6      	b.n	8016380 <__ieee754_asinf+0x28>
 8016392:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8016396:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801639a:	da0b      	bge.n	80163b4 <__ieee754_asinf+0x5c>
 801639c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80163a0:	da52      	bge.n	8016448 <__ieee754_asinf+0xf0>
 80163a2:	eddf 7a53 	vldr	s15, [pc, #332]	; 80164f0 <__ieee754_asinf+0x198>
 80163a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80163aa:	eef4 7ae8 	vcmpe.f32	s15, s17
 80163ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b2:	dce5      	bgt.n	8016380 <__ieee754_asinf+0x28>
 80163b4:	f7fe ff62 	bl	801527c <fabsf>
 80163b8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80163bc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80163c0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80163c4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80164f4 <__ieee754_asinf+0x19c>
 80163c8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80164f8 <__ieee754_asinf+0x1a0>
 80163cc:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 80164fc <__ieee754_asinf+0x1a4>
 80163d0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80163d4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016500 <__ieee754_asinf+0x1a8>
 80163d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80163dc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016504 <__ieee754_asinf+0x1ac>
 80163e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80163e4:	eddf 7a48 	vldr	s15, [pc, #288]	; 8016508 <__ieee754_asinf+0x1b0>
 80163e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80163ec:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801650c <__ieee754_asinf+0x1b4>
 80163f0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80163f4:	eddf 7a46 	vldr	s15, [pc, #280]	; 8016510 <__ieee754_asinf+0x1b8>
 80163f8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80163fc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8016514 <__ieee754_asinf+0x1bc>
 8016400:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016404:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016518 <__ieee754_asinf+0x1c0>
 8016408:	eee7 7a08 	vfma.f32	s15, s14, s16
 801640c:	eeb0 0a48 	vmov.f32	s0, s16
 8016410:	eee7 8a88 	vfma.f32	s17, s15, s16
 8016414:	f000 ffd6 	bl	80173c4 <__ieee754_sqrtf>
 8016418:	4b40      	ldr	r3, [pc, #256]	; (801651c <__ieee754_asinf+0x1c4>)
 801641a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801641e:	429c      	cmp	r4, r3
 8016420:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8016424:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016428:	dd3d      	ble.n	80164a6 <__ieee754_asinf+0x14e>
 801642a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801642e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8016520 <__ieee754_asinf+0x1c8>
 8016432:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016436:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80164ec <__ieee754_asinf+0x194>
 801643a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801643e:	2d00      	cmp	r5, #0
 8016440:	bfd8      	it	le
 8016442:	eeb1 0a40 	vnegle.f32	s0, s0
 8016446:	e79b      	b.n	8016380 <__ieee754_asinf+0x28>
 8016448:	ee60 7a00 	vmul.f32	s15, s0, s0
 801644c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80164f4 <__ieee754_asinf+0x19c>
 8016450:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80164f8 <__ieee754_asinf+0x1a0>
 8016454:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801650c <__ieee754_asinf+0x1b4>
 8016458:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801645c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016500 <__ieee754_asinf+0x1a8>
 8016460:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016464:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8016504 <__ieee754_asinf+0x1ac>
 8016468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801646c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8016508 <__ieee754_asinf+0x1b0>
 8016470:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016474:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80164fc <__ieee754_asinf+0x1a4>
 8016478:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801647c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016510 <__ieee754_asinf+0x1b8>
 8016480:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016484:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8016514 <__ieee754_asinf+0x1bc>
 8016488:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801648c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8016518 <__ieee754_asinf+0x1c0>
 8016490:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016498:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801649c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80164a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80164a4:	e76c      	b.n	8016380 <__ieee754_asinf+0x28>
 80164a6:	ee10 3a10 	vmov	r3, s0
 80164aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80164ae:	f023 030f 	bic.w	r3, r3, #15
 80164b2:	ee07 3a90 	vmov	s15, r3
 80164b6:	eef1 6a67 	vneg.f32	s13, s15
 80164ba:	eea6 8aa7 	vfma.f32	s16, s13, s15
 80164be:	ee70 5a00 	vadd.f32	s11, s0, s0
 80164c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80164c6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80164e8 <__ieee754_asinf+0x190>
 80164ca:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80164ce:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8016524 <__ieee754_asinf+0x1cc>
 80164d2:	eee5 7a47 	vfms.f32	s15, s10, s14
 80164d6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80164da:	eeb0 6a40 	vmov.f32	s12, s0
 80164de:	eea6 6a87 	vfma.f32	s12, s13, s14
 80164e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80164e6:	e7a8      	b.n	801643a <__ieee754_asinf+0xe2>
 80164e8:	b33bbd2e 	.word	0xb33bbd2e
 80164ec:	3fc90fdb 	.word	0x3fc90fdb
 80164f0:	7149f2ca 	.word	0x7149f2ca
 80164f4:	3811ef08 	.word	0x3811ef08
 80164f8:	3a4f7f04 	.word	0x3a4f7f04
 80164fc:	3e2aaaab 	.word	0x3e2aaaab
 8016500:	bd241146 	.word	0xbd241146
 8016504:	3e4e0aa8 	.word	0x3e4e0aa8
 8016508:	bea6b090 	.word	0xbea6b090
 801650c:	3d9dc62e 	.word	0x3d9dc62e
 8016510:	bf303361 	.word	0xbf303361
 8016514:	4001572d 	.word	0x4001572d
 8016518:	c019d139 	.word	0xc019d139
 801651c:	3f799999 	.word	0x3f799999
 8016520:	333bbd2e 	.word	0x333bbd2e
 8016524:	3f490fdb 	.word	0x3f490fdb

08016528 <__ieee754_atanhf>:
 8016528:	b510      	push	{r4, lr}
 801652a:	ee10 4a10 	vmov	r4, s0
 801652e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016532:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016536:	ed2d 8b02 	vpush	{d8}
 801653a:	dd06      	ble.n	801654a <__ieee754_atanhf+0x22>
 801653c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016540:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016544:	ecbd 8b02 	vpop	{d8}
 8016548:	bd10      	pop	{r4, pc}
 801654a:	d104      	bne.n	8016556 <__ieee754_atanhf+0x2e>
 801654c:	eddf 7a17 	vldr	s15, [pc, #92]	; 80165ac <__ieee754_atanhf+0x84>
 8016550:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8016554:	e7f6      	b.n	8016544 <__ieee754_atanhf+0x1c>
 8016556:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 801655a:	da08      	bge.n	801656e <__ieee754_atanhf+0x46>
 801655c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80165b0 <__ieee754_atanhf+0x88>
 8016560:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801656c:	dcea      	bgt.n	8016544 <__ieee754_atanhf+0x1c>
 801656e:	ee07 3a90 	vmov	s15, r3
 8016572:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8016576:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801657a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801657e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016582:	bfb6      	itet	lt
 8016584:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016588:	ee80 0a07 	vdivge.f32	s0, s0, s14
 801658c:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8016590:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016594:	bfb8      	it	lt
 8016596:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 801659a:	f7fe feb9 	bl	8015310 <log1pf>
 801659e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80165a2:	2c00      	cmp	r4, #0
 80165a4:	bfb8      	it	lt
 80165a6:	eeb1 0a40 	vneglt.f32	s0, s0
 80165aa:	e7cb      	b.n	8016544 <__ieee754_atanhf+0x1c>
 80165ac:	00000000 	.word	0x00000000
 80165b0:	7149f2ca 	.word	0x7149f2ca

080165b4 <__ieee754_coshf>:
 80165b4:	b510      	push	{r4, lr}
 80165b6:	ee10 4a10 	vmov	r4, s0
 80165ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80165be:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80165c2:	ed2d 8b02 	vpush	{d8}
 80165c6:	db04      	blt.n	80165d2 <__ieee754_coshf+0x1e>
 80165c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165cc:	ecbd 8b02 	vpop	{d8}
 80165d0:	bd10      	pop	{r4, pc}
 80165d2:	4b25      	ldr	r3, [pc, #148]	; (8016668 <__ieee754_coshf+0xb4>)
 80165d4:	429c      	cmp	r4, r3
 80165d6:	dc15      	bgt.n	8016604 <__ieee754_coshf+0x50>
 80165d8:	f7fe fe50 	bl	801527c <fabsf>
 80165dc:	f001 fb0c 	bl	8017bf8 <expm1f>
 80165e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80165e4:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 80165e8:	eef0 7a40 	vmov.f32	s15, s0
 80165ec:	ee30 0a07 	vadd.f32	s0, s0, s14
 80165f0:	dbec      	blt.n	80165cc <__ieee754_coshf+0x18>
 80165f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80165f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80165fa:	eec7 6a80 	vdiv.f32	s13, s15, s0
 80165fe:	ee36 0a87 	vadd.f32	s0, s13, s14
 8016602:	e7e3      	b.n	80165cc <__ieee754_coshf+0x18>
 8016604:	4b19      	ldr	r3, [pc, #100]	; (801666c <__ieee754_coshf+0xb8>)
 8016606:	429c      	cmp	r4, r3
 8016608:	dc0c      	bgt.n	8016624 <__ieee754_coshf+0x70>
 801660a:	f7fe fe37 	bl	801527c <fabsf>
 801660e:	f000 f835 	bl	801667c <__ieee754_expf>
 8016612:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801661a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801661e:	eeb0 0a67 	vmov.f32	s0, s15
 8016622:	e7d3      	b.n	80165cc <__ieee754_coshf+0x18>
 8016624:	4b12      	ldr	r3, [pc, #72]	; (8016670 <__ieee754_coshf+0xbc>)
 8016626:	429c      	cmp	r4, r3
 8016628:	dc08      	bgt.n	801663c <__ieee754_coshf+0x88>
 801662a:	f7fe fe27 	bl	801527c <fabsf>
 801662e:	f000 f825 	bl	801667c <__ieee754_expf>
 8016632:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016636:	ee20 0a27 	vmul.f32	s0, s0, s15
 801663a:	e7c7      	b.n	80165cc <__ieee754_coshf+0x18>
 801663c:	4b0d      	ldr	r3, [pc, #52]	; (8016674 <__ieee754_coshf+0xc0>)
 801663e:	429c      	cmp	r4, r3
 8016640:	dc0c      	bgt.n	801665c <__ieee754_coshf+0xa8>
 8016642:	f7fe fe1b 	bl	801527c <fabsf>
 8016646:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801664a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801664e:	f000 f815 	bl	801667c <__ieee754_expf>
 8016652:	ee20 8a08 	vmul.f32	s16, s0, s16
 8016656:	ee28 0a00 	vmul.f32	s0, s16, s0
 801665a:	e7b7      	b.n	80165cc <__ieee754_coshf+0x18>
 801665c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8016678 <__ieee754_coshf+0xc4>
 8016660:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016664:	e7b2      	b.n	80165cc <__ieee754_coshf+0x18>
 8016666:	bf00      	nop
 8016668:	3eb17217 	.word	0x3eb17217
 801666c:	41afffff 	.word	0x41afffff
 8016670:	42b17217 	.word	0x42b17217
 8016674:	42b2d4fc 	.word	0x42b2d4fc
 8016678:	7149f2ca 	.word	0x7149f2ca

0801667c <__ieee754_expf>:
 801667c:	ee10 2a10 	vmov	r2, s0
 8016680:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016684:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016688:	d902      	bls.n	8016690 <__ieee754_expf+0x14>
 801668a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801668e:	4770      	bx	lr
 8016690:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8016694:	d106      	bne.n	80166a4 <__ieee754_expf+0x28>
 8016696:	eddf 7a51 	vldr	s15, [pc, #324]	; 80167dc <__ieee754_expf+0x160>
 801669a:	2b00      	cmp	r3, #0
 801669c:	bf18      	it	ne
 801669e:	eeb0 0a67 	vmovne.f32	s0, s15
 80166a2:	4770      	bx	lr
 80166a4:	484e      	ldr	r0, [pc, #312]	; (80167e0 <__ieee754_expf+0x164>)
 80166a6:	4282      	cmp	r2, r0
 80166a8:	dd04      	ble.n	80166b4 <__ieee754_expf+0x38>
 80166aa:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80167e4 <__ieee754_expf+0x168>
 80166ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80166b2:	4770      	bx	lr
 80166b4:	2a00      	cmp	r2, #0
 80166b6:	da03      	bge.n	80166c0 <__ieee754_expf+0x44>
 80166b8:	4a4b      	ldr	r2, [pc, #300]	; (80167e8 <__ieee754_expf+0x16c>)
 80166ba:	4291      	cmp	r1, r2
 80166bc:	f200 808a 	bhi.w	80167d4 <__ieee754_expf+0x158>
 80166c0:	4a4a      	ldr	r2, [pc, #296]	; (80167ec <__ieee754_expf+0x170>)
 80166c2:	4291      	cmp	r1, r2
 80166c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80166c8:	d954      	bls.n	8016774 <__ieee754_expf+0xf8>
 80166ca:	4a49      	ldr	r2, [pc, #292]	; (80167f0 <__ieee754_expf+0x174>)
 80166cc:	4291      	cmp	r1, r2
 80166ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80166d2:	d836      	bhi.n	8016742 <__ieee754_expf+0xc6>
 80166d4:	4947      	ldr	r1, [pc, #284]	; (80167f4 <__ieee754_expf+0x178>)
 80166d6:	4411      	add	r1, r2
 80166d8:	ed91 7a00 	vldr	s14, [r1]
 80166dc:	4946      	ldr	r1, [pc, #280]	; (80167f8 <__ieee754_expf+0x17c>)
 80166de:	440a      	add	r2, r1
 80166e0:	edd2 7a00 	vldr	s15, [r2]
 80166e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80166e8:	f1c3 0201 	rsb	r2, r3, #1
 80166ec:	1ad2      	subs	r2, r2, r3
 80166ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80166f2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80166f6:	eddf 5a41 	vldr	s11, [pc, #260]	; 80167fc <__ieee754_expf+0x180>
 80166fa:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8016800 <__ieee754_expf+0x184>
 80166fe:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8016702:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016804 <__ieee754_expf+0x188>
 8016706:	eee5 5a26 	vfma.f32	s11, s10, s13
 801670a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8016808 <__ieee754_expf+0x18c>
 801670e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8016712:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801680c <__ieee754_expf+0x190>
 8016716:	eee5 5a26 	vfma.f32	s11, s10, s13
 801671a:	eeb0 5a40 	vmov.f32	s10, s0
 801671e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8016722:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016726:	eef0 6a45 	vmov.f32	s13, s10
 801672a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801672e:	bb92      	cbnz	r2, 8016796 <__ieee754_expf+0x11a>
 8016730:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8016734:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8016738:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801673c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8016740:	4770      	bx	lr
 8016742:	4b33      	ldr	r3, [pc, #204]	; (8016810 <__ieee754_expf+0x194>)
 8016744:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016814 <__ieee754_expf+0x198>
 8016748:	4413      	add	r3, r2
 801674a:	edd3 7a00 	vldr	s15, [r3]
 801674e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016752:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8016818 <__ieee754_expf+0x19c>
 8016756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801675a:	ee17 2a90 	vmov	r2, s15
 801675e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016762:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016766:	eeb0 7a40 	vmov.f32	s14, s0
 801676a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801681c <__ieee754_expf+0x1a0>
 801676e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016772:	e7bc      	b.n	80166ee <__ieee754_expf+0x72>
 8016774:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8016778:	d20b      	bcs.n	8016792 <__ieee754_expf+0x116>
 801677a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80167e4 <__ieee754_expf+0x168>
 801677e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016782:	eef4 6ac6 	vcmpe.f32	s13, s12
 8016786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678a:	dd02      	ble.n	8016792 <__ieee754_expf+0x116>
 801678c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8016790:	4770      	bx	lr
 8016792:	2200      	movs	r2, #0
 8016794:	e7ad      	b.n	80166f2 <__ieee754_expf+0x76>
 8016796:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801679a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801679e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80167a2:	bfb8      	it	lt
 80167a4:	3264      	addlt	r2, #100	; 0x64
 80167a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80167aa:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80167ae:	ee76 7a40 	vsub.f32	s15, s12, s0
 80167b2:	ee17 3a90 	vmov	r3, s15
 80167b6:	bfab      	itete	ge
 80167b8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80167bc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80167c0:	ee00 3a10 	vmovge	s0, r3
 80167c4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8016820 <__ieee754_expf+0x1a4>
 80167c8:	bfbc      	itt	lt
 80167ca:	ee00 3a10 	vmovlt	s0, r3
 80167ce:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80167d2:	4770      	bx	lr
 80167d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80167dc <__ieee754_expf+0x160>
 80167d8:	4770      	bx	lr
 80167da:	bf00      	nop
 80167dc:	00000000 	.word	0x00000000
 80167e0:	42b17217 	.word	0x42b17217
 80167e4:	7149f2ca 	.word	0x7149f2ca
 80167e8:	42cff1b5 	.word	0x42cff1b5
 80167ec:	3eb17218 	.word	0x3eb17218
 80167f0:	3f851591 	.word	0x3f851591
 80167f4:	0814fab8 	.word	0x0814fab8
 80167f8:	0814fac0 	.word	0x0814fac0
 80167fc:	3331bb4c 	.word	0x3331bb4c
 8016800:	b5ddea0e 	.word	0xb5ddea0e
 8016804:	388ab355 	.word	0x388ab355
 8016808:	bb360b61 	.word	0xbb360b61
 801680c:	3e2aaaab 	.word	0x3e2aaaab
 8016810:	0814fab0 	.word	0x0814fab0
 8016814:	3fb8aa3b 	.word	0x3fb8aa3b
 8016818:	3f317180 	.word	0x3f317180
 801681c:	3717f7d1 	.word	0x3717f7d1
 8016820:	0d800000 	.word	0x0d800000

08016824 <__ieee754_fmodf>:
 8016824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016826:	ee10 6a90 	vmov	r6, s1
 801682a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801682e:	ee10 3a10 	vmov	r3, s0
 8016832:	d009      	beq.n	8016848 <__ieee754_fmodf+0x24>
 8016834:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016838:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801683c:	ee10 7a10 	vmov	r7, s0
 8016840:	da02      	bge.n	8016848 <__ieee754_fmodf+0x24>
 8016842:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016846:	dd0a      	ble.n	801685e <__ieee754_fmodf+0x3a>
 8016848:	ee07 3a90 	vmov	s15, r3
 801684c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8016850:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8016854:	ee17 3a90 	vmov	r3, s15
 8016858:	ee00 3a10 	vmov	s0, r3
 801685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801685e:	42a9      	cmp	r1, r5
 8016860:	dbfa      	blt.n	8016858 <__ieee754_fmodf+0x34>
 8016862:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8016866:	d105      	bne.n	8016874 <__ieee754_fmodf+0x50>
 8016868:	4a30      	ldr	r2, [pc, #192]	; (801692c <__ieee754_fmodf+0x108>)
 801686a:	0fe3      	lsrs	r3, r4, #31
 801686c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	e7f1      	b.n	8016858 <__ieee754_fmodf+0x34>
 8016874:	4b2e      	ldr	r3, [pc, #184]	; (8016930 <__ieee754_fmodf+0x10c>)
 8016876:	4299      	cmp	r1, r3
 8016878:	dc3e      	bgt.n	80168f8 <__ieee754_fmodf+0xd4>
 801687a:	020a      	lsls	r2, r1, #8
 801687c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8016880:	2a00      	cmp	r2, #0
 8016882:	dc36      	bgt.n	80168f2 <__ieee754_fmodf+0xce>
 8016884:	429d      	cmp	r5, r3
 8016886:	dc3a      	bgt.n	80168fe <__ieee754_fmodf+0xda>
 8016888:	022b      	lsls	r3, r5, #8
 801688a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	f102 32ff 	add.w	r2, r2, #4294967295
 8016894:	d5fb      	bpl.n	801688e <__ieee754_fmodf+0x6a>
 8016896:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801689a:	bfbb      	ittet	lt
 801689c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80168a0:	1a1b      	sublt	r3, r3, r0
 80168a2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80168a6:	4099      	lsllt	r1, r3
 80168a8:	bfa8      	it	ge
 80168aa:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80168ae:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80168b2:	bfb5      	itete	lt
 80168b4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80168b8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80168bc:	1a9b      	sublt	r3, r3, r2
 80168be:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80168c2:	bfb8      	it	lt
 80168c4:	409d      	lsllt	r5, r3
 80168c6:	1a80      	subs	r0, r0, r2
 80168c8:	1b4b      	subs	r3, r1, r5
 80168ca:	b9d8      	cbnz	r0, 8016904 <__ieee754_fmodf+0xe0>
 80168cc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80168d0:	bf28      	it	cs
 80168d2:	460b      	movcs	r3, r1
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d0c7      	beq.n	8016868 <__ieee754_fmodf+0x44>
 80168d8:	4915      	ldr	r1, [pc, #84]	; (8016930 <__ieee754_fmodf+0x10c>)
 80168da:	428b      	cmp	r3, r1
 80168dc:	dd1a      	ble.n	8016914 <__ieee754_fmodf+0xf0>
 80168de:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80168e2:	db1a      	blt.n	801691a <__ieee754_fmodf+0xf6>
 80168e4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80168e8:	4323      	orrs	r3, r4
 80168ea:	327f      	adds	r2, #127	; 0x7f
 80168ec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80168f0:	e7b2      	b.n	8016858 <__ieee754_fmodf+0x34>
 80168f2:	3801      	subs	r0, #1
 80168f4:	0052      	lsls	r2, r2, #1
 80168f6:	e7c3      	b.n	8016880 <__ieee754_fmodf+0x5c>
 80168f8:	15c8      	asrs	r0, r1, #23
 80168fa:	387f      	subs	r0, #127	; 0x7f
 80168fc:	e7c2      	b.n	8016884 <__ieee754_fmodf+0x60>
 80168fe:	15ea      	asrs	r2, r5, #23
 8016900:	3a7f      	subs	r2, #127	; 0x7f
 8016902:	e7c8      	b.n	8016896 <__ieee754_fmodf+0x72>
 8016904:	2b00      	cmp	r3, #0
 8016906:	da02      	bge.n	801690e <__ieee754_fmodf+0xea>
 8016908:	0049      	lsls	r1, r1, #1
 801690a:	3801      	subs	r0, #1
 801690c:	e7dc      	b.n	80168c8 <__ieee754_fmodf+0xa4>
 801690e:	d0ab      	beq.n	8016868 <__ieee754_fmodf+0x44>
 8016910:	0059      	lsls	r1, r3, #1
 8016912:	e7fa      	b.n	801690a <__ieee754_fmodf+0xe6>
 8016914:	005b      	lsls	r3, r3, #1
 8016916:	3a01      	subs	r2, #1
 8016918:	e7df      	b.n	80168da <__ieee754_fmodf+0xb6>
 801691a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801691e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016922:	3282      	adds	r2, #130	; 0x82
 8016924:	4113      	asrs	r3, r2
 8016926:	4323      	orrs	r3, r4
 8016928:	e796      	b.n	8016858 <__ieee754_fmodf+0x34>
 801692a:	bf00      	nop
 801692c:	0814fac8 	.word	0x0814fac8
 8016930:	007fffff 	.word	0x007fffff

08016934 <__ieee754_logf>:
 8016934:	ee10 3a10 	vmov	r3, s0
 8016938:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801693c:	d106      	bne.n	801694c <__ieee754_logf+0x18>
 801693e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016ad4 <__ieee754_logf+0x1a0>
 8016942:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016ad8 <__ieee754_logf+0x1a4>
 8016946:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801694a:	4770      	bx	lr
 801694c:	2b00      	cmp	r3, #0
 801694e:	da02      	bge.n	8016956 <__ieee754_logf+0x22>
 8016950:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016954:	e7f5      	b.n	8016942 <__ieee754_logf+0xe>
 8016956:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801695a:	db02      	blt.n	8016962 <__ieee754_logf+0x2e>
 801695c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016960:	4770      	bx	lr
 8016962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016966:	bfbf      	itttt	lt
 8016968:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016adc <__ieee754_logf+0x1a8>
 801696c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016970:	f06f 0118 	mvnlt.w	r1, #24
 8016974:	ee17 3a90 	vmovlt	r3, s15
 8016978:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801697c:	bfa8      	it	ge
 801697e:	2100      	movge	r1, #0
 8016980:	3a7f      	subs	r2, #127	; 0x7f
 8016982:	440a      	add	r2, r1
 8016984:	4956      	ldr	r1, [pc, #344]	; (8016ae0 <__ieee754_logf+0x1ac>)
 8016986:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801698a:	4419      	add	r1, r3
 801698c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8016990:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8016994:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016998:	4319      	orrs	r1, r3
 801699a:	ee07 1a90 	vmov	s15, r1
 801699e:	f103 010f 	add.w	r1, r3, #15
 80169a2:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80169a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80169aa:	290f      	cmp	r1, #15
 80169ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80169b0:	dc31      	bgt.n	8016a16 <__ieee754_logf+0xe2>
 80169b2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80169b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ba:	d10f      	bne.n	80169dc <__ieee754_logf+0xa8>
 80169bc:	2a00      	cmp	r2, #0
 80169be:	f000 8085 	beq.w	8016acc <__ieee754_logf+0x198>
 80169c2:	ee07 2a90 	vmov	s15, r2
 80169c6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8016ae4 <__ieee754_logf+0x1b0>
 80169ca:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8016ae8 <__ieee754_logf+0x1b4>
 80169ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80169d6:	eea7 0a87 	vfma.f32	s0, s15, s14
 80169da:	4770      	bx	lr
 80169dc:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016aec <__ieee754_logf+0x1b8>
 80169e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80169e4:	eea0 7a67 	vfms.f32	s14, s0, s15
 80169e8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80169ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80169f0:	b912      	cbnz	r2, 80169f8 <__ieee754_logf+0xc4>
 80169f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80169f6:	4770      	bx	lr
 80169f8:	ee07 2a90 	vmov	s15, r2
 80169fc:	eddf 6a39 	vldr	s13, [pc, #228]	; 8016ae4 <__ieee754_logf+0x1b0>
 8016a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a04:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016a08:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016a0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016ae8 <__ieee754_logf+0x1b4>
 8016a10:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016a14:	4770      	bx	lr
 8016a16:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016a1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016a1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016af0 <__ieee754_logf+0x1bc>
 8016a22:	eddf 4a34 	vldr	s9, [pc, #208]	; 8016af4 <__ieee754_logf+0x1c0>
 8016a26:	4934      	ldr	r1, [pc, #208]	; (8016af8 <__ieee754_logf+0x1c4>)
 8016a28:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016a2c:	4419      	add	r1, r3
 8016a2e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016a32:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016a36:	430b      	orrs	r3, r1
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	ee07 2a90 	vmov	s15, r2
 8016a3e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016a42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016a46:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016a4a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016afc <__ieee754_logf+0x1c8>
 8016a4e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016a52:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016b00 <__ieee754_logf+0x1cc>
 8016a56:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016a5a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016b04 <__ieee754_logf+0x1d0>
 8016a5e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016a62:	eddf 4a29 	vldr	s9, [pc, #164]	; 8016b08 <__ieee754_logf+0x1d4>
 8016a66:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016a6a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016b0c <__ieee754_logf+0x1d8>
 8016a6e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016a72:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016a76:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016a7a:	dd1c      	ble.n	8016ab6 <__ieee754_logf+0x182>
 8016a7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016a80:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016a84:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016a90:	b922      	cbnz	r2, 8016a9c <__ieee754_logf+0x168>
 8016a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016a96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a9a:	4770      	bx	lr
 8016a9c:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8016ae4 <__ieee754_logf+0x1b0>
 8016aa0:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016aa8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016aac:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016ae8 <__ieee754_logf+0x1b4>
 8016ab0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016ab4:	4770      	bx	lr
 8016ab6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016aba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016abe:	2a00      	cmp	r2, #0
 8016ac0:	d0e9      	beq.n	8016a96 <__ieee754_logf+0x162>
 8016ac2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016ae4 <__ieee754_logf+0x1b0>
 8016ac6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016aca:	e7ed      	b.n	8016aa8 <__ieee754_logf+0x174>
 8016acc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016ad8 <__ieee754_logf+0x1a4>
 8016ad0:	4770      	bx	lr
 8016ad2:	bf00      	nop
 8016ad4:	cc000000 	.word	0xcc000000
 8016ad8:	00000000 	.word	0x00000000
 8016adc:	4c000000 	.word	0x4c000000
 8016ae0:	004afb20 	.word	0x004afb20
 8016ae4:	3717f7d1 	.word	0x3717f7d1
 8016ae8:	3f317180 	.word	0x3f317180
 8016aec:	3eaaaaab 	.word	0x3eaaaaab
 8016af0:	3e1cd04f 	.word	0x3e1cd04f
 8016af4:	3e178897 	.word	0x3e178897
 8016af8:	ffcf5c30 	.word	0xffcf5c30
 8016afc:	3e638e29 	.word	0x3e638e29
 8016b00:	3ecccccd 	.word	0x3ecccccd
 8016b04:	3e3a3325 	.word	0x3e3a3325
 8016b08:	3e924925 	.word	0x3e924925
 8016b0c:	3f2aaaab 	.word	0x3f2aaaab

08016b10 <__ieee754_powf>:
 8016b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b14:	ee10 5a90 	vmov	r5, s1
 8016b18:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8016b1c:	ed2d 8b02 	vpush	{d8}
 8016b20:	eeb0 8a40 	vmov.f32	s16, s0
 8016b24:	eef0 8a60 	vmov.f32	s17, s1
 8016b28:	f000 8293 	beq.w	8017052 <__ieee754_powf+0x542>
 8016b2c:	ee10 8a10 	vmov	r8, s0
 8016b30:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8016b34:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016b38:	dc06      	bgt.n	8016b48 <__ieee754_powf+0x38>
 8016b3a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016b3e:	dd0a      	ble.n	8016b56 <__ieee754_powf+0x46>
 8016b40:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016b44:	f000 8285 	beq.w	8017052 <__ieee754_powf+0x542>
 8016b48:	ecbd 8b02 	vpop	{d8}
 8016b4c:	48d9      	ldr	r0, [pc, #868]	; (8016eb4 <__ieee754_powf+0x3a4>)
 8016b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b52:	f7fa bc7d 	b.w	8011450 <nanf>
 8016b56:	f1b8 0f00 	cmp.w	r8, #0
 8016b5a:	da1d      	bge.n	8016b98 <__ieee754_powf+0x88>
 8016b5c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8016b60:	da2c      	bge.n	8016bbc <__ieee754_powf+0xac>
 8016b62:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016b66:	db30      	blt.n	8016bca <__ieee754_powf+0xba>
 8016b68:	15fb      	asrs	r3, r7, #23
 8016b6a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016b6e:	fa47 f603 	asr.w	r6, r7, r3
 8016b72:	fa06 f303 	lsl.w	r3, r6, r3
 8016b76:	42bb      	cmp	r3, r7
 8016b78:	d127      	bne.n	8016bca <__ieee754_powf+0xba>
 8016b7a:	f006 0601 	and.w	r6, r6, #1
 8016b7e:	f1c6 0602 	rsb	r6, r6, #2
 8016b82:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8016b86:	d122      	bne.n	8016bce <__ieee754_powf+0xbe>
 8016b88:	2d00      	cmp	r5, #0
 8016b8a:	f280 8268 	bge.w	801705e <__ieee754_powf+0x54e>
 8016b8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b92:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8016b96:	e00d      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016b98:	2600      	movs	r6, #0
 8016b9a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8016b9e:	d1f0      	bne.n	8016b82 <__ieee754_powf+0x72>
 8016ba0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016ba4:	f000 8255 	beq.w	8017052 <__ieee754_powf+0x542>
 8016ba8:	dd0a      	ble.n	8016bc0 <__ieee754_powf+0xb0>
 8016baa:	2d00      	cmp	r5, #0
 8016bac:	f280 8254 	bge.w	8017058 <__ieee754_powf+0x548>
 8016bb0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8016eb8 <__ieee754_powf+0x3a8>
 8016bb4:	ecbd 8b02 	vpop	{d8}
 8016bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bbc:	2602      	movs	r6, #2
 8016bbe:	e7ec      	b.n	8016b9a <__ieee754_powf+0x8a>
 8016bc0:	2d00      	cmp	r5, #0
 8016bc2:	daf5      	bge.n	8016bb0 <__ieee754_powf+0xa0>
 8016bc4:	eeb1 0a68 	vneg.f32	s0, s17
 8016bc8:	e7f4      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016bca:	2600      	movs	r6, #0
 8016bcc:	e7d9      	b.n	8016b82 <__ieee754_powf+0x72>
 8016bce:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8016bd2:	d102      	bne.n	8016bda <__ieee754_powf+0xca>
 8016bd4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8016bd8:	e7ec      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016bda:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8016bde:	eeb0 0a48 	vmov.f32	s0, s16
 8016be2:	d108      	bne.n	8016bf6 <__ieee754_powf+0xe6>
 8016be4:	f1b8 0f00 	cmp.w	r8, #0
 8016be8:	db05      	blt.n	8016bf6 <__ieee754_powf+0xe6>
 8016bea:	ecbd 8b02 	vpop	{d8}
 8016bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bf2:	f000 bbe7 	b.w	80173c4 <__ieee754_sqrtf>
 8016bf6:	f7fe fb41 	bl	801527c <fabsf>
 8016bfa:	b124      	cbz	r4, 8016c06 <__ieee754_powf+0xf6>
 8016bfc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8016c00:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016c04:	d117      	bne.n	8016c36 <__ieee754_powf+0x126>
 8016c06:	2d00      	cmp	r5, #0
 8016c08:	bfbc      	itt	lt
 8016c0a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8016c0e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016c12:	f1b8 0f00 	cmp.w	r8, #0
 8016c16:	dacd      	bge.n	8016bb4 <__ieee754_powf+0xa4>
 8016c18:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8016c1c:	ea54 0306 	orrs.w	r3, r4, r6
 8016c20:	d104      	bne.n	8016c2c <__ieee754_powf+0x11c>
 8016c22:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016c26:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016c2a:	e7c3      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016c2c:	2e01      	cmp	r6, #1
 8016c2e:	d1c1      	bne.n	8016bb4 <__ieee754_powf+0xa4>
 8016c30:	eeb1 0a40 	vneg.f32	s0, s0
 8016c34:	e7be      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016c36:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8016c3a:	3801      	subs	r0, #1
 8016c3c:	ea56 0300 	orrs.w	r3, r6, r0
 8016c40:	d104      	bne.n	8016c4c <__ieee754_powf+0x13c>
 8016c42:	ee38 8a48 	vsub.f32	s16, s16, s16
 8016c46:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016c4a:	e7b3      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016c4c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8016c50:	dd6d      	ble.n	8016d2e <__ieee754_powf+0x21e>
 8016c52:	4b9a      	ldr	r3, [pc, #616]	; (8016ebc <__ieee754_powf+0x3ac>)
 8016c54:	429c      	cmp	r4, r3
 8016c56:	dc06      	bgt.n	8016c66 <__ieee754_powf+0x156>
 8016c58:	2d00      	cmp	r5, #0
 8016c5a:	daa9      	bge.n	8016bb0 <__ieee754_powf+0xa0>
 8016c5c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016ec0 <__ieee754_powf+0x3b0>
 8016c60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016c64:	e7a6      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016c66:	4b97      	ldr	r3, [pc, #604]	; (8016ec4 <__ieee754_powf+0x3b4>)
 8016c68:	429c      	cmp	r4, r3
 8016c6a:	dd02      	ble.n	8016c72 <__ieee754_powf+0x162>
 8016c6c:	2d00      	cmp	r5, #0
 8016c6e:	dcf5      	bgt.n	8016c5c <__ieee754_powf+0x14c>
 8016c70:	e79e      	b.n	8016bb0 <__ieee754_powf+0xa0>
 8016c72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016c76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016c7a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8016ec8 <__ieee754_powf+0x3b8>
 8016c7e:	eef1 6a40 	vneg.f32	s13, s0
 8016c82:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016c86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016c8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c8e:	eee7 7a40 	vfms.f32	s15, s14, s0
 8016c92:	ee60 0a00 	vmul.f32	s1, s0, s0
 8016c96:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8016ecc <__ieee754_powf+0x3bc>
 8016c9a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8016c9e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8016ed0 <__ieee754_powf+0x3c0>
 8016ca2:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8016ca6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016caa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016ed4 <__ieee754_powf+0x3c4>
 8016cae:	eeb0 6a67 	vmov.f32	s12, s15
 8016cb2:	eea0 6a07 	vfma.f32	s12, s0, s14
 8016cb6:	ee16 3a10 	vmov	r3, s12
 8016cba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016cbe:	f023 030f 	bic.w	r3, r3, #15
 8016cc2:	ee00 3a90 	vmov	s1, r3
 8016cc6:	eee6 0a87 	vfma.f32	s1, s13, s14
 8016cca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016cce:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8016cd2:	f025 050f 	bic.w	r5, r5, #15
 8016cd6:	ee07 5a10 	vmov	s14, r5
 8016cda:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8016cde:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016ce2:	ee07 3a90 	vmov	s15, r3
 8016ce6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8016cea:	3e01      	subs	r6, #1
 8016cec:	ea56 0200 	orrs.w	r2, r6, r0
 8016cf0:	ee07 5a10 	vmov	s14, r5
 8016cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016cf8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016cfc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8016d00:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016d04:	ee17 4a10 	vmov	r4, s14
 8016d08:	bf08      	it	eq
 8016d0a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8016d0e:	2c00      	cmp	r4, #0
 8016d10:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016d14:	f340 8184 	ble.w	8017020 <__ieee754_powf+0x510>
 8016d18:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8016d1c:	f340 80fc 	ble.w	8016f18 <__ieee754_powf+0x408>
 8016d20:	eddf 7a67 	vldr	s15, [pc, #412]	; 8016ec0 <__ieee754_powf+0x3b0>
 8016d24:	ee28 0a27 	vmul.f32	s0, s16, s15
 8016d28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d2c:	e742      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8016d2e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8016d32:	bfbf      	itttt	lt
 8016d34:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8016ed8 <__ieee754_powf+0x3c8>
 8016d38:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016d3c:	f06f 0217 	mvnlt.w	r2, #23
 8016d40:	ee17 4a90 	vmovlt	r4, s15
 8016d44:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8016d48:	bfa8      	it	ge
 8016d4a:	2200      	movge	r2, #0
 8016d4c:	3b7f      	subs	r3, #127	; 0x7f
 8016d4e:	4413      	add	r3, r2
 8016d50:	4a62      	ldr	r2, [pc, #392]	; (8016edc <__ieee754_powf+0x3cc>)
 8016d52:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8016d56:	4294      	cmp	r4, r2
 8016d58:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8016d5c:	dd06      	ble.n	8016d6c <__ieee754_powf+0x25c>
 8016d5e:	4a60      	ldr	r2, [pc, #384]	; (8016ee0 <__ieee754_powf+0x3d0>)
 8016d60:	4294      	cmp	r4, r2
 8016d62:	f340 80a5 	ble.w	8016eb0 <__ieee754_powf+0x3a0>
 8016d66:	3301      	adds	r3, #1
 8016d68:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8016d6c:	2400      	movs	r4, #0
 8016d6e:	4a5d      	ldr	r2, [pc, #372]	; (8016ee4 <__ieee754_powf+0x3d4>)
 8016d70:	00a7      	lsls	r7, r4, #2
 8016d72:	443a      	add	r2, r7
 8016d74:	ee07 1a90 	vmov	s15, r1
 8016d78:	ed92 7a00 	vldr	s14, [r2]
 8016d7c:	4a5a      	ldr	r2, [pc, #360]	; (8016ee8 <__ieee754_powf+0x3d8>)
 8016d7e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8016d82:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8016d86:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016d8a:	1049      	asrs	r1, r1, #1
 8016d8c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8016d90:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8016d94:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8016d98:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8016d9c:	ee06 1a10 	vmov	s12, r1
 8016da0:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8016da4:	ee14 ca90 	vmov	ip, s9
 8016da8:	ea02 0c0c 	and.w	ip, r2, ip
 8016dac:	ee05 ca10 	vmov	s10, ip
 8016db0:	eeb1 4a45 	vneg.f32	s8, s10
 8016db4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8016db8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8016dbc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016eec <__ieee754_powf+0x3dc>
 8016dc0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016dc4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8016dc8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8016dcc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8016dd0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8016dd4:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016ef0 <__ieee754_powf+0x3e0>
 8016dd8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016ddc:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016ef4 <__ieee754_powf+0x3e4>
 8016de0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016de4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016ec8 <__ieee754_powf+0x3b8>
 8016de8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016dec:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016ef8 <__ieee754_powf+0x3e8>
 8016df0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016df4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016efc <__ieee754_powf+0x3ec>
 8016df8:	ee75 6a24 	vadd.f32	s13, s10, s9
 8016dfc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016e00:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016e04:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8016e08:	eef0 7a65 	vmov.f32	s15, s11
 8016e0c:	eee3 6a87 	vfma.f32	s13, s7, s14
 8016e10:	eee5 7a05 	vfma.f32	s15, s10, s10
 8016e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e18:	ee17 1a90 	vmov	r1, s15
 8016e1c:	4011      	ands	r1, r2
 8016e1e:	ee07 1a90 	vmov	s15, r1
 8016e22:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8016e26:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016f00 <__ieee754_powf+0x3f0>
 8016e2a:	eea4 7a05 	vfma.f32	s14, s8, s10
 8016e2e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016e32:	ee27 7a24 	vmul.f32	s14, s14, s9
 8016e36:	eea7 7a86 	vfma.f32	s14, s15, s12
 8016e3a:	eeb0 6a47 	vmov.f32	s12, s14
 8016e3e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8016e42:	ee16 1a10 	vmov	r1, s12
 8016e46:	4011      	ands	r1, r2
 8016e48:	ee06 1a90 	vmov	s13, r1
 8016e4c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8016e50:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016f04 <__ieee754_powf+0x3f4>
 8016e54:	ee37 7a66 	vsub.f32	s14, s14, s13
 8016e58:	ee06 1a10 	vmov	s12, r1
 8016e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016e60:	eddf 7a29 	vldr	s15, [pc, #164]	; 8016f08 <__ieee754_powf+0x3f8>
 8016e64:	4929      	ldr	r1, [pc, #164]	; (8016f0c <__ieee754_powf+0x3fc>)
 8016e66:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016e6a:	4439      	add	r1, r7
 8016e6c:	edd1 7a00 	vldr	s15, [r1]
 8016e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e74:	ee07 3a90 	vmov	s15, r3
 8016e78:	eef0 0a47 	vmov.f32	s1, s14
 8016e7c:	4b24      	ldr	r3, [pc, #144]	; (8016f10 <__ieee754_powf+0x400>)
 8016e7e:	eee6 0a25 	vfma.f32	s1, s12, s11
 8016e82:	443b      	add	r3, r7
 8016e84:	ed93 5a00 	vldr	s10, [r3]
 8016e88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016e8c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8016e90:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8016e94:	ee17 3a90 	vmov	r3, s15
 8016e98:	4013      	ands	r3, r2
 8016e9a:	ee07 3a90 	vmov	s15, r3
 8016e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016ea2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8016ea6:	eee6 7a65 	vfms.f32	s15, s12, s11
 8016eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016eae:	e70e      	b.n	8016cce <__ieee754_powf+0x1be>
 8016eb0:	2401      	movs	r4, #1
 8016eb2:	e75c      	b.n	8016d6e <__ieee754_powf+0x25e>
 8016eb4:	0814f949 	.word	0x0814f949
 8016eb8:	00000000 	.word	0x00000000
 8016ebc:	3f7ffff7 	.word	0x3f7ffff7
 8016ec0:	7149f2ca 	.word	0x7149f2ca
 8016ec4:	3f800007 	.word	0x3f800007
 8016ec8:	3eaaaaab 	.word	0x3eaaaaab
 8016ecc:	36eca570 	.word	0x36eca570
 8016ed0:	3fb8aa3b 	.word	0x3fb8aa3b
 8016ed4:	3fb8aa00 	.word	0x3fb8aa00
 8016ed8:	4b800000 	.word	0x4b800000
 8016edc:	001cc471 	.word	0x001cc471
 8016ee0:	005db3d6 	.word	0x005db3d6
 8016ee4:	0814fad0 	.word	0x0814fad0
 8016ee8:	fffff000 	.word	0xfffff000
 8016eec:	3e6c3255 	.word	0x3e6c3255
 8016ef0:	3e53f142 	.word	0x3e53f142
 8016ef4:	3e8ba305 	.word	0x3e8ba305
 8016ef8:	3edb6db7 	.word	0x3edb6db7
 8016efc:	3f19999a 	.word	0x3f19999a
 8016f00:	3f763800 	.word	0x3f763800
 8016f04:	3f76384f 	.word	0x3f76384f
 8016f08:	369dc3a0 	.word	0x369dc3a0
 8016f0c:	0814fae0 	.word	0x0814fae0
 8016f10:	0814fad8 	.word	0x0814fad8
 8016f14:	3338aa3c 	.word	0x3338aa3c
 8016f18:	f040 8092 	bne.w	8017040 <__ieee754_powf+0x530>
 8016f1c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016f14 <__ieee754_powf+0x404>
 8016f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016f24:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8016f28:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f30:	f73f aef6 	bgt.w	8016d20 <__ieee754_powf+0x210>
 8016f34:	15db      	asrs	r3, r3, #23
 8016f36:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8016f3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8016f3e:	4103      	asrs	r3, r0
 8016f40:	4423      	add	r3, r4
 8016f42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016f46:	4947      	ldr	r1, [pc, #284]	; (8017064 <__ieee754_powf+0x554>)
 8016f48:	3a7f      	subs	r2, #127	; 0x7f
 8016f4a:	4111      	asrs	r1, r2
 8016f4c:	ea23 0101 	bic.w	r1, r3, r1
 8016f50:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8016f54:	ee07 1a10 	vmov	s14, r1
 8016f58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8016f5c:	f1c2 0217 	rsb	r2, r2, #23
 8016f60:	4110      	asrs	r0, r2
 8016f62:	2c00      	cmp	r4, #0
 8016f64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f68:	bfb8      	it	lt
 8016f6a:	4240      	neglt	r0, r0
 8016f6c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016f70:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8017068 <__ieee754_powf+0x558>
 8016f74:	ee17 3a10 	vmov	r3, s14
 8016f78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016f7c:	f023 030f 	bic.w	r3, r3, #15
 8016f80:	ee07 3a10 	vmov	s14, r3
 8016f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f88:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016f8c:	eddf 7a37 	vldr	s15, [pc, #220]	; 801706c <__ieee754_powf+0x55c>
 8016f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016f94:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8016f98:	eddf 6a35 	vldr	s13, [pc, #212]	; 8017070 <__ieee754_powf+0x560>
 8016f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8016fa0:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016fa4:	eeb0 6a40 	vmov.f32	s12, s0
 8016fa8:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016fac:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016fb0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016fb4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8017074 <__ieee754_powf+0x564>
 8016fb8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8017078 <__ieee754_powf+0x568>
 8016fbc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016fc0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801707c <__ieee754_powf+0x56c>
 8016fc4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016fc8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8017080 <__ieee754_powf+0x570>
 8016fcc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016fd0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8017084 <__ieee754_powf+0x574>
 8016fd4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016fd8:	eeb0 6a40 	vmov.f32	s12, s0
 8016fdc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8016fe0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016fe4:	eeb0 7a46 	vmov.f32	s14, s12
 8016fe8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016fec:	ee20 6a06 	vmul.f32	s12, s0, s12
 8016ff0:	eee0 7a27 	vfma.f32	s15, s0, s15
 8016ff4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ffc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017004:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017008:	ee10 3a10 	vmov	r3, s0
 801700c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8017010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017014:	da1a      	bge.n	801704c <__ieee754_powf+0x53c>
 8017016:	f000 ff7f 	bl	8017f18 <scalbnf>
 801701a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801701e:	e5c9      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8017020:	4a19      	ldr	r2, [pc, #100]	; (8017088 <__ieee754_powf+0x578>)
 8017022:	4293      	cmp	r3, r2
 8017024:	dd02      	ble.n	801702c <__ieee754_powf+0x51c>
 8017026:	eddf 7a19 	vldr	s15, [pc, #100]	; 801708c <__ieee754_powf+0x57c>
 801702a:	e67b      	b.n	8016d24 <__ieee754_powf+0x214>
 801702c:	d108      	bne.n	8017040 <__ieee754_powf+0x530>
 801702e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017032:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8017036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703a:	f6ff af7b 	blt.w	8016f34 <__ieee754_powf+0x424>
 801703e:	e7f2      	b.n	8017026 <__ieee754_powf+0x516>
 8017040:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8017044:	f73f af76 	bgt.w	8016f34 <__ieee754_powf+0x424>
 8017048:	2000      	movs	r0, #0
 801704a:	e78f      	b.n	8016f6c <__ieee754_powf+0x45c>
 801704c:	ee00 3a10 	vmov	s0, r3
 8017050:	e7e3      	b.n	801701a <__ieee754_powf+0x50a>
 8017052:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017056:	e5ad      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8017058:	eeb0 0a68 	vmov.f32	s0, s17
 801705c:	e5aa      	b.n	8016bb4 <__ieee754_powf+0xa4>
 801705e:	eeb0 0a48 	vmov.f32	s0, s16
 8017062:	e5a7      	b.n	8016bb4 <__ieee754_powf+0xa4>
 8017064:	007fffff 	.word	0x007fffff
 8017068:	3f317218 	.word	0x3f317218
 801706c:	35bfbe8c 	.word	0x35bfbe8c
 8017070:	3f317200 	.word	0x3f317200
 8017074:	3331bb4c 	.word	0x3331bb4c
 8017078:	b5ddea0e 	.word	0xb5ddea0e
 801707c:	388ab355 	.word	0x388ab355
 8017080:	bb360b61 	.word	0xbb360b61
 8017084:	3e2aaaab 	.word	0x3e2aaaab
 8017088:	43160000 	.word	0x43160000
 801708c:	0da24260 	.word	0x0da24260

08017090 <__ieee754_rem_pio2f>:
 8017090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017092:	ee10 6a10 	vmov	r6, s0
 8017096:	4b86      	ldr	r3, [pc, #536]	; (80172b0 <__ieee754_rem_pio2f+0x220>)
 8017098:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 801709c:	429c      	cmp	r4, r3
 801709e:	b087      	sub	sp, #28
 80170a0:	4605      	mov	r5, r0
 80170a2:	dc05      	bgt.n	80170b0 <__ieee754_rem_pio2f+0x20>
 80170a4:	2300      	movs	r3, #0
 80170a6:	ed85 0a00 	vstr	s0, [r5]
 80170aa:	6043      	str	r3, [r0, #4]
 80170ac:	2000      	movs	r0, #0
 80170ae:	e020      	b.n	80170f2 <__ieee754_rem_pio2f+0x62>
 80170b0:	4b80      	ldr	r3, [pc, #512]	; (80172b4 <__ieee754_rem_pio2f+0x224>)
 80170b2:	429c      	cmp	r4, r3
 80170b4:	dc38      	bgt.n	8017128 <__ieee754_rem_pio2f+0x98>
 80170b6:	2e00      	cmp	r6, #0
 80170b8:	f024 040f 	bic.w	r4, r4, #15
 80170bc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80172b8 <__ieee754_rem_pio2f+0x228>
 80170c0:	4b7e      	ldr	r3, [pc, #504]	; (80172bc <__ieee754_rem_pio2f+0x22c>)
 80170c2:	dd18      	ble.n	80170f6 <__ieee754_rem_pio2f+0x66>
 80170c4:	429c      	cmp	r4, r3
 80170c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80170ca:	bf09      	itett	eq
 80170cc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80172c0 <__ieee754_rem_pio2f+0x230>
 80170d0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80172c4 <__ieee754_rem_pio2f+0x234>
 80170d4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80170d8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80172c8 <__ieee754_rem_pio2f+0x238>
 80170dc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80170e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80170e4:	edc0 6a00 	vstr	s13, [r0]
 80170e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80170ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80170f0:	2001      	movs	r0, #1
 80170f2:	b007      	add	sp, #28
 80170f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80170f6:	429c      	cmp	r4, r3
 80170f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80170fc:	bf09      	itett	eq
 80170fe:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80172c0 <__ieee754_rem_pio2f+0x230>
 8017102:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80172c4 <__ieee754_rem_pio2f+0x234>
 8017106:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801710a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80172c8 <__ieee754_rem_pio2f+0x238>
 801710e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8017112:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017116:	edc0 6a00 	vstr	s13, [r0]
 801711a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801711e:	edc0 7a01 	vstr	s15, [r0, #4]
 8017122:	f04f 30ff 	mov.w	r0, #4294967295
 8017126:	e7e4      	b.n	80170f2 <__ieee754_rem_pio2f+0x62>
 8017128:	4b68      	ldr	r3, [pc, #416]	; (80172cc <__ieee754_rem_pio2f+0x23c>)
 801712a:	429c      	cmp	r4, r3
 801712c:	dc71      	bgt.n	8017212 <__ieee754_rem_pio2f+0x182>
 801712e:	f7fe f8a5 	bl	801527c <fabsf>
 8017132:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80172d0 <__ieee754_rem_pio2f+0x240>
 8017136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801713a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801713e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017142:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8017146:	ee17 0a90 	vmov	r0, s15
 801714a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80172b8 <__ieee754_rem_pio2f+0x228>
 801714e:	eeb1 7a46 	vneg.f32	s14, s12
 8017152:	eea7 0a27 	vfma.f32	s0, s14, s15
 8017156:	281f      	cmp	r0, #31
 8017158:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80172c4 <__ieee754_rem_pio2f+0x234>
 801715c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8017160:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017164:	ee16 3a90 	vmov	r3, s13
 8017168:	dc1c      	bgt.n	80171a4 <__ieee754_rem_pio2f+0x114>
 801716a:	1e47      	subs	r7, r0, #1
 801716c:	4959      	ldr	r1, [pc, #356]	; (80172d4 <__ieee754_rem_pio2f+0x244>)
 801716e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8017172:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8017176:	428a      	cmp	r2, r1
 8017178:	d014      	beq.n	80171a4 <__ieee754_rem_pio2f+0x114>
 801717a:	602b      	str	r3, [r5, #0]
 801717c:	ed95 7a00 	vldr	s14, [r5]
 8017180:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017184:	2e00      	cmp	r6, #0
 8017186:	ee30 0a67 	vsub.f32	s0, s0, s15
 801718a:	ed85 0a01 	vstr	s0, [r5, #4]
 801718e:	dab0      	bge.n	80170f2 <__ieee754_rem_pio2f+0x62>
 8017190:	eeb1 7a47 	vneg.f32	s14, s14
 8017194:	eeb1 0a40 	vneg.f32	s0, s0
 8017198:	ed85 7a00 	vstr	s14, [r5]
 801719c:	ed85 0a01 	vstr	s0, [r5, #4]
 80171a0:	4240      	negs	r0, r0
 80171a2:	e7a6      	b.n	80170f2 <__ieee754_rem_pio2f+0x62>
 80171a4:	15e4      	asrs	r4, r4, #23
 80171a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80171aa:	1aa2      	subs	r2, r4, r2
 80171ac:	2a08      	cmp	r2, #8
 80171ae:	dde4      	ble.n	801717a <__ieee754_rem_pio2f+0xea>
 80171b0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80172c0 <__ieee754_rem_pio2f+0x230>
 80171b4:	eef0 6a40 	vmov.f32	s13, s0
 80171b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80171bc:	ee30 0a66 	vsub.f32	s0, s0, s13
 80171c0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80171c4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80172c8 <__ieee754_rem_pio2f+0x238>
 80171c8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80171cc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80171d0:	eef0 7a40 	vmov.f32	s15, s0
 80171d4:	ee15 3a90 	vmov	r3, s11
 80171d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80171dc:	1aa4      	subs	r4, r4, r2
 80171de:	2c19      	cmp	r4, #25
 80171e0:	dc04      	bgt.n	80171ec <__ieee754_rem_pio2f+0x15c>
 80171e2:	edc5 5a00 	vstr	s11, [r5]
 80171e6:	eeb0 0a66 	vmov.f32	s0, s13
 80171ea:	e7c7      	b.n	801717c <__ieee754_rem_pio2f+0xec>
 80171ec:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80172d8 <__ieee754_rem_pio2f+0x248>
 80171f0:	eeb0 0a66 	vmov.f32	s0, s13
 80171f4:	eea7 0a25 	vfma.f32	s0, s14, s11
 80171f8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80171fc:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017200:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80172dc <__ieee754_rem_pio2f+0x24c>
 8017204:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8017208:	ee30 7a67 	vsub.f32	s14, s0, s15
 801720c:	ed85 7a00 	vstr	s14, [r5]
 8017210:	e7b4      	b.n	801717c <__ieee754_rem_pio2f+0xec>
 8017212:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017216:	db06      	blt.n	8017226 <__ieee754_rem_pio2f+0x196>
 8017218:	ee70 7a40 	vsub.f32	s15, s0, s0
 801721c:	edc0 7a01 	vstr	s15, [r0, #4]
 8017220:	edc0 7a00 	vstr	s15, [r0]
 8017224:	e742      	b.n	80170ac <__ieee754_rem_pio2f+0x1c>
 8017226:	15e2      	asrs	r2, r4, #23
 8017228:	3a86      	subs	r2, #134	; 0x86
 801722a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801722e:	ee07 3a90 	vmov	s15, r3
 8017232:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017236:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80172e0 <__ieee754_rem_pio2f+0x250>
 801723a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801723e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017242:	ed8d 7a03 	vstr	s14, [sp, #12]
 8017246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801724a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801724e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017256:	ed8d 7a04 	vstr	s14, [sp, #16]
 801725a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801725e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017266:	edcd 7a05 	vstr	s15, [sp, #20]
 801726a:	d11e      	bne.n	80172aa <__ieee754_rem_pio2f+0x21a>
 801726c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017274:	bf0c      	ite	eq
 8017276:	2301      	moveq	r3, #1
 8017278:	2302      	movne	r3, #2
 801727a:	491a      	ldr	r1, [pc, #104]	; (80172e4 <__ieee754_rem_pio2f+0x254>)
 801727c:	9101      	str	r1, [sp, #4]
 801727e:	2102      	movs	r1, #2
 8017280:	9100      	str	r1, [sp, #0]
 8017282:	a803      	add	r0, sp, #12
 8017284:	4629      	mov	r1, r5
 8017286:	f000 f8ff 	bl	8017488 <__kernel_rem_pio2f>
 801728a:	2e00      	cmp	r6, #0
 801728c:	f6bf af31 	bge.w	80170f2 <__ieee754_rem_pio2f+0x62>
 8017290:	edd5 7a00 	vldr	s15, [r5]
 8017294:	eef1 7a67 	vneg.f32	s15, s15
 8017298:	edc5 7a00 	vstr	s15, [r5]
 801729c:	edd5 7a01 	vldr	s15, [r5, #4]
 80172a0:	eef1 7a67 	vneg.f32	s15, s15
 80172a4:	edc5 7a01 	vstr	s15, [r5, #4]
 80172a8:	e77a      	b.n	80171a0 <__ieee754_rem_pio2f+0x110>
 80172aa:	2303      	movs	r3, #3
 80172ac:	e7e5      	b.n	801727a <__ieee754_rem_pio2f+0x1ea>
 80172ae:	bf00      	nop
 80172b0:	3f490fd8 	.word	0x3f490fd8
 80172b4:	4016cbe3 	.word	0x4016cbe3
 80172b8:	3fc90f80 	.word	0x3fc90f80
 80172bc:	3fc90fd0 	.word	0x3fc90fd0
 80172c0:	37354400 	.word	0x37354400
 80172c4:	37354443 	.word	0x37354443
 80172c8:	2e85a308 	.word	0x2e85a308
 80172cc:	43490f80 	.word	0x43490f80
 80172d0:	3f22f984 	.word	0x3f22f984
 80172d4:	0814fae8 	.word	0x0814fae8
 80172d8:	2e85a300 	.word	0x2e85a300
 80172dc:	248d3132 	.word	0x248d3132
 80172e0:	43800000 	.word	0x43800000
 80172e4:	0814fb68 	.word	0x0814fb68

080172e8 <__ieee754_sinhf>:
 80172e8:	b510      	push	{r4, lr}
 80172ea:	ee10 3a10 	vmov	r3, s0
 80172ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80172f2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80172f6:	ed2d 8b02 	vpush	{d8}
 80172fa:	eef0 7a40 	vmov.f32	s15, s0
 80172fe:	db06      	blt.n	801730e <__ieee754_sinhf+0x26>
 8017300:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017304:	ecbd 8b02 	vpop	{d8}
 8017308:	eeb0 0a67 	vmov.f32	s0, s15
 801730c:	bd10      	pop	{r4, pc}
 801730e:	2b00      	cmp	r3, #0
 8017310:	4b28      	ldr	r3, [pc, #160]	; (80173b4 <__ieee754_sinhf+0xcc>)
 8017312:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8017316:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 801731a:	bfa8      	it	ge
 801731c:	eeb0 8a68 	vmovge.f32	s16, s17
 8017320:	429c      	cmp	r4, r3
 8017322:	dc2a      	bgt.n	801737a <__ieee754_sinhf+0x92>
 8017324:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8017328:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801732c:	da08      	bge.n	8017340 <__ieee754_sinhf+0x58>
 801732e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80173b8 <__ieee754_sinhf+0xd0>
 8017332:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017336:	eeb4 7ae8 	vcmpe.f32	s14, s17
 801733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801733e:	dce1      	bgt.n	8017304 <__ieee754_sinhf+0x1c>
 8017340:	eeb0 0a67 	vmov.f32	s0, s15
 8017344:	f7fd ff9a 	bl	801527c <fabsf>
 8017348:	f000 fc56 	bl	8017bf8 <expm1f>
 801734c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8017350:	bfbb      	ittet	lt
 8017352:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8017356:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 801735a:	ee70 8a28 	vaddge.f32	s17, s0, s17
 801735e:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8017362:	bfad      	iteet	ge
 8017364:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8017368:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 801736c:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8017370:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8017374:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017378:	e7c4      	b.n	8017304 <__ieee754_sinhf+0x1c>
 801737a:	4b10      	ldr	r3, [pc, #64]	; (80173bc <__ieee754_sinhf+0xd4>)
 801737c:	429c      	cmp	r4, r3
 801737e:	dc06      	bgt.n	801738e <__ieee754_sinhf+0xa6>
 8017380:	f7fd ff7c 	bl	801527c <fabsf>
 8017384:	f7ff f97a 	bl	801667c <__ieee754_expf>
 8017388:	ee60 7a08 	vmul.f32	s15, s0, s16
 801738c:	e7ba      	b.n	8017304 <__ieee754_sinhf+0x1c>
 801738e:	4b0c      	ldr	r3, [pc, #48]	; (80173c0 <__ieee754_sinhf+0xd8>)
 8017390:	429c      	cmp	r4, r3
 8017392:	dc0a      	bgt.n	80173aa <__ieee754_sinhf+0xc2>
 8017394:	f7fd ff72 	bl	801527c <fabsf>
 8017398:	ee20 0a28 	vmul.f32	s0, s0, s17
 801739c:	f7ff f96e 	bl	801667c <__ieee754_expf>
 80173a0:	ee68 7a00 	vmul.f32	s15, s16, s0
 80173a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80173a8:	e7ac      	b.n	8017304 <__ieee754_sinhf+0x1c>
 80173aa:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80173b8 <__ieee754_sinhf+0xd0>
 80173ae:	ee60 7a07 	vmul.f32	s15, s0, s14
 80173b2:	e7a7      	b.n	8017304 <__ieee754_sinhf+0x1c>
 80173b4:	41afffff 	.word	0x41afffff
 80173b8:	7cf0bdc2 	.word	0x7cf0bdc2
 80173bc:	42b17217 	.word	0x42b17217
 80173c0:	42b2d4fc 	.word	0x42b2d4fc

080173c4 <__ieee754_sqrtf>:
 80173c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80173c8:	4770      	bx	lr
	...

080173cc <__kernel_cosf>:
 80173cc:	ee10 3a10 	vmov	r3, s0
 80173d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80173d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80173dc:	da05      	bge.n	80173ea <__kernel_cosf+0x1e>
 80173de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80173e2:	ee17 2a90 	vmov	r2, s15
 80173e6:	2a00      	cmp	r2, #0
 80173e8:	d03b      	beq.n	8017462 <__kernel_cosf+0x96>
 80173ea:	ee20 6a00 	vmul.f32	s12, s0, s0
 80173ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80173f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8017468 <__kernel_cosf+0x9c>
 80173f6:	4a1d      	ldr	r2, [pc, #116]	; (801746c <__kernel_cosf+0xa0>)
 80173f8:	ee66 7a07 	vmul.f32	s15, s12, s14
 80173fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8017470 <__kernel_cosf+0xa4>
 8017400:	eea6 7a25 	vfma.f32	s14, s12, s11
 8017404:	4293      	cmp	r3, r2
 8017406:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8017474 <__kernel_cosf+0xa8>
 801740a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801740e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8017478 <__kernel_cosf+0xac>
 8017412:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017416:	eddf 5a19 	vldr	s11, [pc, #100]	; 801747c <__kernel_cosf+0xb0>
 801741a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801741e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8017480 <__kernel_cosf+0xb4>
 8017422:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017426:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801742a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801742e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8017432:	dc04      	bgt.n	801743e <__kernel_cosf+0x72>
 8017434:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8017438:	ee36 0ae0 	vsub.f32	s0, s13, s1
 801743c:	4770      	bx	lr
 801743e:	4a11      	ldr	r2, [pc, #68]	; (8017484 <__kernel_cosf+0xb8>)
 8017440:	4293      	cmp	r3, r2
 8017442:	bfda      	itte	le
 8017444:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8017448:	ee07 3a10 	vmovle	s14, r3
 801744c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8017450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017454:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8017458:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801745c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017460:	4770      	bx	lr
 8017462:	eeb0 0a66 	vmov.f32	s0, s13
 8017466:	4770      	bx	lr
 8017468:	ad47d74e 	.word	0xad47d74e
 801746c:	3e999999 	.word	0x3e999999
 8017470:	310f74f6 	.word	0x310f74f6
 8017474:	b493f27c 	.word	0xb493f27c
 8017478:	37d00d01 	.word	0x37d00d01
 801747c:	bab60b61 	.word	0xbab60b61
 8017480:	3d2aaaab 	.word	0x3d2aaaab
 8017484:	3f480000 	.word	0x3f480000

08017488 <__kernel_rem_pio2f>:
 8017488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801748c:	ed2d 8b04 	vpush	{d8-d9}
 8017490:	b0d7      	sub	sp, #348	; 0x15c
 8017492:	469b      	mov	fp, r3
 8017494:	460e      	mov	r6, r1
 8017496:	4bbe      	ldr	r3, [pc, #760]	; (8017790 <__kernel_rem_pio2f+0x308>)
 8017498:	9964      	ldr	r1, [sp, #400]	; 0x190
 801749a:	9002      	str	r0, [sp, #8]
 801749c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80174a0:	9865      	ldr	r0, [sp, #404]	; 0x194
 80174a2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80177a0 <__kernel_rem_pio2f+0x318>
 80174a6:	1ed1      	subs	r1, r2, #3
 80174a8:	2308      	movs	r3, #8
 80174aa:	fb91 f1f3 	sdiv	r1, r1, r3
 80174ae:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80174b2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80174b6:	1c4c      	adds	r4, r1, #1
 80174b8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80174bc:	eba1 050a 	sub.w	r5, r1, sl
 80174c0:	aa1a      	add	r2, sp, #104	; 0x68
 80174c2:	eb09 070a 	add.w	r7, r9, sl
 80174c6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80174ca:	4696      	mov	lr, r2
 80174cc:	2300      	movs	r3, #0
 80174ce:	42bb      	cmp	r3, r7
 80174d0:	dd0f      	ble.n	80174f2 <__kernel_rem_pio2f+0x6a>
 80174d2:	af42      	add	r7, sp, #264	; 0x108
 80174d4:	2200      	movs	r2, #0
 80174d6:	454a      	cmp	r2, r9
 80174d8:	dc27      	bgt.n	801752a <__kernel_rem_pio2f+0xa2>
 80174da:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80174de:	eb0b 0302 	add.w	r3, fp, r2
 80174e2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80174e6:	9d02      	ldr	r5, [sp, #8]
 80174e8:	eddf 7aad 	vldr	s15, [pc, #692]	; 80177a0 <__kernel_rem_pio2f+0x318>
 80174ec:	f04f 0c00 	mov.w	ip, #0
 80174f0:	e015      	b.n	801751e <__kernel_rem_pio2f+0x96>
 80174f2:	42dd      	cmn	r5, r3
 80174f4:	bf5d      	ittte	pl
 80174f6:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80174fa:	ee07 2a90 	vmovpl	s15, r2
 80174fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017502:	eef0 7a47 	vmovmi.f32	s15, s14
 8017506:	ecee 7a01 	vstmia	lr!, {s15}
 801750a:	3301      	adds	r3, #1
 801750c:	e7df      	b.n	80174ce <__kernel_rem_pio2f+0x46>
 801750e:	ecf5 6a01 	vldmia	r5!, {s13}
 8017512:	ed33 7a01 	vldmdb	r3!, {s14}
 8017516:	eee6 7a87 	vfma.f32	s15, s13, s14
 801751a:	f10c 0c01 	add.w	ip, ip, #1
 801751e:	45d4      	cmp	ip, sl
 8017520:	ddf5      	ble.n	801750e <__kernel_rem_pio2f+0x86>
 8017522:	ece7 7a01 	vstmia	r7!, {s15}
 8017526:	3201      	adds	r2, #1
 8017528:	e7d5      	b.n	80174d6 <__kernel_rem_pio2f+0x4e>
 801752a:	ab06      	add	r3, sp, #24
 801752c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8017530:	9304      	str	r3, [sp, #16]
 8017532:	eddf 8a9a 	vldr	s17, [pc, #616]	; 801779c <__kernel_rem_pio2f+0x314>
 8017536:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8017798 <__kernel_rem_pio2f+0x310>
 801753a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801753e:	9303      	str	r3, [sp, #12]
 8017540:	464d      	mov	r5, r9
 8017542:	ab56      	add	r3, sp, #344	; 0x158
 8017544:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8017548:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801754c:	3f01      	subs	r7, #1
 801754e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8017552:	00bf      	lsls	r7, r7, #2
 8017554:	ab56      	add	r3, sp, #344	; 0x158
 8017556:	19da      	adds	r2, r3, r7
 8017558:	3a4c      	subs	r2, #76	; 0x4c
 801755a:	2300      	movs	r3, #0
 801755c:	1ae9      	subs	r1, r5, r3
 801755e:	2900      	cmp	r1, #0
 8017560:	dc4c      	bgt.n	80175fc <__kernel_rem_pio2f+0x174>
 8017562:	4620      	mov	r0, r4
 8017564:	f000 fcd8 	bl	8017f18 <scalbnf>
 8017568:	eeb0 8a40 	vmov.f32	s16, s0
 801756c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8017570:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017574:	f7fd fe8a 	bl	801528c <floorf>
 8017578:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801757c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017580:	2c00      	cmp	r4, #0
 8017582:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017586:	edcd 7a01 	vstr	s15, [sp, #4]
 801758a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801758e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017592:	dd48      	ble.n	8017626 <__kernel_rem_pio2f+0x19e>
 8017594:	1e69      	subs	r1, r5, #1
 8017596:	ab06      	add	r3, sp, #24
 8017598:	f1c4 0008 	rsb	r0, r4, #8
 801759c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80175a0:	9a01      	ldr	r2, [sp, #4]
 80175a2:	fa4c f300 	asr.w	r3, ip, r0
 80175a6:	441a      	add	r2, r3
 80175a8:	4083      	lsls	r3, r0
 80175aa:	9201      	str	r2, [sp, #4]
 80175ac:	ebac 0203 	sub.w	r2, ip, r3
 80175b0:	ab06      	add	r3, sp, #24
 80175b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80175b6:	f1c4 0307 	rsb	r3, r4, #7
 80175ba:	fa42 f803 	asr.w	r8, r2, r3
 80175be:	f1b8 0f00 	cmp.w	r8, #0
 80175c2:	dd41      	ble.n	8017648 <__kernel_rem_pio2f+0x1c0>
 80175c4:	9b01      	ldr	r3, [sp, #4]
 80175c6:	2000      	movs	r0, #0
 80175c8:	3301      	adds	r3, #1
 80175ca:	9301      	str	r3, [sp, #4]
 80175cc:	4601      	mov	r1, r0
 80175ce:	4285      	cmp	r5, r0
 80175d0:	dc6d      	bgt.n	80176ae <__kernel_rem_pio2f+0x226>
 80175d2:	2c00      	cmp	r4, #0
 80175d4:	dd04      	ble.n	80175e0 <__kernel_rem_pio2f+0x158>
 80175d6:	2c01      	cmp	r4, #1
 80175d8:	d07e      	beq.n	80176d8 <__kernel_rem_pio2f+0x250>
 80175da:	2c02      	cmp	r4, #2
 80175dc:	f000 8086 	beq.w	80176ec <__kernel_rem_pio2f+0x264>
 80175e0:	f1b8 0f02 	cmp.w	r8, #2
 80175e4:	d130      	bne.n	8017648 <__kernel_rem_pio2f+0x1c0>
 80175e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80175ea:	ee30 8a48 	vsub.f32	s16, s0, s16
 80175ee:	b359      	cbz	r1, 8017648 <__kernel_rem_pio2f+0x1c0>
 80175f0:	4620      	mov	r0, r4
 80175f2:	f000 fc91 	bl	8017f18 <scalbnf>
 80175f6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80175fa:	e025      	b.n	8017648 <__kernel_rem_pio2f+0x1c0>
 80175fc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017600:	a806      	add	r0, sp, #24
 8017602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801760a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801760e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017612:	ee10 1a10 	vmov	r1, s0
 8017616:	ed32 0a01 	vldmdb	r2!, {s0}
 801761a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801761e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017622:	3301      	adds	r3, #1
 8017624:	e79a      	b.n	801755c <__kernel_rem_pio2f+0xd4>
 8017626:	d106      	bne.n	8017636 <__kernel_rem_pio2f+0x1ae>
 8017628:	1e6b      	subs	r3, r5, #1
 801762a:	aa06      	add	r2, sp, #24
 801762c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017630:	ea4f 2822 	mov.w	r8, r2, asr #8
 8017634:	e7c3      	b.n	80175be <__kernel_rem_pio2f+0x136>
 8017636:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801763a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801763e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017642:	da31      	bge.n	80176a8 <__kernel_rem_pio2f+0x220>
 8017644:	f04f 0800 	mov.w	r8, #0
 8017648:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801764c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017650:	f040 80a8 	bne.w	80177a4 <__kernel_rem_pio2f+0x31c>
 8017654:	1e6b      	subs	r3, r5, #1
 8017656:	4618      	mov	r0, r3
 8017658:	2200      	movs	r2, #0
 801765a:	4548      	cmp	r0, r9
 801765c:	da4d      	bge.n	80176fa <__kernel_rem_pio2f+0x272>
 801765e:	2a00      	cmp	r2, #0
 8017660:	f000 8087 	beq.w	8017772 <__kernel_rem_pio2f+0x2ea>
 8017664:	aa06      	add	r2, sp, #24
 8017666:	3c08      	subs	r4, #8
 8017668:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801766c:	2900      	cmp	r1, #0
 801766e:	f000 808d 	beq.w	801778c <__kernel_rem_pio2f+0x304>
 8017672:	4620      	mov	r0, r4
 8017674:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017678:	9302      	str	r3, [sp, #8]
 801767a:	f000 fc4d 	bl	8017f18 <scalbnf>
 801767e:	9b02      	ldr	r3, [sp, #8]
 8017680:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801779c <__kernel_rem_pio2f+0x314>
 8017684:	0099      	lsls	r1, r3, #2
 8017686:	aa42      	add	r2, sp, #264	; 0x108
 8017688:	1850      	adds	r0, r2, r1
 801768a:	1d05      	adds	r5, r0, #4
 801768c:	461c      	mov	r4, r3
 801768e:	2c00      	cmp	r4, #0
 8017690:	f280 80b8 	bge.w	8017804 <__kernel_rem_pio2f+0x37c>
 8017694:	2500      	movs	r5, #0
 8017696:	1b5c      	subs	r4, r3, r5
 8017698:	2c00      	cmp	r4, #0
 801769a:	f2c0 80d8 	blt.w	801784e <__kernel_rem_pio2f+0x3c6>
 801769e:	4f3d      	ldr	r7, [pc, #244]	; (8017794 <__kernel_rem_pio2f+0x30c>)
 80176a0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80177a0 <__kernel_rem_pio2f+0x318>
 80176a4:	2400      	movs	r4, #0
 80176a6:	e0c6      	b.n	8017836 <__kernel_rem_pio2f+0x3ae>
 80176a8:	f04f 0802 	mov.w	r8, #2
 80176ac:	e78a      	b.n	80175c4 <__kernel_rem_pio2f+0x13c>
 80176ae:	ab06      	add	r3, sp, #24
 80176b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80176b4:	b949      	cbnz	r1, 80176ca <__kernel_rem_pio2f+0x242>
 80176b6:	b12b      	cbz	r3, 80176c4 <__kernel_rem_pio2f+0x23c>
 80176b8:	aa06      	add	r2, sp, #24
 80176ba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80176be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80176c2:	2301      	movs	r3, #1
 80176c4:	3001      	adds	r0, #1
 80176c6:	4619      	mov	r1, r3
 80176c8:	e781      	b.n	80175ce <__kernel_rem_pio2f+0x146>
 80176ca:	aa06      	add	r2, sp, #24
 80176cc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80176d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80176d4:	460b      	mov	r3, r1
 80176d6:	e7f5      	b.n	80176c4 <__kernel_rem_pio2f+0x23c>
 80176d8:	1e68      	subs	r0, r5, #1
 80176da:	ab06      	add	r3, sp, #24
 80176dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80176e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176e4:	aa06      	add	r2, sp, #24
 80176e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80176ea:	e779      	b.n	80175e0 <__kernel_rem_pio2f+0x158>
 80176ec:	1e68      	subs	r0, r5, #1
 80176ee:	ab06      	add	r3, sp, #24
 80176f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80176f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80176f8:	e7f4      	b.n	80176e4 <__kernel_rem_pio2f+0x25c>
 80176fa:	a906      	add	r1, sp, #24
 80176fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8017700:	3801      	subs	r0, #1
 8017702:	430a      	orrs	r2, r1
 8017704:	e7a9      	b.n	801765a <__kernel_rem_pio2f+0x1d2>
 8017706:	f10c 0c01 	add.w	ip, ip, #1
 801770a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801770e:	2a00      	cmp	r2, #0
 8017710:	d0f9      	beq.n	8017706 <__kernel_rem_pio2f+0x27e>
 8017712:	eb0b 0305 	add.w	r3, fp, r5
 8017716:	aa1a      	add	r2, sp, #104	; 0x68
 8017718:	009b      	lsls	r3, r3, #2
 801771a:	1898      	adds	r0, r3, r2
 801771c:	3004      	adds	r0, #4
 801771e:	1c69      	adds	r1, r5, #1
 8017720:	3704      	adds	r7, #4
 8017722:	2200      	movs	r2, #0
 8017724:	4465      	add	r5, ip
 8017726:	9005      	str	r0, [sp, #20]
 8017728:	428d      	cmp	r5, r1
 801772a:	f6ff af0a 	blt.w	8017542 <__kernel_rem_pio2f+0xba>
 801772e:	a81a      	add	r0, sp, #104	; 0x68
 8017730:	eb02 0c03 	add.w	ip, r2, r3
 8017734:	4484      	add	ip, r0
 8017736:	9803      	ldr	r0, [sp, #12]
 8017738:	f8dd e008 	ldr.w	lr, [sp, #8]
 801773c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8017740:	9001      	str	r0, [sp, #4]
 8017742:	ee07 0a90 	vmov	s15, r0
 8017746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801774a:	9805      	ldr	r0, [sp, #20]
 801774c:	edcc 7a00 	vstr	s15, [ip]
 8017750:	eddf 7a13 	vldr	s15, [pc, #76]	; 80177a0 <__kernel_rem_pio2f+0x318>
 8017754:	eb00 0802 	add.w	r8, r0, r2
 8017758:	f04f 0c00 	mov.w	ip, #0
 801775c:	45d4      	cmp	ip, sl
 801775e:	dd0c      	ble.n	801777a <__kernel_rem_pio2f+0x2f2>
 8017760:	eb02 0c07 	add.w	ip, r2, r7
 8017764:	a842      	add	r0, sp, #264	; 0x108
 8017766:	4484      	add	ip, r0
 8017768:	edcc 7a01 	vstr	s15, [ip, #4]
 801776c:	3101      	adds	r1, #1
 801776e:	3204      	adds	r2, #4
 8017770:	e7da      	b.n	8017728 <__kernel_rem_pio2f+0x2a0>
 8017772:	9b04      	ldr	r3, [sp, #16]
 8017774:	f04f 0c01 	mov.w	ip, #1
 8017778:	e7c7      	b.n	801770a <__kernel_rem_pio2f+0x282>
 801777a:	ecfe 6a01 	vldmia	lr!, {s13}
 801777e:	ed38 7a01 	vldmdb	r8!, {s14}
 8017782:	f10c 0c01 	add.w	ip, ip, #1
 8017786:	eee6 7a87 	vfma.f32	s15, s13, s14
 801778a:	e7e7      	b.n	801775c <__kernel_rem_pio2f+0x2d4>
 801778c:	3b01      	subs	r3, #1
 801778e:	e769      	b.n	8017664 <__kernel_rem_pio2f+0x1dc>
 8017790:	0814feac 	.word	0x0814feac
 8017794:	0814fe80 	.word	0x0814fe80
 8017798:	43800000 	.word	0x43800000
 801779c:	3b800000 	.word	0x3b800000
 80177a0:	00000000 	.word	0x00000000
 80177a4:	4260      	negs	r0, r4
 80177a6:	eeb0 0a48 	vmov.f32	s0, s16
 80177aa:	f000 fbb5 	bl	8017f18 <scalbnf>
 80177ae:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8017798 <__kernel_rem_pio2f+0x310>
 80177b2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80177b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ba:	db1a      	blt.n	80177f2 <__kernel_rem_pio2f+0x36a>
 80177bc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801779c <__kernel_rem_pio2f+0x314>
 80177c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80177c4:	aa06      	add	r2, sp, #24
 80177c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80177ca:	a906      	add	r1, sp, #24
 80177cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177d0:	3408      	adds	r4, #8
 80177d2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80177d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80177da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80177de:	ee10 3a10 	vmov	r3, s0
 80177e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80177e6:	1c6b      	adds	r3, r5, #1
 80177e8:	ee17 2a90 	vmov	r2, s15
 80177ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80177f0:	e73f      	b.n	8017672 <__kernel_rem_pio2f+0x1ea>
 80177f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80177f6:	aa06      	add	r2, sp, #24
 80177f8:	ee10 3a10 	vmov	r3, s0
 80177fc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017800:	462b      	mov	r3, r5
 8017802:	e736      	b.n	8017672 <__kernel_rem_pio2f+0x1ea>
 8017804:	aa06      	add	r2, sp, #24
 8017806:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801780a:	9202      	str	r2, [sp, #8]
 801780c:	ee07 2a90 	vmov	s15, r2
 8017810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017814:	3c01      	subs	r4, #1
 8017816:	ee67 7a80 	vmul.f32	s15, s15, s0
 801781a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801781e:	ed65 7a01 	vstmdb	r5!, {s15}
 8017822:	e734      	b.n	801768e <__kernel_rem_pio2f+0x206>
 8017824:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8017828:	ecf7 6a01 	vldmia	r7!, {s13}
 801782c:	ed9c 7a00 	vldr	s14, [ip]
 8017830:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017834:	3401      	adds	r4, #1
 8017836:	454c      	cmp	r4, r9
 8017838:	dc01      	bgt.n	801783e <__kernel_rem_pio2f+0x3b6>
 801783a:	42a5      	cmp	r5, r4
 801783c:	daf2      	bge.n	8017824 <__kernel_rem_pio2f+0x39c>
 801783e:	aa56      	add	r2, sp, #344	; 0x158
 8017840:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8017844:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8017848:	3501      	adds	r5, #1
 801784a:	3804      	subs	r0, #4
 801784c:	e723      	b.n	8017696 <__kernel_rem_pio2f+0x20e>
 801784e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017850:	2a03      	cmp	r2, #3
 8017852:	d84d      	bhi.n	80178f0 <__kernel_rem_pio2f+0x468>
 8017854:	e8df f002 	tbb	[pc, r2]
 8017858:	021f1f3e 	.word	0x021f1f3e
 801785c:	aa56      	add	r2, sp, #344	; 0x158
 801785e:	4411      	add	r1, r2
 8017860:	399c      	subs	r1, #156	; 0x9c
 8017862:	4608      	mov	r0, r1
 8017864:	461c      	mov	r4, r3
 8017866:	2c00      	cmp	r4, #0
 8017868:	dc5f      	bgt.n	801792a <__kernel_rem_pio2f+0x4a2>
 801786a:	4608      	mov	r0, r1
 801786c:	461c      	mov	r4, r3
 801786e:	2c01      	cmp	r4, #1
 8017870:	dc6b      	bgt.n	801794a <__kernel_rem_pio2f+0x4c2>
 8017872:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80177a0 <__kernel_rem_pio2f+0x318>
 8017876:	2b01      	cmp	r3, #1
 8017878:	dc77      	bgt.n	801796a <__kernel_rem_pio2f+0x4e2>
 801787a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801787e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8017882:	f1b8 0f00 	cmp.w	r8, #0
 8017886:	d176      	bne.n	8017976 <__kernel_rem_pio2f+0x4ee>
 8017888:	edc6 6a00 	vstr	s13, [r6]
 801788c:	ed86 7a01 	vstr	s14, [r6, #4]
 8017890:	edc6 7a02 	vstr	s15, [r6, #8]
 8017894:	e02c      	b.n	80178f0 <__kernel_rem_pio2f+0x468>
 8017896:	aa56      	add	r2, sp, #344	; 0x158
 8017898:	4411      	add	r1, r2
 801789a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80177a0 <__kernel_rem_pio2f+0x318>
 801789e:	399c      	subs	r1, #156	; 0x9c
 80178a0:	4618      	mov	r0, r3
 80178a2:	2800      	cmp	r0, #0
 80178a4:	da32      	bge.n	801790c <__kernel_rem_pio2f+0x484>
 80178a6:	f1b8 0f00 	cmp.w	r8, #0
 80178aa:	d035      	beq.n	8017918 <__kernel_rem_pio2f+0x490>
 80178ac:	eef1 7a47 	vneg.f32	s15, s14
 80178b0:	edc6 7a00 	vstr	s15, [r6]
 80178b4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80178b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178bc:	a82f      	add	r0, sp, #188	; 0xbc
 80178be:	2101      	movs	r1, #1
 80178c0:	428b      	cmp	r3, r1
 80178c2:	da2c      	bge.n	801791e <__kernel_rem_pio2f+0x496>
 80178c4:	f1b8 0f00 	cmp.w	r8, #0
 80178c8:	d001      	beq.n	80178ce <__kernel_rem_pio2f+0x446>
 80178ca:	eef1 7a67 	vneg.f32	s15, s15
 80178ce:	edc6 7a01 	vstr	s15, [r6, #4]
 80178d2:	e00d      	b.n	80178f0 <__kernel_rem_pio2f+0x468>
 80178d4:	aa56      	add	r2, sp, #344	; 0x158
 80178d6:	4411      	add	r1, r2
 80178d8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80177a0 <__kernel_rem_pio2f+0x318>
 80178dc:	399c      	subs	r1, #156	; 0x9c
 80178de:	2b00      	cmp	r3, #0
 80178e0:	da0e      	bge.n	8017900 <__kernel_rem_pio2f+0x478>
 80178e2:	f1b8 0f00 	cmp.w	r8, #0
 80178e6:	d001      	beq.n	80178ec <__kernel_rem_pio2f+0x464>
 80178e8:	eef1 7a67 	vneg.f32	s15, s15
 80178ec:	edc6 7a00 	vstr	s15, [r6]
 80178f0:	9b01      	ldr	r3, [sp, #4]
 80178f2:	f003 0007 	and.w	r0, r3, #7
 80178f6:	b057      	add	sp, #348	; 0x15c
 80178f8:	ecbd 8b04 	vpop	{d8-d9}
 80178fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017900:	ed31 7a01 	vldmdb	r1!, {s14}
 8017904:	3b01      	subs	r3, #1
 8017906:	ee77 7a87 	vadd.f32	s15, s15, s14
 801790a:	e7e8      	b.n	80178de <__kernel_rem_pio2f+0x456>
 801790c:	ed71 7a01 	vldmdb	r1!, {s15}
 8017910:	3801      	subs	r0, #1
 8017912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017916:	e7c4      	b.n	80178a2 <__kernel_rem_pio2f+0x41a>
 8017918:	eef0 7a47 	vmov.f32	s15, s14
 801791c:	e7c8      	b.n	80178b0 <__kernel_rem_pio2f+0x428>
 801791e:	ecb0 7a01 	vldmia	r0!, {s14}
 8017922:	3101      	adds	r1, #1
 8017924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017928:	e7ca      	b.n	80178c0 <__kernel_rem_pio2f+0x438>
 801792a:	ed50 7a02 	vldr	s15, [r0, #-8]
 801792e:	ed70 6a01 	vldmdb	r0!, {s13}
 8017932:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017936:	3c01      	subs	r4, #1
 8017938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801793c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8017940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017944:	edc0 7a00 	vstr	s15, [r0]
 8017948:	e78d      	b.n	8017866 <__kernel_rem_pio2f+0x3de>
 801794a:	ed50 7a02 	vldr	s15, [r0, #-8]
 801794e:	ed70 6a01 	vldmdb	r0!, {s13}
 8017952:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8017956:	3c01      	subs	r4, #1
 8017958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801795c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8017960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017964:	edc0 7a00 	vstr	s15, [r0]
 8017968:	e781      	b.n	801786e <__kernel_rem_pio2f+0x3e6>
 801796a:	ed31 7a01 	vldmdb	r1!, {s14}
 801796e:	3b01      	subs	r3, #1
 8017970:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017974:	e77f      	b.n	8017876 <__kernel_rem_pio2f+0x3ee>
 8017976:	eef1 6a66 	vneg.f32	s13, s13
 801797a:	eeb1 7a47 	vneg.f32	s14, s14
 801797e:	edc6 6a00 	vstr	s13, [r6]
 8017982:	ed86 7a01 	vstr	s14, [r6, #4]
 8017986:	eef1 7a67 	vneg.f32	s15, s15
 801798a:	e781      	b.n	8017890 <__kernel_rem_pio2f+0x408>

0801798c <__kernel_sinf>:
 801798c:	ee10 3a10 	vmov	r3, s0
 8017990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017994:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017998:	da04      	bge.n	80179a4 <__kernel_sinf+0x18>
 801799a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801799e:	ee17 3a90 	vmov	r3, s15
 80179a2:	b35b      	cbz	r3, 80179fc <__kernel_sinf+0x70>
 80179a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80179a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017a00 <__kernel_sinf+0x74>
 80179ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8017a04 <__kernel_sinf+0x78>
 80179b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80179b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8017a08 <__kernel_sinf+0x7c>
 80179b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80179bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8017a0c <__kernel_sinf+0x80>
 80179c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80179c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8017a10 <__kernel_sinf+0x84>
 80179c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80179cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80179d0:	b930      	cbnz	r0, 80179e0 <__kernel_sinf+0x54>
 80179d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8017a14 <__kernel_sinf+0x88>
 80179d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80179da:	eea6 0a26 	vfma.f32	s0, s12, s13
 80179de:	4770      	bx	lr
 80179e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80179e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80179e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80179ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80179f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8017a18 <__kernel_sinf+0x8c>
 80179f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80179f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	2f2ec9d3 	.word	0x2f2ec9d3
 8017a04:	b2d72f34 	.word	0xb2d72f34
 8017a08:	3638ef1b 	.word	0x3638ef1b
 8017a0c:	b9500d01 	.word	0xb9500d01
 8017a10:	3c088889 	.word	0x3c088889
 8017a14:	be2aaaab 	.word	0xbe2aaaab
 8017a18:	3e2aaaab 	.word	0x3e2aaaab

08017a1c <__kernel_tanf>:
 8017a1c:	b508      	push	{r3, lr}
 8017a1e:	ee10 3a10 	vmov	r3, s0
 8017a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017a26:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8017a2a:	eef0 7a40 	vmov.f32	s15, s0
 8017a2e:	da17      	bge.n	8017a60 <__kernel_tanf+0x44>
 8017a30:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8017a34:	ee17 1a10 	vmov	r1, s14
 8017a38:	bb41      	cbnz	r1, 8017a8c <__kernel_tanf+0x70>
 8017a3a:	1c43      	adds	r3, r0, #1
 8017a3c:	4313      	orrs	r3, r2
 8017a3e:	d108      	bne.n	8017a52 <__kernel_tanf+0x36>
 8017a40:	f7fd fc1c 	bl	801527c <fabsf>
 8017a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017a48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8017a50:	bd08      	pop	{r3, pc}
 8017a52:	2801      	cmp	r0, #1
 8017a54:	d0fa      	beq.n	8017a4c <__kernel_tanf+0x30>
 8017a56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017a5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a5e:	e7f5      	b.n	8017a4c <__kernel_tanf+0x30>
 8017a60:	494e      	ldr	r1, [pc, #312]	; (8017b9c <__kernel_tanf+0x180>)
 8017a62:	428a      	cmp	r2, r1
 8017a64:	dd12      	ble.n	8017a8c <__kernel_tanf+0x70>
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017ba0 <__kernel_tanf+0x184>
 8017a6c:	bfb8      	it	lt
 8017a6e:	eef1 7a40 	vneglt.f32	s15, s0
 8017a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a76:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8017ba4 <__kernel_tanf+0x188>
 8017a7a:	bfb8      	it	lt
 8017a7c:	eef1 0a60 	vneglt.f32	s1, s1
 8017a80:	ee77 0a60 	vsub.f32	s1, s14, s1
 8017a84:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8017a88:	eddf 0a47 	vldr	s1, [pc, #284]	; 8017ba8 <__kernel_tanf+0x18c>
 8017a8c:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8017bac <__kernel_tanf+0x190>
 8017a90:	eddf 5a47 	vldr	s11, [pc, #284]	; 8017bb0 <__kernel_tanf+0x194>
 8017a94:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8017bb4 <__kernel_tanf+0x198>
 8017a98:	4940      	ldr	r1, [pc, #256]	; (8017b9c <__kernel_tanf+0x180>)
 8017a9a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017a9e:	428a      	cmp	r2, r1
 8017aa0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017aa4:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8017aa8:	eee7 5a06 	vfma.f32	s11, s14, s12
 8017aac:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8017bb8 <__kernel_tanf+0x19c>
 8017ab0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017ab4:	eddf 5a41 	vldr	s11, [pc, #260]	; 8017bbc <__kernel_tanf+0x1a0>
 8017ab8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017abc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8017bc0 <__kernel_tanf+0x1a4>
 8017ac0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017ac4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8017bc4 <__kernel_tanf+0x1a8>
 8017ac8:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017acc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8017bc8 <__kernel_tanf+0x1ac>
 8017ad0:	eea7 6a05 	vfma.f32	s12, s14, s10
 8017ad4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8017bcc <__kernel_tanf+0x1b0>
 8017ad8:	eea6 5a07 	vfma.f32	s10, s12, s14
 8017adc:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8017bd0 <__kernel_tanf+0x1b4>
 8017ae0:	eea5 6a07 	vfma.f32	s12, s10, s14
 8017ae4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8017bd4 <__kernel_tanf+0x1b8>
 8017ae8:	eea6 5a07 	vfma.f32	s10, s12, s14
 8017aec:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8017bd8 <__kernel_tanf+0x1bc>
 8017af0:	eea5 6a07 	vfma.f32	s12, s10, s14
 8017af4:	eeb0 7a46 	vmov.f32	s14, s12
 8017af8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017afc:	eeb0 6a60 	vmov.f32	s12, s1
 8017b00:	eea7 6a24 	vfma.f32	s12, s14, s9
 8017b04:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8017bdc <__kernel_tanf+0x1c0>
 8017b08:	eee6 0a26 	vfma.f32	s1, s12, s13
 8017b0c:	eee4 0a87 	vfma.f32	s1, s9, s14
 8017b10:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8017b14:	dd1d      	ble.n	8017b52 <__kernel_tanf+0x136>
 8017b16:	ee07 0a10 	vmov	s14, r0
 8017b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017b1e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8017b22:	ee76 6a87 	vadd.f32	s13, s13, s14
 8017b26:	179b      	asrs	r3, r3, #30
 8017b28:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8017b2c:	f003 0302 	and.w	r3, r3, #2
 8017b30:	f1c3 0301 	rsb	r3, r3, #1
 8017b34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017b38:	ee76 0a60 	vsub.f32	s1, s12, s1
 8017b3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017b40:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017b44:	ee07 3a90 	vmov	s15, r3
 8017b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b50:	e77c      	b.n	8017a4c <__kernel_tanf+0x30>
 8017b52:	2801      	cmp	r0, #1
 8017b54:	d01f      	beq.n	8017b96 <__kernel_tanf+0x17a>
 8017b56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017b5a:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8017b5e:	4b20      	ldr	r3, [pc, #128]	; (8017be0 <__kernel_tanf+0x1c4>)
 8017b60:	ee16 2a90 	vmov	r2, s13
 8017b64:	401a      	ands	r2, r3
 8017b66:	ee06 2a10 	vmov	s12, r2
 8017b6a:	ee15 2a90 	vmov	r2, s11
 8017b6e:	4013      	ands	r3, r2
 8017b70:	ee07 3a10 	vmov	s14, r3
 8017b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017b78:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017b7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017b80:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017b84:	eef0 7a66 	vmov.f32	s15, s13
 8017b88:	eee7 7a20 	vfma.f32	s15, s14, s1
 8017b8c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8017b90:	eef0 7a47 	vmov.f32	s15, s14
 8017b94:	e75a      	b.n	8017a4c <__kernel_tanf+0x30>
 8017b96:	eef0 7a66 	vmov.f32	s15, s13
 8017b9a:	e757      	b.n	8017a4c <__kernel_tanf+0x30>
 8017b9c:	3f2ca13f 	.word	0x3f2ca13f
 8017ba0:	3f490fda 	.word	0x3f490fda
 8017ba4:	33222168 	.word	0x33222168
 8017ba8:	00000000 	.word	0x00000000
 8017bac:	37d95384 	.word	0x37d95384
 8017bb0:	3895c07a 	.word	0x3895c07a
 8017bb4:	b79bae5f 	.word	0xb79bae5f
 8017bb8:	398137b9 	.word	0x398137b9
 8017bbc:	3abede48 	.word	0x3abede48
 8017bc0:	3c11371f 	.word	0x3c11371f
 8017bc4:	3d5d0dd1 	.word	0x3d5d0dd1
 8017bc8:	38a3f445 	.word	0x38a3f445
 8017bcc:	3a1a26c8 	.word	0x3a1a26c8
 8017bd0:	3b6b6916 	.word	0x3b6b6916
 8017bd4:	3cb327a4 	.word	0x3cb327a4
 8017bd8:	3e088889 	.word	0x3e088889
 8017bdc:	3eaaaaab 	.word	0x3eaaaaab
 8017be0:	fffff000 	.word	0xfffff000

08017be4 <matherr>:
 8017be4:	2000      	movs	r0, #0
 8017be6:	4770      	bx	lr

08017be8 <nan>:
 8017be8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017bf0 <nan+0x8>
 8017bec:	4770      	bx	lr
 8017bee:	bf00      	nop
 8017bf0:	00000000 	.word	0x00000000
 8017bf4:	7ff80000 	.word	0x7ff80000

08017bf8 <expm1f>:
 8017bf8:	ee10 2a10 	vmov	r2, s0
 8017bfc:	4985      	ldr	r1, [pc, #532]	; (8017e14 <expm1f+0x21c>)
 8017bfe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8017c02:	428b      	cmp	r3, r1
 8017c04:	d924      	bls.n	8017c50 <expm1f+0x58>
 8017c06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017c0a:	d902      	bls.n	8017c12 <expm1f+0x1a>
 8017c0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017c10:	4770      	bx	lr
 8017c12:	d106      	bne.n	8017c22 <expm1f+0x2a>
 8017c14:	2a00      	cmp	r2, #0
 8017c16:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017c1a:	bfb8      	it	lt
 8017c1c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8017c20:	4770      	bx	lr
 8017c22:	2a00      	cmp	r2, #0
 8017c24:	db08      	blt.n	8017c38 <expm1f+0x40>
 8017c26:	4a7c      	ldr	r2, [pc, #496]	; (8017e18 <expm1f+0x220>)
 8017c28:	4293      	cmp	r3, r2
 8017c2a:	f240 80eb 	bls.w	8017e04 <expm1f+0x20c>
 8017c2e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8017e1c <expm1f+0x224>
 8017c32:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017c36:	4770      	bx	lr
 8017c38:	eddf 7a79 	vldr	s15, [pc, #484]	; 8017e20 <expm1f+0x228>
 8017c3c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c48:	d554      	bpl.n	8017cf4 <expm1f+0xfc>
 8017c4a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8017c4e:	4770      	bx	lr
 8017c50:	4974      	ldr	r1, [pc, #464]	; (8017e24 <expm1f+0x22c>)
 8017c52:	428b      	cmp	r3, r1
 8017c54:	d96d      	bls.n	8017d32 <expm1f+0x13a>
 8017c56:	4974      	ldr	r1, [pc, #464]	; (8017e28 <expm1f+0x230>)
 8017c58:	428b      	cmp	r3, r1
 8017c5a:	d84b      	bhi.n	8017cf4 <expm1f+0xfc>
 8017c5c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8017e2c <expm1f+0x234>
 8017c60:	2a00      	cmp	r2, #0
 8017c62:	bfa7      	ittee	ge
 8017c64:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8017c68:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8017e30 <expm1f+0x238>
 8017c6c:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8017e34 <expm1f+0x23c>
 8017c70:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8017c74:	bfac      	ite	ge
 8017c76:	2301      	movge	r3, #1
 8017c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c7c:	ee37 0a67 	vsub.f32	s0, s14, s15
 8017c80:	ee37 7a40 	vsub.f32	s14, s14, s0
 8017c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c88:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017c8c:	ee20 5a25 	vmul.f32	s10, s0, s11
 8017c90:	eddf 6a69 	vldr	s13, [pc, #420]	; 8017e38 <expm1f+0x240>
 8017c94:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8017e3c <expm1f+0x244>
 8017c98:	ee20 7a05 	vmul.f32	s14, s0, s10
 8017c9c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8017ca0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8017e40 <expm1f+0x248>
 8017ca4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017ca8:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8017e44 <expm1f+0x24c>
 8017cac:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017cb0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8017e48 <expm1f+0x250>
 8017cb4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017cb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017cbc:	eef0 4a46 	vmov.f32	s9, s12
 8017cc0:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017cc4:	eef0 6a64 	vmov.f32	s13, s9
 8017cc8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8017ccc:	eee5 4a66 	vfms.f32	s9, s10, s13
 8017cd0:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8017cd4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8017cd8:	eee0 6a64 	vfms.f32	s13, s0, s9
 8017cdc:	eef0 4a66 	vmov.f32	s9, s13
 8017ce0:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8017ce4:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017ce8:	bb8b      	cbnz	r3, 8017d4e <expm1f+0x156>
 8017cea:	eef0 7a47 	vmov.f32	s15, s14
 8017cee:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8017cf2:	e027      	b.n	8017d44 <expm1f+0x14c>
 8017cf4:	eddf 7a55 	vldr	s15, [pc, #340]	; 8017e4c <expm1f+0x254>
 8017cf8:	2a00      	cmp	r2, #0
 8017cfa:	ee20 7a27 	vmul.f32	s14, s0, s15
 8017cfe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017d02:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8017d06:	bfa8      	it	ge
 8017d08:	eef0 7a66 	vmovge.f32	s15, s13
 8017d0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017d10:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8017e2c <expm1f+0x234>
 8017d14:	eddf 6a46 	vldr	s13, [pc, #280]	; 8017e30 <expm1f+0x238>
 8017d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d1c:	ee17 3a90 	vmov	r3, s15
 8017d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d24:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017d28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017d2c:	eeb0 7a40 	vmov.f32	s14, s0
 8017d30:	e7a4      	b.n	8017c7c <expm1f+0x84>
 8017d32:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8017d36:	d208      	bcs.n	8017d4a <expm1f+0x152>
 8017d38:	eddf 7a38 	vldr	s15, [pc, #224]	; 8017e1c <expm1f+0x224>
 8017d3c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017d40:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8017d44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017d48:	4770      	bx	lr
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	e79c      	b.n	8017c88 <expm1f+0x90>
 8017d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8017d52:	1c5a      	adds	r2, r3, #1
 8017d54:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8017d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017d5c:	d106      	bne.n	8017d6c <expm1f+0x174>
 8017d5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017d62:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017d66:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8017d6a:	4770      	bx	lr
 8017d6c:	2b01      	cmp	r3, #1
 8017d6e:	d118      	bne.n	8017da2 <expm1f+0x1aa>
 8017d70:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8017d74:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d7c:	bf41      	itttt	mi
 8017d7e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8017d82:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8017d86:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8017d8a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8017d8e:	bf5f      	itttt	pl
 8017d90:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8017d94:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8017d98:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8017d9c:	eeb0 0a46 	vmovpl.f32	s0, s12
 8017da0:	4770      	bx	lr
 8017da2:	1c5a      	adds	r2, r3, #1
 8017da4:	2a39      	cmp	r2, #57	; 0x39
 8017da6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8017daa:	d90b      	bls.n	8017dc4 <expm1f+0x1cc>
 8017dac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017db0:	ee36 0a40 	vsub.f32	s0, s12, s0
 8017db4:	ee10 3a10 	vmov	r3, s0
 8017db8:	440b      	add	r3, r1
 8017dba:	ee00 3a10 	vmov	s0, r3
 8017dbe:	ee30 0a46 	vsub.f32	s0, s0, s12
 8017dc2:	4770      	bx	lr
 8017dc4:	2b16      	cmp	r3, #22
 8017dc6:	dc11      	bgt.n	8017dec <expm1f+0x1f4>
 8017dc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017dcc:	fa42 f303 	asr.w	r3, r2, r3
 8017dd0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8017dd4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017dd8:	ee07 3a90 	vmov	s15, r3
 8017ddc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017de0:	ee10 3a10 	vmov	r3, s0
 8017de4:	440b      	add	r3, r1
 8017de6:	ee00 3a10 	vmov	s0, r3
 8017dea:	4770      	bx	lr
 8017dec:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017df0:	05db      	lsls	r3, r3, #23
 8017df2:	ee07 3a10 	vmov	s14, r3
 8017df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017dfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017dfe:	ee30 0a06 	vadd.f32	s0, s0, s12
 8017e02:	e7ed      	b.n	8017de0 <expm1f+0x1e8>
 8017e04:	eddf 7a11 	vldr	s15, [pc, #68]	; 8017e4c <expm1f+0x254>
 8017e08:	ee20 7a27 	vmul.f32	s14, s0, s15
 8017e0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017e10:	e77c      	b.n	8017d0c <expm1f+0x114>
 8017e12:	bf00      	nop
 8017e14:	4195b843 	.word	0x4195b843
 8017e18:	42b17217 	.word	0x42b17217
 8017e1c:	7149f2ca 	.word	0x7149f2ca
 8017e20:	0da24260 	.word	0x0da24260
 8017e24:	3eb17218 	.word	0x3eb17218
 8017e28:	3f851591 	.word	0x3f851591
 8017e2c:	3f317180 	.word	0x3f317180
 8017e30:	3717f7d1 	.word	0x3717f7d1
 8017e34:	b717f7d1 	.word	0xb717f7d1
 8017e38:	b457edbb 	.word	0xb457edbb
 8017e3c:	36867e54 	.word	0x36867e54
 8017e40:	b8a670cd 	.word	0xb8a670cd
 8017e44:	3ad00d01 	.word	0x3ad00d01
 8017e48:	bd088889 	.word	0xbd088889
 8017e4c:	3fb8aa3b 	.word	0x3fb8aa3b

08017e50 <finitef>:
 8017e50:	ee10 3a10 	vmov	r3, s0
 8017e54:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8017e58:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8017e5c:	bfac      	ite	ge
 8017e5e:	2000      	movge	r0, #0
 8017e60:	2001      	movlt	r0, #1
 8017e62:	4770      	bx	lr

08017e64 <rintf>:
 8017e64:	b513      	push	{r0, r1, r4, lr}
 8017e66:	ee10 1a10 	vmov	r1, s0
 8017e6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017e6e:	0ddc      	lsrs	r4, r3, #23
 8017e70:	3c7f      	subs	r4, #127	; 0x7f
 8017e72:	2c16      	cmp	r4, #22
 8017e74:	dc46      	bgt.n	8017f04 <rintf+0xa0>
 8017e76:	b32b      	cbz	r3, 8017ec4 <rintf+0x60>
 8017e78:	2c00      	cmp	r4, #0
 8017e7a:	ee10 2a10 	vmov	r2, s0
 8017e7e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8017e82:	da21      	bge.n	8017ec8 <rintf+0x64>
 8017e84:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8017e88:	425b      	negs	r3, r3
 8017e8a:	4a21      	ldr	r2, [pc, #132]	; (8017f10 <rintf+0xac>)
 8017e8c:	0a5b      	lsrs	r3, r3, #9
 8017e8e:	0d09      	lsrs	r1, r1, #20
 8017e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017e94:	0509      	lsls	r1, r1, #20
 8017e96:	430b      	orrs	r3, r1
 8017e98:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017e9c:	ee07 3a90 	vmov	s15, r3
 8017ea0:	edd2 6a00 	vldr	s13, [r2]
 8017ea4:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8017ea8:	ed8d 7a01 	vstr	s14, [sp, #4]
 8017eac:	eddd 7a01 	vldr	s15, [sp, #4]
 8017eb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017eb4:	ee17 3a90 	vmov	r3, s15
 8017eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ebc:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8017ec0:	ee00 3a10 	vmov	s0, r3
 8017ec4:	b002      	add	sp, #8
 8017ec6:	bd10      	pop	{r4, pc}
 8017ec8:	4b12      	ldr	r3, [pc, #72]	; (8017f14 <rintf+0xb0>)
 8017eca:	4123      	asrs	r3, r4
 8017ecc:	4219      	tst	r1, r3
 8017ece:	d0f9      	beq.n	8017ec4 <rintf+0x60>
 8017ed0:	085b      	lsrs	r3, r3, #1
 8017ed2:	4219      	tst	r1, r3
 8017ed4:	d006      	beq.n	8017ee4 <rintf+0x80>
 8017ed6:	ea21 0203 	bic.w	r2, r1, r3
 8017eda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017ede:	fa43 f404 	asr.w	r4, r3, r4
 8017ee2:	4322      	orrs	r2, r4
 8017ee4:	4b0a      	ldr	r3, [pc, #40]	; (8017f10 <rintf+0xac>)
 8017ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017eea:	ed90 7a00 	vldr	s14, [r0]
 8017eee:	ee07 2a90 	vmov	s15, r2
 8017ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ef6:	edcd 7a01 	vstr	s15, [sp, #4]
 8017efa:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017efe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017f02:	e7df      	b.n	8017ec4 <rintf+0x60>
 8017f04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017f08:	d3dc      	bcc.n	8017ec4 <rintf+0x60>
 8017f0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017f0e:	e7d9      	b.n	8017ec4 <rintf+0x60>
 8017f10:	0814feb8 	.word	0x0814feb8
 8017f14:	007fffff 	.word	0x007fffff

08017f18 <scalbnf>:
 8017f18:	b508      	push	{r3, lr}
 8017f1a:	ee10 2a10 	vmov	r2, s0
 8017f1e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8017f22:	ed2d 8b02 	vpush	{d8}
 8017f26:	eef0 0a40 	vmov.f32	s1, s0
 8017f2a:	d004      	beq.n	8017f36 <scalbnf+0x1e>
 8017f2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017f30:	d306      	bcc.n	8017f40 <scalbnf+0x28>
 8017f32:	ee70 0a00 	vadd.f32	s1, s0, s0
 8017f36:	ecbd 8b02 	vpop	{d8}
 8017f3a:	eeb0 0a60 	vmov.f32	s0, s1
 8017f3e:	bd08      	pop	{r3, pc}
 8017f40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017f44:	d21c      	bcs.n	8017f80 <scalbnf+0x68>
 8017f46:	4b1f      	ldr	r3, [pc, #124]	; (8017fc4 <scalbnf+0xac>)
 8017f48:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017fc8 <scalbnf+0xb0>
 8017f4c:	4298      	cmp	r0, r3
 8017f4e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8017f52:	db10      	blt.n	8017f76 <scalbnf+0x5e>
 8017f54:	ee10 2a90 	vmov	r2, s1
 8017f58:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8017f5c:	3b19      	subs	r3, #25
 8017f5e:	4403      	add	r3, r0
 8017f60:	2bfe      	cmp	r3, #254	; 0xfe
 8017f62:	dd0f      	ble.n	8017f84 <scalbnf+0x6c>
 8017f64:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8017fcc <scalbnf+0xb4>
 8017f68:	eeb0 0a48 	vmov.f32	s0, s16
 8017f6c:	f000 f834 	bl	8017fd8 <copysignf>
 8017f70:	ee60 0a08 	vmul.f32	s1, s0, s16
 8017f74:	e7df      	b.n	8017f36 <scalbnf+0x1e>
 8017f76:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017fd0 <scalbnf+0xb8>
 8017f7a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8017f7e:	e7da      	b.n	8017f36 <scalbnf+0x1e>
 8017f80:	0ddb      	lsrs	r3, r3, #23
 8017f82:	e7ec      	b.n	8017f5e <scalbnf+0x46>
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	dd06      	ble.n	8017f96 <scalbnf+0x7e>
 8017f88:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017f8c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017f90:	ee00 3a90 	vmov	s1, r3
 8017f94:	e7cf      	b.n	8017f36 <scalbnf+0x1e>
 8017f96:	f113 0f16 	cmn.w	r3, #22
 8017f9a:	da06      	bge.n	8017faa <scalbnf+0x92>
 8017f9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017fa0:	4298      	cmp	r0, r3
 8017fa2:	dcdf      	bgt.n	8017f64 <scalbnf+0x4c>
 8017fa4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8017fd0 <scalbnf+0xb8>
 8017fa8:	e7de      	b.n	8017f68 <scalbnf+0x50>
 8017faa:	3319      	adds	r3, #25
 8017fac:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8017fb0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017fb4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017fd4 <scalbnf+0xbc>
 8017fb8:	ee07 3a10 	vmov	s14, r3
 8017fbc:	ee67 0a27 	vmul.f32	s1, s14, s15
 8017fc0:	e7b9      	b.n	8017f36 <scalbnf+0x1e>
 8017fc2:	bf00      	nop
 8017fc4:	ffff3cb0 	.word	0xffff3cb0
 8017fc8:	4c000000 	.word	0x4c000000
 8017fcc:	7149f2ca 	.word	0x7149f2ca
 8017fd0:	0da24260 	.word	0x0da24260
 8017fd4:	33000000 	.word	0x33000000

08017fd8 <copysignf>:
 8017fd8:	ee10 3a10 	vmov	r3, s0
 8017fdc:	ee10 2a90 	vmov	r2, s1
 8017fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fe4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8017fe8:	4313      	orrs	r3, r2
 8017fea:	ee00 3a10 	vmov	s0, r3
 8017fee:	4770      	bx	lr

08017ff0 <_init>:
 8017ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ff2:	bf00      	nop
 8017ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ff6:	bc08      	pop	{r3}
 8017ff8:	469e      	mov	lr, r3
 8017ffa:	4770      	bx	lr

08017ffc <_fini>:
 8017ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ffe:	bf00      	nop
 8018000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018002:	bc08      	pop	{r3}
 8018004:	469e      	mov	lr, r3
 8018006:	4770      	bx	lr
